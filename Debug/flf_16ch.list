
flf_16ch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800b378  0800b378  0000c378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b91c  0800b91c  0000d1f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b91c  0800b91c  0000c91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b924  0800b924  0000d1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b924  0800b924  0000c924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b928  0800b928  0000c928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800b92c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  200001f8  0800bb24  0000d1f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f8  0800bb24  0000d6f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001044b  00000000  00000000  0000d228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002422  00000000  00000000  0001d673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  0001fa98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bef  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001896c  00000000  00000000  000215bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113f0  00000000  00000000  00039f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c7f2  00000000  00000000  0004b31b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7b0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055ec  00000000  00000000  000e7b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000ed13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b35c 	.word	0x0800b35c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800b35c 	.word	0x0800b35c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <_write>:

/* USER CODE BEGIN 0 */

// Add this function to redirect printf to UART (ONLY ADDITION)
int _write(int file, char *ptr, int len)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	b29a      	uxth	r2, r3
 8001040:	f04f 33ff 	mov.w	r3, #4294967295
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	4804      	ldr	r0, [pc, #16]	@ (8001058 <_write+0x28>)
 8001048:	f004 fe46 	bl	8005cd8 <HAL_UART_Transmit>
    return len;
 800104c:	687b      	ldr	r3, [r7, #4]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000046c 	.word	0x2000046c

0800105c <setMuxChannel>:
    if (target_cps_2 < MIN_STABLE_CPS_M2 || target_cps_2 > MAX_STABLE_CPS_M2) return 0;
    return 1;
}

void setMuxChannel(uint8_t ch)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
    if(ch >= 16) return;
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d82b      	bhi.n	80010c4 <setMuxChannel+0x68>

    HAL_GPIO_WritePin(GPIOB, S0_Pin, (ch & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	b2db      	uxtb	r3, r3
 8001074:	461a      	mov	r2, r3
 8001076:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800107a:	4814      	ldr	r0, [pc, #80]	@ (80010cc <setMuxChannel+0x70>)
 800107c:	f003 f832 	bl	80040e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, S1_Pin, (ch & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	105b      	asrs	r3, r3, #1
 8001084:	b2db      	uxtb	r3, r3
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	b2db      	uxtb	r3, r3
 800108c:	461a      	mov	r2, r3
 800108e:	2104      	movs	r1, #4
 8001090:	480e      	ldr	r0, [pc, #56]	@ (80010cc <setMuxChannel+0x70>)
 8001092:	f003 f827 	bl	80040e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, S2_Pin, (ch & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	109b      	asrs	r3, r3, #2
 800109a:	b2db      	uxtb	r3, r3
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	461a      	mov	r2, r3
 80010a4:	2102      	movs	r1, #2
 80010a6:	4809      	ldr	r0, [pc, #36]	@ (80010cc <setMuxChannel+0x70>)
 80010a8:	f003 f81c 	bl	80040e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, S3_Pin, (ch & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	10db      	asrs	r3, r3, #3
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	461a      	mov	r2, r3
 80010ba:	2101      	movs	r1, #1
 80010bc:	4803      	ldr	r0, [pc, #12]	@ (80010cc <setMuxChannel+0x70>)
 80010be:	f003 f811 	bl	80040e4 <HAL_GPIO_WritePin>
 80010c2:	e000      	b.n	80010c6 <setMuxChannel+0x6a>
    if(ch >= 16) return;
 80010c4:	bf00      	nop
}
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40020400 	.word	0x40020400

080010d0 <main_pid_loop>:

void main_pid_loop(void){
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <get_pwm_from_cps>:

uint16_t get_pwm_from_cps(uint16_t target_cps,
                          const uint16_t* pwm_table,
                          const uint16_t* cps_table,
                          uint8_t size)
{
 80010de:	b480      	push	{r7}
 80010e0:	b087      	sub	sp, #28
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4603      	mov	r3, r0
 80010ec:	81fb      	strh	r3, [r7, #14]
 80010ee:	4613      	mov	r3, r2
 80010f0:	737b      	strb	r3, [r7, #13]
    for (int i = 0; i < size - 1; i++) {
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	e055      	b.n	80011a4 <get_pwm_from_cps+0xc6>
        if (target_cps >= cps_table[i] && target_cps <= cps_table[i+1]) {
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	4413      	add	r3, r2
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	89fa      	ldrh	r2, [r7, #14]
 8001104:	429a      	cmp	r2, r3
 8001106:	d34a      	bcc.n	800119e <get_pwm_from_cps+0xc0>
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	3301      	adds	r3, #1
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	89fa      	ldrh	r2, [r7, #14]
 8001116:	429a      	cmp	r2, r3
 8001118:	d841      	bhi.n	800119e <get_pwm_from_cps+0xc0>
            float ratio = (float)(target_cps - cps_table[i]) /
 800111a:	89fb      	ldrh	r3, [r7, #14]
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	0052      	lsls	r2, r2, #1
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	440a      	add	r2, r1
 8001124:	8812      	ldrh	r2, [r2, #0]
 8001126:	1a9b      	subs	r3, r3, r2
 8001128:	ee07 3a90 	vmov	s15, r3
 800112c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                          (cps_table[i+1] - cps_table[i]);
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	3301      	adds	r3, #1
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	1acb      	subs	r3, r1, r3
            float ratio = (float)(target_cps - cps_table[i]) /
 800114a:	ee07 3a90 	vmov	s15, r3
 800114e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001156:	edc7 7a04 	vstr	s15, [r7, #16]
            return pwm_table[i] + (uint16_t)(ratio * (pwm_table[i+1] - pwm_table[i]));
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	4413      	add	r3, r2
 8001162:	881a      	ldrh	r2, [r3, #0]
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	3301      	adds	r3, #1
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	68b9      	ldr	r1, [r7, #8]
 800116c:	440b      	add	r3, r1
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	68b9      	ldr	r1, [r7, #8]
 8001178:	440b      	add	r3, r1
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	1ac3      	subs	r3, r0, r3
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001186:	edd7 7a04 	vldr	s15, [r7, #16]
 800118a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800118e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001192:	ee17 3a90 	vmov	r3, s15
 8001196:	b29b      	uxth	r3, r3
 8001198:	4413      	add	r3, r2
 800119a:	b29b      	uxth	r3, r3
 800119c:	e017      	b.n	80011ce <get_pwm_from_cps+0xf0>
    for (int i = 0; i < size - 1; i++) {
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	3301      	adds	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	7b7b      	ldrb	r3, [r7, #13]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dba4      	blt.n	80010f8 <get_pwm_from_cps+0x1a>
        }
    }
    if (target_cps < cps_table[0]) return pwm_table[0];
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	89fa      	ldrh	r2, [r7, #14]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d202      	bcs.n	80011be <get_pwm_from_cps+0xe0>
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	e007      	b.n	80011ce <get_pwm_from_cps+0xf0>
    else return pwm_table[size - 1];
 80011be:	7b7b      	ldrb	r3, [r7, #13]
 80011c0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80011c4:	3b01      	subs	r3, #1
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	68ba      	ldr	r2, [r7, #8]
 80011ca:	4413      	add	r3, r2
 80011cc:	881b      	ldrh	r3, [r3, #0]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	371c      	adds	r7, #28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <motor_pid_loop>:

void motor_pid_loop()
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
    // ---- Motor 1 ----
    current_encoder1_count = __HAL_TIM_GET_COUNTER(&htim2);
 80011e2:	4b91      	ldr	r3, [pc, #580]	@ (8001428 <motor_pid_loop+0x24c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b90      	ldr	r3, [pc, #576]	@ (800142c <motor_pid_loop+0x250>)
 80011ec:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 80011ee:	4b8e      	ldr	r3, [pc, #568]	@ (8001428 <motor_pid_loop+0x24c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2200      	movs	r2, #0
 80011f4:	625a      	str	r2, [r3, #36]	@ 0x24
    current_cps_1 = current_encoder1_count * 10;   // CPS per 100ms
 80011f6:	4b8d      	ldr	r3, [pc, #564]	@ (800142c <motor_pid_loop+0x250>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4613      	mov	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	461a      	mov	r2, r3
 8001204:	4b8a      	ldr	r3, [pc, #552]	@ (8001430 <motor_pid_loop+0x254>)
 8001206:	601a      	str	r2, [r3, #0]

    error_1 = target_cps_1 - current_cps_1;
 8001208:	4b8a      	ldr	r3, [pc, #552]	@ (8001434 <motor_pid_loop+0x258>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b88      	ldr	r3, [pc, #544]	@ (8001430 <motor_pid_loop+0x254>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	4a89      	ldr	r2, [pc, #548]	@ (8001438 <motor_pid_loop+0x25c>)
 8001214:	6013      	str	r3, [r2, #0]

    if (target_cps_1 > 0) {
 8001216:	4b87      	ldr	r3, [pc, #540]	@ (8001434 <motor_pid_loop+0x258>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	dd5f      	ble.n	80012de <motor_pid_loop+0x102>
        integral_1 += error_1;
 800121e:	4b86      	ldr	r3, [pc, #536]	@ (8001438 <motor_pid_loop+0x25c>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4b86      	ldr	r3, [pc, #536]	@ (800143c <motor_pid_loop+0x260>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a84      	ldr	r2, [pc, #528]	@ (800143c <motor_pid_loop+0x260>)
 800122a:	6013      	str	r3, [r2, #0]
        int derivative1 = error_1 - last_error_1;
 800122c:	4b82      	ldr	r3, [pc, #520]	@ (8001438 <motor_pid_loop+0x25c>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b83      	ldr	r3, [pc, #524]	@ (8001440 <motor_pid_loop+0x264>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	607b      	str	r3, [r7, #4]
        pid_1 = KP1 * error_1 + KI1 * integral_1 + KD1 * derivative1;
 8001238:	4b82      	ldr	r3, [pc, #520]	@ (8001444 <motor_pid_loop+0x268>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a7e      	ldr	r2, [pc, #504]	@ (8001438 <motor_pid_loop+0x25c>)
 800123e:	6812      	ldr	r2, [r2, #0]
 8001240:	fb03 f202 	mul.w	r2, r3, r2
 8001244:	4b80      	ldr	r3, [pc, #512]	@ (8001448 <motor_pid_loop+0x26c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	497c      	ldr	r1, [pc, #496]	@ (800143c <motor_pid_loop+0x260>)
 800124a:	6809      	ldr	r1, [r1, #0]
 800124c:	fb01 f303 	mul.w	r3, r1, r3
 8001250:	441a      	add	r2, r3
 8001252:	4b7e      	ldr	r3, [pc, #504]	@ (800144c <motor_pid_loop+0x270>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	fb01 f303 	mul.w	r3, r1, r3
 800125c:	4413      	add	r3, r2
 800125e:	4a7c      	ldr	r2, [pc, #496]	@ (8001450 <motor_pid_loop+0x274>)
 8001260:	6013      	str	r3, [r2, #0]

        int pwm1 = current_pwm_1 + (pid_1 / 100);
 8001262:	4b7c      	ldr	r3, [pc, #496]	@ (8001454 <motor_pid_loop+0x278>)
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	b29b      	uxth	r3, r3
 8001268:	4619      	mov	r1, r3
 800126a:	4b79      	ldr	r3, [pc, #484]	@ (8001450 <motor_pid_loop+0x274>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a7a      	ldr	r2, [pc, #488]	@ (8001458 <motor_pid_loop+0x27c>)
 8001270:	fb82 0203 	smull	r0, r2, r2, r3
 8001274:	1152      	asrs	r2, r2, #5
 8001276:	17db      	asrs	r3, r3, #31
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	440b      	add	r3, r1
 800127c:	60fb      	str	r3, [r7, #12]

        // Use calibration table if motor is starting
        if (current_pwm_1 == 0 && current_cps_1 == 0) {
 800127e:	4b75      	ldr	r3, [pc, #468]	@ (8001454 <motor_pid_loop+0x278>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	b29b      	uxth	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d10d      	bne.n	80012a4 <motor_pid_loop+0xc8>
 8001288:	4b69      	ldr	r3, [pc, #420]	@ (8001430 <motor_pid_loop+0x254>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d109      	bne.n	80012a4 <motor_pid_loop+0xc8>
            pwm1 = get_pwm_from_cps(target_cps_1, motor1_pwm_table, motor1_cps_table, table_size);
 8001290:	4b68      	ldr	r3, [pc, #416]	@ (8001434 <motor_pid_loop+0x258>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	b298      	uxth	r0, r3
 8001296:	2307      	movs	r3, #7
 8001298:	4a70      	ldr	r2, [pc, #448]	@ (800145c <motor_pid_loop+0x280>)
 800129a:	4971      	ldr	r1, [pc, #452]	@ (8001460 <motor_pid_loop+0x284>)
 800129c:	f7ff ff1f 	bl	80010de <get_pwm_from_cps>
 80012a0:	4603      	mov	r3, r0
 80012a2:	60fb      	str	r3, [r7, #12]
        }

        if (pwm1 < 0) pwm1 = 0;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	da01      	bge.n	80012ae <motor_pid_loop+0xd2>
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
        if (pwm1 > 1000) pwm1 = 1000;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012b4:	dd02      	ble.n	80012bc <motor_pid_loop+0xe0>
 80012b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ba:	60fb      	str	r3, [r7, #12]

        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm1);
 80012bc:	4b69      	ldr	r3, [pc, #420]	@ (8001464 <motor_pid_loop+0x288>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80012c4:	4b67      	ldr	r3, [pc, #412]	@ (8001464 <motor_pid_loop+0x288>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2200      	movs	r2, #0
 80012ca:	639a      	str	r2, [r3, #56]	@ 0x38

        current_pwm_1 = pwm1;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	4b60      	ldr	r3, [pc, #384]	@ (8001454 <motor_pid_loop+0x278>)
 80012d2:	801a      	strh	r2, [r3, #0]
        last_error_1 = error_1;
 80012d4:	4b58      	ldr	r3, [pc, #352]	@ (8001438 <motor_pid_loop+0x25c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a59      	ldr	r2, [pc, #356]	@ (8001440 <motor_pid_loop+0x264>)
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	e010      	b.n	8001300 <motor_pid_loop+0x124>
    } else {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80012de:	4b61      	ldr	r3, [pc, #388]	@ (8001464 <motor_pid_loop+0x288>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2200      	movs	r2, #0
 80012e4:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80012e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001464 <motor_pid_loop+0x288>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2200      	movs	r2, #0
 80012ec:	639a      	str	r2, [r3, #56]	@ 0x38
        current_pwm_1 = 0;
 80012ee:	4b59      	ldr	r3, [pc, #356]	@ (8001454 <motor_pid_loop+0x278>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	801a      	strh	r2, [r3, #0]
        integral_1 = 0;
 80012f4:	4b51      	ldr	r3, [pc, #324]	@ (800143c <motor_pid_loop+0x260>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
        last_error_1 = 0;
 80012fa:	4b51      	ldr	r3, [pc, #324]	@ (8001440 <motor_pid_loop+0x264>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
    }

    // ---- Motor 2 ----
    current_encoder2_count = __HAL_TIM_GET_COUNTER(&htim5);
 8001300:	4b59      	ldr	r3, [pc, #356]	@ (8001468 <motor_pid_loop+0x28c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001306:	461a      	mov	r2, r3
 8001308:	4b58      	ldr	r3, [pc, #352]	@ (800146c <motor_pid_loop+0x290>)
 800130a:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_COUNTER(&htim5, 0);
 800130c:	4b56      	ldr	r3, [pc, #344]	@ (8001468 <motor_pid_loop+0x28c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2200      	movs	r2, #0
 8001312:	625a      	str	r2, [r3, #36]	@ 0x24
    current_cps_2 = current_encoder2_count * 10;
 8001314:	4b55      	ldr	r3, [pc, #340]	@ (800146c <motor_pid_loop+0x290>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	461a      	mov	r2, r3
 8001322:	4b53      	ldr	r3, [pc, #332]	@ (8001470 <motor_pid_loop+0x294>)
 8001324:	601a      	str	r2, [r3, #0]

    error_2 = target_cps_2 - current_cps_2;
 8001326:	4b53      	ldr	r3, [pc, #332]	@ (8001474 <motor_pid_loop+0x298>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4b51      	ldr	r3, [pc, #324]	@ (8001470 <motor_pid_loop+0x294>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	4a51      	ldr	r2, [pc, #324]	@ (8001478 <motor_pid_loop+0x29c>)
 8001332:	6013      	str	r3, [r2, #0]

    if (target_cps_2 > 0) {
 8001334:	4b4f      	ldr	r3, [pc, #316]	@ (8001474 <motor_pid_loop+0x298>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	dd5f      	ble.n	80013fc <motor_pid_loop+0x220>
        integral_2 += error_2;
 800133c:	4b4e      	ldr	r3, [pc, #312]	@ (8001478 <motor_pid_loop+0x29c>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b4e      	ldr	r3, [pc, #312]	@ (800147c <motor_pid_loop+0x2a0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4413      	add	r3, r2
 8001346:	4a4d      	ldr	r2, [pc, #308]	@ (800147c <motor_pid_loop+0x2a0>)
 8001348:	6013      	str	r3, [r2, #0]
        int derivative2 = error_2 - last_error_2;
 800134a:	4b4b      	ldr	r3, [pc, #300]	@ (8001478 <motor_pid_loop+0x29c>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b4c      	ldr	r3, [pc, #304]	@ (8001480 <motor_pid_loop+0x2a4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	603b      	str	r3, [r7, #0]
        pid_2 = KP2 * error_2 + KI2 * integral_2 + KD2 * derivative2;
 8001356:	4b4b      	ldr	r3, [pc, #300]	@ (8001484 <motor_pid_loop+0x2a8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a47      	ldr	r2, [pc, #284]	@ (8001478 <motor_pid_loop+0x29c>)
 800135c:	6812      	ldr	r2, [r2, #0]
 800135e:	fb03 f202 	mul.w	r2, r3, r2
 8001362:	4b49      	ldr	r3, [pc, #292]	@ (8001488 <motor_pid_loop+0x2ac>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4945      	ldr	r1, [pc, #276]	@ (800147c <motor_pid_loop+0x2a0>)
 8001368:	6809      	ldr	r1, [r1, #0]
 800136a:	fb01 f303 	mul.w	r3, r1, r3
 800136e:	441a      	add	r2, r3
 8001370:	4b46      	ldr	r3, [pc, #280]	@ (800148c <motor_pid_loop+0x2b0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6839      	ldr	r1, [r7, #0]
 8001376:	fb01 f303 	mul.w	r3, r1, r3
 800137a:	4413      	add	r3, r2
 800137c:	4a44      	ldr	r2, [pc, #272]	@ (8001490 <motor_pid_loop+0x2b4>)
 800137e:	6013      	str	r3, [r2, #0]

        int pwm2 = current_pwm_2 + (pid_2 / 100);
 8001380:	4b44      	ldr	r3, [pc, #272]	@ (8001494 <motor_pid_loop+0x2b8>)
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	b29b      	uxth	r3, r3
 8001386:	4619      	mov	r1, r3
 8001388:	4b41      	ldr	r3, [pc, #260]	@ (8001490 <motor_pid_loop+0x2b4>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a32      	ldr	r2, [pc, #200]	@ (8001458 <motor_pid_loop+0x27c>)
 800138e:	fb82 0203 	smull	r0, r2, r2, r3
 8001392:	1152      	asrs	r2, r2, #5
 8001394:	17db      	asrs	r3, r3, #31
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	440b      	add	r3, r1
 800139a:	60bb      	str	r3, [r7, #8]

        if (current_pwm_2 == 0 && current_cps_2 == 0) {
 800139c:	4b3d      	ldr	r3, [pc, #244]	@ (8001494 <motor_pid_loop+0x2b8>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10d      	bne.n	80013c2 <motor_pid_loop+0x1e6>
 80013a6:	4b32      	ldr	r3, [pc, #200]	@ (8001470 <motor_pid_loop+0x294>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d109      	bne.n	80013c2 <motor_pid_loop+0x1e6>
            pwm2 = get_pwm_from_cps(target_cps_2, motor2_pwm_table, motor2_cps_table, table_size);
 80013ae:	4b31      	ldr	r3, [pc, #196]	@ (8001474 <motor_pid_loop+0x298>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	b298      	uxth	r0, r3
 80013b4:	2307      	movs	r3, #7
 80013b6:	4a38      	ldr	r2, [pc, #224]	@ (8001498 <motor_pid_loop+0x2bc>)
 80013b8:	4938      	ldr	r1, [pc, #224]	@ (800149c <motor_pid_loop+0x2c0>)
 80013ba:	f7ff fe90 	bl	80010de <get_pwm_from_cps>
 80013be:	4603      	mov	r3, r0
 80013c0:	60bb      	str	r3, [r7, #8]
        }

        if (pwm2 < 0) pwm2 = 0;
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	da01      	bge.n	80013cc <motor_pid_loop+0x1f0>
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
        if (pwm2 > 1000) pwm2 = 1000;
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013d2:	dd02      	ble.n	80013da <motor_pid_loop+0x1fe>
 80013d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013d8:	60bb      	str	r3, [r7, #8]

        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm2);
 80013da:	4b22      	ldr	r3, [pc, #136]	@ (8001464 <motor_pid_loop+0x288>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	63da      	str	r2, [r3, #60]	@ 0x3c
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80013e2:	4b20      	ldr	r3, [pc, #128]	@ (8001464 <motor_pid_loop+0x288>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2200      	movs	r2, #0
 80013e8:	641a      	str	r2, [r3, #64]	@ 0x40

        current_pwm_2 = pwm2;
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	4b29      	ldr	r3, [pc, #164]	@ (8001494 <motor_pid_loop+0x2b8>)
 80013f0:	801a      	strh	r2, [r3, #0]
        last_error_2 = error_2;
 80013f2:	4b21      	ldr	r3, [pc, #132]	@ (8001478 <motor_pid_loop+0x29c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a22      	ldr	r2, [pc, #136]	@ (8001480 <motor_pid_loop+0x2a4>)
 80013f8:	6013      	str	r3, [r2, #0]
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
        current_pwm_2 = 0;
        integral_2 = 0;
        last_error_2 = 0;
    }
}
 80013fa:	e010      	b.n	800141e <motor_pid_loop+0x242>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80013fc:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <motor_pid_loop+0x288>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2200      	movs	r2, #0
 8001402:	63da      	str	r2, [r3, #60]	@ 0x3c
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001404:	4b17      	ldr	r3, [pc, #92]	@ (8001464 <motor_pid_loop+0x288>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2200      	movs	r2, #0
 800140a:	641a      	str	r2, [r3, #64]	@ 0x40
        current_pwm_2 = 0;
 800140c:	4b21      	ldr	r3, [pc, #132]	@ (8001494 <motor_pid_loop+0x2b8>)
 800140e:	2200      	movs	r2, #0
 8001410:	801a      	strh	r2, [r3, #0]
        integral_2 = 0;
 8001412:	4b1a      	ldr	r3, [pc, #104]	@ (800147c <motor_pid_loop+0x2a0>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
        last_error_2 = 0;
 8001418:	4b19      	ldr	r3, [pc, #100]	@ (8001480 <motor_pid_loop+0x2a4>)
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
}
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000304 	.word	0x20000304
 800142c:	20000528 	.word	0x20000528
 8001430:	20000530 	.word	0x20000530
 8001434:	20000538 	.word	0x20000538
 8001438:	20000540 	.word	0x20000540
 800143c:	20000518 	.word	0x20000518
 8001440:	20000548 	.word	0x20000548
 8001444:	20000000 	.word	0x20000000
 8001448:	20000008 	.word	0x20000008
 800144c:	20000010 	.word	0x20000010
 8001450:	20000550 	.word	0x20000550
 8001454:	20000514 	.word	0x20000514
 8001458:	51eb851f 	.word	0x51eb851f
 800145c:	0800b4a0 	.word	0x0800b4a0
 8001460:	0800b490 	.word	0x0800b490
 8001464:	200002bc 	.word	0x200002bc
 8001468:	200003dc 	.word	0x200003dc
 800146c:	2000052c 	.word	0x2000052c
 8001470:	20000534 	.word	0x20000534
 8001474:	2000053c 	.word	0x2000053c
 8001478:	20000544 	.word	0x20000544
 800147c:	2000051c 	.word	0x2000051c
 8001480:	2000054c 	.word	0x2000054c
 8001484:	20000004 	.word	0x20000004
 8001488:	2000000c 	.word	0x2000000c
 800148c:	20000014 	.word	0x20000014
 8001490:	20000554 	.word	0x20000554
 8001494:	20000516 	.word	0x20000516
 8001498:	0800b4c0 	.word	0x0800b4c0
 800149c:	0800b4b0 	.word	0x0800b4b0

080014a0 <debug_motor_status>:

void debug_motor_status(void)
{
 80014a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014a4:	b09f      	sub	sp, #124	@ 0x7c
 80014a6:	af12      	add	r7, sp, #72	@ 0x48
    printf("T1:%d | C1:%d | PWM1:%d | E1:%d | P1:%.2f I1:%.2f D1:%.2f | "
 80014a8:	4b56      	ldr	r3, [pc, #344]	@ (8001604 <debug_motor_status+0x164>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014ae:	4b56      	ldr	r3, [pc, #344]	@ (8001608 <debug_motor_status+0x168>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80014b4:	4b55      	ldr	r3, [pc, #340]	@ (800160c <debug_motor_status+0x16c>)
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80014bc:	4b54      	ldr	r3, [pc, #336]	@ (8001610 <debug_motor_status+0x170>)
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	6238      	str	r0, [r7, #32]
           "T2:%d | C2:%d | PWM2:%d | E2:%d | P2:%.2f I2:%.2f D2:%.2f\r\n",
           target_cps_1, current_cps_1, current_pwm_1, error_1,
           (float)(KP1 * error_1), (float)(KI1 * integral_1), (float)(KD1 * (error_1 - last_error_1)),
 80014c2:	4b54      	ldr	r3, [pc, #336]	@ (8001614 <debug_motor_status+0x174>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a52      	ldr	r2, [pc, #328]	@ (8001610 <debug_motor_status+0x170>)
 80014c8:	6812      	ldr	r2, [r2, #0]
 80014ca:	fb02 f303 	mul.w	r3, r2, r3
 80014ce:	ee07 3a90 	vmov	s15, r3
 80014d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    printf("T1:%d | C1:%d | PWM1:%d | E1:%d | P1:%.2f I1:%.2f D1:%.2f | "
 80014d6:	ee17 0a90 	vmov	r0, s15
 80014da:	f7ff f83d 	bl	8000558 <__aeabi_f2d>
 80014de:	4682      	mov	sl, r0
 80014e0:	468b      	mov	fp, r1
           (float)(KP1 * error_1), (float)(KI1 * integral_1), (float)(KD1 * (error_1 - last_error_1)),
 80014e2:	4b4d      	ldr	r3, [pc, #308]	@ (8001618 <debug_motor_status+0x178>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a4d      	ldr	r2, [pc, #308]	@ (800161c <debug_motor_status+0x17c>)
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	fb02 f303 	mul.w	r3, r2, r3
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    printf("T1:%d | C1:%d | PWM1:%d | E1:%d | P1:%.2f I1:%.2f D1:%.2f | "
 80014f6:	ee17 0a90 	vmov	r0, s15
 80014fa:	f7ff f82d 	bl	8000558 <__aeabi_f2d>
 80014fe:	e9c7 0106 	strd	r0, r1, [r7, #24]
           (float)(KP1 * error_1), (float)(KI1 * integral_1), (float)(KD1 * (error_1 - last_error_1)),
 8001502:	4b43      	ldr	r3, [pc, #268]	@ (8001610 <debug_motor_status+0x170>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	4b46      	ldr	r3, [pc, #280]	@ (8001620 <debug_motor_status+0x180>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	4a45      	ldr	r2, [pc, #276]	@ (8001624 <debug_motor_status+0x184>)
 800150e:	6812      	ldr	r2, [r2, #0]
 8001510:	fb02 f303 	mul.w	r3, r2, r3
 8001514:	ee07 3a90 	vmov	s15, r3
 8001518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    printf("T1:%d | C1:%d | PWM1:%d | E1:%d | P1:%.2f I1:%.2f D1:%.2f | "
 800151c:	ee17 0a90 	vmov	r0, s15
 8001520:	f7ff f81a 	bl	8000558 <__aeabi_f2d>
 8001524:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001528:	4b3f      	ldr	r3, [pc, #252]	@ (8001628 <debug_motor_status+0x188>)
 800152a:	681c      	ldr	r4, [r3, #0]
 800152c:	60fc      	str	r4, [r7, #12]
 800152e:	4b3f      	ldr	r3, [pc, #252]	@ (800162c <debug_motor_status+0x18c>)
 8001530:	681d      	ldr	r5, [r3, #0]
 8001532:	60bd      	str	r5, [r7, #8]
 8001534:	4b3e      	ldr	r3, [pc, #248]	@ (8001630 <debug_motor_status+0x190>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	b29b      	uxth	r3, r3
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	4b3d      	ldr	r3, [pc, #244]	@ (8001634 <debug_motor_status+0x194>)
 800153e:	681e      	ldr	r6, [r3, #0]
           target_cps_2, current_cps_2, current_pwm_2, error_2,
           (float)(KP2 * error_2), (float)(KI2 * integral_2), (float)(KD2 * (error_2 - last_error_2)));
 8001540:	4b3d      	ldr	r3, [pc, #244]	@ (8001638 <debug_motor_status+0x198>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b3b      	ldr	r3, [pc, #236]	@ (8001634 <debug_motor_status+0x194>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	fb02 f303 	mul.w	r3, r2, r3
 800154c:	ee07 3a90 	vmov	s15, r3
 8001550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    printf("T1:%d | C1:%d | PWM1:%d | E1:%d | P1:%.2f I1:%.2f D1:%.2f | "
 8001554:	ee17 0a90 	vmov	r0, s15
 8001558:	f7fe fffe 	bl	8000558 <__aeabi_f2d>
 800155c:	4680      	mov	r8, r0
 800155e:	4689      	mov	r9, r1
           (float)(KP2 * error_2), (float)(KI2 * integral_2), (float)(KD2 * (error_2 - last_error_2)));
 8001560:	4b36      	ldr	r3, [pc, #216]	@ (800163c <debug_motor_status+0x19c>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b36      	ldr	r3, [pc, #216]	@ (8001640 <debug_motor_status+0x1a0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	fb02 f303 	mul.w	r3, r2, r3
 800156c:	ee07 3a90 	vmov	s15, r3
 8001570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    printf("T1:%d | C1:%d | PWM1:%d | E1:%d | P1:%.2f I1:%.2f D1:%.2f | "
 8001574:	ee17 0a90 	vmov	r0, s15
 8001578:	f7fe ffee 	bl	8000558 <__aeabi_f2d>
 800157c:	4604      	mov	r4, r0
 800157e:	460d      	mov	r5, r1
           (float)(KP2 * error_2), (float)(KI2 * integral_2), (float)(KD2 * (error_2 - last_error_2)));
 8001580:	4b2c      	ldr	r3, [pc, #176]	@ (8001634 <debug_motor_status+0x194>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b2f      	ldr	r3, [pc, #188]	@ (8001644 <debug_motor_status+0x1a4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	1ad2      	subs	r2, r2, r3
 800158a:	4b2f      	ldr	r3, [pc, #188]	@ (8001648 <debug_motor_status+0x1a8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	ee07 3a90 	vmov	s15, r3
 8001596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    printf("T1:%d | C1:%d | PWM1:%d | E1:%d | P1:%.2f I1:%.2f D1:%.2f | "
 800159a:	ee17 0a90 	vmov	r0, s15
 800159e:	f7fe ffdb 	bl	8000558 <__aeabi_f2d>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80015aa:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
 80015ae:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 80015b2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80015b4:	687e      	ldr	r6, [r7, #4]
 80015b6:	960a      	str	r6, [sp, #40]	@ 0x28
 80015b8:	68bd      	ldr	r5, [r7, #8]
 80015ba:	9509      	str	r5, [sp, #36]	@ 0x24
 80015bc:	68fc      	ldr	r4, [r7, #12]
 80015be:	9408      	str	r4, [sp, #32]
 80015c0:	ed97 7b04 	vldr	d7, [r7, #16]
 80015c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80015c8:	ed97 7b06 	vldr	d7, [r7, #24]
 80015cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80015d0:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80015d4:	6a38      	ldr	r0, [r7, #32]
 80015d6:	9000      	str	r0, [sp, #0]
 80015d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80015de:	481b      	ldr	r0, [pc, #108]	@ (800164c <debug_motor_status+0x1ac>)
 80015e0:	f006 fa68 	bl	8007ab4 <iprintf>
    printf("Target1: %d | CPS1: %d | PWM1: %d\n", target_cps_1, current_cps_1, current_pwm_1);
 80015e4:	4b07      	ldr	r3, [pc, #28]	@ (8001604 <debug_motor_status+0x164>)
 80015e6:	6819      	ldr	r1, [r3, #0]
 80015e8:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <debug_motor_status+0x168>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b07      	ldr	r3, [pc, #28]	@ (800160c <debug_motor_status+0x16c>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	4817      	ldr	r0, [pc, #92]	@ (8001650 <debug_motor_status+0x1b0>)
 80015f4:	f006 fa5e 	bl	8007ab4 <iprintf>
}
 80015f8:	bf00      	nop
 80015fa:	3734      	adds	r7, #52	@ 0x34
 80015fc:	46bd      	mov	sp, r7
 80015fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001602:	bf00      	nop
 8001604:	20000538 	.word	0x20000538
 8001608:	20000530 	.word	0x20000530
 800160c:	20000514 	.word	0x20000514
 8001610:	20000540 	.word	0x20000540
 8001614:	20000000 	.word	0x20000000
 8001618:	20000008 	.word	0x20000008
 800161c:	20000518 	.word	0x20000518
 8001620:	20000548 	.word	0x20000548
 8001624:	20000010 	.word	0x20000010
 8001628:	2000053c 	.word	0x2000053c
 800162c:	20000534 	.word	0x20000534
 8001630:	20000516 	.word	0x20000516
 8001634:	20000544 	.word	0x20000544
 8001638:	20000004 	.word	0x20000004
 800163c:	2000000c 	.word	0x2000000c
 8001640:	2000051c 	.word	0x2000051c
 8001644:	2000054c 	.word	0x2000054c
 8001648:	20000014 	.word	0x20000014
 800164c:	0800b378 	.word	0x0800b378
 8001650:	0800b3f0 	.word	0x0800b3f0

08001654 <HAL_TIM_PeriodElapsedCallback>:
    len = sprintf(buffer, "CALIB_END\r\n");
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, HAL_MAX_DELAY);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM3)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a12      	ldr	r2, [pc, #72]	@ (80016ac <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d105      	bne.n	8001672 <HAL_TIM_PeriodElapsedCallback+0x1e>
    {
        HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_dma_single_value, 1);
 8001666:	2201      	movs	r2, #1
 8001668:	4911      	ldr	r1, [pc, #68]	@ (80016b0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800166a:	4812      	ldr	r0, [pc, #72]	@ (80016b4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800166c:	f001 fad6 	bl	8002c1c <HAL_ADC_Start_DMA>
    	if (timer4_counter>=2){
    		main_pid_loop();
    		timer4_counter=0;
    	}
    }
}
 8001670:	e017      	b.n	80016a2 <HAL_TIM_PeriodElapsedCallback+0x4e>
    else if(htim->Instance == TIM4)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a10      	ldr	r2, [pc, #64]	@ (80016b8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d112      	bne.n	80016a2 <HAL_TIM_PeriodElapsedCallback+0x4e>
    	motor_pid_loop();
 800167c:	f7ff fdae 	bl	80011dc <motor_pid_loop>
    	timer4_counter++;
 8001680:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	b29b      	uxth	r3, r3
 8001686:	3301      	adds	r3, #1
 8001688:	b29a      	uxth	r2, r3
 800168a:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <HAL_TIM_PeriodElapsedCallback+0x68>)
 800168c:	801a      	strh	r2, [r3, #0]
    	if (timer4_counter>=2){
 800168e:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	2b01      	cmp	r3, #1
 8001696:	d904      	bls.n	80016a2 <HAL_TIM_PeriodElapsedCallback+0x4e>
    		main_pid_loop();
 8001698:	f7ff fd1a 	bl	80010d0 <main_pid_loop>
    		timer4_counter=0;
 800169c:	4b07      	ldr	r3, [pc, #28]	@ (80016bc <HAL_TIM_PeriodElapsedCallback+0x68>)
 800169e:	2200      	movs	r2, #0
 80016a0:	801a      	strh	r2, [r3, #0]
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40000400 	.word	0x40000400
 80016b0:	2000059e 	.word	0x2000059e
 80016b4:	20000214 	.word	0x20000214
 80016b8:	40000800 	.word	0x40000800
 80016bc:	200005a0 	.word	0x200005a0

080016c0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001744 <HAL_ADC_ConvCpltCallback+0x84>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d134      	bne.n	800173c <HAL_ADC_ConvCpltCallback+0x7c>
    {
        adc_buffer_ptrs[adc_buffer_write_ptr_index][current_sensor_index] = adc_dma_single_value;
 80016d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001748 <HAL_ADC_ConvCpltCallback+0x88>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	461a      	mov	r2, r3
 80016da:	4b1c      	ldr	r3, [pc, #112]	@ (800174c <HAL_ADC_ConvCpltCallback+0x8c>)
 80016dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80016e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001750 <HAL_ADC_ConvCpltCallback+0x90>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001754 <HAL_ADC_ConvCpltCallback+0x94>)
 80016ec:	8812      	ldrh	r2, [r2, #0]
 80016ee:	b292      	uxth	r2, r2
 80016f0:	801a      	strh	r2, [r3, #0]

        current_sensor_index++;
 80016f2:	4b17      	ldr	r3, [pc, #92]	@ (8001750 <HAL_ADC_ConvCpltCallback+0x90>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	3301      	adds	r3, #1
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	4b14      	ldr	r3, [pc, #80]	@ (8001750 <HAL_ADC_ConvCpltCallback+0x90>)
 80016fe:	701a      	strb	r2, [r3, #0]

        if(current_sensor_index >= NUM_SENSORS)
 8001700:	4b13      	ldr	r3, [pc, #76]	@ (8001750 <HAL_ADC_ConvCpltCallback+0x90>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b0f      	cmp	r3, #15
 8001708:	d912      	bls.n	8001730 <HAL_ADC_ConvCpltCallback+0x70>
        {
            current_sensor_index = 0;
 800170a:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <HAL_ADC_ConvCpltCallback+0x90>)
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
            adc_buffer_write_ptr_index ^= 1;
 8001710:	4b0d      	ldr	r3, [pc, #52]	@ (8001748 <HAL_ADC_ConvCpltCallback+0x88>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	f083 0301 	eor.w	r3, r3, #1
 800171a:	b2da      	uxtb	r2, r3
 800171c:	4b0a      	ldr	r3, [pc, #40]	@ (8001748 <HAL_ADC_ConvCpltCallback+0x88>)
 800171e:	701a      	strb	r2, [r3, #0]
            adc_buffer_read_ptr_index ^= 1;
 8001720:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <HAL_ADC_ConvCpltCallback+0x98>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	f083 0301 	eor.w	r3, r3, #1
 800172a:	b2da      	uxtb	r2, r3
 800172c:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <HAL_ADC_ConvCpltCallback+0x98>)
 800172e:	701a      	strb	r2, [r3, #0]
        }

        setMuxChannel(current_sensor_index);
 8001730:	4b07      	ldr	r3, [pc, #28]	@ (8001750 <HAL_ADC_ConvCpltCallback+0x90>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fc90 	bl	800105c <setMuxChannel>
    }
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40012000 	.word	0x40012000
 8001748:	2000059c 	.word	0x2000059c
 800174c:	20000018 	.word	0x20000018
 8001750:	2000059d 	.word	0x2000059d
 8001754:	2000059e 	.word	0x2000059e
 8001758:	20000020 	.word	0x20000020

0800175c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001760:	f001 f872 	bl	8002848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001764:	f000 f894 	bl	8001890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001768:	f000 fc06 	bl	8001f78 <MX_GPIO_Init>
  MX_DMA_Init();
 800176c:	f000 fbdc 	bl	8001f28 <MX_DMA_Init>
  MX_ADC1_Init();
 8001770:	f000 f8f6 	bl	8001960 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001774:	f000 f946 	bl	8001a04 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001778:	f000 fa08 	bl	8001b8c <MX_TIM2_Init>
  MX_TIM3_Init();
 800177c:	f000 fa5a 	bl	8001c34 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001780:	f000 faf2 	bl	8001d68 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001784:	f000 fba6 	bl	8001ed4 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001788:	f000 faa0 	bl	8001ccc <MX_TIM4_Init>
  MX_TIM9_Init();
 800178c:	f000 fb40 	bl	8001e10 <MX_TIM9_Init>

  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 8001790:	4833      	ldr	r0, [pc, #204]	@ (8001860 <main+0x104>)
 8001792:	f003 f969 	bl	8004a68 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001796:	4833      	ldr	r0, [pc, #204]	@ (8001864 <main+0x108>)
 8001798:	f003 f966 	bl	8004a68 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);
 800179c:	4832      	ldr	r0, [pc, #200]	@ (8001868 <main+0x10c>)
 800179e:	f003 f963 	bl	8004a68 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80017a2:	213c      	movs	r1, #60	@ 0x3c
 80017a4:	4831      	ldr	r0, [pc, #196]	@ (800186c <main+0x110>)
 80017a6:	f003 fb71 	bl	8004e8c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80017aa:	213c      	movs	r1, #60	@ 0x3c
 80017ac:	4830      	ldr	r0, [pc, #192]	@ (8001870 <main+0x114>)
 80017ae:	f003 fb6d 	bl	8004e8c <HAL_TIM_Encoder_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80017b2:	4b2e      	ldr	r3, [pc, #184]	@ (800186c <main+0x110>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2200      	movs	r2, #0
 80017b8:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_TIM_SET_COUNTER(&htim5, 0);
 80017ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001870 <main+0x114>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2200      	movs	r2, #0
 80017c0:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017c2:	2100      	movs	r1, #0
 80017c4:	482b      	ldr	r0, [pc, #172]	@ (8001874 <main+0x118>)
 80017c6:	f003 fa0b 	bl	8004be0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80017ca:	2104      	movs	r1, #4
 80017cc:	4829      	ldr	r0, [pc, #164]	@ (8001874 <main+0x118>)
 80017ce:	f003 fa07 	bl	8004be0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80017d2:	2108      	movs	r1, #8
 80017d4:	4827      	ldr	r0, [pc, #156]	@ (8001874 <main+0x118>)
 80017d6:	f003 fa03 	bl	8004be0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80017da:	210c      	movs	r1, #12
 80017dc:	4825      	ldr	r0, [pc, #148]	@ (8001874 <main+0x118>)
 80017de:	f003 f9ff 	bl	8004be0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, GPIO_PIN_SET);
 80017e2:	2201      	movs	r2, #1
 80017e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017e8:	4823      	ldr	r0, [pc, #140]	@ (8001878 <main+0x11c>)
 80017ea:	f002 fc7b 	bl	80040e4 <HAL_GPIO_WritePin>
  setMuxChannel(0);
 80017ee:	2000      	movs	r0, #0
 80017f0:	f7ff fc34 	bl	800105c <setMuxChannel>

  // Initialize timing and set targets
  HAL_Delay(1000);  // Reduced delay
 80017f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017f8:	f001 f898 	bl	800292c <HAL_Delay>
  last_pid_time = HAL_GetTick();  // Initialize timing
 80017fc:	f001 f88a 	bl	8002914 <HAL_GetTick>
 8001800:	4603      	mov	r3, r0
 8001802:	4a1e      	ldr	r2, [pc, #120]	@ (800187c <main+0x120>)
 8001804:	6013      	str	r3, [r2, #0]
  target_cps_1 = 7000;
 8001806:	4b1e      	ldr	r3, [pc, #120]	@ (8001880 <main+0x124>)
 8001808:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800180c:	601a      	str	r2, [r3, #0]
  target_cps_2 = 7000;
 800180e:	4b1d      	ldr	r3, [pc, #116]	@ (8001884 <main+0x128>)
 8001810:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001814:	601a      	str	r2, [r3, #0]
  motors_initialized = 0;  // Force initialization
 8001816:	4b1c      	ldr	r3, [pc, #112]	@ (8001888 <main+0x12c>)
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
    /* USER CODE BEGIN 3 */
    // Debug output every 500ms
    while (1)
    {
        // Run PID loop every 100ms
        if (HAL_GetTick() - last_pid_time >= 100) {
 800181c:	f001 f87a 	bl	8002914 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	4b16      	ldr	r3, [pc, #88]	@ (800187c <main+0x120>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b63      	cmp	r3, #99	@ 0x63
 800182a:	d906      	bls.n	800183a <main+0xde>
            motor_pid_loop();
 800182c:	f7ff fcd6 	bl	80011dc <motor_pid_loop>
            last_pid_time = HAL_GetTick();
 8001830:	f001 f870 	bl	8002914 <HAL_GetTick>
 8001834:	4603      	mov	r3, r0
 8001836:	4a11      	ldr	r2, [pc, #68]	@ (800187c <main+0x120>)
 8001838:	6013      	str	r3, [r2, #0]
        }

        // Debug output every 500ms
        debug_counter++;
 800183a:	4b14      	ldr	r3, [pc, #80]	@ (800188c <main+0x130>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	3301      	adds	r3, #1
 8001840:	4a12      	ldr	r2, [pc, #72]	@ (800188c <main+0x130>)
 8001842:	6013      	str	r3, [r2, #0]
        if (debug_counter >= 500) {
 8001844:	4b11      	ldr	r3, [pc, #68]	@ (800188c <main+0x130>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800184c:	d304      	bcc.n	8001858 <main+0xfc>
            debug_motor_status();
 800184e:	f7ff fe27 	bl	80014a0 <debug_motor_status>
            debug_counter = 0;
 8001852:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <main+0x130>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
        }
        HAL_Delay(1);
 8001858:	2001      	movs	r0, #1
 800185a:	f001 f867 	bl	800292c <HAL_Delay>
        if (HAL_GetTick() - last_pid_time >= 100) {
 800185e:	e7dd      	b.n	800181c <main+0xc0>
 8001860:	2000034c 	.word	0x2000034c
 8001864:	20000394 	.word	0x20000394
 8001868:	20000424 	.word	0x20000424
 800186c:	20000304 	.word	0x20000304
 8001870:	200003dc 	.word	0x200003dc
 8001874:	200002bc 	.word	0x200002bc
 8001878:	40020000 	.word	0x40020000
 800187c:	20000520 	.word	0x20000520
 8001880:	20000538 	.word	0x20000538
 8001884:	2000053c 	.word	0x2000053c
 8001888:	20000524 	.word	0x20000524
 800188c:	20000558 	.word	0x20000558

08001890 <SystemClock_Config>:
  /* USER CODE END 3 */
}


void SystemClock_Config(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b094      	sub	sp, #80	@ 0x50
 8001894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001896:	f107 0320 	add.w	r3, r7, #32
 800189a:	2230      	movs	r2, #48	@ 0x30
 800189c:	2100      	movs	r1, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f006 f97f 	bl	8007ba2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	4b27      	ldr	r3, [pc, #156]	@ (8001958 <SystemClock_Config+0xc8>)
 80018ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018bc:	4a26      	ldr	r2, [pc, #152]	@ (8001958 <SystemClock_Config+0xc8>)
 80018be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80018c4:	4b24      	ldr	r3, [pc, #144]	@ (8001958 <SystemClock_Config+0xc8>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d0:	2300      	movs	r3, #0
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	4b21      	ldr	r3, [pc, #132]	@ (800195c <SystemClock_Config+0xcc>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a20      	ldr	r2, [pc, #128]	@ (800195c <SystemClock_Config+0xcc>)
 80018da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b1e      	ldr	r3, [pc, #120]	@ (800195c <SystemClock_Config+0xcc>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018ec:	2301      	movs	r3, #1
 80018ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018f6:	2302      	movs	r3, #2
 80018f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001900:	230c      	movs	r3, #12
 8001902:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001904:	2360      	movs	r3, #96	@ 0x60
 8001906:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001908:	2302      	movs	r3, #2
 800190a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800190c:	2304      	movs	r3, #4
 800190e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001910:	f107 0320 	add.w	r3, r7, #32
 8001914:	4618      	mov	r0, r3
 8001916:	f002 fbff 	bl	8004118 <HAL_RCC_OscConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001920:	f000 fb94 	bl	800204c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001924:	230f      	movs	r3, #15
 8001926:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001928:	2302      	movs	r3, #2
 800192a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001930:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001934:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800193a:	f107 030c 	add.w	r3, r7, #12
 800193e:	2103      	movs	r1, #3
 8001940:	4618      	mov	r0, r3
 8001942:	f002 fe61 	bl	8004608 <HAL_RCC_ClockConfig>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800194c:	f000 fb7e 	bl	800204c <Error_Handler>
  }
}
 8001950:	bf00      	nop
 8001952:	3750      	adds	r7, #80	@ 0x50
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	40007000 	.word	0x40007000

08001960 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001966:	463b      	mov	r3, r7
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001972:	4b21      	ldr	r3, [pc, #132]	@ (80019f8 <MX_ADC1_Init+0x98>)
 8001974:	4a21      	ldr	r2, [pc, #132]	@ (80019fc <MX_ADC1_Init+0x9c>)
 8001976:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001978:	4b1f      	ldr	r3, [pc, #124]	@ (80019f8 <MX_ADC1_Init+0x98>)
 800197a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800197e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001980:	4b1d      	ldr	r3, [pc, #116]	@ (80019f8 <MX_ADC1_Init+0x98>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001986:	4b1c      	ldr	r3, [pc, #112]	@ (80019f8 <MX_ADC1_Init+0x98>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800198c:	4b1a      	ldr	r3, [pc, #104]	@ (80019f8 <MX_ADC1_Init+0x98>)
 800198e:	2200      	movs	r2, #0
 8001990:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001992:	4b19      	ldr	r3, [pc, #100]	@ (80019f8 <MX_ADC1_Init+0x98>)
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800199a:	4b17      	ldr	r3, [pc, #92]	@ (80019f8 <MX_ADC1_Init+0x98>)
 800199c:	2200      	movs	r2, #0
 800199e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019a0:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <MX_ADC1_Init+0x98>)
 80019a2:	4a17      	ldr	r2, [pc, #92]	@ (8001a00 <MX_ADC1_Init+0xa0>)
 80019a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019a6:	4b14      	ldr	r3, [pc, #80]	@ (80019f8 <MX_ADC1_Init+0x98>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019ac:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <MX_ADC1_Init+0x98>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019b2:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <MX_ADC1_Init+0x98>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019ba:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <MX_ADC1_Init+0x98>)
 80019bc:	2201      	movs	r2, #1
 80019be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019c0:	480d      	ldr	r0, [pc, #52]	@ (80019f8 <MX_ADC1_Init+0x98>)
 80019c2:	f000 ffd7 	bl	8002974 <HAL_ADC_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80019cc:	f000 fb3e 	bl	800204c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80019d0:	2307      	movs	r3, #7
 80019d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019d4:	2301      	movs	r3, #1
 80019d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80019d8:	2304      	movs	r3, #4
 80019da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019dc:	463b      	mov	r3, r7
 80019de:	4619      	mov	r1, r3
 80019e0:	4805      	ldr	r0, [pc, #20]	@ (80019f8 <MX_ADC1_Init+0x98>)
 80019e2:	f001 fa2d 	bl	8002e40 <HAL_ADC_ConfigChannel>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80019ec:	f000 fb2e 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000214 	.word	0x20000214
 80019fc:	40012000 	.word	0x40012000
 8001a00:	0f000001 	.word	0x0f000001

08001a04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b096      	sub	sp, #88	@ 0x58
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a0a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a18:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
 8001a30:	611a      	str	r2, [r3, #16]
 8001a32:	615a      	str	r2, [r3, #20]
 8001a34:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	2220      	movs	r2, #32
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f006 f8b0 	bl	8007ba2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a42:	4b50      	ldr	r3, [pc, #320]	@ (8001b84 <MX_TIM1_Init+0x180>)
 8001a44:	4a50      	ldr	r2, [pc, #320]	@ (8001b88 <MX_TIM1_Init+0x184>)
 8001a46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8001a48:	4b4e      	ldr	r3, [pc, #312]	@ (8001b84 <MX_TIM1_Init+0x180>)
 8001a4a:	2263      	movs	r2, #99	@ 0x63
 8001a4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4e:	4b4d      	ldr	r3, [pc, #308]	@ (8001b84 <MX_TIM1_Init+0x180>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001a54:	4b4b      	ldr	r3, [pc, #300]	@ (8001b84 <MX_TIM1_Init+0x180>)
 8001a56:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5c:	4b49      	ldr	r3, [pc, #292]	@ (8001b84 <MX_TIM1_Init+0x180>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a62:	4b48      	ldr	r3, [pc, #288]	@ (8001b84 <MX_TIM1_Init+0x180>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a68:	4b46      	ldr	r3, [pc, #280]	@ (8001b84 <MX_TIM1_Init+0x180>)
 8001a6a:	2280      	movs	r2, #128	@ 0x80
 8001a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a6e:	4845      	ldr	r0, [pc, #276]	@ (8001b84 <MX_TIM1_Init+0x180>)
 8001a70:	f002 ffaa 	bl	80049c8 <HAL_TIM_Base_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001a7a:	f000 fae7 	bl	800204c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a82:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a84:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a88:	4619      	mov	r1, r3
 8001a8a:	483e      	ldr	r0, [pc, #248]	@ (8001b84 <MX_TIM1_Init+0x180>)
 8001a8c:	f003 fc3e 	bl	800530c <HAL_TIM_ConfigClockSource>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a96:	f000 fad9 	bl	800204c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a9a:	483a      	ldr	r0, [pc, #232]	@ (8001b84 <MX_TIM1_Init+0x180>)
 8001a9c:	f003 f846 	bl	8004b2c <HAL_TIM_PWM_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001aa6:	f000 fad1 	bl	800204c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ab2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4832      	ldr	r0, [pc, #200]	@ (8001b84 <MX_TIM1_Init+0x180>)
 8001aba:	f003 ffe9 	bl	8005a90 <HAL_TIMEx_MasterConfigSynchronization>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001ac4:	f000 fac2 	bl	800204c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ac8:	2360      	movs	r3, #96	@ 0x60
 8001aca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001adc:	2300      	movs	r3, #0
 8001ade:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ae4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ae8:	2200      	movs	r2, #0
 8001aea:	4619      	mov	r1, r3
 8001aec:	4825      	ldr	r0, [pc, #148]	@ (8001b84 <MX_TIM1_Init+0x180>)
 8001aee:	f003 fb4b 	bl	8005188 <HAL_TIM_PWM_ConfigChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001af8:	f000 faa8 	bl	800204c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001afc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b00:	2204      	movs	r2, #4
 8001b02:	4619      	mov	r1, r3
 8001b04:	481f      	ldr	r0, [pc, #124]	@ (8001b84 <MX_TIM1_Init+0x180>)
 8001b06:	f003 fb3f 	bl	8005188 <HAL_TIM_PWM_ConfigChannel>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001b10:	f000 fa9c 	bl	800204c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b18:	2208      	movs	r2, #8
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4819      	ldr	r0, [pc, #100]	@ (8001b84 <MX_TIM1_Init+0x180>)
 8001b1e:	f003 fb33 	bl	8005188 <HAL_TIM_PWM_ConfigChannel>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001b28:	f000 fa90 	bl	800204c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b30:	220c      	movs	r2, #12
 8001b32:	4619      	mov	r1, r3
 8001b34:	4813      	ldr	r0, [pc, #76]	@ (8001b84 <MX_TIM1_Init+0x180>)
 8001b36:	f003 fb27 	bl	8005188 <HAL_TIM_PWM_ConfigChannel>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001b40:	f000 fa84 	bl	800204c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	4619      	mov	r1, r3
 8001b66:	4807      	ldr	r0, [pc, #28]	@ (8001b84 <MX_TIM1_Init+0x180>)
 8001b68:	f004 f800 	bl	8005b6c <HAL_TIMEx_ConfigBreakDeadTime>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001b72:	f000 fa6b 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b76:	4803      	ldr	r0, [pc, #12]	@ (8001b84 <MX_TIM1_Init+0x180>)
 8001b78:	f000 fc1a 	bl	80023b0 <HAL_TIM_MspPostInit>

}
 8001b7c:	bf00      	nop
 8001b7e:	3758      	adds	r7, #88	@ 0x58
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200002bc 	.word	0x200002bc
 8001b88:	40010000 	.word	0x40010000

08001b8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08c      	sub	sp, #48	@ 0x30
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	2224      	movs	r2, #36	@ 0x24
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f006 f801 	bl	8007ba2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ba8:	4b21      	ldr	r3, [pc, #132]	@ (8001c30 <MX_TIM2_Init+0xa4>)
 8001baa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c30 <MX_TIM2_Init+0xa4>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c30 <MX_TIM2_Init+0xa4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001c30 <MX_TIM2_Init+0xa4>)
 8001bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c30 <MX_TIM2_Init+0xa4>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bca:	4b19      	ldr	r3, [pc, #100]	@ (8001c30 <MX_TIM2_Init+0xa4>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001be4:	2300      	movs	r3, #0
 8001be6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001be8:	2301      	movs	r3, #1
 8001bea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bec:	2300      	movs	r3, #0
 8001bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001bf4:	f107 030c 	add.w	r3, r7, #12
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	480d      	ldr	r0, [pc, #52]	@ (8001c30 <MX_TIM2_Init+0xa4>)
 8001bfc:	f003 f8a0 	bl	8004d40 <HAL_TIM_Encoder_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c06:	f000 fa21 	bl	800204c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	4619      	mov	r1, r3
 8001c16:	4806      	ldr	r0, [pc, #24]	@ (8001c30 <MX_TIM2_Init+0xa4>)
 8001c18:	f003 ff3a 	bl	8005a90 <HAL_TIMEx_MasterConfigSynchronization>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c22:	f000 fa13 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c26:	bf00      	nop
 8001c28:	3730      	adds	r7, #48	@ 0x30
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000304 	.word	0x20000304

08001c34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c3a:	f107 0308 	add.w	r3, r7, #8
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c48:	463b      	mov	r3, r7
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c50:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc4 <MX_TIM3_Init+0x90>)
 8001c52:	4a1d      	ldr	r2, [pc, #116]	@ (8001cc8 <MX_TIM3_Init+0x94>)
 8001c54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001c56:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc4 <MX_TIM3_Init+0x90>)
 8001c58:	2263      	movs	r2, #99	@ 0x63
 8001c5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5c:	4b19      	ldr	r3, [pc, #100]	@ (8001cc4 <MX_TIM3_Init+0x90>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001c62:	4b18      	ldr	r3, [pc, #96]	@ (8001cc4 <MX_TIM3_Init+0x90>)
 8001c64:	2263      	movs	r2, #99	@ 0x63
 8001c66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c68:	4b16      	ldr	r3, [pc, #88]	@ (8001cc4 <MX_TIM3_Init+0x90>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c6e:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <MX_TIM3_Init+0x90>)
 8001c70:	2280      	movs	r2, #128	@ 0x80
 8001c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c74:	4813      	ldr	r0, [pc, #76]	@ (8001cc4 <MX_TIM3_Init+0x90>)
 8001c76:	f002 fea7 	bl	80049c8 <HAL_TIM_Base_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001c80:	f000 f9e4 	bl	800204c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c8a:	f107 0308 	add.w	r3, r7, #8
 8001c8e:	4619      	mov	r1, r3
 8001c90:	480c      	ldr	r0, [pc, #48]	@ (8001cc4 <MX_TIM3_Init+0x90>)
 8001c92:	f003 fb3b 	bl	800530c <HAL_TIM_ConfigClockSource>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001c9c:	f000 f9d6 	bl	800204c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ca8:	463b      	mov	r3, r7
 8001caa:	4619      	mov	r1, r3
 8001cac:	4805      	ldr	r0, [pc, #20]	@ (8001cc4 <MX_TIM3_Init+0x90>)
 8001cae:	f003 feef 	bl	8005a90 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001cb8:	f000 f9c8 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cbc:	bf00      	nop
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	2000034c 	.word	0x2000034c
 8001cc8:	40000400 	.word	0x40000400

08001ccc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cd2:	f107 0308 	add.w	r3, r7, #8
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce0:	463b      	mov	r3, r7
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d60 <MX_TIM4_Init+0x94>)
 8001cea:	4a1e      	ldr	r2, [pc, #120]	@ (8001d64 <MX_TIM4_Init+0x98>)
 8001cec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8001cee:	4b1c      	ldr	r3, [pc, #112]	@ (8001d60 <MX_TIM4_Init+0x94>)
 8001cf0:	2263      	movs	r2, #99	@ 0x63
 8001cf2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d60 <MX_TIM4_Init+0x94>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001cfa:	4b19      	ldr	r3, [pc, #100]	@ (8001d60 <MX_TIM4_Init+0x94>)
 8001cfc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d00:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d02:	4b17      	ldr	r3, [pc, #92]	@ (8001d60 <MX_TIM4_Init+0x94>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d08:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <MX_TIM4_Init+0x94>)
 8001d0a:	2280      	movs	r2, #128	@ 0x80
 8001d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d0e:	4814      	ldr	r0, [pc, #80]	@ (8001d60 <MX_TIM4_Init+0x94>)
 8001d10:	f002 fe5a 	bl	80049c8 <HAL_TIM_Base_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001d1a:	f000 f997 	bl	800204c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d24:	f107 0308 	add.w	r3, r7, #8
 8001d28:	4619      	mov	r1, r3
 8001d2a:	480d      	ldr	r0, [pc, #52]	@ (8001d60 <MX_TIM4_Init+0x94>)
 8001d2c:	f003 faee 	bl	800530c <HAL_TIM_ConfigClockSource>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001d36:	f000 f989 	bl	800204c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d42:	463b      	mov	r3, r7
 8001d44:	4619      	mov	r1, r3
 8001d46:	4806      	ldr	r0, [pc, #24]	@ (8001d60 <MX_TIM4_Init+0x94>)
 8001d48:	f003 fea2 	bl	8005a90 <HAL_TIMEx_MasterConfigSynchronization>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001d52:	f000 f97b 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d56:	bf00      	nop
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000394 	.word	0x20000394
 8001d64:	40000800 	.word	0x40000800

08001d68 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08c      	sub	sp, #48	@ 0x30
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	2224      	movs	r2, #36	@ 0x24
 8001d74:	2100      	movs	r1, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f005 ff13 	bl	8007ba2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d84:	4b20      	ldr	r3, [pc, #128]	@ (8001e08 <MX_TIM5_Init+0xa0>)
 8001d86:	4a21      	ldr	r2, [pc, #132]	@ (8001e0c <MX_TIM5_Init+0xa4>)
 8001d88:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001d8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e08 <MX_TIM5_Init+0xa0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d90:	4b1d      	ldr	r3, [pc, #116]	@ (8001e08 <MX_TIM5_Init+0xa0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001d96:	4b1c      	ldr	r3, [pc, #112]	@ (8001e08 <MX_TIM5_Init+0xa0>)
 8001d98:	f04f 32ff 	mov.w	r2, #4294967295
 8001d9c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e08 <MX_TIM5_Init+0xa0>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da4:	4b18      	ldr	r3, [pc, #96]	@ (8001e08 <MX_TIM5_Init+0xa0>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001daa:	2303      	movs	r3, #3
 8001dac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001db2:	2301      	movs	r3, #1
 8001db4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001dce:	f107 030c 	add.w	r3, r7, #12
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	480c      	ldr	r0, [pc, #48]	@ (8001e08 <MX_TIM5_Init+0xa0>)
 8001dd6:	f002 ffb3 	bl	8004d40 <HAL_TIM_Encoder_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001de0:	f000 f934 	bl	800204c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de4:	2300      	movs	r3, #0
 8001de6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	4619      	mov	r1, r3
 8001df0:	4805      	ldr	r0, [pc, #20]	@ (8001e08 <MX_TIM5_Init+0xa0>)
 8001df2:	f003 fe4d 	bl	8005a90 <HAL_TIMEx_MasterConfigSynchronization>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001dfc:	f000 f926 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e00:	bf00      	nop
 8001e02:	3730      	adds	r7, #48	@ 0x30
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	200003dc 	.word	0x200003dc
 8001e0c:	40000c00 	.word	0x40000c00

08001e10 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08c      	sub	sp, #48	@ 0x30
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e16:	f107 0320 	add.w	r3, r7, #32
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	609a      	str	r2, [r3, #8]
 8001e22:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e24:	1d3b      	adds	r3, r7, #4
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
 8001e30:	611a      	str	r2, [r3, #16]
 8001e32:	615a      	str	r2, [r3, #20]
 8001e34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001e36:	4b25      	ldr	r3, [pc, #148]	@ (8001ecc <MX_TIM9_Init+0xbc>)
 8001e38:	4a25      	ldr	r2, [pc, #148]	@ (8001ed0 <MX_TIM9_Init+0xc0>)
 8001e3a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 100-1;
 8001e3c:	4b23      	ldr	r3, [pc, #140]	@ (8001ecc <MX_TIM9_Init+0xbc>)
 8001e3e:	2263      	movs	r2, #99	@ 0x63
 8001e40:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e42:	4b22      	ldr	r3, [pc, #136]	@ (8001ecc <MX_TIM9_Init+0xbc>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000-1;
 8001e48:	4b20      	ldr	r3, [pc, #128]	@ (8001ecc <MX_TIM9_Init+0xbc>)
 8001e4a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001e4e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e50:	4b1e      	ldr	r3, [pc, #120]	@ (8001ecc <MX_TIM9_Init+0xbc>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e56:	4b1d      	ldr	r3, [pc, #116]	@ (8001ecc <MX_TIM9_Init+0xbc>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001e5c:	481b      	ldr	r0, [pc, #108]	@ (8001ecc <MX_TIM9_Init+0xbc>)
 8001e5e:	f002 fdb3 	bl	80049c8 <HAL_TIM_Base_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001e68:	f000 f8f0 	bl	800204c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e70:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001e72:	f107 0320 	add.w	r3, r7, #32
 8001e76:	4619      	mov	r1, r3
 8001e78:	4814      	ldr	r0, [pc, #80]	@ (8001ecc <MX_TIM9_Init+0xbc>)
 8001e7a:	f003 fa47 	bl	800530c <HAL_TIM_ConfigClockSource>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001e84:	f000 f8e2 	bl	800204c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001e88:	4810      	ldr	r0, [pc, #64]	@ (8001ecc <MX_TIM9_Init+0xbc>)
 8001e8a:	f002 fe4f 	bl	8004b2c <HAL_TIM_PWM_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001e94:	f000 f8da 	bl	800204c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e98:	2360      	movs	r3, #96	@ 0x60
 8001e9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ea8:	1d3b      	adds	r3, r7, #4
 8001eaa:	2200      	movs	r2, #0
 8001eac:	4619      	mov	r1, r3
 8001eae:	4807      	ldr	r0, [pc, #28]	@ (8001ecc <MX_TIM9_Init+0xbc>)
 8001eb0:	f003 f96a 	bl	8005188 <HAL_TIM_PWM_ConfigChannel>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8001eba:	f000 f8c7 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001ebe:	4803      	ldr	r0, [pc, #12]	@ (8001ecc <MX_TIM9_Init+0xbc>)
 8001ec0:	f000 fa76 	bl	80023b0 <HAL_TIM_MspPostInit>

}
 8001ec4:	bf00      	nop
 8001ec6:	3730      	adds	r7, #48	@ 0x30
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000424 	.word	0x20000424
 8001ed0:	40014000 	.word	0x40014000

08001ed4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ed8:	4b11      	ldr	r3, [pc, #68]	@ (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001eda:	4a12      	ldr	r2, [pc, #72]	@ (8001f24 <MX_USART1_UART_Init+0x50>)
 8001edc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ede:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001ee0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ee4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001eec:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001efa:	220c      	movs	r2, #12
 8001efc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001efe:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f04:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f0a:	4805      	ldr	r0, [pc, #20]	@ (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001f0c:	f003 fe94 	bl	8005c38 <HAL_UART_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f16:	f000 f899 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	2000046c 	.word	0x2000046c
 8001f24:	40011000 	.word	0x40011000

08001f28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	607b      	str	r3, [r7, #4]
 8001f32:	4b10      	ldr	r3, [pc, #64]	@ (8001f74 <MX_DMA_Init+0x4c>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	4a0f      	ldr	r2, [pc, #60]	@ (8001f74 <MX_DMA_Init+0x4c>)
 8001f38:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f74 <MX_DMA_Init+0x4c>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	2038      	movs	r0, #56	@ 0x38
 8001f50:	f001 fb0b 	bl	800356a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f54:	2038      	movs	r0, #56	@ 0x38
 8001f56:	f001 fb24 	bl	80035a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	203a      	movs	r0, #58	@ 0x3a
 8001f60:	f001 fb03 	bl	800356a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001f64:	203a      	movs	r0, #58	@ 0x3a
 8001f66:	f001 fb1c 	bl	80035a2 <HAL_NVIC_EnableIRQ>

}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40023800 	.word	0x40023800

08001f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7e:	f107 030c 	add.w	r3, r7, #12
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]
 8001f88:	609a      	str	r2, [r3, #8]
 8001f8a:	60da      	str	r2, [r3, #12]
 8001f8c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	4b2b      	ldr	r3, [pc, #172]	@ (8002040 <MX_GPIO_Init+0xc8>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	4a2a      	ldr	r2, [pc, #168]	@ (8002040 <MX_GPIO_Init+0xc8>)
 8001f98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9e:	4b28      	ldr	r3, [pc, #160]	@ (8002040 <MX_GPIO_Init+0xc8>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	4b24      	ldr	r3, [pc, #144]	@ (8002040 <MX_GPIO_Init+0xc8>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	4a23      	ldr	r2, [pc, #140]	@ (8002040 <MX_GPIO_Init+0xc8>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fba:	4b21      	ldr	r3, [pc, #132]	@ (8002040 <MX_GPIO_Init+0xc8>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	603b      	str	r3, [r7, #0]
 8001fca:	4b1d      	ldr	r3, [pc, #116]	@ (8002040 <MX_GPIO_Init+0xc8>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	4a1c      	ldr	r2, [pc, #112]	@ (8002040 <MX_GPIO_Init+0xc8>)
 8001fd0:	f043 0302 	orr.w	r3, r3, #2
 8001fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8002040 <MX_GPIO_Init+0xc8>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	603b      	str	r3, [r7, #0]
 8001fe0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S3_Pin|S2_Pin|S1_Pin|S0_Pin, GPIO_PIN_RESET);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f240 4107 	movw	r1, #1031	@ 0x407
 8001fe8:	4816      	ldr	r0, [pc, #88]	@ (8002044 <MX_GPIO_Init+0xcc>)
 8001fea:	f002 f87b 	bl	80040e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, GPIO_PIN_SET);
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ff4:	4814      	ldr	r0, [pc, #80]	@ (8002048 <MX_GPIO_Init+0xd0>)
 8001ff6:	f002 f875 	bl	80040e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : S3_Pin S2_Pin S1_Pin S0_Pin */
  GPIO_InitStruct.Pin = S3_Pin|S2_Pin|S1_Pin|S0_Pin;
 8001ffa:	f240 4307 	movw	r3, #1031	@ 0x407
 8001ffe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002000:	2301      	movs	r3, #1
 8002002:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002008:	2300      	movs	r3, #0
 800200a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200c:	f107 030c 	add.w	r3, r7, #12
 8002010:	4619      	mov	r1, r3
 8002012:	480c      	ldr	r0, [pc, #48]	@ (8002044 <MX_GPIO_Init+0xcc>)
 8002014:	f001 fee2 	bl	8003ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : STBY_Pin */
  GPIO_InitStruct.Pin = STBY_Pin;
 8002018:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800201c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201e:	2301      	movs	r3, #1
 8002020:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2300      	movs	r3, #0
 8002028:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STBY_GPIO_Port, &GPIO_InitStruct);
 800202a:	f107 030c 	add.w	r3, r7, #12
 800202e:	4619      	mov	r1, r3
 8002030:	4805      	ldr	r0, [pc, #20]	@ (8002048 <MX_GPIO_Init+0xd0>)
 8002032:	f001 fed3 	bl	8003ddc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002036:	bf00      	nop
 8002038:	3720      	adds	r7, #32
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40023800 	.word	0x40023800
 8002044:	40020400 	.word	0x40020400
 8002048:	40020000 	.word	0x40020000

0800204c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002050:	b672      	cpsid	i
}
 8002052:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002054:	bf00      	nop
 8002056:	e7fd      	b.n	8002054 <Error_Handler+0x8>

08002058 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	607b      	str	r3, [r7, #4]
 8002062:	4b10      	ldr	r3, [pc, #64]	@ (80020a4 <HAL_MspInit+0x4c>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002066:	4a0f      	ldr	r2, [pc, #60]	@ (80020a4 <HAL_MspInit+0x4c>)
 8002068:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800206c:	6453      	str	r3, [r2, #68]	@ 0x44
 800206e:	4b0d      	ldr	r3, [pc, #52]	@ (80020a4 <HAL_MspInit+0x4c>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002076:	607b      	str	r3, [r7, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	603b      	str	r3, [r7, #0]
 800207e:	4b09      	ldr	r3, [pc, #36]	@ (80020a4 <HAL_MspInit+0x4c>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002082:	4a08      	ldr	r2, [pc, #32]	@ (80020a4 <HAL_MspInit+0x4c>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002088:	6413      	str	r3, [r2, #64]	@ 0x40
 800208a:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <HAL_MspInit+0x4c>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800

080020a8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	@ 0x28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a33      	ldr	r2, [pc, #204]	@ (8002194 <HAL_ADC_MspInit+0xec>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d15f      	bne.n	800218a <HAL_ADC_MspInit+0xe2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	4b32      	ldr	r3, [pc, #200]	@ (8002198 <HAL_ADC_MspInit+0xf0>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d2:	4a31      	ldr	r2, [pc, #196]	@ (8002198 <HAL_ADC_MspInit+0xf0>)
 80020d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020da:	4b2f      	ldr	r3, [pc, #188]	@ (8002198 <HAL_ADC_MspInit+0xf0>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002198 <HAL_ADC_MspInit+0xf0>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	4a2a      	ldr	r2, [pc, #168]	@ (8002198 <HAL_ADC_MspInit+0xf0>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f6:	4b28      	ldr	r3, [pc, #160]	@ (8002198 <HAL_ADC_MspInit+0xf0>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = OUT_Pin;
 8002102:	2380      	movs	r3, #128	@ 0x80
 8002104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002106:	2303      	movs	r3, #3
 8002108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OUT_GPIO_Port, &GPIO_InitStruct);
 800210e:	f107 0314 	add.w	r3, r7, #20
 8002112:	4619      	mov	r1, r3
 8002114:	4821      	ldr	r0, [pc, #132]	@ (800219c <HAL_ADC_MspInit+0xf4>)
 8002116:	f001 fe61 	bl	8003ddc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800211a:	4b21      	ldr	r3, [pc, #132]	@ (80021a0 <HAL_ADC_MspInit+0xf8>)
 800211c:	4a21      	ldr	r2, [pc, #132]	@ (80021a4 <HAL_ADC_MspInit+0xfc>)
 800211e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002120:	4b1f      	ldr	r3, [pc, #124]	@ (80021a0 <HAL_ADC_MspInit+0xf8>)
 8002122:	2200      	movs	r2, #0
 8002124:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002126:	4b1e      	ldr	r3, [pc, #120]	@ (80021a0 <HAL_ADC_MspInit+0xf8>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800212c:	4b1c      	ldr	r3, [pc, #112]	@ (80021a0 <HAL_ADC_MspInit+0xf8>)
 800212e:	2200      	movs	r2, #0
 8002130:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002132:	4b1b      	ldr	r3, [pc, #108]	@ (80021a0 <HAL_ADC_MspInit+0xf8>)
 8002134:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002138:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800213a:	4b19      	ldr	r3, [pc, #100]	@ (80021a0 <HAL_ADC_MspInit+0xf8>)
 800213c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002140:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002142:	4b17      	ldr	r3, [pc, #92]	@ (80021a0 <HAL_ADC_MspInit+0xf8>)
 8002144:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002148:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800214a:	4b15      	ldr	r3, [pc, #84]	@ (80021a0 <HAL_ADC_MspInit+0xf8>)
 800214c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002150:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002152:	4b13      	ldr	r3, [pc, #76]	@ (80021a0 <HAL_ADC_MspInit+0xf8>)
 8002154:	2200      	movs	r2, #0
 8002156:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002158:	4b11      	ldr	r3, [pc, #68]	@ (80021a0 <HAL_ADC_MspInit+0xf8>)
 800215a:	2200      	movs	r2, #0
 800215c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800215e:	4810      	ldr	r0, [pc, #64]	@ (80021a0 <HAL_ADC_MspInit+0xf8>)
 8002160:	f001 fa3a 	bl	80035d8 <HAL_DMA_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800216a:	f7ff ff6f 	bl	800204c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a0b      	ldr	r2, [pc, #44]	@ (80021a0 <HAL_ADC_MspInit+0xf8>)
 8002172:	639a      	str	r2, [r3, #56]	@ 0x38
 8002174:	4a0a      	ldr	r2, [pc, #40]	@ (80021a0 <HAL_ADC_MspInit+0xf8>)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800217a:	2200      	movs	r2, #0
 800217c:	2100      	movs	r1, #0
 800217e:	2012      	movs	r0, #18
 8002180:	f001 f9f3 	bl	800356a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002184:	2012      	movs	r0, #18
 8002186:	f001 fa0c 	bl	80035a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800218a:	bf00      	nop
 800218c:	3728      	adds	r7, #40	@ 0x28
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40012000 	.word	0x40012000
 8002198:	40023800 	.word	0x40023800
 800219c:	40020000 	.word	0x40020000
 80021a0:	2000025c 	.word	0x2000025c
 80021a4:	40026410 	.word	0x40026410

080021a8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a2c      	ldr	r2, [pc, #176]	@ (8002268 <HAL_TIM_Base_MspInit+0xc0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d10e      	bne.n	80021d8 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	4b2b      	ldr	r3, [pc, #172]	@ (800226c <HAL_TIM_Base_MspInit+0xc4>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c2:	4a2a      	ldr	r2, [pc, #168]	@ (800226c <HAL_TIM_Base_MspInit+0xc4>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ca:	4b28      	ldr	r3, [pc, #160]	@ (800226c <HAL_TIM_Base_MspInit+0xc4>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM9_MspInit 1 */

    /* USER CODE END TIM9_MspInit 1 */
  }

}
 80021d6:	e042      	b.n	800225e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a24      	ldr	r2, [pc, #144]	@ (8002270 <HAL_TIM_Base_MspInit+0xc8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d116      	bne.n	8002210 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	4b21      	ldr	r3, [pc, #132]	@ (800226c <HAL_TIM_Base_MspInit+0xc4>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ea:	4a20      	ldr	r2, [pc, #128]	@ (800226c <HAL_TIM_Base_MspInit+0xc4>)
 80021ec:	f043 0302 	orr.w	r3, r3, #2
 80021f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021f2:	4b1e      	ldr	r3, [pc, #120]	@ (800226c <HAL_TIM_Base_MspInit+0xc4>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80021fe:	2200      	movs	r2, #0
 8002200:	2100      	movs	r1, #0
 8002202:	201d      	movs	r0, #29
 8002204:	f001 f9b1 	bl	800356a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002208:	201d      	movs	r0, #29
 800220a:	f001 f9ca 	bl	80035a2 <HAL_NVIC_EnableIRQ>
}
 800220e:	e026      	b.n	800225e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a17      	ldr	r2, [pc, #92]	@ (8002274 <HAL_TIM_Base_MspInit+0xcc>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d10e      	bne.n	8002238 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b13      	ldr	r3, [pc, #76]	@ (800226c <HAL_TIM_Base_MspInit+0xc4>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002222:	4a12      	ldr	r2, [pc, #72]	@ (800226c <HAL_TIM_Base_MspInit+0xc4>)
 8002224:	f043 0304 	orr.w	r3, r3, #4
 8002228:	6413      	str	r3, [r2, #64]	@ 0x40
 800222a:	4b10      	ldr	r3, [pc, #64]	@ (800226c <HAL_TIM_Base_MspInit+0xc4>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
}
 8002236:	e012      	b.n	800225e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM9)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0e      	ldr	r2, [pc, #56]	@ (8002278 <HAL_TIM_Base_MspInit+0xd0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d10d      	bne.n	800225e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	4b09      	ldr	r3, [pc, #36]	@ (800226c <HAL_TIM_Base_MspInit+0xc4>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224a:	4a08      	ldr	r2, [pc, #32]	@ (800226c <HAL_TIM_Base_MspInit+0xc4>)
 800224c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002250:	6453      	str	r3, [r2, #68]	@ 0x44
 8002252:	4b06      	ldr	r3, [pc, #24]	@ (800226c <HAL_TIM_Base_MspInit+0xc4>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002256:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
}
 800225e:	bf00      	nop
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40010000 	.word	0x40010000
 800226c:	40023800 	.word	0x40023800
 8002270:	40000400 	.word	0x40000400
 8002274:	40000800 	.word	0x40000800
 8002278:	40014000 	.word	0x40014000

0800227c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08c      	sub	sp, #48	@ 0x30
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 031c 	add.w	r3, r7, #28
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800229c:	d14a      	bne.n	8002334 <HAL_TIM_Encoder_MspInit+0xb8>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	61bb      	str	r3, [r7, #24]
 80022a2:	4b3f      	ldr	r3, [pc, #252]	@ (80023a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	4a3e      	ldr	r2, [pc, #248]	@ (80023a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ae:	4b3c      	ldr	r3, [pc, #240]	@ (80023a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	61bb      	str	r3, [r7, #24]
 80022b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	4b38      	ldr	r3, [pc, #224]	@ (80023a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	4a37      	ldr	r2, [pc, #220]	@ (80023a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ca:	4b35      	ldr	r3, [pc, #212]	@ (80023a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	4b31      	ldr	r3, [pc, #196]	@ (80023a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	4a30      	ldr	r2, [pc, #192]	@ (80023a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e6:	4b2e      	ldr	r3, [pc, #184]	@ (80023a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODERA1_Pin;
 80022f2:	2320      	movs	r3, #32
 80022f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f6:	2302      	movs	r3, #2
 80022f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fe:	2300      	movs	r3, #0
 8002300:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002302:	2301      	movs	r3, #1
 8002304:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ENCODERA1_GPIO_Port, &GPIO_InitStruct);
 8002306:	f107 031c 	add.w	r3, r7, #28
 800230a:	4619      	mov	r1, r3
 800230c:	4825      	ldr	r0, [pc, #148]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x128>)
 800230e:	f001 fd65 	bl	8003ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODERA2_Pin;
 8002312:	2308      	movs	r3, #8
 8002314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	2300      	movs	r3, #0
 8002320:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002322:	2301      	movs	r3, #1
 8002324:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ENCODERA2_GPIO_Port, &GPIO_InitStruct);
 8002326:	f107 031c 	add.w	r3, r7, #28
 800232a:	4619      	mov	r1, r3
 800232c:	481e      	ldr	r0, [pc, #120]	@ (80023a8 <HAL_TIM_Encoder_MspInit+0x12c>)
 800232e:	f001 fd55 	bl	8003ddc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002332:	e030      	b.n	8002396 <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM5)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a1c      	ldr	r2, [pc, #112]	@ (80023ac <HAL_TIM_Encoder_MspInit+0x130>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d12b      	bne.n	8002396 <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	4b17      	ldr	r3, [pc, #92]	@ (80023a0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	4a16      	ldr	r2, [pc, #88]	@ (80023a0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002348:	f043 0308 	orr.w	r3, r3, #8
 800234c:	6413      	str	r3, [r2, #64]	@ 0x40
 800234e:	4b14      	ldr	r3, [pc, #80]	@ (80023a0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	4b10      	ldr	r3, [pc, #64]	@ (80023a0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	4a0f      	ldr	r2, [pc, #60]	@ (80023a0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6313      	str	r3, [r2, #48]	@ 0x30
 800236a:	4b0d      	ldr	r3, [pc, #52]	@ (80023a0 <HAL_TIM_Encoder_MspInit+0x124>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODERB1_Pin|ENCODERB2_Pin;
 8002376:	2303      	movs	r3, #3
 8002378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237a:	2302      	movs	r3, #2
 800237c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002382:	2300      	movs	r3, #0
 8002384:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002386:	2302      	movs	r3, #2
 8002388:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238a:	f107 031c 	add.w	r3, r7, #28
 800238e:	4619      	mov	r1, r3
 8002390:	4804      	ldr	r0, [pc, #16]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002392:	f001 fd23 	bl	8003ddc <HAL_GPIO_Init>
}
 8002396:	bf00      	nop
 8002398:	3730      	adds	r7, #48	@ 0x30
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40023800 	.word	0x40023800
 80023a4:	40020000 	.word	0x40020000
 80023a8:	40020400 	.word	0x40020400
 80023ac:	40000c00 	.word	0x40000c00

080023b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	@ 0x28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 0314 	add.w	r3, r7, #20
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a24      	ldr	r2, [pc, #144]	@ (8002460 <HAL_TIM_MspPostInit+0xb0>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d11f      	bne.n	8002412 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	4b23      	ldr	r3, [pc, #140]	@ (8002464 <HAL_TIM_MspPostInit+0xb4>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023da:	4a22      	ldr	r2, [pc, #136]	@ (8002464 <HAL_TIM_MspPostInit+0xb4>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023e2:	4b20      	ldr	r3, [pc, #128]	@ (8002464 <HAL_TIM_MspPostInit+0xb4>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = INA1_Pin|INA2_Pin|INB1_Pin|INB2_Pin;
 80023ee:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80023f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fc:	2300      	movs	r3, #0
 80023fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002400:	2301      	movs	r3, #1
 8002402:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	4619      	mov	r1, r3
 800240a:	4817      	ldr	r0, [pc, #92]	@ (8002468 <HAL_TIM_MspPostInit+0xb8>)
 800240c:	f001 fce6 	bl	8003ddc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM9_MspPostInit 1 */

    /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002410:	e022      	b.n	8002458 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a15      	ldr	r2, [pc, #84]	@ (800246c <HAL_TIM_MspPostInit+0xbc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d11d      	bne.n	8002458 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	4b10      	ldr	r3, [pc, #64]	@ (8002464 <HAL_TIM_MspPostInit+0xb4>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002424:	4a0f      	ldr	r2, [pc, #60]	@ (8002464 <HAL_TIM_MspPostInit+0xb4>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6313      	str	r3, [r2, #48]	@ 0x30
 800242c:	4b0d      	ldr	r3, [pc, #52]	@ (8002464 <HAL_TIM_MspPostInit+0xb4>)
 800242e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ESC_Pin;
 8002438:	2304      	movs	r3, #4
 800243a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243c:	2302      	movs	r3, #2
 800243e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002444:	2300      	movs	r3, #0
 8002446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002448:	2303      	movs	r3, #3
 800244a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ESC_GPIO_Port, &GPIO_InitStruct);
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	4619      	mov	r1, r3
 8002452:	4805      	ldr	r0, [pc, #20]	@ (8002468 <HAL_TIM_MspPostInit+0xb8>)
 8002454:	f001 fcc2 	bl	8003ddc <HAL_GPIO_Init>
}
 8002458:	bf00      	nop
 800245a:	3728      	adds	r7, #40	@ 0x28
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40010000 	.word	0x40010000
 8002464:	40023800 	.word	0x40023800
 8002468:	40020000 	.word	0x40020000
 800246c:	40014000 	.word	0x40014000

08002470 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	@ 0x28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a44      	ldr	r2, [pc, #272]	@ (80025a0 <HAL_UART_MspInit+0x130>)
 800248e:	4293      	cmp	r3, r2
 8002490:	f040 8082 	bne.w	8002598 <HAL_UART_MspInit+0x128>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002494:	2300      	movs	r3, #0
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	4b42      	ldr	r3, [pc, #264]	@ (80025a4 <HAL_UART_MspInit+0x134>)
 800249a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249c:	4a41      	ldr	r2, [pc, #260]	@ (80025a4 <HAL_UART_MspInit+0x134>)
 800249e:	f043 0310 	orr.w	r3, r3, #16
 80024a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80024a4:	4b3f      	ldr	r3, [pc, #252]	@ (80025a4 <HAL_UART_MspInit+0x134>)
 80024a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a8:	f003 0310 	and.w	r3, r3, #16
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	4b3b      	ldr	r3, [pc, #236]	@ (80025a4 <HAL_UART_MspInit+0x134>)
 80024b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b8:	4a3a      	ldr	r2, [pc, #232]	@ (80025a4 <HAL_UART_MspInit+0x134>)
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	6313      	str	r3, [r2, #48]	@ 0x30
 80024c0:	4b38      	ldr	r3, [pc, #224]	@ (80025a4 <HAL_UART_MspInit+0x134>)
 80024c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024cc:	2300      	movs	r3, #0
 80024ce:	60bb      	str	r3, [r7, #8]
 80024d0:	4b34      	ldr	r3, [pc, #208]	@ (80025a4 <HAL_UART_MspInit+0x134>)
 80024d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d4:	4a33      	ldr	r2, [pc, #204]	@ (80025a4 <HAL_UART_MspInit+0x134>)
 80024d6:	f043 0302 	orr.w	r3, r3, #2
 80024da:	6313      	str	r3, [r2, #48]	@ 0x30
 80024dc:	4b31      	ldr	r3, [pc, #196]	@ (80025a4 <HAL_UART_MspInit+0x134>)
 80024de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f6:	2303      	movs	r3, #3
 80024f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024fa:	2307      	movs	r3, #7
 80024fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fe:	f107 0314 	add.w	r3, r7, #20
 8002502:	4619      	mov	r1, r3
 8002504:	4828      	ldr	r0, [pc, #160]	@ (80025a8 <HAL_UART_MspInit+0x138>)
 8002506:	f001 fc69 	bl	8003ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800250a:	2380      	movs	r3, #128	@ 0x80
 800250c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250e:	2302      	movs	r3, #2
 8002510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002516:	2303      	movs	r3, #3
 8002518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800251a:	2307      	movs	r3, #7
 800251c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251e:	f107 0314 	add.w	r3, r7, #20
 8002522:	4619      	mov	r1, r3
 8002524:	4821      	ldr	r0, [pc, #132]	@ (80025ac <HAL_UART_MspInit+0x13c>)
 8002526:	f001 fc59 	bl	8003ddc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800252a:	4b21      	ldr	r3, [pc, #132]	@ (80025b0 <HAL_UART_MspInit+0x140>)
 800252c:	4a21      	ldr	r2, [pc, #132]	@ (80025b4 <HAL_UART_MspInit+0x144>)
 800252e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002530:	4b1f      	ldr	r3, [pc, #124]	@ (80025b0 <HAL_UART_MspInit+0x140>)
 8002532:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002536:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002538:	4b1d      	ldr	r3, [pc, #116]	@ (80025b0 <HAL_UART_MspInit+0x140>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800253e:	4b1c      	ldr	r3, [pc, #112]	@ (80025b0 <HAL_UART_MspInit+0x140>)
 8002540:	2200      	movs	r2, #0
 8002542:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002544:	4b1a      	ldr	r3, [pc, #104]	@ (80025b0 <HAL_UART_MspInit+0x140>)
 8002546:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800254a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800254c:	4b18      	ldr	r3, [pc, #96]	@ (80025b0 <HAL_UART_MspInit+0x140>)
 800254e:	2200      	movs	r2, #0
 8002550:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002552:	4b17      	ldr	r3, [pc, #92]	@ (80025b0 <HAL_UART_MspInit+0x140>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002558:	4b15      	ldr	r3, [pc, #84]	@ (80025b0 <HAL_UART_MspInit+0x140>)
 800255a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800255e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002560:	4b13      	ldr	r3, [pc, #76]	@ (80025b0 <HAL_UART_MspInit+0x140>)
 8002562:	2200      	movs	r2, #0
 8002564:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002566:	4b12      	ldr	r3, [pc, #72]	@ (80025b0 <HAL_UART_MspInit+0x140>)
 8002568:	2200      	movs	r2, #0
 800256a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800256c:	4810      	ldr	r0, [pc, #64]	@ (80025b0 <HAL_UART_MspInit+0x140>)
 800256e:	f001 f833 	bl	80035d8 <HAL_DMA_Init>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002578:	f7ff fd68 	bl	800204c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a0c      	ldr	r2, [pc, #48]	@ (80025b0 <HAL_UART_MspInit+0x140>)
 8002580:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002582:	4a0b      	ldr	r2, [pc, #44]	@ (80025b0 <HAL_UART_MspInit+0x140>)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002588:	2200      	movs	r2, #0
 800258a:	2100      	movs	r1, #0
 800258c:	2025      	movs	r0, #37	@ 0x25
 800258e:	f000 ffec 	bl	800356a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002592:	2025      	movs	r0, #37	@ 0x25
 8002594:	f001 f805 	bl	80035a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002598:	bf00      	nop
 800259a:	3728      	adds	r7, #40	@ 0x28
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40011000 	.word	0x40011000
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40020000 	.word	0x40020000
 80025ac:	40020400 	.word	0x40020400
 80025b0:	200004b4 	.word	0x200004b4
 80025b4:	40026440 	.word	0x40026440

080025b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025bc:	bf00      	nop
 80025be:	e7fd      	b.n	80025bc <NMI_Handler+0x4>

080025c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025c4:	bf00      	nop
 80025c6:	e7fd      	b.n	80025c4 <HardFault_Handler+0x4>

080025c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025cc:	bf00      	nop
 80025ce:	e7fd      	b.n	80025cc <MemManage_Handler+0x4>

080025d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025d4:	bf00      	nop
 80025d6:	e7fd      	b.n	80025d4 <BusFault_Handler+0x4>

080025d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025dc:	bf00      	nop
 80025de:	e7fd      	b.n	80025dc <UsageFault_Handler+0x4>

080025e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800260e:	f000 f96d 	bl	80028ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800261c:	4802      	ldr	r0, [pc, #8]	@ (8002628 <ADC_IRQHandler+0x10>)
 800261e:	f000 f9ec 	bl	80029fa <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20000214 	.word	0x20000214

0800262c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002630:	4802      	ldr	r0, [pc, #8]	@ (800263c <TIM3_IRQHandler+0x10>)
 8002632:	f002 fcb9 	bl	8004fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	2000034c 	.word	0x2000034c

08002640 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002644:	4802      	ldr	r0, [pc, #8]	@ (8002650 <USART1_IRQHandler+0x10>)
 8002646:	f003 fbd3 	bl	8005df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	2000046c 	.word	0x2000046c

08002654 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002658:	4802      	ldr	r0, [pc, #8]	@ (8002664 <DMA2_Stream0_IRQHandler+0x10>)
 800265a:	f001 f955 	bl	8003908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	2000025c 	.word	0x2000025c

08002668 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800266c:	4802      	ldr	r0, [pc, #8]	@ (8002678 <DMA2_Stream2_IRQHandler+0x10>)
 800266e:	f001 f94b 	bl	8003908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	200004b4 	.word	0x200004b4

0800267c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return 1;
 8002680:	2301      	movs	r3, #1
}
 8002682:	4618      	mov	r0, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <_kill>:

int _kill(int pid, int sig)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002696:	f005 fad7 	bl	8007c48 <__errno>
 800269a:	4603      	mov	r3, r0
 800269c:	2216      	movs	r2, #22
 800269e:	601a      	str	r2, [r3, #0]
  return -1;
 80026a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <_exit>:

void _exit (int status)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026b4:	f04f 31ff 	mov.w	r1, #4294967295
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff ffe7 	bl	800268c <_kill>
  while (1) {}    /* Make sure we hang here */
 80026be:	bf00      	nop
 80026c0:	e7fd      	b.n	80026be <_exit+0x12>

080026c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b086      	sub	sp, #24
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	60f8      	str	r0, [r7, #12]
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	e00a      	b.n	80026ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026d4:	f3af 8000 	nop.w
 80026d8:	4601      	mov	r1, r0
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	60ba      	str	r2, [r7, #8]
 80026e0:	b2ca      	uxtb	r2, r1
 80026e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	3301      	adds	r3, #1
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	dbf0      	blt.n	80026d4 <_read+0x12>
  }

  return len;
 80026f2:	687b      	ldr	r3, [r7, #4]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <_close>:
  }
  return len;
}

int _close(int file)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002704:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002724:	605a      	str	r2, [r3, #4]
  return 0;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <_isatty>:

int _isatty(int file)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800273c:	2301      	movs	r3, #1
}
 800273e:	4618      	mov	r0, r3
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800274a:	b480      	push	{r7}
 800274c:	b085      	sub	sp, #20
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800276c:	4a14      	ldr	r2, [pc, #80]	@ (80027c0 <_sbrk+0x5c>)
 800276e:	4b15      	ldr	r3, [pc, #84]	@ (80027c4 <_sbrk+0x60>)
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002778:	4b13      	ldr	r3, [pc, #76]	@ (80027c8 <_sbrk+0x64>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d102      	bne.n	8002786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002780:	4b11      	ldr	r3, [pc, #68]	@ (80027c8 <_sbrk+0x64>)
 8002782:	4a12      	ldr	r2, [pc, #72]	@ (80027cc <_sbrk+0x68>)
 8002784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002786:	4b10      	ldr	r3, [pc, #64]	@ (80027c8 <_sbrk+0x64>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	429a      	cmp	r2, r3
 8002792:	d207      	bcs.n	80027a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002794:	f005 fa58 	bl	8007c48 <__errno>
 8002798:	4603      	mov	r3, r0
 800279a:	220c      	movs	r2, #12
 800279c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800279e:	f04f 33ff 	mov.w	r3, #4294967295
 80027a2:	e009      	b.n	80027b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027a4:	4b08      	ldr	r3, [pc, #32]	@ (80027c8 <_sbrk+0x64>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027aa:	4b07      	ldr	r3, [pc, #28]	@ (80027c8 <_sbrk+0x64>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4413      	add	r3, r2
 80027b2:	4a05      	ldr	r2, [pc, #20]	@ (80027c8 <_sbrk+0x64>)
 80027b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027b6:	68fb      	ldr	r3, [r7, #12]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20020000 	.word	0x20020000
 80027c4:	00000400 	.word	0x00000400
 80027c8:	200005a4 	.word	0x200005a4
 80027cc:	200006f8 	.word	0x200006f8

080027d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027d4:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <SystemInit+0x20>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027da:	4a05      	ldr	r2, [pc, #20]	@ (80027f0 <SystemInit+0x20>)
 80027dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80027f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800282c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027f8:	f7ff ffea 	bl	80027d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027fc:	480c      	ldr	r0, [pc, #48]	@ (8002830 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027fe:	490d      	ldr	r1, [pc, #52]	@ (8002834 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002800:	4a0d      	ldr	r2, [pc, #52]	@ (8002838 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002804:	e002      	b.n	800280c <LoopCopyDataInit>

08002806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280a:	3304      	adds	r3, #4

0800280c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800280c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800280e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002810:	d3f9      	bcc.n	8002806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002812:	4a0a      	ldr	r2, [pc, #40]	@ (800283c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002814:	4c0a      	ldr	r4, [pc, #40]	@ (8002840 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002818:	e001      	b.n	800281e <LoopFillZerobss>

0800281a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800281c:	3204      	adds	r2, #4

0800281e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800281e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002820:	d3fb      	bcc.n	800281a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002822:	f005 fa17 	bl	8007c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002826:	f7fe ff99 	bl	800175c <main>
  bx  lr    
 800282a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800282c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002834:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002838:	0800b92c 	.word	0x0800b92c
  ldr r2, =_sbss
 800283c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002840:	200006f8 	.word	0x200006f8

08002844 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002844:	e7fe      	b.n	8002844 <DMA1_Stream0_IRQHandler>
	...

08002848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800284c:	4b0e      	ldr	r3, [pc, #56]	@ (8002888 <HAL_Init+0x40>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0d      	ldr	r2, [pc, #52]	@ (8002888 <HAL_Init+0x40>)
 8002852:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002856:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002858:	4b0b      	ldr	r3, [pc, #44]	@ (8002888 <HAL_Init+0x40>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0a      	ldr	r2, [pc, #40]	@ (8002888 <HAL_Init+0x40>)
 800285e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002862:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002864:	4b08      	ldr	r3, [pc, #32]	@ (8002888 <HAL_Init+0x40>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a07      	ldr	r2, [pc, #28]	@ (8002888 <HAL_Init+0x40>)
 800286a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800286e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002870:	2003      	movs	r0, #3
 8002872:	f000 fe6f 	bl	8003554 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002876:	200f      	movs	r0, #15
 8002878:	f000 f808 	bl	800288c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800287c:	f7ff fbec 	bl	8002058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40023c00 	.word	0x40023c00

0800288c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002894:	4b12      	ldr	r3, [pc, #72]	@ (80028e0 <HAL_InitTick+0x54>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b12      	ldr	r3, [pc, #72]	@ (80028e4 <HAL_InitTick+0x58>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	4619      	mov	r1, r3
 800289e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fe87 	bl	80035be <HAL_SYSTICK_Config>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e00e      	b.n	80028d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b0f      	cmp	r3, #15
 80028be:	d80a      	bhi.n	80028d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028c0:	2200      	movs	r2, #0
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	f04f 30ff 	mov.w	r0, #4294967295
 80028c8:	f000 fe4f 	bl	800356a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028cc:	4a06      	ldr	r2, [pc, #24]	@ (80028e8 <HAL_InitTick+0x5c>)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	e000      	b.n	80028d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20000024 	.word	0x20000024
 80028e4:	2000002c 	.word	0x2000002c
 80028e8:	20000028 	.word	0x20000028

080028ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028f0:	4b06      	ldr	r3, [pc, #24]	@ (800290c <HAL_IncTick+0x20>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b06      	ldr	r3, [pc, #24]	@ (8002910 <HAL_IncTick+0x24>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4413      	add	r3, r2
 80028fc:	4a04      	ldr	r2, [pc, #16]	@ (8002910 <HAL_IncTick+0x24>)
 80028fe:	6013      	str	r3, [r2, #0]
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	2000002c 	.word	0x2000002c
 8002910:	200005a8 	.word	0x200005a8

08002914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return uwTick;
 8002918:	4b03      	ldr	r3, [pc, #12]	@ (8002928 <HAL_GetTick+0x14>)
 800291a:	681b      	ldr	r3, [r3, #0]
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	200005a8 	.word	0x200005a8

0800292c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002934:	f7ff ffee 	bl	8002914 <HAL_GetTick>
 8002938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002944:	d005      	beq.n	8002952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002946:	4b0a      	ldr	r3, [pc, #40]	@ (8002970 <HAL_Delay+0x44>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4413      	add	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002952:	bf00      	nop
 8002954:	f7ff ffde 	bl	8002914 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	429a      	cmp	r2, r3
 8002962:	d8f7      	bhi.n	8002954 <HAL_Delay+0x28>
  {
  }
}
 8002964:	bf00      	nop
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	2000002c 	.word	0x2000002c

08002974 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e033      	b.n	80029f2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	2b00      	cmp	r3, #0
 8002990:	d109      	bne.n	80029a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff fb88 	bl	80020a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d118      	bne.n	80029e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80029ba:	f023 0302 	bic.w	r3, r3, #2
 80029be:	f043 0202 	orr.w	r2, r3, #2
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fb6c 	bl	80030a4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d6:	f023 0303 	bic.w	r3, r3, #3
 80029da:	f043 0201 	orr.w	r2, r3, #1
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80029e2:	e001      	b.n	80029e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b086      	sub	sp, #24
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	f003 0320 	and.w	r3, r3, #32
 8002a28:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d049      	beq.n	8002ac4 <HAL_ADC_IRQHandler+0xca>
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d046      	beq.n	8002ac4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d105      	bne.n	8002a4e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d12b      	bne.n	8002ab4 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d127      	bne.n	8002ab4 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d006      	beq.n	8002a80 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d119      	bne.n	8002ab4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0220 	bic.w	r2, r2, #32
 8002a8e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d105      	bne.n	8002ab4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aac:	f043 0201 	orr.w	r2, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7fe fe03 	bl	80016c0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f06f 0212 	mvn.w	r2, #18
 8002ac2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ad2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d057      	beq.n	8002b8a <HAL_ADC_IRQHandler+0x190>
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d054      	beq.n	8002b8a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d105      	bne.n	8002af8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d139      	bne.n	8002b7a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b0c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d006      	beq.n	8002b22 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d12b      	bne.n	8002b7a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d124      	bne.n	8002b7a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d11d      	bne.n	8002b7a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d119      	bne.n	8002b7a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b54:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d105      	bne.n	8002b7a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b72:	f043 0201 	orr.w	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fc10 	bl	80033a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 020c 	mvn.w	r2, #12
 8002b88:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b98:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d017      	beq.n	8002bd0 <HAL_ADC_IRQHandler+0x1d6>
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d014      	beq.n	8002bd0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d10d      	bne.n	8002bd0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f929 	bl	8002e18 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f06f 0201 	mvn.w	r2, #1
 8002bce:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f003 0320 	and.w	r3, r3, #32
 8002bd6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bde:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d015      	beq.n	8002c12 <HAL_ADC_IRQHandler+0x218>
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d012      	beq.n	8002c12 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf0:	f043 0202 	orr.w	r2, r3, #2
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f06f 0220 	mvn.w	r2, #32
 8002c00:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f912 	bl	8002e2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0220 	mvn.w	r2, #32
 8002c10:	601a      	str	r2, [r3, #0]
  }
}
 8002c12:	bf00      	nop
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_ADC_Start_DMA+0x22>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e0d0      	b.n	8002de0 <HAL_ADC_Start_DMA+0x1c4>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d018      	beq.n	8002c86 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c64:	4b60      	ldr	r3, [pc, #384]	@ (8002de8 <HAL_ADC_Start_DMA+0x1cc>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a60      	ldr	r2, [pc, #384]	@ (8002dec <HAL_ADC_Start_DMA+0x1d0>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	0c9a      	lsrs	r2, r3, #18
 8002c70:	4613      	mov	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4413      	add	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002c78:	e002      	b.n	8002c80 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f9      	bne.n	8002c7a <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c94:	d107      	bne.n	8002ca6 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ca4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	f040 8088 	bne.w	8002dc6 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cba:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002cbe:	f023 0301 	bic.w	r3, r3, #1
 8002cc2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d007      	beq.n	8002ce8 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cdc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ce0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cf4:	d106      	bne.n	8002d04 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfa:	f023 0206 	bic.w	r2, r3, #6
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	645a      	str	r2, [r3, #68]	@ 0x44
 8002d02:	e002      	b.n	8002d0a <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d12:	4b37      	ldr	r3, [pc, #220]	@ (8002df0 <HAL_ADC_Start_DMA+0x1d4>)
 8002d14:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d1a:	4a36      	ldr	r2, [pc, #216]	@ (8002df4 <HAL_ADC_Start_DMA+0x1d8>)
 8002d1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d22:	4a35      	ldr	r2, [pc, #212]	@ (8002df8 <HAL_ADC_Start_DMA+0x1dc>)
 8002d24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d2a:	4a34      	ldr	r2, [pc, #208]	@ (8002dfc <HAL_ADC_Start_DMA+0x1e0>)
 8002d2c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002d36:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002d46:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d56:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	334c      	adds	r3, #76	@ 0x4c
 8002d62:	4619      	mov	r1, r3
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f000 fce4 	bl	8003734 <HAL_DMA_Start_IT>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 031f 	and.w	r3, r3, #31
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10f      	bne.n	8002d9c <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d129      	bne.n	8002dde <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002d98:	609a      	str	r2, [r3, #8]
 8002d9a:	e020      	b.n	8002dde <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a17      	ldr	r2, [pc, #92]	@ (8002e00 <HAL_ADC_Start_DMA+0x1e4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d11b      	bne.n	8002dde <HAL_ADC_Start_DMA+0x1c2>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d114      	bne.n	8002dde <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	e00b      	b.n	8002dde <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	f043 0210 	orr.w	r2, r3, #16
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd6:	f043 0201 	orr.w	r2, r3, #1
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002dde:	7ffb      	ldrb	r3, [r7, #31]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3720      	adds	r7, #32
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20000024 	.word	0x20000024
 8002dec:	431bde83 	.word	0x431bde83
 8002df0:	40012300 	.word	0x40012300
 8002df4:	0800329d 	.word	0x0800329d
 8002df8:	08003357 	.word	0x08003357
 8002dfc:	08003373 	.word	0x08003373
 8002e00:	40012000 	.word	0x40012000

08002e04 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x1c>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e113      	b.n	8003084 <HAL_ADC_ConfigChannel+0x244>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b09      	cmp	r3, #9
 8002e6a:	d925      	bls.n	8002eb8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68d9      	ldr	r1, [r3, #12]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	4413      	add	r3, r2
 8002e80:	3b1e      	subs	r3, #30
 8002e82:	2207      	movs	r2, #7
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43da      	mvns	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	400a      	ands	r2, r1
 8002e90:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68d9      	ldr	r1, [r3, #12]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4403      	add	r3, r0
 8002eaa:	3b1e      	subs	r3, #30
 8002eac:	409a      	lsls	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	60da      	str	r2, [r3, #12]
 8002eb6:	e022      	b.n	8002efe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6919      	ldr	r1, [r3, #16]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4413      	add	r3, r2
 8002ecc:	2207      	movs	r2, #7
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43da      	mvns	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	400a      	ands	r2, r1
 8002eda:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6919      	ldr	r1, [r3, #16]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	4618      	mov	r0, r3
 8002eee:	4603      	mov	r3, r0
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	4403      	add	r3, r0
 8002ef4:	409a      	lsls	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b06      	cmp	r3, #6
 8002f04:	d824      	bhi.n	8002f50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	3b05      	subs	r3, #5
 8002f18:	221f      	movs	r2, #31
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43da      	mvns	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	400a      	ands	r2, r1
 8002f26:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	4618      	mov	r0, r3
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	3b05      	subs	r3, #5
 8002f42:	fa00 f203 	lsl.w	r2, r0, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f4e:	e04c      	b.n	8002fea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b0c      	cmp	r3, #12
 8002f56:	d824      	bhi.n	8002fa2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	3b23      	subs	r3, #35	@ 0x23
 8002f6a:	221f      	movs	r2, #31
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	43da      	mvns	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	400a      	ands	r2, r1
 8002f78:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	4618      	mov	r0, r3
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	3b23      	subs	r3, #35	@ 0x23
 8002f94:	fa00 f203 	lsl.w	r2, r0, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fa0:	e023      	b.n	8002fea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3b41      	subs	r3, #65	@ 0x41
 8002fb4:	221f      	movs	r2, #31
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	400a      	ands	r2, r1
 8002fc2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	3b41      	subs	r3, #65	@ 0x41
 8002fde:	fa00 f203 	lsl.w	r2, r0, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fea:	4b29      	ldr	r3, [pc, #164]	@ (8003090 <HAL_ADC_ConfigChannel+0x250>)
 8002fec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a28      	ldr	r2, [pc, #160]	@ (8003094 <HAL_ADC_ConfigChannel+0x254>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d10f      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x1d8>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b12      	cmp	r3, #18
 8002ffe:	d10b      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1d      	ldr	r2, [pc, #116]	@ (8003094 <HAL_ADC_ConfigChannel+0x254>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d12b      	bne.n	800307a <HAL_ADC_ConfigChannel+0x23a>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1c      	ldr	r2, [pc, #112]	@ (8003098 <HAL_ADC_ConfigChannel+0x258>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d003      	beq.n	8003034 <HAL_ADC_ConfigChannel+0x1f4>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b11      	cmp	r3, #17
 8003032:	d122      	bne.n	800307a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a11      	ldr	r2, [pc, #68]	@ (8003098 <HAL_ADC_ConfigChannel+0x258>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d111      	bne.n	800307a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003056:	4b11      	ldr	r3, [pc, #68]	@ (800309c <HAL_ADC_ConfigChannel+0x25c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a11      	ldr	r2, [pc, #68]	@ (80030a0 <HAL_ADC_ConfigChannel+0x260>)
 800305c:	fba2 2303 	umull	r2, r3, r2, r3
 8003060:	0c9a      	lsrs	r2, r3, #18
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800306c:	e002      	b.n	8003074 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	3b01      	subs	r3, #1
 8003072:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f9      	bne.n	800306e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	40012300 	.word	0x40012300
 8003094:	40012000 	.word	0x40012000
 8003098:	10000012 	.word	0x10000012
 800309c:	20000024 	.word	0x20000024
 80030a0:	431bde83 	.word	0x431bde83

080030a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030ac:	4b79      	ldr	r3, [pc, #484]	@ (8003294 <ADC_Init+0x1f0>)
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	431a      	orrs	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6859      	ldr	r1, [r3, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	021a      	lsls	r2, r3, #8
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80030fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6859      	ldr	r1, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800311e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6899      	ldr	r1, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003136:	4a58      	ldr	r2, [pc, #352]	@ (8003298 <ADC_Init+0x1f4>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d022      	beq.n	8003182 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800314a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6899      	ldr	r1, [r3, #8]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800316c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6899      	ldr	r1, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	e00f      	b.n	80031a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003190:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80031a0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0202 	bic.w	r2, r2, #2
 80031b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6899      	ldr	r1, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	7e1b      	ldrb	r3, [r3, #24]
 80031bc:	005a      	lsls	r2, r3, #1
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01b      	beq.n	8003208 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031de:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80031ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6859      	ldr	r1, [r3, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	3b01      	subs	r3, #1
 80031fc:	035a      	lsls	r2, r3, #13
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	e007      	b.n	8003218 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003216:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003226:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	3b01      	subs	r3, #1
 8003234:	051a      	lsls	r2, r3, #20
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800324c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6899      	ldr	r1, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800325a:	025a      	lsls	r2, r3, #9
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003272:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6899      	ldr	r1, [r3, #8]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	029a      	lsls	r2, r3, #10
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	609a      	str	r2, [r3, #8]
}
 8003288:	bf00      	nop
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	40012300 	.word	0x40012300
 8003298:	0f000001 	.word	0x0f000001

0800329c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ae:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d13c      	bne.n	8003330 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d12b      	bne.n	8003328 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d127      	bne.n	8003328 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032de:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d006      	beq.n	80032f4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d119      	bne.n	8003328 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0220 	bic.w	r2, r2, #32
 8003302:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003308:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003314:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d105      	bne.n	8003328 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003320:	f043 0201 	orr.w	r2, r3, #1
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f7fe f9c9 	bl	80016c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800332e:	e00e      	b.n	800334e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003334:	f003 0310 	and.w	r3, r3, #16
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f7ff fd75 	bl	8002e2c <HAL_ADC_ErrorCallback>
}
 8003342:	e004      	b.n	800334e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	4798      	blx	r3
}
 800334e:	bf00      	nop
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b084      	sub	sp, #16
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003362:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f7ff fd4d 	bl	8002e04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800336a:	bf00      	nop
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b084      	sub	sp, #16
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2240      	movs	r2, #64	@ 0x40
 8003384:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338a:	f043 0204 	orr.w	r2, r3, #4
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f7ff fd4a 	bl	8002e2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003398:	bf00      	nop
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033c4:	4b0c      	ldr	r3, [pc, #48]	@ (80033f8 <__NVIC_SetPriorityGrouping+0x44>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033d0:	4013      	ands	r3, r2
 80033d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033e6:	4a04      	ldr	r2, [pc, #16]	@ (80033f8 <__NVIC_SetPriorityGrouping+0x44>)
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	60d3      	str	r3, [r2, #12]
}
 80033ec:	bf00      	nop
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	e000ed00 	.word	0xe000ed00

080033fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003400:	4b04      	ldr	r3, [pc, #16]	@ (8003414 <__NVIC_GetPriorityGrouping+0x18>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	0a1b      	lsrs	r3, r3, #8
 8003406:	f003 0307 	and.w	r3, r3, #7
}
 800340a:	4618      	mov	r0, r3
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003426:	2b00      	cmp	r3, #0
 8003428:	db0b      	blt.n	8003442 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	f003 021f 	and.w	r2, r3, #31
 8003430:	4907      	ldr	r1, [pc, #28]	@ (8003450 <__NVIC_EnableIRQ+0x38>)
 8003432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	2001      	movs	r0, #1
 800343a:	fa00 f202 	lsl.w	r2, r0, r2
 800343e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	e000e100 	.word	0xe000e100

08003454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	4603      	mov	r3, r0
 800345c:	6039      	str	r1, [r7, #0]
 800345e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003464:	2b00      	cmp	r3, #0
 8003466:	db0a      	blt.n	800347e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	b2da      	uxtb	r2, r3
 800346c:	490c      	ldr	r1, [pc, #48]	@ (80034a0 <__NVIC_SetPriority+0x4c>)
 800346e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003472:	0112      	lsls	r2, r2, #4
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	440b      	add	r3, r1
 8003478:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800347c:	e00a      	b.n	8003494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	b2da      	uxtb	r2, r3
 8003482:	4908      	ldr	r1, [pc, #32]	@ (80034a4 <__NVIC_SetPriority+0x50>)
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	3b04      	subs	r3, #4
 800348c:	0112      	lsls	r2, r2, #4
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	440b      	add	r3, r1
 8003492:	761a      	strb	r2, [r3, #24]
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	e000e100 	.word	0xe000e100
 80034a4:	e000ed00 	.word	0xe000ed00

080034a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b089      	sub	sp, #36	@ 0x24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f1c3 0307 	rsb	r3, r3, #7
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	bf28      	it	cs
 80034c6:	2304      	movcs	r3, #4
 80034c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	3304      	adds	r3, #4
 80034ce:	2b06      	cmp	r3, #6
 80034d0:	d902      	bls.n	80034d8 <NVIC_EncodePriority+0x30>
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	3b03      	subs	r3, #3
 80034d6:	e000      	b.n	80034da <NVIC_EncodePriority+0x32>
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034dc:	f04f 32ff 	mov.w	r2, #4294967295
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	43da      	mvns	r2, r3
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	401a      	ands	r2, r3
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034f0:	f04f 31ff 	mov.w	r1, #4294967295
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	fa01 f303 	lsl.w	r3, r1, r3
 80034fa:	43d9      	mvns	r1, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003500:	4313      	orrs	r3, r2
         );
}
 8003502:	4618      	mov	r0, r3
 8003504:	3724      	adds	r7, #36	@ 0x24
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
	...

08003510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3b01      	subs	r3, #1
 800351c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003520:	d301      	bcc.n	8003526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003522:	2301      	movs	r3, #1
 8003524:	e00f      	b.n	8003546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003526:	4a0a      	ldr	r2, [pc, #40]	@ (8003550 <SysTick_Config+0x40>)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3b01      	subs	r3, #1
 800352c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800352e:	210f      	movs	r1, #15
 8003530:	f04f 30ff 	mov.w	r0, #4294967295
 8003534:	f7ff ff8e 	bl	8003454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003538:	4b05      	ldr	r3, [pc, #20]	@ (8003550 <SysTick_Config+0x40>)
 800353a:	2200      	movs	r2, #0
 800353c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800353e:	4b04      	ldr	r3, [pc, #16]	@ (8003550 <SysTick_Config+0x40>)
 8003540:	2207      	movs	r2, #7
 8003542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	e000e010 	.word	0xe000e010

08003554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff ff29 	bl	80033b4 <__NVIC_SetPriorityGrouping>
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800356a:	b580      	push	{r7, lr}
 800356c:	b086      	sub	sp, #24
 800356e:	af00      	add	r7, sp, #0
 8003570:	4603      	mov	r3, r0
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	607a      	str	r2, [r7, #4]
 8003576:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800357c:	f7ff ff3e 	bl	80033fc <__NVIC_GetPriorityGrouping>
 8003580:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	68b9      	ldr	r1, [r7, #8]
 8003586:	6978      	ldr	r0, [r7, #20]
 8003588:	f7ff ff8e 	bl	80034a8 <NVIC_EncodePriority>
 800358c:	4602      	mov	r2, r0
 800358e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003592:	4611      	mov	r1, r2
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff ff5d 	bl	8003454 <__NVIC_SetPriority>
}
 800359a:	bf00      	nop
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	4603      	mov	r3, r0
 80035aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff ff31 	bl	8003418 <__NVIC_EnableIRQ>
}
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff ffa2 	bl	8003510 <SysTick_Config>
 80035cc:	4603      	mov	r3, r0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035e4:	f7ff f996 	bl	8002914 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e099      	b.n	8003728 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0201 	bic.w	r2, r2, #1
 8003612:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003614:	e00f      	b.n	8003636 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003616:	f7ff f97d 	bl	8002914 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b05      	cmp	r3, #5
 8003622:	d908      	bls.n	8003636 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2220      	movs	r2, #32
 8003628:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2203      	movs	r2, #3
 800362e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e078      	b.n	8003728 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1e8      	bne.n	8003616 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	4b38      	ldr	r3, [pc, #224]	@ (8003730 <HAL_DMA_Init+0x158>)
 8003650:	4013      	ands	r3, r2
 8003652:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003662:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800366e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800367a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	4313      	orrs	r3, r2
 8003686:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368c:	2b04      	cmp	r3, #4
 800368e:	d107      	bne.n	80036a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003698:	4313      	orrs	r3, r2
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f023 0307 	bic.w	r3, r3, #7
 80036b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	4313      	orrs	r3, r2
 80036c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d117      	bne.n	80036fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00e      	beq.n	80036fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fb01 	bl	8003ce4 <DMA_CheckFifoParam>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2240      	movs	r2, #64	@ 0x40
 80036ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80036f6:	2301      	movs	r3, #1
 80036f8:	e016      	b.n	8003728 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fab8 	bl	8003c78 <DMA_CalcBaseAndBitshift>
 8003708:	4603      	mov	r3, r0
 800370a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003710:	223f      	movs	r2, #63	@ 0x3f
 8003712:	409a      	lsls	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	f010803f 	.word	0xf010803f

08003734 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_DMA_Start_IT+0x26>
 8003756:	2302      	movs	r3, #2
 8003758:	e040      	b.n	80037dc <HAL_DMA_Start_IT+0xa8>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b01      	cmp	r3, #1
 800376c:	d12f      	bne.n	80037ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2202      	movs	r2, #2
 8003772:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	68b9      	ldr	r1, [r7, #8]
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 fa4a 	bl	8003c1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800378c:	223f      	movs	r2, #63	@ 0x3f
 800378e:	409a      	lsls	r2, r3
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0216 	orr.w	r2, r2, #22
 80037a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d007      	beq.n	80037bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0208 	orr.w	r2, r2, #8
 80037ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	e005      	b.n	80037da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037d6:	2302      	movs	r3, #2
 80037d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037da:	7dfb      	ldrb	r3, [r7, #23]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037f2:	f7ff f88f 	bl	8002914 <HAL_GetTick>
 80037f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d008      	beq.n	8003816 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2280      	movs	r2, #128	@ 0x80
 8003808:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e052      	b.n	80038bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0216 	bic.w	r2, r2, #22
 8003824:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695a      	ldr	r2, [r3, #20]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003834:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383a:	2b00      	cmp	r3, #0
 800383c:	d103      	bne.n	8003846 <HAL_DMA_Abort+0x62>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003842:	2b00      	cmp	r3, #0
 8003844:	d007      	beq.n	8003856 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0208 	bic.w	r2, r2, #8
 8003854:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0201 	bic.w	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003866:	e013      	b.n	8003890 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003868:	f7ff f854 	bl	8002914 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b05      	cmp	r3, #5
 8003874:	d90c      	bls.n	8003890 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2220      	movs	r2, #32
 800387a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2203      	movs	r2, #3
 8003880:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e015      	b.n	80038bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1e4      	bne.n	8003868 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a2:	223f      	movs	r2, #63	@ 0x3f
 80038a4:	409a      	lsls	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d004      	beq.n	80038e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2280      	movs	r2, #128	@ 0x80
 80038dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e00c      	b.n	80038fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2205      	movs	r2, #5
 80038e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0201 	bic.w	r2, r2, #1
 80038f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003914:	4b8e      	ldr	r3, [pc, #568]	@ (8003b50 <HAL_DMA_IRQHandler+0x248>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a8e      	ldr	r2, [pc, #568]	@ (8003b54 <HAL_DMA_IRQHandler+0x24c>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	0a9b      	lsrs	r3, r3, #10
 8003920:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003926:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003932:	2208      	movs	r2, #8
 8003934:	409a      	lsls	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4013      	ands	r3, r2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d01a      	beq.n	8003974 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d013      	beq.n	8003974 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0204 	bic.w	r2, r2, #4
 800395a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003960:	2208      	movs	r2, #8
 8003962:	409a      	lsls	r2, r3
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800396c:	f043 0201 	orr.w	r2, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003978:	2201      	movs	r2, #1
 800397a:	409a      	lsls	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4013      	ands	r3, r2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d012      	beq.n	80039aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00b      	beq.n	80039aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003996:	2201      	movs	r2, #1
 8003998:	409a      	lsls	r2, r3
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a2:	f043 0202 	orr.w	r2, r3, #2
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ae:	2204      	movs	r2, #4
 80039b0:	409a      	lsls	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4013      	ands	r3, r2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d012      	beq.n	80039e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00b      	beq.n	80039e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039cc:	2204      	movs	r2, #4
 80039ce:	409a      	lsls	r2, r3
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d8:	f043 0204 	orr.w	r2, r3, #4
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e4:	2210      	movs	r2, #16
 80039e6:	409a      	lsls	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4013      	ands	r3, r2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d043      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d03c      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a02:	2210      	movs	r2, #16
 8003a04:	409a      	lsls	r2, r3
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d018      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d108      	bne.n	8003a38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d024      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	4798      	blx	r3
 8003a36:	e01f      	b.n	8003a78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01b      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	4798      	blx	r3
 8003a48:	e016      	b.n	8003a78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d107      	bne.n	8003a68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0208 	bic.w	r2, r2, #8
 8003a66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4013      	ands	r3, r2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 808f 	beq.w	8003ba8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 8087 	beq.w	8003ba8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	409a      	lsls	r2, r3
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b05      	cmp	r3, #5
 8003ab0:	d136      	bne.n	8003b20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0216 	bic.w	r2, r2, #22
 8003ac0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695a      	ldr	r2, [r3, #20]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ad0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d103      	bne.n	8003ae2 <HAL_DMA_IRQHandler+0x1da>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d007      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0208 	bic.w	r2, r2, #8
 8003af0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af6:	223f      	movs	r2, #63	@ 0x3f
 8003af8:	409a      	lsls	r2, r3
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d07e      	beq.n	8003c14 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	4798      	blx	r3
        }
        return;
 8003b1e:	e079      	b.n	8003c14 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d01d      	beq.n	8003b6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10d      	bne.n	8003b58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d031      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	4798      	blx	r3
 8003b4c:	e02c      	b.n	8003ba8 <HAL_DMA_IRQHandler+0x2a0>
 8003b4e:	bf00      	nop
 8003b50:	20000024 	.word	0x20000024
 8003b54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d023      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	4798      	blx	r3
 8003b68:	e01e      	b.n	8003ba8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10f      	bne.n	8003b98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0210 	bic.w	r2, r2, #16
 8003b86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d032      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d022      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2205      	movs	r2, #5
 8003bc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0201 	bic.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d307      	bcc.n	8003bf0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f2      	bne.n	8003bd4 <HAL_DMA_IRQHandler+0x2cc>
 8003bee:	e000      	b.n	8003bf2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003bf0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d005      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	4798      	blx	r3
 8003c12:	e000      	b.n	8003c16 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c14:	bf00      	nop
    }
  }
}
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003c38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b40      	cmp	r3, #64	@ 0x40
 8003c48:	d108      	bne.n	8003c5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c5a:	e007      	b.n	8003c6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	60da      	str	r2, [r3, #12]
}
 8003c6c:	bf00      	nop
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	3b10      	subs	r3, #16
 8003c88:	4a14      	ldr	r2, [pc, #80]	@ (8003cdc <DMA_CalcBaseAndBitshift+0x64>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	091b      	lsrs	r3, r3, #4
 8003c90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c92:	4a13      	ldr	r2, [pc, #76]	@ (8003ce0 <DMA_CalcBaseAndBitshift+0x68>)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4413      	add	r3, r2
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b03      	cmp	r3, #3
 8003ca4:	d909      	bls.n	8003cba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003cae:	f023 0303 	bic.w	r3, r3, #3
 8003cb2:	1d1a      	adds	r2, r3, #4
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	659a      	str	r2, [r3, #88]	@ 0x58
 8003cb8:	e007      	b.n	8003cca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003cc2:	f023 0303 	bic.w	r3, r3, #3
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	aaaaaaab 	.word	0xaaaaaaab
 8003ce0:	0800b4e8 	.word	0x0800b4e8

08003ce4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cec:	2300      	movs	r3, #0
 8003cee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d11f      	bne.n	8003d3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b03      	cmp	r3, #3
 8003d02:	d856      	bhi.n	8003db2 <DMA_CheckFifoParam+0xce>
 8003d04:	a201      	add	r2, pc, #4	@ (adr r2, 8003d0c <DMA_CheckFifoParam+0x28>)
 8003d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0a:	bf00      	nop
 8003d0c:	08003d1d 	.word	0x08003d1d
 8003d10:	08003d2f 	.word	0x08003d2f
 8003d14:	08003d1d 	.word	0x08003d1d
 8003d18:	08003db3 	.word	0x08003db3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d046      	beq.n	8003db6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d2c:	e043      	b.n	8003db6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d32:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d36:	d140      	bne.n	8003dba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d3c:	e03d      	b.n	8003dba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d46:	d121      	bne.n	8003d8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b03      	cmp	r3, #3
 8003d4c:	d837      	bhi.n	8003dbe <DMA_CheckFifoParam+0xda>
 8003d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d54 <DMA_CheckFifoParam+0x70>)
 8003d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d54:	08003d65 	.word	0x08003d65
 8003d58:	08003d6b 	.word	0x08003d6b
 8003d5c:	08003d65 	.word	0x08003d65
 8003d60:	08003d7d 	.word	0x08003d7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	73fb      	strb	r3, [r7, #15]
      break;
 8003d68:	e030      	b.n	8003dcc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d025      	beq.n	8003dc2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d7a:	e022      	b.n	8003dc2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d80:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d84:	d11f      	bne.n	8003dc6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d8a:	e01c      	b.n	8003dc6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d903      	bls.n	8003d9a <DMA_CheckFifoParam+0xb6>
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d003      	beq.n	8003da0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d98:	e018      	b.n	8003dcc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8003d9e:	e015      	b.n	8003dcc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00e      	beq.n	8003dca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	73fb      	strb	r3, [r7, #15]
      break;
 8003db0:	e00b      	b.n	8003dca <DMA_CheckFifoParam+0xe6>
      break;
 8003db2:	bf00      	nop
 8003db4:	e00a      	b.n	8003dcc <DMA_CheckFifoParam+0xe8>
      break;
 8003db6:	bf00      	nop
 8003db8:	e008      	b.n	8003dcc <DMA_CheckFifoParam+0xe8>
      break;
 8003dba:	bf00      	nop
 8003dbc:	e006      	b.n	8003dcc <DMA_CheckFifoParam+0xe8>
      break;
 8003dbe:	bf00      	nop
 8003dc0:	e004      	b.n	8003dcc <DMA_CheckFifoParam+0xe8>
      break;
 8003dc2:	bf00      	nop
 8003dc4:	e002      	b.n	8003dcc <DMA_CheckFifoParam+0xe8>
      break;   
 8003dc6:	bf00      	nop
 8003dc8:	e000      	b.n	8003dcc <DMA_CheckFifoParam+0xe8>
      break;
 8003dca:	bf00      	nop
    }
  } 
  
  return status; 
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop

08003ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b089      	sub	sp, #36	@ 0x24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003df2:	2300      	movs	r3, #0
 8003df4:	61fb      	str	r3, [r7, #28]
 8003df6:	e159      	b.n	80040ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003df8:	2201      	movs	r2, #1
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	f040 8148 	bne.w	80040a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d005      	beq.n	8003e2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d130      	bne.n	8003e90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	2203      	movs	r2, #3
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	4013      	ands	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e64:	2201      	movs	r2, #1
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4013      	ands	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	091b      	lsrs	r3, r3, #4
 8003e7a:	f003 0201 	and.w	r2, r3, #1
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 0303 	and.w	r3, r3, #3
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d017      	beq.n	8003ecc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	2203      	movs	r2, #3
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	43db      	mvns	r3, r3
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d123      	bne.n	8003f20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	08da      	lsrs	r2, r3, #3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3208      	adds	r2, #8
 8003ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	220f      	movs	r2, #15
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	691a      	ldr	r2, [r3, #16]
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	08da      	lsrs	r2, r3, #3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3208      	adds	r2, #8
 8003f1a:	69b9      	ldr	r1, [r7, #24]
 8003f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	2203      	movs	r2, #3
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4013      	ands	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 0203 	and.w	r2, r3, #3
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80a2 	beq.w	80040a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f62:	2300      	movs	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	4b57      	ldr	r3, [pc, #348]	@ (80040c4 <HAL_GPIO_Init+0x2e8>)
 8003f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6a:	4a56      	ldr	r2, [pc, #344]	@ (80040c4 <HAL_GPIO_Init+0x2e8>)
 8003f6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f70:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f72:	4b54      	ldr	r3, [pc, #336]	@ (80040c4 <HAL_GPIO_Init+0x2e8>)
 8003f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f7e:	4a52      	ldr	r2, [pc, #328]	@ (80040c8 <HAL_GPIO_Init+0x2ec>)
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	089b      	lsrs	r3, r3, #2
 8003f84:	3302      	adds	r3, #2
 8003f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	220f      	movs	r2, #15
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a49      	ldr	r2, [pc, #292]	@ (80040cc <HAL_GPIO_Init+0x2f0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d019      	beq.n	8003fde <HAL_GPIO_Init+0x202>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a48      	ldr	r2, [pc, #288]	@ (80040d0 <HAL_GPIO_Init+0x2f4>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d013      	beq.n	8003fda <HAL_GPIO_Init+0x1fe>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a47      	ldr	r2, [pc, #284]	@ (80040d4 <HAL_GPIO_Init+0x2f8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d00d      	beq.n	8003fd6 <HAL_GPIO_Init+0x1fa>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a46      	ldr	r2, [pc, #280]	@ (80040d8 <HAL_GPIO_Init+0x2fc>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d007      	beq.n	8003fd2 <HAL_GPIO_Init+0x1f6>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a45      	ldr	r2, [pc, #276]	@ (80040dc <HAL_GPIO_Init+0x300>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d101      	bne.n	8003fce <HAL_GPIO_Init+0x1f2>
 8003fca:	2304      	movs	r3, #4
 8003fcc:	e008      	b.n	8003fe0 <HAL_GPIO_Init+0x204>
 8003fce:	2307      	movs	r3, #7
 8003fd0:	e006      	b.n	8003fe0 <HAL_GPIO_Init+0x204>
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e004      	b.n	8003fe0 <HAL_GPIO_Init+0x204>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	e002      	b.n	8003fe0 <HAL_GPIO_Init+0x204>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <HAL_GPIO_Init+0x204>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	69fa      	ldr	r2, [r7, #28]
 8003fe2:	f002 0203 	and.w	r2, r2, #3
 8003fe6:	0092      	lsls	r2, r2, #2
 8003fe8:	4093      	lsls	r3, r2
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ff0:	4935      	ldr	r1, [pc, #212]	@ (80040c8 <HAL_GPIO_Init+0x2ec>)
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	089b      	lsrs	r3, r3, #2
 8003ff6:	3302      	adds	r3, #2
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ffe:	4b38      	ldr	r3, [pc, #224]	@ (80040e0 <HAL_GPIO_Init+0x304>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	43db      	mvns	r3, r3
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	4013      	ands	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004022:	4a2f      	ldr	r2, [pc, #188]	@ (80040e0 <HAL_GPIO_Init+0x304>)
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004028:	4b2d      	ldr	r3, [pc, #180]	@ (80040e0 <HAL_GPIO_Init+0x304>)
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	43db      	mvns	r3, r3
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4013      	ands	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800404c:	4a24      	ldr	r2, [pc, #144]	@ (80040e0 <HAL_GPIO_Init+0x304>)
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004052:	4b23      	ldr	r3, [pc, #140]	@ (80040e0 <HAL_GPIO_Init+0x304>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	43db      	mvns	r3, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4013      	ands	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004076:	4a1a      	ldr	r2, [pc, #104]	@ (80040e0 <HAL_GPIO_Init+0x304>)
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800407c:	4b18      	ldr	r3, [pc, #96]	@ (80040e0 <HAL_GPIO_Init+0x304>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	43db      	mvns	r3, r3
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4013      	ands	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040a0:	4a0f      	ldr	r2, [pc, #60]	@ (80040e0 <HAL_GPIO_Init+0x304>)
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	3301      	adds	r3, #1
 80040aa:	61fb      	str	r3, [r7, #28]
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	2b0f      	cmp	r3, #15
 80040b0:	f67f aea2 	bls.w	8003df8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop
 80040b8:	3724      	adds	r7, #36	@ 0x24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	40023800 	.word	0x40023800
 80040c8:	40013800 	.word	0x40013800
 80040cc:	40020000 	.word	0x40020000
 80040d0:	40020400 	.word	0x40020400
 80040d4:	40020800 	.word	0x40020800
 80040d8:	40020c00 	.word	0x40020c00
 80040dc:	40021000 	.word	0x40021000
 80040e0:	40013c00 	.word	0x40013c00

080040e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	460b      	mov	r3, r1
 80040ee:	807b      	strh	r3, [r7, #2]
 80040f0:	4613      	mov	r3, r2
 80040f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040f4:	787b      	ldrb	r3, [r7, #1]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040fa:	887a      	ldrh	r2, [r7, #2]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004100:	e003      	b.n	800410a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004102:	887b      	ldrh	r3, [r7, #2]
 8004104:	041a      	lsls	r2, r3, #16
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	619a      	str	r2, [r3, #24]
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
	...

08004118 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e267      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d075      	beq.n	8004222 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004136:	4b88      	ldr	r3, [pc, #544]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
 800413e:	2b04      	cmp	r3, #4
 8004140:	d00c      	beq.n	800415c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004142:	4b85      	ldr	r3, [pc, #532]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800414a:	2b08      	cmp	r3, #8
 800414c:	d112      	bne.n	8004174 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800414e:	4b82      	ldr	r3, [pc, #520]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004156:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800415a:	d10b      	bne.n	8004174 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800415c:	4b7e      	ldr	r3, [pc, #504]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d05b      	beq.n	8004220 <HAL_RCC_OscConfig+0x108>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d157      	bne.n	8004220 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e242      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800417c:	d106      	bne.n	800418c <HAL_RCC_OscConfig+0x74>
 800417e:	4b76      	ldr	r3, [pc, #472]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a75      	ldr	r2, [pc, #468]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 8004184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	e01d      	b.n	80041c8 <HAL_RCC_OscConfig+0xb0>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004194:	d10c      	bne.n	80041b0 <HAL_RCC_OscConfig+0x98>
 8004196:	4b70      	ldr	r3, [pc, #448]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a6f      	ldr	r2, [pc, #444]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 800419c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a6c      	ldr	r2, [pc, #432]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 80041a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	e00b      	b.n	80041c8 <HAL_RCC_OscConfig+0xb0>
 80041b0:	4b69      	ldr	r3, [pc, #420]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a68      	ldr	r2, [pc, #416]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 80041b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	4b66      	ldr	r3, [pc, #408]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a65      	ldr	r2, [pc, #404]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 80041c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d013      	beq.n	80041f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d0:	f7fe fba0 	bl	8002914 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041d8:	f7fe fb9c 	bl	8002914 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b64      	cmp	r3, #100	@ 0x64
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e207      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ea:	4b5b      	ldr	r3, [pc, #364]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCC_OscConfig+0xc0>
 80041f6:	e014      	b.n	8004222 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f8:	f7fe fb8c 	bl	8002914 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004200:	f7fe fb88 	bl	8002914 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b64      	cmp	r3, #100	@ 0x64
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e1f3      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004212:	4b51      	ldr	r3, [pc, #324]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f0      	bne.n	8004200 <HAL_RCC_OscConfig+0xe8>
 800421e:	e000      	b.n	8004222 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d063      	beq.n	80042f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800422e:	4b4a      	ldr	r3, [pc, #296]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 030c 	and.w	r3, r3, #12
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00b      	beq.n	8004252 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800423a:	4b47      	ldr	r3, [pc, #284]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004242:	2b08      	cmp	r3, #8
 8004244:	d11c      	bne.n	8004280 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004246:	4b44      	ldr	r3, [pc, #272]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d116      	bne.n	8004280 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004252:	4b41      	ldr	r3, [pc, #260]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <HAL_RCC_OscConfig+0x152>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d001      	beq.n	800426a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e1c7      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426a:	4b3b      	ldr	r3, [pc, #236]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	4937      	ldr	r1, [pc, #220]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 800427a:	4313      	orrs	r3, r2
 800427c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800427e:	e03a      	b.n	80042f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d020      	beq.n	80042ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004288:	4b34      	ldr	r3, [pc, #208]	@ (800435c <HAL_RCC_OscConfig+0x244>)
 800428a:	2201      	movs	r2, #1
 800428c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428e:	f7fe fb41 	bl	8002914 <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004296:	f7fe fb3d 	bl	8002914 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e1a8      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0f0      	beq.n	8004296 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b4:	4b28      	ldr	r3, [pc, #160]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	4925      	ldr	r1, [pc, #148]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	600b      	str	r3, [r1, #0]
 80042c8:	e015      	b.n	80042f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ca:	4b24      	ldr	r3, [pc, #144]	@ (800435c <HAL_RCC_OscConfig+0x244>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d0:	f7fe fb20 	bl	8002914 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042d8:	f7fe fb1c 	bl	8002914 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e187      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f0      	bne.n	80042d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d036      	beq.n	8004370 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d016      	beq.n	8004338 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800430a:	4b15      	ldr	r3, [pc, #84]	@ (8004360 <HAL_RCC_OscConfig+0x248>)
 800430c:	2201      	movs	r2, #1
 800430e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004310:	f7fe fb00 	bl	8002914 <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004318:	f7fe fafc 	bl	8002914 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e167      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800432a:	4b0b      	ldr	r3, [pc, #44]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 800432c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0f0      	beq.n	8004318 <HAL_RCC_OscConfig+0x200>
 8004336:	e01b      	b.n	8004370 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004338:	4b09      	ldr	r3, [pc, #36]	@ (8004360 <HAL_RCC_OscConfig+0x248>)
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800433e:	f7fe fae9 	bl	8002914 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004344:	e00e      	b.n	8004364 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004346:	f7fe fae5 	bl	8002914 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d907      	bls.n	8004364 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e150      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
 8004358:	40023800 	.word	0x40023800
 800435c:	42470000 	.word	0x42470000
 8004360:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004364:	4b88      	ldr	r3, [pc, #544]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 8004366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1ea      	bne.n	8004346 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 8097 	beq.w	80044ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800437e:	2300      	movs	r3, #0
 8004380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004382:	4b81      	ldr	r3, [pc, #516]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10f      	bne.n	80043ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800438e:	2300      	movs	r3, #0
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	4b7d      	ldr	r3, [pc, #500]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 8004394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004396:	4a7c      	ldr	r2, [pc, #496]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 8004398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800439c:	6413      	str	r3, [r2, #64]	@ 0x40
 800439e:	4b7a      	ldr	r3, [pc, #488]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 80043a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043a6:	60bb      	str	r3, [r7, #8]
 80043a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043aa:	2301      	movs	r3, #1
 80043ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ae:	4b77      	ldr	r3, [pc, #476]	@ (800458c <HAL_RCC_OscConfig+0x474>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d118      	bne.n	80043ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ba:	4b74      	ldr	r3, [pc, #464]	@ (800458c <HAL_RCC_OscConfig+0x474>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a73      	ldr	r2, [pc, #460]	@ (800458c <HAL_RCC_OscConfig+0x474>)
 80043c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043c6:	f7fe faa5 	bl	8002914 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ce:	f7fe faa1 	bl	8002914 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e10c      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e0:	4b6a      	ldr	r3, [pc, #424]	@ (800458c <HAL_RCC_OscConfig+0x474>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d106      	bne.n	8004402 <HAL_RCC_OscConfig+0x2ea>
 80043f4:	4b64      	ldr	r3, [pc, #400]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 80043f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f8:	4a63      	ldr	r2, [pc, #396]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004400:	e01c      	b.n	800443c <HAL_RCC_OscConfig+0x324>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2b05      	cmp	r3, #5
 8004408:	d10c      	bne.n	8004424 <HAL_RCC_OscConfig+0x30c>
 800440a:	4b5f      	ldr	r3, [pc, #380]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440e:	4a5e      	ldr	r2, [pc, #376]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 8004410:	f043 0304 	orr.w	r3, r3, #4
 8004414:	6713      	str	r3, [r2, #112]	@ 0x70
 8004416:	4b5c      	ldr	r3, [pc, #368]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441a:	4a5b      	ldr	r2, [pc, #364]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 800441c:	f043 0301 	orr.w	r3, r3, #1
 8004420:	6713      	str	r3, [r2, #112]	@ 0x70
 8004422:	e00b      	b.n	800443c <HAL_RCC_OscConfig+0x324>
 8004424:	4b58      	ldr	r3, [pc, #352]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 8004426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004428:	4a57      	ldr	r2, [pc, #348]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 800442a:	f023 0301 	bic.w	r3, r3, #1
 800442e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004430:	4b55      	ldr	r3, [pc, #340]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 8004432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004434:	4a54      	ldr	r2, [pc, #336]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 8004436:	f023 0304 	bic.w	r3, r3, #4
 800443a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d015      	beq.n	8004470 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004444:	f7fe fa66 	bl	8002914 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800444a:	e00a      	b.n	8004462 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800444c:	f7fe fa62 	bl	8002914 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800445a:	4293      	cmp	r3, r2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e0cb      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004462:	4b49      	ldr	r3, [pc, #292]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 8004464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0ee      	beq.n	800444c <HAL_RCC_OscConfig+0x334>
 800446e:	e014      	b.n	800449a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004470:	f7fe fa50 	bl	8002914 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004476:	e00a      	b.n	800448e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004478:	f7fe fa4c 	bl	8002914 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004486:	4293      	cmp	r3, r2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e0b5      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800448e:	4b3e      	ldr	r3, [pc, #248]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1ee      	bne.n	8004478 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800449a:	7dfb      	ldrb	r3, [r7, #23]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d105      	bne.n	80044ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a0:	4b39      	ldr	r3, [pc, #228]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 80044a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a4:	4a38      	ldr	r2, [pc, #224]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 80044a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 80a1 	beq.w	80045f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044b6:	4b34      	ldr	r3, [pc, #208]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d05c      	beq.n	800457c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d141      	bne.n	800454e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ca:	4b31      	ldr	r3, [pc, #196]	@ (8004590 <HAL_RCC_OscConfig+0x478>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d0:	f7fe fa20 	bl	8002914 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d8:	f7fe fa1c 	bl	8002914 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e087      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ea:	4b27      	ldr	r3, [pc, #156]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69da      	ldr	r2, [r3, #28]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004504:	019b      	lsls	r3, r3, #6
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450c:	085b      	lsrs	r3, r3, #1
 800450e:	3b01      	subs	r3, #1
 8004510:	041b      	lsls	r3, r3, #16
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004518:	061b      	lsls	r3, r3, #24
 800451a:	491b      	ldr	r1, [pc, #108]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 800451c:	4313      	orrs	r3, r2
 800451e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004520:	4b1b      	ldr	r3, [pc, #108]	@ (8004590 <HAL_RCC_OscConfig+0x478>)
 8004522:	2201      	movs	r2, #1
 8004524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004526:	f7fe f9f5 	bl	8002914 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800452e:	f7fe f9f1 	bl	8002914 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e05c      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004540:	4b11      	ldr	r3, [pc, #68]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0f0      	beq.n	800452e <HAL_RCC_OscConfig+0x416>
 800454c:	e054      	b.n	80045f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800454e:	4b10      	ldr	r3, [pc, #64]	@ (8004590 <HAL_RCC_OscConfig+0x478>)
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004554:	f7fe f9de 	bl	8002914 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800455c:	f7fe f9da 	bl	8002914 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e045      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800456e:	4b06      	ldr	r3, [pc, #24]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0x444>
 800457a:	e03d      	b.n	80045f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d107      	bne.n	8004594 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e038      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
 8004588:	40023800 	.word	0x40023800
 800458c:	40007000 	.word	0x40007000
 8004590:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004594:	4b1b      	ldr	r3, [pc, #108]	@ (8004604 <HAL_RCC_OscConfig+0x4ec>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d028      	beq.n	80045f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d121      	bne.n	80045f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d11a      	bne.n	80045f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045c4:	4013      	ands	r3, r2
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d111      	bne.n	80045f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045da:	085b      	lsrs	r3, r3, #1
 80045dc:	3b01      	subs	r3, #1
 80045de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d107      	bne.n	80045f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d001      	beq.n	80045f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e000      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40023800 	.word	0x40023800

08004608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0cc      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800461c:	4b68      	ldr	r3, [pc, #416]	@ (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d90c      	bls.n	8004644 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462a:	4b65      	ldr	r3, [pc, #404]	@ (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004632:	4b63      	ldr	r3, [pc, #396]	@ (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d001      	beq.n	8004644 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e0b8      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d020      	beq.n	8004692 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800465c:	4b59      	ldr	r3, [pc, #356]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	4a58      	ldr	r2, [pc, #352]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004666:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004674:	4b53      	ldr	r3, [pc, #332]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	4a52      	ldr	r2, [pc, #328]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800467a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800467e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004680:	4b50      	ldr	r3, [pc, #320]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	494d      	ldr	r1, [pc, #308]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	4313      	orrs	r3, r2
 8004690:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d044      	beq.n	8004728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d107      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a6:	4b47      	ldr	r3, [pc, #284]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d119      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e07f      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d003      	beq.n	80046c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d107      	bne.n	80046d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c6:	4b3f      	ldr	r3, [pc, #252]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e06f      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d6:	4b3b      	ldr	r3, [pc, #236]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e067      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046e6:	4b37      	ldr	r3, [pc, #220]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f023 0203 	bic.w	r2, r3, #3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	4934      	ldr	r1, [pc, #208]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046f8:	f7fe f90c 	bl	8002914 <HAL_GetTick>
 80046fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046fe:	e00a      	b.n	8004716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004700:	f7fe f908 	bl	8002914 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800470e:	4293      	cmp	r3, r2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e04f      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004716:	4b2b      	ldr	r3, [pc, #172]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 020c 	and.w	r2, r3, #12
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	429a      	cmp	r2, r3
 8004726:	d1eb      	bne.n	8004700 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004728:	4b25      	ldr	r3, [pc, #148]	@ (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d20c      	bcs.n	8004750 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004736:	4b22      	ldr	r3, [pc, #136]	@ (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800473e:	4b20      	ldr	r3, [pc, #128]	@ (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d001      	beq.n	8004750 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e032      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d008      	beq.n	800476e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800475c:	4b19      	ldr	r3, [pc, #100]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	4916      	ldr	r1, [pc, #88]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	4313      	orrs	r3, r2
 800476c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b00      	cmp	r3, #0
 8004778:	d009      	beq.n	800478e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800477a:	4b12      	ldr	r3, [pc, #72]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	490e      	ldr	r1, [pc, #56]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800478a:	4313      	orrs	r3, r2
 800478c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800478e:	f000 f821 	bl	80047d4 <HAL_RCC_GetSysClockFreq>
 8004792:	4602      	mov	r2, r0
 8004794:	4b0b      	ldr	r3, [pc, #44]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	091b      	lsrs	r3, r3, #4
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	490a      	ldr	r1, [pc, #40]	@ (80047c8 <HAL_RCC_ClockConfig+0x1c0>)
 80047a0:	5ccb      	ldrb	r3, [r1, r3]
 80047a2:	fa22 f303 	lsr.w	r3, r2, r3
 80047a6:	4a09      	ldr	r2, [pc, #36]	@ (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 80047a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80047aa:	4b09      	ldr	r3, [pc, #36]	@ (80047d0 <HAL_RCC_ClockConfig+0x1c8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fe f86c 	bl	800288c <HAL_InitTick>

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40023c00 	.word	0x40023c00
 80047c4:	40023800 	.word	0x40023800
 80047c8:	0800b4d0 	.word	0x0800b4d0
 80047cc:	20000024 	.word	0x20000024
 80047d0:	20000028 	.word	0x20000028

080047d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d8:	b090      	sub	sp, #64	@ 0x40
 80047da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047ec:	4b59      	ldr	r3, [pc, #356]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x180>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 030c 	and.w	r3, r3, #12
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d00d      	beq.n	8004814 <HAL_RCC_GetSysClockFreq+0x40>
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	f200 80a1 	bhi.w	8004940 <HAL_RCC_GetSysClockFreq+0x16c>
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <HAL_RCC_GetSysClockFreq+0x34>
 8004802:	2b04      	cmp	r3, #4
 8004804:	d003      	beq.n	800480e <HAL_RCC_GetSysClockFreq+0x3a>
 8004806:	e09b      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004808:	4b53      	ldr	r3, [pc, #332]	@ (8004958 <HAL_RCC_GetSysClockFreq+0x184>)
 800480a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800480c:	e09b      	b.n	8004946 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800480e:	4b53      	ldr	r3, [pc, #332]	@ (800495c <HAL_RCC_GetSysClockFreq+0x188>)
 8004810:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004812:	e098      	b.n	8004946 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004814:	4b4f      	ldr	r3, [pc, #316]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x180>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800481c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800481e:	4b4d      	ldr	r3, [pc, #308]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x180>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d028      	beq.n	800487c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800482a:	4b4a      	ldr	r3, [pc, #296]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x180>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	099b      	lsrs	r3, r3, #6
 8004830:	2200      	movs	r2, #0
 8004832:	623b      	str	r3, [r7, #32]
 8004834:	627a      	str	r2, [r7, #36]	@ 0x24
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800483c:	2100      	movs	r1, #0
 800483e:	4b47      	ldr	r3, [pc, #284]	@ (800495c <HAL_RCC_GetSysClockFreq+0x188>)
 8004840:	fb03 f201 	mul.w	r2, r3, r1
 8004844:	2300      	movs	r3, #0
 8004846:	fb00 f303 	mul.w	r3, r0, r3
 800484a:	4413      	add	r3, r2
 800484c:	4a43      	ldr	r2, [pc, #268]	@ (800495c <HAL_RCC_GetSysClockFreq+0x188>)
 800484e:	fba0 1202 	umull	r1, r2, r0, r2
 8004852:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004854:	460a      	mov	r2, r1
 8004856:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004858:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800485a:	4413      	add	r3, r2
 800485c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800485e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004860:	2200      	movs	r2, #0
 8004862:	61bb      	str	r3, [r7, #24]
 8004864:	61fa      	str	r2, [r7, #28]
 8004866:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800486a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800486e:	f7fc fa13 	bl	8000c98 <__aeabi_uldivmod>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	4613      	mov	r3, r2
 8004878:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800487a:	e053      	b.n	8004924 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800487c:	4b35      	ldr	r3, [pc, #212]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x180>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	099b      	lsrs	r3, r3, #6
 8004882:	2200      	movs	r2, #0
 8004884:	613b      	str	r3, [r7, #16]
 8004886:	617a      	str	r2, [r7, #20]
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800488e:	f04f 0b00 	mov.w	fp, #0
 8004892:	4652      	mov	r2, sl
 8004894:	465b      	mov	r3, fp
 8004896:	f04f 0000 	mov.w	r0, #0
 800489a:	f04f 0100 	mov.w	r1, #0
 800489e:	0159      	lsls	r1, r3, #5
 80048a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048a4:	0150      	lsls	r0, r2, #5
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	ebb2 080a 	subs.w	r8, r2, sl
 80048ae:	eb63 090b 	sbc.w	r9, r3, fp
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	f04f 0300 	mov.w	r3, #0
 80048ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80048be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80048c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80048c6:	ebb2 0408 	subs.w	r4, r2, r8
 80048ca:	eb63 0509 	sbc.w	r5, r3, r9
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	00eb      	lsls	r3, r5, #3
 80048d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048dc:	00e2      	lsls	r2, r4, #3
 80048de:	4614      	mov	r4, r2
 80048e0:	461d      	mov	r5, r3
 80048e2:	eb14 030a 	adds.w	r3, r4, sl
 80048e6:	603b      	str	r3, [r7, #0]
 80048e8:	eb45 030b 	adc.w	r3, r5, fp
 80048ec:	607b      	str	r3, [r7, #4]
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048fa:	4629      	mov	r1, r5
 80048fc:	028b      	lsls	r3, r1, #10
 80048fe:	4621      	mov	r1, r4
 8004900:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004904:	4621      	mov	r1, r4
 8004906:	028a      	lsls	r2, r1, #10
 8004908:	4610      	mov	r0, r2
 800490a:	4619      	mov	r1, r3
 800490c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800490e:	2200      	movs	r2, #0
 8004910:	60bb      	str	r3, [r7, #8]
 8004912:	60fa      	str	r2, [r7, #12]
 8004914:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004918:	f7fc f9be 	bl	8000c98 <__aeabi_uldivmod>
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	4613      	mov	r3, r2
 8004922:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004924:	4b0b      	ldr	r3, [pc, #44]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x180>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	0c1b      	lsrs	r3, r3, #16
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	3301      	adds	r3, #1
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004934:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004938:	fbb2 f3f3 	udiv	r3, r2, r3
 800493c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800493e:	e002      	b.n	8004946 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004940:	4b05      	ldr	r3, [pc, #20]	@ (8004958 <HAL_RCC_GetSysClockFreq+0x184>)
 8004942:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004944:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004948:	4618      	mov	r0, r3
 800494a:	3740      	adds	r7, #64	@ 0x40
 800494c:	46bd      	mov	sp, r7
 800494e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004952:	bf00      	nop
 8004954:	40023800 	.word	0x40023800
 8004958:	00f42400 	.word	0x00f42400
 800495c:	017d7840 	.word	0x017d7840

08004960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004964:	4b03      	ldr	r3, [pc, #12]	@ (8004974 <HAL_RCC_GetHCLKFreq+0x14>)
 8004966:	681b      	ldr	r3, [r3, #0]
}
 8004968:	4618      	mov	r0, r3
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	20000024 	.word	0x20000024

08004978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800497c:	f7ff fff0 	bl	8004960 <HAL_RCC_GetHCLKFreq>
 8004980:	4602      	mov	r2, r0
 8004982:	4b05      	ldr	r3, [pc, #20]	@ (8004998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	0a9b      	lsrs	r3, r3, #10
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	4903      	ldr	r1, [pc, #12]	@ (800499c <HAL_RCC_GetPCLK1Freq+0x24>)
 800498e:	5ccb      	ldrb	r3, [r1, r3]
 8004990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004994:	4618      	mov	r0, r3
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40023800 	.word	0x40023800
 800499c:	0800b4e0 	.word	0x0800b4e0

080049a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049a4:	f7ff ffdc 	bl	8004960 <HAL_RCC_GetHCLKFreq>
 80049a8:	4602      	mov	r2, r0
 80049aa:	4b05      	ldr	r3, [pc, #20]	@ (80049c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	0b5b      	lsrs	r3, r3, #13
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	4903      	ldr	r1, [pc, #12]	@ (80049c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049b6:	5ccb      	ldrb	r3, [r1, r3]
 80049b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049bc:	4618      	mov	r0, r3
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40023800 	.word	0x40023800
 80049c4:	0800b4e0 	.word	0x0800b4e0

080049c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e041      	b.n	8004a5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fd fbda 	bl	80021a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3304      	adds	r3, #4
 8004a04:	4619      	mov	r1, r3
 8004a06:	4610      	mov	r0, r2
 8004a08:	f000 fd70 	bl	80054ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d001      	beq.n	8004a80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e044      	b.n	8004b0a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a1e      	ldr	r2, [pc, #120]	@ (8004b18 <HAL_TIM_Base_Start_IT+0xb0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d018      	beq.n	8004ad4 <HAL_TIM_Base_Start_IT+0x6c>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aaa:	d013      	beq.n	8004ad4 <HAL_TIM_Base_Start_IT+0x6c>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a1a      	ldr	r2, [pc, #104]	@ (8004b1c <HAL_TIM_Base_Start_IT+0xb4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d00e      	beq.n	8004ad4 <HAL_TIM_Base_Start_IT+0x6c>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a19      	ldr	r2, [pc, #100]	@ (8004b20 <HAL_TIM_Base_Start_IT+0xb8>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d009      	beq.n	8004ad4 <HAL_TIM_Base_Start_IT+0x6c>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a17      	ldr	r2, [pc, #92]	@ (8004b24 <HAL_TIM_Base_Start_IT+0xbc>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d004      	beq.n	8004ad4 <HAL_TIM_Base_Start_IT+0x6c>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a16      	ldr	r2, [pc, #88]	@ (8004b28 <HAL_TIM_Base_Start_IT+0xc0>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d111      	bne.n	8004af8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2b06      	cmp	r3, #6
 8004ae4:	d010      	beq.n	8004b08 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0201 	orr.w	r2, r2, #1
 8004af4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af6:	e007      	b.n	8004b08 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	40010000 	.word	0x40010000
 8004b1c:	40000400 	.word	0x40000400
 8004b20:	40000800 	.word	0x40000800
 8004b24:	40000c00 	.word	0x40000c00
 8004b28:	40014000 	.word	0x40014000

08004b2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e041      	b.n	8004bc2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f839 	bl	8004bca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3304      	adds	r3, #4
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	f000 fcbe 	bl	80054ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
	...

08004be0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d109      	bne.n	8004c04 <HAL_TIM_PWM_Start+0x24>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	bf14      	ite	ne
 8004bfc:	2301      	movne	r3, #1
 8004bfe:	2300      	moveq	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	e022      	b.n	8004c4a <HAL_TIM_PWM_Start+0x6a>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	d109      	bne.n	8004c1e <HAL_TIM_PWM_Start+0x3e>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	bf14      	ite	ne
 8004c16:	2301      	movne	r3, #1
 8004c18:	2300      	moveq	r3, #0
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	e015      	b.n	8004c4a <HAL_TIM_PWM_Start+0x6a>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d109      	bne.n	8004c38 <HAL_TIM_PWM_Start+0x58>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	bf14      	ite	ne
 8004c30:	2301      	movne	r3, #1
 8004c32:	2300      	moveq	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	e008      	b.n	8004c4a <HAL_TIM_PWM_Start+0x6a>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	bf14      	ite	ne
 8004c44:	2301      	movne	r3, #1
 8004c46:	2300      	moveq	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e068      	b.n	8004d24 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d104      	bne.n	8004c62 <HAL_TIM_PWM_Start+0x82>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c60:	e013      	b.n	8004c8a <HAL_TIM_PWM_Start+0xaa>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b04      	cmp	r3, #4
 8004c66:	d104      	bne.n	8004c72 <HAL_TIM_PWM_Start+0x92>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c70:	e00b      	b.n	8004c8a <HAL_TIM_PWM_Start+0xaa>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d104      	bne.n	8004c82 <HAL_TIM_PWM_Start+0xa2>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c80:	e003      	b.n	8004c8a <HAL_TIM_PWM_Start+0xaa>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2202      	movs	r2, #2
 8004c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	6839      	ldr	r1, [r7, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 fed6 	bl	8005a44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a23      	ldr	r2, [pc, #140]	@ (8004d2c <HAL_TIM_PWM_Start+0x14c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d107      	bne.n	8004cb2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cb0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a1d      	ldr	r2, [pc, #116]	@ (8004d2c <HAL_TIM_PWM_Start+0x14c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d018      	beq.n	8004cee <HAL_TIM_PWM_Start+0x10e>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cc4:	d013      	beq.n	8004cee <HAL_TIM_PWM_Start+0x10e>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a19      	ldr	r2, [pc, #100]	@ (8004d30 <HAL_TIM_PWM_Start+0x150>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d00e      	beq.n	8004cee <HAL_TIM_PWM_Start+0x10e>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a17      	ldr	r2, [pc, #92]	@ (8004d34 <HAL_TIM_PWM_Start+0x154>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d009      	beq.n	8004cee <HAL_TIM_PWM_Start+0x10e>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a16      	ldr	r2, [pc, #88]	@ (8004d38 <HAL_TIM_PWM_Start+0x158>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d004      	beq.n	8004cee <HAL_TIM_PWM_Start+0x10e>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a14      	ldr	r2, [pc, #80]	@ (8004d3c <HAL_TIM_PWM_Start+0x15c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d111      	bne.n	8004d12 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2b06      	cmp	r3, #6
 8004cfe:	d010      	beq.n	8004d22 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0201 	orr.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d10:	e007      	b.n	8004d22 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f042 0201 	orr.w	r2, r2, #1
 8004d20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40010000 	.word	0x40010000
 8004d30:	40000400 	.word	0x40000400
 8004d34:	40000800 	.word	0x40000800
 8004d38:	40000c00 	.word	0x40000c00
 8004d3c:	40014000 	.word	0x40014000

08004d40 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e097      	b.n	8004e84 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d106      	bne.n	8004d6e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7fd fa87 	bl	800227c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2202      	movs	r2, #2
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d84:	f023 0307 	bic.w	r3, r3, #7
 8004d88:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3304      	adds	r3, #4
 8004d92:	4619      	mov	r1, r3
 8004d94:	4610      	mov	r0, r2
 8004d96:	f000 fba9 	bl	80054ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dc2:	f023 0303 	bic.w	r3, r3, #3
 8004dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	021b      	lsls	r3, r3, #8
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004de0:	f023 030c 	bic.w	r3, r3, #12
 8004de4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004dec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004df0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	021b      	lsls	r3, r3, #8
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	011a      	lsls	r2, r3, #4
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	031b      	lsls	r3, r3, #12
 8004e10:	4313      	orrs	r3, r2
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004e1e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004e26:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	4313      	orrs	r3, r2
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3718      	adds	r7, #24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e9c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ea4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004eac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004eb4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d110      	bne.n	8004ede <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d102      	bne.n	8004ec8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ec2:	7b7b      	ldrb	r3, [r7, #13]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d001      	beq.n	8004ecc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e069      	b.n	8004fa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004edc:	e031      	b.n	8004f42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d110      	bne.n	8004f06 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ee4:	7bbb      	ldrb	r3, [r7, #14]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d102      	bne.n	8004ef0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004eea:	7b3b      	ldrb	r3, [r7, #12]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d001      	beq.n	8004ef4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e055      	b.n	8004fa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f04:	e01d      	b.n	8004f42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d108      	bne.n	8004f1e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f0c:	7bbb      	ldrb	r3, [r7, #14]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d105      	bne.n	8004f1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f12:	7b7b      	ldrb	r3, [r7, #13]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d102      	bne.n	8004f1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f18:	7b3b      	ldrb	r3, [r7, #12]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d001      	beq.n	8004f22 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e03e      	b.n	8004fa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2202      	movs	r2, #2
 8004f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2202      	movs	r2, #2
 8004f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <HAL_TIM_Encoder_Start+0xc4>
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d008      	beq.n	8004f60 <HAL_TIM_Encoder_Start+0xd4>
 8004f4e:	e00f      	b.n	8004f70 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2201      	movs	r2, #1
 8004f56:	2100      	movs	r1, #0
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 fd73 	bl	8005a44 <TIM_CCxChannelCmd>
      break;
 8004f5e:	e016      	b.n	8004f8e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2201      	movs	r2, #1
 8004f66:	2104      	movs	r1, #4
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 fd6b 	bl	8005a44 <TIM_CCxChannelCmd>
      break;
 8004f6e:	e00e      	b.n	8004f8e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2201      	movs	r2, #1
 8004f76:	2100      	movs	r1, #0
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fd63 	bl	8005a44 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2201      	movs	r2, #1
 8004f84:	2104      	movs	r1, #4
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 fd5c 	bl	8005a44 <TIM_CCxChannelCmd>
      break;
 8004f8c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0201 	orr.w	r2, r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d020      	beq.n	800500c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d01b      	beq.n	800500c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f06f 0202 	mvn.w	r2, #2
 8004fdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fa5b 	bl	80054ae <HAL_TIM_IC_CaptureCallback>
 8004ff8:	e005      	b.n	8005006 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fa4d 	bl	800549a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 fa5e 	bl	80054c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f003 0304 	and.w	r3, r3, #4
 8005012:	2b00      	cmp	r3, #0
 8005014:	d020      	beq.n	8005058 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	d01b      	beq.n	8005058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f06f 0204 	mvn.w	r2, #4
 8005028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2202      	movs	r2, #2
 800502e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fa35 	bl	80054ae <HAL_TIM_IC_CaptureCallback>
 8005044:	e005      	b.n	8005052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fa27 	bl	800549a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 fa38 	bl	80054c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	2b00      	cmp	r3, #0
 8005060:	d020      	beq.n	80050a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f003 0308 	and.w	r3, r3, #8
 8005068:	2b00      	cmp	r3, #0
 800506a:	d01b      	beq.n	80050a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f06f 0208 	mvn.w	r2, #8
 8005074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2204      	movs	r2, #4
 800507a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f003 0303 	and.w	r3, r3, #3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fa0f 	bl	80054ae <HAL_TIM_IC_CaptureCallback>
 8005090:	e005      	b.n	800509e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fa01 	bl	800549a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fa12 	bl	80054c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f003 0310 	and.w	r3, r3, #16
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d020      	beq.n	80050f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d01b      	beq.n	80050f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0210 	mvn.w	r2, #16
 80050c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2208      	movs	r2, #8
 80050c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f9e9 	bl	80054ae <HAL_TIM_IC_CaptureCallback>
 80050dc:	e005      	b.n	80050ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f9db 	bl	800549a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f9ec 	bl	80054c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00c      	beq.n	8005114 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f06f 0201 	mvn.w	r2, #1
 800510c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fc faa0 	bl	8001654 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00c      	beq.n	8005138 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fd76 	bl	8005c24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00c      	beq.n	800515c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005148:	2b00      	cmp	r3, #0
 800514a:	d007      	beq.n	800515c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f9bd 	bl	80054d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00c      	beq.n	8005180 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b00      	cmp	r3, #0
 800516e:	d007      	beq.n	8005180 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0220 	mvn.w	r2, #32
 8005178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fd48 	bl	8005c10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005180:	bf00      	nop
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005194:	2300      	movs	r3, #0
 8005196:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051a2:	2302      	movs	r3, #2
 80051a4:	e0ae      	b.n	8005304 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b0c      	cmp	r3, #12
 80051b2:	f200 809f 	bhi.w	80052f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80051b6:	a201      	add	r2, pc, #4	@ (adr r2, 80051bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051bc:	080051f1 	.word	0x080051f1
 80051c0:	080052f5 	.word	0x080052f5
 80051c4:	080052f5 	.word	0x080052f5
 80051c8:	080052f5 	.word	0x080052f5
 80051cc:	08005231 	.word	0x08005231
 80051d0:	080052f5 	.word	0x080052f5
 80051d4:	080052f5 	.word	0x080052f5
 80051d8:	080052f5 	.word	0x080052f5
 80051dc:	08005273 	.word	0x08005273
 80051e0:	080052f5 	.word	0x080052f5
 80051e4:	080052f5 	.word	0x080052f5
 80051e8:	080052f5 	.word	0x080052f5
 80051ec:	080052b3 	.word	0x080052b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 f9fe 	bl	80055f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	699a      	ldr	r2, [r3, #24]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0208 	orr.w	r2, r2, #8
 800520a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0204 	bic.w	r2, r2, #4
 800521a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6999      	ldr	r1, [r3, #24]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	691a      	ldr	r2, [r3, #16]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	619a      	str	r2, [r3, #24]
      break;
 800522e:	e064      	b.n	80052fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68b9      	ldr	r1, [r7, #8]
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fa44 	bl	80056c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699a      	ldr	r2, [r3, #24]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800524a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699a      	ldr	r2, [r3, #24]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800525a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6999      	ldr	r1, [r3, #24]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	021a      	lsls	r2, r3, #8
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	619a      	str	r2, [r3, #24]
      break;
 8005270:	e043      	b.n	80052fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68b9      	ldr	r1, [r7, #8]
 8005278:	4618      	mov	r0, r3
 800527a:	f000 fa8f 	bl	800579c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69da      	ldr	r2, [r3, #28]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f042 0208 	orr.w	r2, r2, #8
 800528c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69da      	ldr	r2, [r3, #28]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0204 	bic.w	r2, r2, #4
 800529c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69d9      	ldr	r1, [r3, #28]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	691a      	ldr	r2, [r3, #16]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	61da      	str	r2, [r3, #28]
      break;
 80052b0:	e023      	b.n	80052fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68b9      	ldr	r1, [r7, #8]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fad9 	bl	8005870 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69da      	ldr	r2, [r3, #28]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	69da      	ldr	r2, [r3, #28]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69d9      	ldr	r1, [r3, #28]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	021a      	lsls	r2, r3, #8
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	61da      	str	r2, [r3, #28]
      break;
 80052f2:	e002      	b.n	80052fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	75fb      	strb	r3, [r7, #23]
      break;
 80052f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005302:	7dfb      	ldrb	r3, [r7, #23]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005316:	2300      	movs	r3, #0
 8005318:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005320:	2b01      	cmp	r3, #1
 8005322:	d101      	bne.n	8005328 <HAL_TIM_ConfigClockSource+0x1c>
 8005324:	2302      	movs	r3, #2
 8005326:	e0b4      	b.n	8005492 <HAL_TIM_ConfigClockSource+0x186>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800534e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005360:	d03e      	beq.n	80053e0 <HAL_TIM_ConfigClockSource+0xd4>
 8005362:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005366:	f200 8087 	bhi.w	8005478 <HAL_TIM_ConfigClockSource+0x16c>
 800536a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800536e:	f000 8086 	beq.w	800547e <HAL_TIM_ConfigClockSource+0x172>
 8005372:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005376:	d87f      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x16c>
 8005378:	2b70      	cmp	r3, #112	@ 0x70
 800537a:	d01a      	beq.n	80053b2 <HAL_TIM_ConfigClockSource+0xa6>
 800537c:	2b70      	cmp	r3, #112	@ 0x70
 800537e:	d87b      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x16c>
 8005380:	2b60      	cmp	r3, #96	@ 0x60
 8005382:	d050      	beq.n	8005426 <HAL_TIM_ConfigClockSource+0x11a>
 8005384:	2b60      	cmp	r3, #96	@ 0x60
 8005386:	d877      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x16c>
 8005388:	2b50      	cmp	r3, #80	@ 0x50
 800538a:	d03c      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0xfa>
 800538c:	2b50      	cmp	r3, #80	@ 0x50
 800538e:	d873      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x16c>
 8005390:	2b40      	cmp	r3, #64	@ 0x40
 8005392:	d058      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0x13a>
 8005394:	2b40      	cmp	r3, #64	@ 0x40
 8005396:	d86f      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x16c>
 8005398:	2b30      	cmp	r3, #48	@ 0x30
 800539a:	d064      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x15a>
 800539c:	2b30      	cmp	r3, #48	@ 0x30
 800539e:	d86b      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x16c>
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	d060      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x15a>
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d867      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x16c>
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d05c      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x15a>
 80053ac:	2b10      	cmp	r3, #16
 80053ae:	d05a      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x15a>
 80053b0:	e062      	b.n	8005478 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053c2:	f000 fb1f 	bl	8005a04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80053d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	609a      	str	r2, [r3, #8]
      break;
 80053de:	e04f      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053f0:	f000 fb08 	bl	8005a04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689a      	ldr	r2, [r3, #8]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005402:	609a      	str	r2, [r3, #8]
      break;
 8005404:	e03c      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005412:	461a      	mov	r2, r3
 8005414:	f000 fa7c 	bl	8005910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2150      	movs	r1, #80	@ 0x50
 800541e:	4618      	mov	r0, r3
 8005420:	f000 fad5 	bl	80059ce <TIM_ITRx_SetConfig>
      break;
 8005424:	e02c      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005432:	461a      	mov	r2, r3
 8005434:	f000 fa9b 	bl	800596e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2160      	movs	r1, #96	@ 0x60
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fac5 	bl	80059ce <TIM_ITRx_SetConfig>
      break;
 8005444:	e01c      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005452:	461a      	mov	r2, r3
 8005454:	f000 fa5c 	bl	8005910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2140      	movs	r1, #64	@ 0x40
 800545e:	4618      	mov	r0, r3
 8005460:	f000 fab5 	bl	80059ce <TIM_ITRx_SetConfig>
      break;
 8005464:	e00c      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4619      	mov	r1, r3
 8005470:	4610      	mov	r0, r2
 8005472:	f000 faac 	bl	80059ce <TIM_ITRx_SetConfig>
      break;
 8005476:	e003      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	73fb      	strb	r3, [r7, #15]
      break;
 800547c:	e000      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800547e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005490:	7bfb      	ldrb	r3, [r7, #15]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
	...

080054ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a37      	ldr	r2, [pc, #220]	@ (80055dc <TIM_Base_SetConfig+0xf0>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00f      	beq.n	8005524 <TIM_Base_SetConfig+0x38>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800550a:	d00b      	beq.n	8005524 <TIM_Base_SetConfig+0x38>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a34      	ldr	r2, [pc, #208]	@ (80055e0 <TIM_Base_SetConfig+0xf4>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d007      	beq.n	8005524 <TIM_Base_SetConfig+0x38>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a33      	ldr	r2, [pc, #204]	@ (80055e4 <TIM_Base_SetConfig+0xf8>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d003      	beq.n	8005524 <TIM_Base_SetConfig+0x38>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a32      	ldr	r2, [pc, #200]	@ (80055e8 <TIM_Base_SetConfig+0xfc>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d108      	bne.n	8005536 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800552a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a28      	ldr	r2, [pc, #160]	@ (80055dc <TIM_Base_SetConfig+0xf0>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d01b      	beq.n	8005576 <TIM_Base_SetConfig+0x8a>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005544:	d017      	beq.n	8005576 <TIM_Base_SetConfig+0x8a>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a25      	ldr	r2, [pc, #148]	@ (80055e0 <TIM_Base_SetConfig+0xf4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d013      	beq.n	8005576 <TIM_Base_SetConfig+0x8a>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a24      	ldr	r2, [pc, #144]	@ (80055e4 <TIM_Base_SetConfig+0xf8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d00f      	beq.n	8005576 <TIM_Base_SetConfig+0x8a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a23      	ldr	r2, [pc, #140]	@ (80055e8 <TIM_Base_SetConfig+0xfc>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d00b      	beq.n	8005576 <TIM_Base_SetConfig+0x8a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a22      	ldr	r2, [pc, #136]	@ (80055ec <TIM_Base_SetConfig+0x100>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d007      	beq.n	8005576 <TIM_Base_SetConfig+0x8a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a21      	ldr	r2, [pc, #132]	@ (80055f0 <TIM_Base_SetConfig+0x104>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d003      	beq.n	8005576 <TIM_Base_SetConfig+0x8a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a20      	ldr	r2, [pc, #128]	@ (80055f4 <TIM_Base_SetConfig+0x108>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d108      	bne.n	8005588 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800557c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	4313      	orrs	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	4313      	orrs	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	689a      	ldr	r2, [r3, #8]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a0c      	ldr	r2, [pc, #48]	@ (80055dc <TIM_Base_SetConfig+0xf0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d103      	bne.n	80055b6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	691a      	ldr	r2, [r3, #16]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f043 0204 	orr.w	r2, r3, #4
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	601a      	str	r2, [r3, #0]
}
 80055ce:	bf00      	nop
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	40010000 	.word	0x40010000
 80055e0:	40000400 	.word	0x40000400
 80055e4:	40000800 	.word	0x40000800
 80055e8:	40000c00 	.word	0x40000c00
 80055ec:	40014000 	.word	0x40014000
 80055f0:	40014400 	.word	0x40014400
 80055f4:	40014800 	.word	0x40014800

080055f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	f023 0201 	bic.w	r2, r3, #1
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0303 	bic.w	r3, r3, #3
 800562e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f023 0302 	bic.w	r3, r3, #2
 8005640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4313      	orrs	r3, r2
 800564a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a1c      	ldr	r2, [pc, #112]	@ (80056c0 <TIM_OC1_SetConfig+0xc8>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d10c      	bne.n	800566e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f023 0308 	bic.w	r3, r3, #8
 800565a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	4313      	orrs	r3, r2
 8005664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f023 0304 	bic.w	r3, r3, #4
 800566c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a13      	ldr	r2, [pc, #76]	@ (80056c0 <TIM_OC1_SetConfig+0xc8>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d111      	bne.n	800569a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800567c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4313      	orrs	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	4313      	orrs	r3, r2
 8005698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	621a      	str	r2, [r3, #32]
}
 80056b4:	bf00      	nop
 80056b6:	371c      	adds	r7, #28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	40010000 	.word	0x40010000

080056c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	f023 0210 	bic.w	r2, r3, #16
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	021b      	lsls	r3, r3, #8
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	4313      	orrs	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f023 0320 	bic.w	r3, r3, #32
 800570e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	4313      	orrs	r3, r2
 800571a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a1e      	ldr	r2, [pc, #120]	@ (8005798 <TIM_OC2_SetConfig+0xd4>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d10d      	bne.n	8005740 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800572a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	011b      	lsls	r3, r3, #4
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800573e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a15      	ldr	r2, [pc, #84]	@ (8005798 <TIM_OC2_SetConfig+0xd4>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d113      	bne.n	8005770 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800574e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005756:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	4313      	orrs	r3, r2
 800576e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	621a      	str	r2, [r3, #32]
}
 800578a:	bf00      	nop
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	40010000 	.word	0x40010000

0800579c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800579c:	b480      	push	{r7}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	69db      	ldr	r3, [r3, #28]
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f023 0303 	bic.w	r3, r3, #3
 80057d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	4313      	orrs	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	021b      	lsls	r3, r3, #8
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a1d      	ldr	r2, [pc, #116]	@ (800586c <TIM_OC3_SetConfig+0xd0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d10d      	bne.n	8005816 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005800:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	021b      	lsls	r3, r3, #8
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	4313      	orrs	r3, r2
 800580c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005814:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a14      	ldr	r2, [pc, #80]	@ (800586c <TIM_OC3_SetConfig+0xd0>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d113      	bne.n	8005846 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005824:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800582c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	011b      	lsls	r3, r3, #4
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	4313      	orrs	r3, r2
 8005838:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	011b      	lsls	r3, r3, #4
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	621a      	str	r2, [r3, #32]
}
 8005860:	bf00      	nop
 8005862:	371c      	adds	r7, #28
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	40010000 	.word	0x40010000

08005870 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005870:	b480      	push	{r7}
 8005872:	b087      	sub	sp, #28
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800589e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	021b      	lsls	r3, r3, #8
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	031b      	lsls	r3, r3, #12
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a10      	ldr	r2, [pc, #64]	@ (800590c <TIM_OC4_SetConfig+0x9c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d109      	bne.n	80058e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	019b      	lsls	r3, r3, #6
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	621a      	str	r2, [r3, #32]
}
 80058fe:	bf00      	nop
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	40010000 	.word	0x40010000

08005910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	f023 0201 	bic.w	r2, r3, #1
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800593a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	011b      	lsls	r3, r3, #4
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	4313      	orrs	r3, r2
 8005944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f023 030a 	bic.w	r3, r3, #10
 800594c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	4313      	orrs	r3, r2
 8005954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	621a      	str	r2, [r3, #32]
}
 8005962:	bf00      	nop
 8005964:	371c      	adds	r7, #28
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800596e:	b480      	push	{r7}
 8005970:	b087      	sub	sp, #28
 8005972:	af00      	add	r7, sp, #0
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	60b9      	str	r1, [r7, #8]
 8005978:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6a1b      	ldr	r3, [r3, #32]
 8005984:	f023 0210 	bic.w	r2, r3, #16
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005998:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	031b      	lsls	r3, r3, #12
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80059aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	011b      	lsls	r3, r3, #4
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	621a      	str	r2, [r3, #32]
}
 80059c2:	bf00      	nop
 80059c4:	371c      	adds	r7, #28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b085      	sub	sp, #20
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
 80059d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f043 0307 	orr.w	r3, r3, #7
 80059f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	609a      	str	r2, [r3, #8]
}
 80059f8:	bf00      	nop
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	021a      	lsls	r2, r3, #8
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	431a      	orrs	r2, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	609a      	str	r2, [r3, #8]
}
 8005a38:	bf00      	nop
 8005a3a:	371c      	adds	r7, #28
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f003 031f 	and.w	r3, r3, #31
 8005a56:	2201      	movs	r2, #1
 8005a58:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6a1a      	ldr	r2, [r3, #32]
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	43db      	mvns	r3, r3
 8005a66:	401a      	ands	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6a1a      	ldr	r2, [r3, #32]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f003 031f 	and.w	r3, r3, #31
 8005a76:	6879      	ldr	r1, [r7, #4]
 8005a78:	fa01 f303 	lsl.w	r3, r1, r3
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	621a      	str	r2, [r3, #32]
}
 8005a82:	bf00      	nop
 8005a84:	371c      	adds	r7, #28
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
	...

08005a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d101      	bne.n	8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	e050      	b.n	8005b4a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ace:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8005b58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d018      	beq.n	8005b1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005af4:	d013      	beq.n	8005b1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a18      	ldr	r2, [pc, #96]	@ (8005b5c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d00e      	beq.n	8005b1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a16      	ldr	r2, [pc, #88]	@ (8005b60 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d009      	beq.n	8005b1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a15      	ldr	r2, [pc, #84]	@ (8005b64 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d004      	beq.n	8005b1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a13      	ldr	r2, [pc, #76]	@ (8005b68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d10c      	bne.n	8005b38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	40010000 	.word	0x40010000
 8005b5c:	40000400 	.word	0x40000400
 8005b60:	40000800 	.word	0x40000800
 8005b64:	40000c00 	.word	0x40000c00
 8005b68:	40014000 	.word	0x40014000

08005b6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d101      	bne.n	8005b88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b84:	2302      	movs	r3, #2
 8005b86:	e03d      	b.n	8005c04 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e042      	b.n	8005cd0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d106      	bne.n	8005c64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7fc fc06 	bl	8002470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2224      	movs	r2, #36	@ 0x24
 8005c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68da      	ldr	r2, [r3, #12]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 fd7f 	bl	8006780 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	691a      	ldr	r2, [r3, #16]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	695a      	ldr	r2, [r3, #20]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ca0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68da      	ldr	r2, [r3, #12]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005cb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08a      	sub	sp, #40	@ 0x28
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b20      	cmp	r3, #32
 8005cf6:	d175      	bne.n	8005de4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d002      	beq.n	8005d04 <HAL_UART_Transmit+0x2c>
 8005cfe:	88fb      	ldrh	r3, [r7, #6]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e06e      	b.n	8005de6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2221      	movs	r2, #33	@ 0x21
 8005d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d16:	f7fc fdfd 	bl	8002914 <HAL_GetTick>
 8005d1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	88fa      	ldrh	r2, [r7, #6]
 8005d20:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	88fa      	ldrh	r2, [r7, #6]
 8005d26:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d30:	d108      	bne.n	8005d44 <HAL_UART_Transmit+0x6c>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d104      	bne.n	8005d44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	61bb      	str	r3, [r7, #24]
 8005d42:	e003      	b.n	8005d4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d4c:	e02e      	b.n	8005dac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2200      	movs	r2, #0
 8005d56:	2180      	movs	r1, #128	@ 0x80
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 fb1d 	bl	8006398 <UART_WaitOnFlagUntilTimeout>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d005      	beq.n	8005d70 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e03a      	b.n	8005de6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10b      	bne.n	8005d8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	3302      	adds	r3, #2
 8005d8a:	61bb      	str	r3, [r7, #24]
 8005d8c:	e007      	b.n	8005d9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	781a      	ldrb	r2, [r3, #0]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1cb      	bne.n	8005d4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2140      	movs	r1, #64	@ 0x40
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 fae9 	bl	8006398 <UART_WaitOnFlagUntilTimeout>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d005      	beq.n	8005dd8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e006      	b.n	8005de6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	e000      	b.n	8005de6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005de4:	2302      	movs	r3, #2
  }
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3720      	adds	r7, #32
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
	...

08005df0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b0ba      	sub	sp, #232	@ 0xe8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e26:	f003 030f 	and.w	r3, r3, #15
 8005e2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005e2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10f      	bne.n	8005e56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e3a:	f003 0320 	and.w	r3, r3, #32
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d009      	beq.n	8005e56 <HAL_UART_IRQHandler+0x66>
 8005e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fbd7 	bl	8006602 <UART_Receive_IT>
      return;
 8005e54:	e273      	b.n	800633e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 80de 	beq.w	800601c <HAL_UART_IRQHandler+0x22c>
 8005e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d106      	bne.n	8005e7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e70:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 80d1 	beq.w	800601c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00b      	beq.n	8005e9e <HAL_UART_IRQHandler+0xae>
 8005e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d005      	beq.n	8005e9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e96:	f043 0201 	orr.w	r2, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00b      	beq.n	8005ec2 <HAL_UART_IRQHandler+0xd2>
 8005eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d005      	beq.n	8005ec2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eba:	f043 0202 	orr.w	r2, r3, #2
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00b      	beq.n	8005ee6 <HAL_UART_IRQHandler+0xf6>
 8005ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d005      	beq.n	8005ee6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ede:	f043 0204 	orr.w	r2, r3, #4
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eea:	f003 0308 	and.w	r3, r3, #8
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d011      	beq.n	8005f16 <HAL_UART_IRQHandler+0x126>
 8005ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ef6:	f003 0320 	and.w	r3, r3, #32
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d105      	bne.n	8005f0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d005      	beq.n	8005f16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f0e:	f043 0208 	orr.w	r2, r3, #8
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 820a 	beq.w	8006334 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f24:	f003 0320 	and.w	r3, r3, #32
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d008      	beq.n	8005f3e <HAL_UART_IRQHandler+0x14e>
 8005f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f30:	f003 0320 	and.w	r3, r3, #32
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d002      	beq.n	8005f3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fb62 	bl	8006602 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f48:	2b40      	cmp	r3, #64	@ 0x40
 8005f4a:	bf0c      	ite	eq
 8005f4c:	2301      	moveq	r3, #1
 8005f4e:	2300      	movne	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d103      	bne.n	8005f6a <HAL_UART_IRQHandler+0x17a>
 8005f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d04f      	beq.n	800600a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fa6d 	bl	800644a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f7a:	2b40      	cmp	r3, #64	@ 0x40
 8005f7c:	d141      	bne.n	8006002 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3314      	adds	r3, #20
 8005f84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f8c:	e853 3f00 	ldrex	r3, [r3]
 8005f90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005f94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3314      	adds	r3, #20
 8005fa6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005faa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005fae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005fb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005fba:	e841 2300 	strex	r3, r2, [r1]
 8005fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005fc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1d9      	bne.n	8005f7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d013      	beq.n	8005ffa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd6:	4a8a      	ldr	r2, [pc, #552]	@ (8006200 <HAL_UART_IRQHandler+0x410>)
 8005fd8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fd fc70 	bl	80038c4 <HAL_DMA_Abort_IT>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d016      	beq.n	8006018 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff8:	e00e      	b.n	8006018 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f9b6 	bl	800636c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006000:	e00a      	b.n	8006018 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f9b2 	bl	800636c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006008:	e006      	b.n	8006018 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f9ae 	bl	800636c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006016:	e18d      	b.n	8006334 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006018:	bf00      	nop
    return;
 800601a:	e18b      	b.n	8006334 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006020:	2b01      	cmp	r3, #1
 8006022:	f040 8167 	bne.w	80062f4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800602a:	f003 0310 	and.w	r3, r3, #16
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 8160 	beq.w	80062f4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8006034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006038:	f003 0310 	and.w	r3, r3, #16
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 8159 	beq.w	80062f4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006042:	2300      	movs	r3, #0
 8006044:	60bb      	str	r3, [r7, #8]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	60bb      	str	r3, [r7, #8]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	60bb      	str	r3, [r7, #8]
 8006056:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006062:	2b40      	cmp	r3, #64	@ 0x40
 8006064:	f040 80ce 	bne.w	8006204 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006074:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 80a9 	beq.w	80061d0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006082:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006086:	429a      	cmp	r2, r3
 8006088:	f080 80a2 	bcs.w	80061d0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006092:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800609e:	f000 8088 	beq.w	80061b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	330c      	adds	r3, #12
 80060a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80060b0:	e853 3f00 	ldrex	r3, [r3]
 80060b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80060b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	330c      	adds	r3, #12
 80060ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80060ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80060d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80060da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80060de:	e841 2300 	strex	r3, r2, [r1]
 80060e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80060e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1d9      	bne.n	80060a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	3314      	adds	r3, #20
 80060f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060f8:	e853 3f00 	ldrex	r3, [r3]
 80060fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80060fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006100:	f023 0301 	bic.w	r3, r3, #1
 8006104:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3314      	adds	r3, #20
 800610e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006112:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006116:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006118:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800611a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800611e:	e841 2300 	strex	r3, r2, [r1]
 8006122:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006124:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1e1      	bne.n	80060ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3314      	adds	r3, #20
 8006130:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800613a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800613c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006140:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3314      	adds	r3, #20
 800614a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800614e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006150:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006152:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006154:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800615c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1e3      	bne.n	800612a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2220      	movs	r2, #32
 8006166:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	330c      	adds	r3, #12
 8006176:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006178:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800617a:	e853 3f00 	ldrex	r3, [r3]
 800617e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006180:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006182:	f023 0310 	bic.w	r3, r3, #16
 8006186:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	330c      	adds	r3, #12
 8006190:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006194:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006196:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006198:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800619a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800619c:	e841 2300 	strex	r3, r2, [r1]
 80061a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80061a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e3      	bne.n	8006170 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fd fb19 	bl	80037e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2202      	movs	r2, #2
 80061b6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	4619      	mov	r1, r3
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f8d9 	bl	8006380 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80061ce:	e0b3      	b.n	8006338 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80061d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061d8:	429a      	cmp	r2, r3
 80061da:	f040 80ad 	bne.w	8006338 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061e2:	69db      	ldr	r3, [r3, #28]
 80061e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061e8:	f040 80a6 	bne.w	8006338 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80061f6:	4619      	mov	r1, r3
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f8c1 	bl	8006380 <HAL_UARTEx_RxEventCallback>
      return;
 80061fe:	e09b      	b.n	8006338 <HAL_UART_IRQHandler+0x548>
 8006200:	08006511 	.word	0x08006511
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800620c:	b29b      	uxth	r3, r3
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006218:	b29b      	uxth	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	f000 808e 	beq.w	800633c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8006220:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 8089 	beq.w	800633c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	330c      	adds	r3, #12
 8006230:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006234:	e853 3f00 	ldrex	r3, [r3]
 8006238:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800623a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800623c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006240:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	330c      	adds	r3, #12
 800624a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800624e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006250:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006252:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006254:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006256:	e841 2300 	strex	r3, r2, [r1]
 800625a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800625c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1e3      	bne.n	800622a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	3314      	adds	r3, #20
 8006268:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626c:	e853 3f00 	ldrex	r3, [r3]
 8006270:	623b      	str	r3, [r7, #32]
   return(result);
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	f023 0301 	bic.w	r3, r3, #1
 8006278:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3314      	adds	r3, #20
 8006282:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006286:	633a      	str	r2, [r7, #48]	@ 0x30
 8006288:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800628c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800628e:	e841 2300 	strex	r3, r2, [r1]
 8006292:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1e3      	bne.n	8006262 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2220      	movs	r2, #32
 800629e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	330c      	adds	r3, #12
 80062ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	e853 3f00 	ldrex	r3, [r3]
 80062b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f023 0310 	bic.w	r3, r3, #16
 80062be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	330c      	adds	r3, #12
 80062c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80062cc:	61fa      	str	r2, [r7, #28]
 80062ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d0:	69b9      	ldr	r1, [r7, #24]
 80062d2:	69fa      	ldr	r2, [r7, #28]
 80062d4:	e841 2300 	strex	r3, r2, [r1]
 80062d8:	617b      	str	r3, [r7, #20]
   return(result);
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1e3      	bne.n	80062a8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2202      	movs	r2, #2
 80062e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062ea:	4619      	mov	r1, r3
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f847 	bl	8006380 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062f2:	e023      	b.n	800633c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d009      	beq.n	8006314 <HAL_UART_IRQHandler+0x524>
 8006300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f910 	bl	8006532 <UART_Transmit_IT>
    return;
 8006312:	e014      	b.n	800633e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00e      	beq.n	800633e <HAL_UART_IRQHandler+0x54e>
 8006320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006328:	2b00      	cmp	r3, #0
 800632a:	d008      	beq.n	800633e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 f950 	bl	80065d2 <UART_EndTransmit_IT>
    return;
 8006332:	e004      	b.n	800633e <HAL_UART_IRQHandler+0x54e>
    return;
 8006334:	bf00      	nop
 8006336:	e002      	b.n	800633e <HAL_UART_IRQHandler+0x54e>
      return;
 8006338:	bf00      	nop
 800633a:	e000      	b.n	800633e <HAL_UART_IRQHandler+0x54e>
      return;
 800633c:	bf00      	nop
  }
}
 800633e:	37e8      	adds	r7, #232	@ 0xe8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	460b      	mov	r3, r1
 800638a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	603b      	str	r3, [r7, #0]
 80063a4:	4613      	mov	r3, r2
 80063a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063a8:	e03b      	b.n	8006422 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063aa:	6a3b      	ldr	r3, [r7, #32]
 80063ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b0:	d037      	beq.n	8006422 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063b2:	f7fc faaf 	bl	8002914 <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	6a3a      	ldr	r2, [r7, #32]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d302      	bcc.n	80063c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d101      	bne.n	80063cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e03a      	b.n	8006442 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f003 0304 	and.w	r3, r3, #4
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d023      	beq.n	8006422 <UART_WaitOnFlagUntilTimeout+0x8a>
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	2b80      	cmp	r3, #128	@ 0x80
 80063de:	d020      	beq.n	8006422 <UART_WaitOnFlagUntilTimeout+0x8a>
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2b40      	cmp	r3, #64	@ 0x40
 80063e4:	d01d      	beq.n	8006422 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0308 	and.w	r3, r3, #8
 80063f0:	2b08      	cmp	r3, #8
 80063f2:	d116      	bne.n	8006422 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80063f4:	2300      	movs	r3, #0
 80063f6:	617b      	str	r3, [r7, #20]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 f81d 	bl	800644a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2208      	movs	r2, #8
 8006414:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e00f      	b.n	8006442 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	4013      	ands	r3, r2
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	429a      	cmp	r2, r3
 8006430:	bf0c      	ite	eq
 8006432:	2301      	moveq	r3, #1
 8006434:	2300      	movne	r3, #0
 8006436:	b2db      	uxtb	r3, r3
 8006438:	461a      	mov	r2, r3
 800643a:	79fb      	ldrb	r3, [r7, #7]
 800643c:	429a      	cmp	r2, r3
 800643e:	d0b4      	beq.n	80063aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800644a:	b480      	push	{r7}
 800644c:	b095      	sub	sp, #84	@ 0x54
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	330c      	adds	r3, #12
 8006458:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800645c:	e853 3f00 	ldrex	r3, [r3]
 8006460:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006464:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006468:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	330c      	adds	r3, #12
 8006470:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006472:	643a      	str	r2, [r7, #64]	@ 0x40
 8006474:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006476:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006478:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800647a:	e841 2300 	strex	r3, r2, [r1]
 800647e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1e5      	bne.n	8006452 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3314      	adds	r3, #20
 800648c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	e853 3f00 	ldrex	r3, [r3]
 8006494:	61fb      	str	r3, [r7, #28]
   return(result);
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	f023 0301 	bic.w	r3, r3, #1
 800649c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3314      	adds	r3, #20
 80064a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064ae:	e841 2300 	strex	r3, r2, [r1]
 80064b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1e5      	bne.n	8006486 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d119      	bne.n	80064f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	330c      	adds	r3, #12
 80064c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	e853 3f00 	ldrex	r3, [r3]
 80064d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f023 0310 	bic.w	r3, r3, #16
 80064d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	330c      	adds	r3, #12
 80064e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064e2:	61ba      	str	r2, [r7, #24]
 80064e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e6:	6979      	ldr	r1, [r7, #20]
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	e841 2300 	strex	r3, r2, [r1]
 80064ee:	613b      	str	r3, [r7, #16]
   return(result);
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1e5      	bne.n	80064c2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006504:	bf00      	nop
 8006506:	3754      	adds	r7, #84	@ 0x54
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800651c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f7ff ff21 	bl	800636c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800652a:	bf00      	nop
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006532:	b480      	push	{r7}
 8006534:	b085      	sub	sp, #20
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b21      	cmp	r3, #33	@ 0x21
 8006544:	d13e      	bne.n	80065c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800654e:	d114      	bne.n	800657a <UART_Transmit_IT+0x48>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d110      	bne.n	800657a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a1b      	ldr	r3, [r3, #32]
 800655c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	461a      	mov	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800656c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	1c9a      	adds	r2, r3, #2
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	621a      	str	r2, [r3, #32]
 8006578:	e008      	b.n	800658c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	1c59      	adds	r1, r3, #1
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6211      	str	r1, [r2, #32]
 8006584:	781a      	ldrb	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006590:	b29b      	uxth	r3, r3
 8006592:	3b01      	subs	r3, #1
 8006594:	b29b      	uxth	r3, r3
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	4619      	mov	r1, r3
 800659a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10f      	bne.n	80065c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065c0:	2300      	movs	r3, #0
 80065c2:	e000      	b.n	80065c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065c4:	2302      	movs	r3, #2
  }
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b082      	sub	sp, #8
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68da      	ldr	r2, [r3, #12]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7ff fea6 	bl	8006344 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b08c      	sub	sp, #48	@ 0x30
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800660a:	2300      	movs	r3, #0
 800660c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800660e:	2300      	movs	r3, #0
 8006610:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b22      	cmp	r3, #34	@ 0x22
 800661c:	f040 80aa 	bne.w	8006774 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006628:	d115      	bne.n	8006656 <UART_Receive_IT+0x54>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d111      	bne.n	8006656 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006636:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	b29b      	uxth	r3, r3
 8006640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006644:	b29a      	uxth	r2, r3
 8006646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006648:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800664e:	1c9a      	adds	r2, r3, #2
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	629a      	str	r2, [r3, #40]	@ 0x28
 8006654:	e024      	b.n	80066a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006664:	d007      	beq.n	8006676 <UART_Receive_IT+0x74>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10a      	bne.n	8006684 <UART_Receive_IT+0x82>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d106      	bne.n	8006684 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	b2da      	uxtb	r2, r3
 800667e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006680:	701a      	strb	r2, [r3, #0]
 8006682:	e008      	b.n	8006696 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	b2db      	uxtb	r3, r3
 800668c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006690:	b2da      	uxtb	r2, r3
 8006692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006694:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669a:	1c5a      	adds	r2, r3, #1
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	3b01      	subs	r3, #1
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	4619      	mov	r1, r3
 80066ae:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d15d      	bne.n	8006770 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0220 	bic.w	r2, r2, #32
 80066c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	695a      	ldr	r2, [r3, #20]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 0201 	bic.w	r2, r2, #1
 80066e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2220      	movs	r2, #32
 80066e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d135      	bne.n	8006766 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	330c      	adds	r3, #12
 8006706:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	e853 3f00 	ldrex	r3, [r3]
 800670e:	613b      	str	r3, [r7, #16]
   return(result);
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	f023 0310 	bic.w	r3, r3, #16
 8006716:	627b      	str	r3, [r7, #36]	@ 0x24
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	330c      	adds	r3, #12
 800671e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006720:	623a      	str	r2, [r7, #32]
 8006722:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006724:	69f9      	ldr	r1, [r7, #28]
 8006726:	6a3a      	ldr	r2, [r7, #32]
 8006728:	e841 2300 	strex	r3, r2, [r1]
 800672c:	61bb      	str	r3, [r7, #24]
   return(result);
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1e5      	bne.n	8006700 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0310 	and.w	r3, r3, #16
 800673e:	2b10      	cmp	r3, #16
 8006740:	d10a      	bne.n	8006758 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006742:	2300      	movs	r3, #0
 8006744:	60fb      	str	r3, [r7, #12]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	60fb      	str	r3, [r7, #12]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	60fb      	str	r3, [r7, #12]
 8006756:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800675c:	4619      	mov	r1, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7ff fe0e 	bl	8006380 <HAL_UARTEx_RxEventCallback>
 8006764:	e002      	b.n	800676c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7ff fdf6 	bl	8006358 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800676c:	2300      	movs	r3, #0
 800676e:	e002      	b.n	8006776 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006770:	2300      	movs	r3, #0
 8006772:	e000      	b.n	8006776 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006774:	2302      	movs	r3, #2
  }
}
 8006776:	4618      	mov	r0, r3
 8006778:	3730      	adds	r7, #48	@ 0x30
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
	...

08006780 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006784:	b0c0      	sub	sp, #256	@ 0x100
 8006786:	af00      	add	r7, sp, #0
 8006788:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800678c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800679c:	68d9      	ldr	r1, [r3, #12]
 800679e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	ea40 0301 	orr.w	r3, r0, r1
 80067a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ae:	689a      	ldr	r2, [r3, #8]
 80067b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	431a      	orrs	r2, r3
 80067b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	431a      	orrs	r2, r3
 80067c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80067d8:	f021 010c 	bic.w	r1, r1, #12
 80067dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80067e6:	430b      	orrs	r3, r1
 80067e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80067f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067fa:	6999      	ldr	r1, [r3, #24]
 80067fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	ea40 0301 	orr.w	r3, r0, r1
 8006806:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	4b8f      	ldr	r3, [pc, #572]	@ (8006a4c <UART_SetConfig+0x2cc>)
 8006810:	429a      	cmp	r2, r3
 8006812:	d005      	beq.n	8006820 <UART_SetConfig+0xa0>
 8006814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	4b8d      	ldr	r3, [pc, #564]	@ (8006a50 <UART_SetConfig+0x2d0>)
 800681c:	429a      	cmp	r2, r3
 800681e:	d104      	bne.n	800682a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006820:	f7fe f8be 	bl	80049a0 <HAL_RCC_GetPCLK2Freq>
 8006824:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006828:	e003      	b.n	8006832 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800682a:	f7fe f8a5 	bl	8004978 <HAL_RCC_GetPCLK1Freq>
 800682e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006836:	69db      	ldr	r3, [r3, #28]
 8006838:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800683c:	f040 810c 	bne.w	8006a58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006844:	2200      	movs	r2, #0
 8006846:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800684a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800684e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006852:	4622      	mov	r2, r4
 8006854:	462b      	mov	r3, r5
 8006856:	1891      	adds	r1, r2, r2
 8006858:	65b9      	str	r1, [r7, #88]	@ 0x58
 800685a:	415b      	adcs	r3, r3
 800685c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800685e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006862:	4621      	mov	r1, r4
 8006864:	eb12 0801 	adds.w	r8, r2, r1
 8006868:	4629      	mov	r1, r5
 800686a:	eb43 0901 	adc.w	r9, r3, r1
 800686e:	f04f 0200 	mov.w	r2, #0
 8006872:	f04f 0300 	mov.w	r3, #0
 8006876:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800687a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800687e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006882:	4690      	mov	r8, r2
 8006884:	4699      	mov	r9, r3
 8006886:	4623      	mov	r3, r4
 8006888:	eb18 0303 	adds.w	r3, r8, r3
 800688c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006890:	462b      	mov	r3, r5
 8006892:	eb49 0303 	adc.w	r3, r9, r3
 8006896:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800689a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80068aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80068ae:	460b      	mov	r3, r1
 80068b0:	18db      	adds	r3, r3, r3
 80068b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80068b4:	4613      	mov	r3, r2
 80068b6:	eb42 0303 	adc.w	r3, r2, r3
 80068ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80068bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80068c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80068c4:	f7fa f9e8 	bl	8000c98 <__aeabi_uldivmod>
 80068c8:	4602      	mov	r2, r0
 80068ca:	460b      	mov	r3, r1
 80068cc:	4b61      	ldr	r3, [pc, #388]	@ (8006a54 <UART_SetConfig+0x2d4>)
 80068ce:	fba3 2302 	umull	r2, r3, r3, r2
 80068d2:	095b      	lsrs	r3, r3, #5
 80068d4:	011c      	lsls	r4, r3, #4
 80068d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068da:	2200      	movs	r2, #0
 80068dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80068e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80068e8:	4642      	mov	r2, r8
 80068ea:	464b      	mov	r3, r9
 80068ec:	1891      	adds	r1, r2, r2
 80068ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80068f0:	415b      	adcs	r3, r3
 80068f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80068f8:	4641      	mov	r1, r8
 80068fa:	eb12 0a01 	adds.w	sl, r2, r1
 80068fe:	4649      	mov	r1, r9
 8006900:	eb43 0b01 	adc.w	fp, r3, r1
 8006904:	f04f 0200 	mov.w	r2, #0
 8006908:	f04f 0300 	mov.w	r3, #0
 800690c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006910:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006914:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006918:	4692      	mov	sl, r2
 800691a:	469b      	mov	fp, r3
 800691c:	4643      	mov	r3, r8
 800691e:	eb1a 0303 	adds.w	r3, sl, r3
 8006922:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006926:	464b      	mov	r3, r9
 8006928:	eb4b 0303 	adc.w	r3, fp, r3
 800692c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800693c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006940:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006944:	460b      	mov	r3, r1
 8006946:	18db      	adds	r3, r3, r3
 8006948:	643b      	str	r3, [r7, #64]	@ 0x40
 800694a:	4613      	mov	r3, r2
 800694c:	eb42 0303 	adc.w	r3, r2, r3
 8006950:	647b      	str	r3, [r7, #68]	@ 0x44
 8006952:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006956:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800695a:	f7fa f99d 	bl	8000c98 <__aeabi_uldivmod>
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	4611      	mov	r1, r2
 8006964:	4b3b      	ldr	r3, [pc, #236]	@ (8006a54 <UART_SetConfig+0x2d4>)
 8006966:	fba3 2301 	umull	r2, r3, r3, r1
 800696a:	095b      	lsrs	r3, r3, #5
 800696c:	2264      	movs	r2, #100	@ 0x64
 800696e:	fb02 f303 	mul.w	r3, r2, r3
 8006972:	1acb      	subs	r3, r1, r3
 8006974:	00db      	lsls	r3, r3, #3
 8006976:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800697a:	4b36      	ldr	r3, [pc, #216]	@ (8006a54 <UART_SetConfig+0x2d4>)
 800697c:	fba3 2302 	umull	r2, r3, r3, r2
 8006980:	095b      	lsrs	r3, r3, #5
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006988:	441c      	add	r4, r3
 800698a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800698e:	2200      	movs	r2, #0
 8006990:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006994:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006998:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800699c:	4642      	mov	r2, r8
 800699e:	464b      	mov	r3, r9
 80069a0:	1891      	adds	r1, r2, r2
 80069a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80069a4:	415b      	adcs	r3, r3
 80069a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80069ac:	4641      	mov	r1, r8
 80069ae:	1851      	adds	r1, r2, r1
 80069b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80069b2:	4649      	mov	r1, r9
 80069b4:	414b      	adcs	r3, r1
 80069b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80069b8:	f04f 0200 	mov.w	r2, #0
 80069bc:	f04f 0300 	mov.w	r3, #0
 80069c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80069c4:	4659      	mov	r1, fp
 80069c6:	00cb      	lsls	r3, r1, #3
 80069c8:	4651      	mov	r1, sl
 80069ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069ce:	4651      	mov	r1, sl
 80069d0:	00ca      	lsls	r2, r1, #3
 80069d2:	4610      	mov	r0, r2
 80069d4:	4619      	mov	r1, r3
 80069d6:	4603      	mov	r3, r0
 80069d8:	4642      	mov	r2, r8
 80069da:	189b      	adds	r3, r3, r2
 80069dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069e0:	464b      	mov	r3, r9
 80069e2:	460a      	mov	r2, r1
 80069e4:	eb42 0303 	adc.w	r3, r2, r3
 80069e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80069f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80069fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006a00:	460b      	mov	r3, r1
 8006a02:	18db      	adds	r3, r3, r3
 8006a04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a06:	4613      	mov	r3, r2
 8006a08:	eb42 0303 	adc.w	r3, r2, r3
 8006a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006a12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006a16:	f7fa f93f 	bl	8000c98 <__aeabi_uldivmod>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a54 <UART_SetConfig+0x2d4>)
 8006a20:	fba3 1302 	umull	r1, r3, r3, r2
 8006a24:	095b      	lsrs	r3, r3, #5
 8006a26:	2164      	movs	r1, #100	@ 0x64
 8006a28:	fb01 f303 	mul.w	r3, r1, r3
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	00db      	lsls	r3, r3, #3
 8006a30:	3332      	adds	r3, #50	@ 0x32
 8006a32:	4a08      	ldr	r2, [pc, #32]	@ (8006a54 <UART_SetConfig+0x2d4>)
 8006a34:	fba2 2303 	umull	r2, r3, r2, r3
 8006a38:	095b      	lsrs	r3, r3, #5
 8006a3a:	f003 0207 	and.w	r2, r3, #7
 8006a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4422      	add	r2, r4
 8006a46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a48:	e106      	b.n	8006c58 <UART_SetConfig+0x4d8>
 8006a4a:	bf00      	nop
 8006a4c:	40011000 	.word	0x40011000
 8006a50:	40011400 	.word	0x40011400
 8006a54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006a62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006a66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006a6a:	4642      	mov	r2, r8
 8006a6c:	464b      	mov	r3, r9
 8006a6e:	1891      	adds	r1, r2, r2
 8006a70:	6239      	str	r1, [r7, #32]
 8006a72:	415b      	adcs	r3, r3
 8006a74:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a7a:	4641      	mov	r1, r8
 8006a7c:	1854      	adds	r4, r2, r1
 8006a7e:	4649      	mov	r1, r9
 8006a80:	eb43 0501 	adc.w	r5, r3, r1
 8006a84:	f04f 0200 	mov.w	r2, #0
 8006a88:	f04f 0300 	mov.w	r3, #0
 8006a8c:	00eb      	lsls	r3, r5, #3
 8006a8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a92:	00e2      	lsls	r2, r4, #3
 8006a94:	4614      	mov	r4, r2
 8006a96:	461d      	mov	r5, r3
 8006a98:	4643      	mov	r3, r8
 8006a9a:	18e3      	adds	r3, r4, r3
 8006a9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006aa0:	464b      	mov	r3, r9
 8006aa2:	eb45 0303 	adc.w	r3, r5, r3
 8006aa6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ab6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006aba:	f04f 0200 	mov.w	r2, #0
 8006abe:	f04f 0300 	mov.w	r3, #0
 8006ac2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	008b      	lsls	r3, r1, #2
 8006aca:	4621      	mov	r1, r4
 8006acc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	008a      	lsls	r2, r1, #2
 8006ad4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006ad8:	f7fa f8de 	bl	8000c98 <__aeabi_uldivmod>
 8006adc:	4602      	mov	r2, r0
 8006ade:	460b      	mov	r3, r1
 8006ae0:	4b60      	ldr	r3, [pc, #384]	@ (8006c64 <UART_SetConfig+0x4e4>)
 8006ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ae6:	095b      	lsrs	r3, r3, #5
 8006ae8:	011c      	lsls	r4, r3, #4
 8006aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006aee:	2200      	movs	r2, #0
 8006af0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006af4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006af8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006afc:	4642      	mov	r2, r8
 8006afe:	464b      	mov	r3, r9
 8006b00:	1891      	adds	r1, r2, r2
 8006b02:	61b9      	str	r1, [r7, #24]
 8006b04:	415b      	adcs	r3, r3
 8006b06:	61fb      	str	r3, [r7, #28]
 8006b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b0c:	4641      	mov	r1, r8
 8006b0e:	1851      	adds	r1, r2, r1
 8006b10:	6139      	str	r1, [r7, #16]
 8006b12:	4649      	mov	r1, r9
 8006b14:	414b      	adcs	r3, r1
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	f04f 0200 	mov.w	r2, #0
 8006b1c:	f04f 0300 	mov.w	r3, #0
 8006b20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b24:	4659      	mov	r1, fp
 8006b26:	00cb      	lsls	r3, r1, #3
 8006b28:	4651      	mov	r1, sl
 8006b2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b2e:	4651      	mov	r1, sl
 8006b30:	00ca      	lsls	r2, r1, #3
 8006b32:	4610      	mov	r0, r2
 8006b34:	4619      	mov	r1, r3
 8006b36:	4603      	mov	r3, r0
 8006b38:	4642      	mov	r2, r8
 8006b3a:	189b      	adds	r3, r3, r2
 8006b3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b40:	464b      	mov	r3, r9
 8006b42:	460a      	mov	r2, r1
 8006b44:	eb42 0303 	adc.w	r3, r2, r3
 8006b48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006b58:	f04f 0200 	mov.w	r2, #0
 8006b5c:	f04f 0300 	mov.w	r3, #0
 8006b60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006b64:	4649      	mov	r1, r9
 8006b66:	008b      	lsls	r3, r1, #2
 8006b68:	4641      	mov	r1, r8
 8006b6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b6e:	4641      	mov	r1, r8
 8006b70:	008a      	lsls	r2, r1, #2
 8006b72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006b76:	f7fa f88f 	bl	8000c98 <__aeabi_uldivmod>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	4611      	mov	r1, r2
 8006b80:	4b38      	ldr	r3, [pc, #224]	@ (8006c64 <UART_SetConfig+0x4e4>)
 8006b82:	fba3 2301 	umull	r2, r3, r3, r1
 8006b86:	095b      	lsrs	r3, r3, #5
 8006b88:	2264      	movs	r2, #100	@ 0x64
 8006b8a:	fb02 f303 	mul.w	r3, r2, r3
 8006b8e:	1acb      	subs	r3, r1, r3
 8006b90:	011b      	lsls	r3, r3, #4
 8006b92:	3332      	adds	r3, #50	@ 0x32
 8006b94:	4a33      	ldr	r2, [pc, #204]	@ (8006c64 <UART_SetConfig+0x4e4>)
 8006b96:	fba2 2303 	umull	r2, r3, r2, r3
 8006b9a:	095b      	lsrs	r3, r3, #5
 8006b9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ba0:	441c      	add	r4, r3
 8006ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	673b      	str	r3, [r7, #112]	@ 0x70
 8006baa:	677a      	str	r2, [r7, #116]	@ 0x74
 8006bac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006bb0:	4642      	mov	r2, r8
 8006bb2:	464b      	mov	r3, r9
 8006bb4:	1891      	adds	r1, r2, r2
 8006bb6:	60b9      	str	r1, [r7, #8]
 8006bb8:	415b      	adcs	r3, r3
 8006bba:	60fb      	str	r3, [r7, #12]
 8006bbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bc0:	4641      	mov	r1, r8
 8006bc2:	1851      	adds	r1, r2, r1
 8006bc4:	6039      	str	r1, [r7, #0]
 8006bc6:	4649      	mov	r1, r9
 8006bc8:	414b      	adcs	r3, r1
 8006bca:	607b      	str	r3, [r7, #4]
 8006bcc:	f04f 0200 	mov.w	r2, #0
 8006bd0:	f04f 0300 	mov.w	r3, #0
 8006bd4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006bd8:	4659      	mov	r1, fp
 8006bda:	00cb      	lsls	r3, r1, #3
 8006bdc:	4651      	mov	r1, sl
 8006bde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006be2:	4651      	mov	r1, sl
 8006be4:	00ca      	lsls	r2, r1, #3
 8006be6:	4610      	mov	r0, r2
 8006be8:	4619      	mov	r1, r3
 8006bea:	4603      	mov	r3, r0
 8006bec:	4642      	mov	r2, r8
 8006bee:	189b      	adds	r3, r3, r2
 8006bf0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bf2:	464b      	mov	r3, r9
 8006bf4:	460a      	mov	r2, r1
 8006bf6:	eb42 0303 	adc.w	r3, r2, r3
 8006bfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c06:	667a      	str	r2, [r7, #100]	@ 0x64
 8006c08:	f04f 0200 	mov.w	r2, #0
 8006c0c:	f04f 0300 	mov.w	r3, #0
 8006c10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006c14:	4649      	mov	r1, r9
 8006c16:	008b      	lsls	r3, r1, #2
 8006c18:	4641      	mov	r1, r8
 8006c1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c1e:	4641      	mov	r1, r8
 8006c20:	008a      	lsls	r2, r1, #2
 8006c22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006c26:	f7fa f837 	bl	8000c98 <__aeabi_uldivmod>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c64 <UART_SetConfig+0x4e4>)
 8006c30:	fba3 1302 	umull	r1, r3, r3, r2
 8006c34:	095b      	lsrs	r3, r3, #5
 8006c36:	2164      	movs	r1, #100	@ 0x64
 8006c38:	fb01 f303 	mul.w	r3, r1, r3
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	011b      	lsls	r3, r3, #4
 8006c40:	3332      	adds	r3, #50	@ 0x32
 8006c42:	4a08      	ldr	r2, [pc, #32]	@ (8006c64 <UART_SetConfig+0x4e4>)
 8006c44:	fba2 2303 	umull	r2, r3, r2, r3
 8006c48:	095b      	lsrs	r3, r3, #5
 8006c4a:	f003 020f 	and.w	r2, r3, #15
 8006c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4422      	add	r2, r4
 8006c56:	609a      	str	r2, [r3, #8]
}
 8006c58:	bf00      	nop
 8006c5a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c64:	51eb851f 	.word	0x51eb851f

08006c68 <__cvt>:
 8006c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c6c:	ec57 6b10 	vmov	r6, r7, d0
 8006c70:	2f00      	cmp	r7, #0
 8006c72:	460c      	mov	r4, r1
 8006c74:	4619      	mov	r1, r3
 8006c76:	463b      	mov	r3, r7
 8006c78:	bfbb      	ittet	lt
 8006c7a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006c7e:	461f      	movlt	r7, r3
 8006c80:	2300      	movge	r3, #0
 8006c82:	232d      	movlt	r3, #45	@ 0x2d
 8006c84:	700b      	strb	r3, [r1, #0]
 8006c86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c88:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006c8c:	4691      	mov	r9, r2
 8006c8e:	f023 0820 	bic.w	r8, r3, #32
 8006c92:	bfbc      	itt	lt
 8006c94:	4632      	movlt	r2, r6
 8006c96:	4616      	movlt	r6, r2
 8006c98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006c9c:	d005      	beq.n	8006caa <__cvt+0x42>
 8006c9e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006ca2:	d100      	bne.n	8006ca6 <__cvt+0x3e>
 8006ca4:	3401      	adds	r4, #1
 8006ca6:	2102      	movs	r1, #2
 8006ca8:	e000      	b.n	8006cac <__cvt+0x44>
 8006caa:	2103      	movs	r1, #3
 8006cac:	ab03      	add	r3, sp, #12
 8006cae:	9301      	str	r3, [sp, #4]
 8006cb0:	ab02      	add	r3, sp, #8
 8006cb2:	9300      	str	r3, [sp, #0]
 8006cb4:	ec47 6b10 	vmov	d0, r6, r7
 8006cb8:	4653      	mov	r3, sl
 8006cba:	4622      	mov	r2, r4
 8006cbc:	f001 f880 	bl	8007dc0 <_dtoa_r>
 8006cc0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006cc4:	4605      	mov	r5, r0
 8006cc6:	d119      	bne.n	8006cfc <__cvt+0x94>
 8006cc8:	f019 0f01 	tst.w	r9, #1
 8006ccc:	d00e      	beq.n	8006cec <__cvt+0x84>
 8006cce:	eb00 0904 	add.w	r9, r0, r4
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	4639      	mov	r1, r7
 8006cda:	f7f9 fefd 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cde:	b108      	cbz	r0, 8006ce4 <__cvt+0x7c>
 8006ce0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ce4:	2230      	movs	r2, #48	@ 0x30
 8006ce6:	9b03      	ldr	r3, [sp, #12]
 8006ce8:	454b      	cmp	r3, r9
 8006cea:	d31e      	bcc.n	8006d2a <__cvt+0xc2>
 8006cec:	9b03      	ldr	r3, [sp, #12]
 8006cee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006cf0:	1b5b      	subs	r3, r3, r5
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	6013      	str	r3, [r2, #0]
 8006cf6:	b004      	add	sp, #16
 8006cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cfc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006d00:	eb00 0904 	add.w	r9, r0, r4
 8006d04:	d1e5      	bne.n	8006cd2 <__cvt+0x6a>
 8006d06:	7803      	ldrb	r3, [r0, #0]
 8006d08:	2b30      	cmp	r3, #48	@ 0x30
 8006d0a:	d10a      	bne.n	8006d22 <__cvt+0xba>
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	2300      	movs	r3, #0
 8006d10:	4630      	mov	r0, r6
 8006d12:	4639      	mov	r1, r7
 8006d14:	f7f9 fee0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d18:	b918      	cbnz	r0, 8006d22 <__cvt+0xba>
 8006d1a:	f1c4 0401 	rsb	r4, r4, #1
 8006d1e:	f8ca 4000 	str.w	r4, [sl]
 8006d22:	f8da 3000 	ldr.w	r3, [sl]
 8006d26:	4499      	add	r9, r3
 8006d28:	e7d3      	b.n	8006cd2 <__cvt+0x6a>
 8006d2a:	1c59      	adds	r1, r3, #1
 8006d2c:	9103      	str	r1, [sp, #12]
 8006d2e:	701a      	strb	r2, [r3, #0]
 8006d30:	e7d9      	b.n	8006ce6 <__cvt+0x7e>

08006d32 <__exponent>:
 8006d32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d34:	2900      	cmp	r1, #0
 8006d36:	bfba      	itte	lt
 8006d38:	4249      	neglt	r1, r1
 8006d3a:	232d      	movlt	r3, #45	@ 0x2d
 8006d3c:	232b      	movge	r3, #43	@ 0x2b
 8006d3e:	2909      	cmp	r1, #9
 8006d40:	7002      	strb	r2, [r0, #0]
 8006d42:	7043      	strb	r3, [r0, #1]
 8006d44:	dd29      	ble.n	8006d9a <__exponent+0x68>
 8006d46:	f10d 0307 	add.w	r3, sp, #7
 8006d4a:	461d      	mov	r5, r3
 8006d4c:	270a      	movs	r7, #10
 8006d4e:	461a      	mov	r2, r3
 8006d50:	fbb1 f6f7 	udiv	r6, r1, r7
 8006d54:	fb07 1416 	mls	r4, r7, r6, r1
 8006d58:	3430      	adds	r4, #48	@ 0x30
 8006d5a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006d5e:	460c      	mov	r4, r1
 8006d60:	2c63      	cmp	r4, #99	@ 0x63
 8006d62:	f103 33ff 	add.w	r3, r3, #4294967295
 8006d66:	4631      	mov	r1, r6
 8006d68:	dcf1      	bgt.n	8006d4e <__exponent+0x1c>
 8006d6a:	3130      	adds	r1, #48	@ 0x30
 8006d6c:	1e94      	subs	r4, r2, #2
 8006d6e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006d72:	1c41      	adds	r1, r0, #1
 8006d74:	4623      	mov	r3, r4
 8006d76:	42ab      	cmp	r3, r5
 8006d78:	d30a      	bcc.n	8006d90 <__exponent+0x5e>
 8006d7a:	f10d 0309 	add.w	r3, sp, #9
 8006d7e:	1a9b      	subs	r3, r3, r2
 8006d80:	42ac      	cmp	r4, r5
 8006d82:	bf88      	it	hi
 8006d84:	2300      	movhi	r3, #0
 8006d86:	3302      	adds	r3, #2
 8006d88:	4403      	add	r3, r0
 8006d8a:	1a18      	subs	r0, r3, r0
 8006d8c:	b003      	add	sp, #12
 8006d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d90:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006d94:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006d98:	e7ed      	b.n	8006d76 <__exponent+0x44>
 8006d9a:	2330      	movs	r3, #48	@ 0x30
 8006d9c:	3130      	adds	r1, #48	@ 0x30
 8006d9e:	7083      	strb	r3, [r0, #2]
 8006da0:	70c1      	strb	r1, [r0, #3]
 8006da2:	1d03      	adds	r3, r0, #4
 8006da4:	e7f1      	b.n	8006d8a <__exponent+0x58>
	...

08006da8 <_printf_float>:
 8006da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dac:	b08d      	sub	sp, #52	@ 0x34
 8006dae:	460c      	mov	r4, r1
 8006db0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006db4:	4616      	mov	r6, r2
 8006db6:	461f      	mov	r7, r3
 8006db8:	4605      	mov	r5, r0
 8006dba:	f000 fefb 	bl	8007bb4 <_localeconv_r>
 8006dbe:	6803      	ldr	r3, [r0, #0]
 8006dc0:	9304      	str	r3, [sp, #16]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7f9 fa5c 	bl	8000280 <strlen>
 8006dc8:	2300      	movs	r3, #0
 8006dca:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dcc:	f8d8 3000 	ldr.w	r3, [r8]
 8006dd0:	9005      	str	r0, [sp, #20]
 8006dd2:	3307      	adds	r3, #7
 8006dd4:	f023 0307 	bic.w	r3, r3, #7
 8006dd8:	f103 0208 	add.w	r2, r3, #8
 8006ddc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006de0:	f8d4 b000 	ldr.w	fp, [r4]
 8006de4:	f8c8 2000 	str.w	r2, [r8]
 8006de8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006dec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006df0:	9307      	str	r3, [sp, #28]
 8006df2:	f8cd 8018 	str.w	r8, [sp, #24]
 8006df6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006dfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006dfe:	4b9c      	ldr	r3, [pc, #624]	@ (8007070 <_printf_float+0x2c8>)
 8006e00:	f04f 32ff 	mov.w	r2, #4294967295
 8006e04:	f7f9 fe9a 	bl	8000b3c <__aeabi_dcmpun>
 8006e08:	bb70      	cbnz	r0, 8006e68 <_printf_float+0xc0>
 8006e0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e0e:	4b98      	ldr	r3, [pc, #608]	@ (8007070 <_printf_float+0x2c8>)
 8006e10:	f04f 32ff 	mov.w	r2, #4294967295
 8006e14:	f7f9 fe74 	bl	8000b00 <__aeabi_dcmple>
 8006e18:	bb30      	cbnz	r0, 8006e68 <_printf_float+0xc0>
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	4640      	mov	r0, r8
 8006e20:	4649      	mov	r1, r9
 8006e22:	f7f9 fe63 	bl	8000aec <__aeabi_dcmplt>
 8006e26:	b110      	cbz	r0, 8006e2e <_printf_float+0x86>
 8006e28:	232d      	movs	r3, #45	@ 0x2d
 8006e2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e2e:	4a91      	ldr	r2, [pc, #580]	@ (8007074 <_printf_float+0x2cc>)
 8006e30:	4b91      	ldr	r3, [pc, #580]	@ (8007078 <_printf_float+0x2d0>)
 8006e32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006e36:	bf8c      	ite	hi
 8006e38:	4690      	movhi	r8, r2
 8006e3a:	4698      	movls	r8, r3
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	6123      	str	r3, [r4, #16]
 8006e40:	f02b 0304 	bic.w	r3, fp, #4
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	f04f 0900 	mov.w	r9, #0
 8006e4a:	9700      	str	r7, [sp, #0]
 8006e4c:	4633      	mov	r3, r6
 8006e4e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006e50:	4621      	mov	r1, r4
 8006e52:	4628      	mov	r0, r5
 8006e54:	f000 f9d2 	bl	80071fc <_printf_common>
 8006e58:	3001      	adds	r0, #1
 8006e5a:	f040 808d 	bne.w	8006f78 <_printf_float+0x1d0>
 8006e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e62:	b00d      	add	sp, #52	@ 0x34
 8006e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e68:	4642      	mov	r2, r8
 8006e6a:	464b      	mov	r3, r9
 8006e6c:	4640      	mov	r0, r8
 8006e6e:	4649      	mov	r1, r9
 8006e70:	f7f9 fe64 	bl	8000b3c <__aeabi_dcmpun>
 8006e74:	b140      	cbz	r0, 8006e88 <_printf_float+0xe0>
 8006e76:	464b      	mov	r3, r9
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	bfbc      	itt	lt
 8006e7c:	232d      	movlt	r3, #45	@ 0x2d
 8006e7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006e82:	4a7e      	ldr	r2, [pc, #504]	@ (800707c <_printf_float+0x2d4>)
 8006e84:	4b7e      	ldr	r3, [pc, #504]	@ (8007080 <_printf_float+0x2d8>)
 8006e86:	e7d4      	b.n	8006e32 <_printf_float+0x8a>
 8006e88:	6863      	ldr	r3, [r4, #4]
 8006e8a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006e8e:	9206      	str	r2, [sp, #24]
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	d13b      	bne.n	8006f0c <_printf_float+0x164>
 8006e94:	2306      	movs	r3, #6
 8006e96:	6063      	str	r3, [r4, #4]
 8006e98:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	6022      	str	r2, [r4, #0]
 8006ea0:	9303      	str	r3, [sp, #12]
 8006ea2:	ab0a      	add	r3, sp, #40	@ 0x28
 8006ea4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006ea8:	ab09      	add	r3, sp, #36	@ 0x24
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	6861      	ldr	r1, [r4, #4]
 8006eae:	ec49 8b10 	vmov	d0, r8, r9
 8006eb2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	f7ff fed6 	bl	8006c68 <__cvt>
 8006ebc:	9b06      	ldr	r3, [sp, #24]
 8006ebe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ec0:	2b47      	cmp	r3, #71	@ 0x47
 8006ec2:	4680      	mov	r8, r0
 8006ec4:	d129      	bne.n	8006f1a <_printf_float+0x172>
 8006ec6:	1cc8      	adds	r0, r1, #3
 8006ec8:	db02      	blt.n	8006ed0 <_printf_float+0x128>
 8006eca:	6863      	ldr	r3, [r4, #4]
 8006ecc:	4299      	cmp	r1, r3
 8006ece:	dd41      	ble.n	8006f54 <_printf_float+0x1ac>
 8006ed0:	f1aa 0a02 	sub.w	sl, sl, #2
 8006ed4:	fa5f fa8a 	uxtb.w	sl, sl
 8006ed8:	3901      	subs	r1, #1
 8006eda:	4652      	mov	r2, sl
 8006edc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006ee0:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ee2:	f7ff ff26 	bl	8006d32 <__exponent>
 8006ee6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ee8:	1813      	adds	r3, r2, r0
 8006eea:	2a01      	cmp	r2, #1
 8006eec:	4681      	mov	r9, r0
 8006eee:	6123      	str	r3, [r4, #16]
 8006ef0:	dc02      	bgt.n	8006ef8 <_printf_float+0x150>
 8006ef2:	6822      	ldr	r2, [r4, #0]
 8006ef4:	07d2      	lsls	r2, r2, #31
 8006ef6:	d501      	bpl.n	8006efc <_printf_float+0x154>
 8006ef8:	3301      	adds	r3, #1
 8006efa:	6123      	str	r3, [r4, #16]
 8006efc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d0a2      	beq.n	8006e4a <_printf_float+0xa2>
 8006f04:	232d      	movs	r3, #45	@ 0x2d
 8006f06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f0a:	e79e      	b.n	8006e4a <_printf_float+0xa2>
 8006f0c:	9a06      	ldr	r2, [sp, #24]
 8006f0e:	2a47      	cmp	r2, #71	@ 0x47
 8006f10:	d1c2      	bne.n	8006e98 <_printf_float+0xf0>
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1c0      	bne.n	8006e98 <_printf_float+0xf0>
 8006f16:	2301      	movs	r3, #1
 8006f18:	e7bd      	b.n	8006e96 <_printf_float+0xee>
 8006f1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006f1e:	d9db      	bls.n	8006ed8 <_printf_float+0x130>
 8006f20:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006f24:	d118      	bne.n	8006f58 <_printf_float+0x1b0>
 8006f26:	2900      	cmp	r1, #0
 8006f28:	6863      	ldr	r3, [r4, #4]
 8006f2a:	dd0b      	ble.n	8006f44 <_printf_float+0x19c>
 8006f2c:	6121      	str	r1, [r4, #16]
 8006f2e:	b913      	cbnz	r3, 8006f36 <_printf_float+0x18e>
 8006f30:	6822      	ldr	r2, [r4, #0]
 8006f32:	07d0      	lsls	r0, r2, #31
 8006f34:	d502      	bpl.n	8006f3c <_printf_float+0x194>
 8006f36:	3301      	adds	r3, #1
 8006f38:	440b      	add	r3, r1
 8006f3a:	6123      	str	r3, [r4, #16]
 8006f3c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006f3e:	f04f 0900 	mov.w	r9, #0
 8006f42:	e7db      	b.n	8006efc <_printf_float+0x154>
 8006f44:	b913      	cbnz	r3, 8006f4c <_printf_float+0x1a4>
 8006f46:	6822      	ldr	r2, [r4, #0]
 8006f48:	07d2      	lsls	r2, r2, #31
 8006f4a:	d501      	bpl.n	8006f50 <_printf_float+0x1a8>
 8006f4c:	3302      	adds	r3, #2
 8006f4e:	e7f4      	b.n	8006f3a <_printf_float+0x192>
 8006f50:	2301      	movs	r3, #1
 8006f52:	e7f2      	b.n	8006f3a <_printf_float+0x192>
 8006f54:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006f58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f5a:	4299      	cmp	r1, r3
 8006f5c:	db05      	blt.n	8006f6a <_printf_float+0x1c2>
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	6121      	str	r1, [r4, #16]
 8006f62:	07d8      	lsls	r0, r3, #31
 8006f64:	d5ea      	bpl.n	8006f3c <_printf_float+0x194>
 8006f66:	1c4b      	adds	r3, r1, #1
 8006f68:	e7e7      	b.n	8006f3a <_printf_float+0x192>
 8006f6a:	2900      	cmp	r1, #0
 8006f6c:	bfd4      	ite	le
 8006f6e:	f1c1 0202 	rsble	r2, r1, #2
 8006f72:	2201      	movgt	r2, #1
 8006f74:	4413      	add	r3, r2
 8006f76:	e7e0      	b.n	8006f3a <_printf_float+0x192>
 8006f78:	6823      	ldr	r3, [r4, #0]
 8006f7a:	055a      	lsls	r2, r3, #21
 8006f7c:	d407      	bmi.n	8006f8e <_printf_float+0x1e6>
 8006f7e:	6923      	ldr	r3, [r4, #16]
 8006f80:	4642      	mov	r2, r8
 8006f82:	4631      	mov	r1, r6
 8006f84:	4628      	mov	r0, r5
 8006f86:	47b8      	blx	r7
 8006f88:	3001      	adds	r0, #1
 8006f8a:	d12b      	bne.n	8006fe4 <_printf_float+0x23c>
 8006f8c:	e767      	b.n	8006e5e <_printf_float+0xb6>
 8006f8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006f92:	f240 80dd 	bls.w	8007150 <_printf_float+0x3a8>
 8006f96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	f7f9 fd9b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fa2:	2800      	cmp	r0, #0
 8006fa4:	d033      	beq.n	800700e <_printf_float+0x266>
 8006fa6:	4a37      	ldr	r2, [pc, #220]	@ (8007084 <_printf_float+0x2dc>)
 8006fa8:	2301      	movs	r3, #1
 8006faa:	4631      	mov	r1, r6
 8006fac:	4628      	mov	r0, r5
 8006fae:	47b8      	blx	r7
 8006fb0:	3001      	adds	r0, #1
 8006fb2:	f43f af54 	beq.w	8006e5e <_printf_float+0xb6>
 8006fb6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006fba:	4543      	cmp	r3, r8
 8006fbc:	db02      	blt.n	8006fc4 <_printf_float+0x21c>
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	07d8      	lsls	r0, r3, #31
 8006fc2:	d50f      	bpl.n	8006fe4 <_printf_float+0x23c>
 8006fc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fc8:	4631      	mov	r1, r6
 8006fca:	4628      	mov	r0, r5
 8006fcc:	47b8      	blx	r7
 8006fce:	3001      	adds	r0, #1
 8006fd0:	f43f af45 	beq.w	8006e5e <_printf_float+0xb6>
 8006fd4:	f04f 0900 	mov.w	r9, #0
 8006fd8:	f108 38ff 	add.w	r8, r8, #4294967295
 8006fdc:	f104 0a1a 	add.w	sl, r4, #26
 8006fe0:	45c8      	cmp	r8, r9
 8006fe2:	dc09      	bgt.n	8006ff8 <_printf_float+0x250>
 8006fe4:	6823      	ldr	r3, [r4, #0]
 8006fe6:	079b      	lsls	r3, r3, #30
 8006fe8:	f100 8103 	bmi.w	80071f2 <_printf_float+0x44a>
 8006fec:	68e0      	ldr	r0, [r4, #12]
 8006fee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ff0:	4298      	cmp	r0, r3
 8006ff2:	bfb8      	it	lt
 8006ff4:	4618      	movlt	r0, r3
 8006ff6:	e734      	b.n	8006e62 <_printf_float+0xba>
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	4652      	mov	r2, sl
 8006ffc:	4631      	mov	r1, r6
 8006ffe:	4628      	mov	r0, r5
 8007000:	47b8      	blx	r7
 8007002:	3001      	adds	r0, #1
 8007004:	f43f af2b 	beq.w	8006e5e <_printf_float+0xb6>
 8007008:	f109 0901 	add.w	r9, r9, #1
 800700c:	e7e8      	b.n	8006fe0 <_printf_float+0x238>
 800700e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007010:	2b00      	cmp	r3, #0
 8007012:	dc39      	bgt.n	8007088 <_printf_float+0x2e0>
 8007014:	4a1b      	ldr	r2, [pc, #108]	@ (8007084 <_printf_float+0x2dc>)
 8007016:	2301      	movs	r3, #1
 8007018:	4631      	mov	r1, r6
 800701a:	4628      	mov	r0, r5
 800701c:	47b8      	blx	r7
 800701e:	3001      	adds	r0, #1
 8007020:	f43f af1d 	beq.w	8006e5e <_printf_float+0xb6>
 8007024:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007028:	ea59 0303 	orrs.w	r3, r9, r3
 800702c:	d102      	bne.n	8007034 <_printf_float+0x28c>
 800702e:	6823      	ldr	r3, [r4, #0]
 8007030:	07d9      	lsls	r1, r3, #31
 8007032:	d5d7      	bpl.n	8006fe4 <_printf_float+0x23c>
 8007034:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007038:	4631      	mov	r1, r6
 800703a:	4628      	mov	r0, r5
 800703c:	47b8      	blx	r7
 800703e:	3001      	adds	r0, #1
 8007040:	f43f af0d 	beq.w	8006e5e <_printf_float+0xb6>
 8007044:	f04f 0a00 	mov.w	sl, #0
 8007048:	f104 0b1a 	add.w	fp, r4, #26
 800704c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800704e:	425b      	negs	r3, r3
 8007050:	4553      	cmp	r3, sl
 8007052:	dc01      	bgt.n	8007058 <_printf_float+0x2b0>
 8007054:	464b      	mov	r3, r9
 8007056:	e793      	b.n	8006f80 <_printf_float+0x1d8>
 8007058:	2301      	movs	r3, #1
 800705a:	465a      	mov	r2, fp
 800705c:	4631      	mov	r1, r6
 800705e:	4628      	mov	r0, r5
 8007060:	47b8      	blx	r7
 8007062:	3001      	adds	r0, #1
 8007064:	f43f aefb 	beq.w	8006e5e <_printf_float+0xb6>
 8007068:	f10a 0a01 	add.w	sl, sl, #1
 800706c:	e7ee      	b.n	800704c <_printf_float+0x2a4>
 800706e:	bf00      	nop
 8007070:	7fefffff 	.word	0x7fefffff
 8007074:	0800b4f4 	.word	0x0800b4f4
 8007078:	0800b4f0 	.word	0x0800b4f0
 800707c:	0800b4fc 	.word	0x0800b4fc
 8007080:	0800b4f8 	.word	0x0800b4f8
 8007084:	0800b500 	.word	0x0800b500
 8007088:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800708a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800708e:	4553      	cmp	r3, sl
 8007090:	bfa8      	it	ge
 8007092:	4653      	movge	r3, sl
 8007094:	2b00      	cmp	r3, #0
 8007096:	4699      	mov	r9, r3
 8007098:	dc36      	bgt.n	8007108 <_printf_float+0x360>
 800709a:	f04f 0b00 	mov.w	fp, #0
 800709e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070a2:	f104 021a 	add.w	r2, r4, #26
 80070a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80070a8:	9306      	str	r3, [sp, #24]
 80070aa:	eba3 0309 	sub.w	r3, r3, r9
 80070ae:	455b      	cmp	r3, fp
 80070b0:	dc31      	bgt.n	8007116 <_printf_float+0x36e>
 80070b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070b4:	459a      	cmp	sl, r3
 80070b6:	dc3a      	bgt.n	800712e <_printf_float+0x386>
 80070b8:	6823      	ldr	r3, [r4, #0]
 80070ba:	07da      	lsls	r2, r3, #31
 80070bc:	d437      	bmi.n	800712e <_printf_float+0x386>
 80070be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070c0:	ebaa 0903 	sub.w	r9, sl, r3
 80070c4:	9b06      	ldr	r3, [sp, #24]
 80070c6:	ebaa 0303 	sub.w	r3, sl, r3
 80070ca:	4599      	cmp	r9, r3
 80070cc:	bfa8      	it	ge
 80070ce:	4699      	movge	r9, r3
 80070d0:	f1b9 0f00 	cmp.w	r9, #0
 80070d4:	dc33      	bgt.n	800713e <_printf_float+0x396>
 80070d6:	f04f 0800 	mov.w	r8, #0
 80070da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070de:	f104 0b1a 	add.w	fp, r4, #26
 80070e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070e4:	ebaa 0303 	sub.w	r3, sl, r3
 80070e8:	eba3 0309 	sub.w	r3, r3, r9
 80070ec:	4543      	cmp	r3, r8
 80070ee:	f77f af79 	ble.w	8006fe4 <_printf_float+0x23c>
 80070f2:	2301      	movs	r3, #1
 80070f4:	465a      	mov	r2, fp
 80070f6:	4631      	mov	r1, r6
 80070f8:	4628      	mov	r0, r5
 80070fa:	47b8      	blx	r7
 80070fc:	3001      	adds	r0, #1
 80070fe:	f43f aeae 	beq.w	8006e5e <_printf_float+0xb6>
 8007102:	f108 0801 	add.w	r8, r8, #1
 8007106:	e7ec      	b.n	80070e2 <_printf_float+0x33a>
 8007108:	4642      	mov	r2, r8
 800710a:	4631      	mov	r1, r6
 800710c:	4628      	mov	r0, r5
 800710e:	47b8      	blx	r7
 8007110:	3001      	adds	r0, #1
 8007112:	d1c2      	bne.n	800709a <_printf_float+0x2f2>
 8007114:	e6a3      	b.n	8006e5e <_printf_float+0xb6>
 8007116:	2301      	movs	r3, #1
 8007118:	4631      	mov	r1, r6
 800711a:	4628      	mov	r0, r5
 800711c:	9206      	str	r2, [sp, #24]
 800711e:	47b8      	blx	r7
 8007120:	3001      	adds	r0, #1
 8007122:	f43f ae9c 	beq.w	8006e5e <_printf_float+0xb6>
 8007126:	9a06      	ldr	r2, [sp, #24]
 8007128:	f10b 0b01 	add.w	fp, fp, #1
 800712c:	e7bb      	b.n	80070a6 <_printf_float+0x2fe>
 800712e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007132:	4631      	mov	r1, r6
 8007134:	4628      	mov	r0, r5
 8007136:	47b8      	blx	r7
 8007138:	3001      	adds	r0, #1
 800713a:	d1c0      	bne.n	80070be <_printf_float+0x316>
 800713c:	e68f      	b.n	8006e5e <_printf_float+0xb6>
 800713e:	9a06      	ldr	r2, [sp, #24]
 8007140:	464b      	mov	r3, r9
 8007142:	4442      	add	r2, r8
 8007144:	4631      	mov	r1, r6
 8007146:	4628      	mov	r0, r5
 8007148:	47b8      	blx	r7
 800714a:	3001      	adds	r0, #1
 800714c:	d1c3      	bne.n	80070d6 <_printf_float+0x32e>
 800714e:	e686      	b.n	8006e5e <_printf_float+0xb6>
 8007150:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007154:	f1ba 0f01 	cmp.w	sl, #1
 8007158:	dc01      	bgt.n	800715e <_printf_float+0x3b6>
 800715a:	07db      	lsls	r3, r3, #31
 800715c:	d536      	bpl.n	80071cc <_printf_float+0x424>
 800715e:	2301      	movs	r3, #1
 8007160:	4642      	mov	r2, r8
 8007162:	4631      	mov	r1, r6
 8007164:	4628      	mov	r0, r5
 8007166:	47b8      	blx	r7
 8007168:	3001      	adds	r0, #1
 800716a:	f43f ae78 	beq.w	8006e5e <_printf_float+0xb6>
 800716e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007172:	4631      	mov	r1, r6
 8007174:	4628      	mov	r0, r5
 8007176:	47b8      	blx	r7
 8007178:	3001      	adds	r0, #1
 800717a:	f43f ae70 	beq.w	8006e5e <_printf_float+0xb6>
 800717e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007182:	2200      	movs	r2, #0
 8007184:	2300      	movs	r3, #0
 8007186:	f10a 3aff 	add.w	sl, sl, #4294967295
 800718a:	f7f9 fca5 	bl	8000ad8 <__aeabi_dcmpeq>
 800718e:	b9c0      	cbnz	r0, 80071c2 <_printf_float+0x41a>
 8007190:	4653      	mov	r3, sl
 8007192:	f108 0201 	add.w	r2, r8, #1
 8007196:	4631      	mov	r1, r6
 8007198:	4628      	mov	r0, r5
 800719a:	47b8      	blx	r7
 800719c:	3001      	adds	r0, #1
 800719e:	d10c      	bne.n	80071ba <_printf_float+0x412>
 80071a0:	e65d      	b.n	8006e5e <_printf_float+0xb6>
 80071a2:	2301      	movs	r3, #1
 80071a4:	465a      	mov	r2, fp
 80071a6:	4631      	mov	r1, r6
 80071a8:	4628      	mov	r0, r5
 80071aa:	47b8      	blx	r7
 80071ac:	3001      	adds	r0, #1
 80071ae:	f43f ae56 	beq.w	8006e5e <_printf_float+0xb6>
 80071b2:	f108 0801 	add.w	r8, r8, #1
 80071b6:	45d0      	cmp	r8, sl
 80071b8:	dbf3      	blt.n	80071a2 <_printf_float+0x3fa>
 80071ba:	464b      	mov	r3, r9
 80071bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80071c0:	e6df      	b.n	8006f82 <_printf_float+0x1da>
 80071c2:	f04f 0800 	mov.w	r8, #0
 80071c6:	f104 0b1a 	add.w	fp, r4, #26
 80071ca:	e7f4      	b.n	80071b6 <_printf_float+0x40e>
 80071cc:	2301      	movs	r3, #1
 80071ce:	4642      	mov	r2, r8
 80071d0:	e7e1      	b.n	8007196 <_printf_float+0x3ee>
 80071d2:	2301      	movs	r3, #1
 80071d4:	464a      	mov	r2, r9
 80071d6:	4631      	mov	r1, r6
 80071d8:	4628      	mov	r0, r5
 80071da:	47b8      	blx	r7
 80071dc:	3001      	adds	r0, #1
 80071de:	f43f ae3e 	beq.w	8006e5e <_printf_float+0xb6>
 80071e2:	f108 0801 	add.w	r8, r8, #1
 80071e6:	68e3      	ldr	r3, [r4, #12]
 80071e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80071ea:	1a5b      	subs	r3, r3, r1
 80071ec:	4543      	cmp	r3, r8
 80071ee:	dcf0      	bgt.n	80071d2 <_printf_float+0x42a>
 80071f0:	e6fc      	b.n	8006fec <_printf_float+0x244>
 80071f2:	f04f 0800 	mov.w	r8, #0
 80071f6:	f104 0919 	add.w	r9, r4, #25
 80071fa:	e7f4      	b.n	80071e6 <_printf_float+0x43e>

080071fc <_printf_common>:
 80071fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007200:	4616      	mov	r6, r2
 8007202:	4698      	mov	r8, r3
 8007204:	688a      	ldr	r2, [r1, #8]
 8007206:	690b      	ldr	r3, [r1, #16]
 8007208:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800720c:	4293      	cmp	r3, r2
 800720e:	bfb8      	it	lt
 8007210:	4613      	movlt	r3, r2
 8007212:	6033      	str	r3, [r6, #0]
 8007214:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007218:	4607      	mov	r7, r0
 800721a:	460c      	mov	r4, r1
 800721c:	b10a      	cbz	r2, 8007222 <_printf_common+0x26>
 800721e:	3301      	adds	r3, #1
 8007220:	6033      	str	r3, [r6, #0]
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	0699      	lsls	r1, r3, #26
 8007226:	bf42      	ittt	mi
 8007228:	6833      	ldrmi	r3, [r6, #0]
 800722a:	3302      	addmi	r3, #2
 800722c:	6033      	strmi	r3, [r6, #0]
 800722e:	6825      	ldr	r5, [r4, #0]
 8007230:	f015 0506 	ands.w	r5, r5, #6
 8007234:	d106      	bne.n	8007244 <_printf_common+0x48>
 8007236:	f104 0a19 	add.w	sl, r4, #25
 800723a:	68e3      	ldr	r3, [r4, #12]
 800723c:	6832      	ldr	r2, [r6, #0]
 800723e:	1a9b      	subs	r3, r3, r2
 8007240:	42ab      	cmp	r3, r5
 8007242:	dc26      	bgt.n	8007292 <_printf_common+0x96>
 8007244:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007248:	6822      	ldr	r2, [r4, #0]
 800724a:	3b00      	subs	r3, #0
 800724c:	bf18      	it	ne
 800724e:	2301      	movne	r3, #1
 8007250:	0692      	lsls	r2, r2, #26
 8007252:	d42b      	bmi.n	80072ac <_printf_common+0xb0>
 8007254:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007258:	4641      	mov	r1, r8
 800725a:	4638      	mov	r0, r7
 800725c:	47c8      	blx	r9
 800725e:	3001      	adds	r0, #1
 8007260:	d01e      	beq.n	80072a0 <_printf_common+0xa4>
 8007262:	6823      	ldr	r3, [r4, #0]
 8007264:	6922      	ldr	r2, [r4, #16]
 8007266:	f003 0306 	and.w	r3, r3, #6
 800726a:	2b04      	cmp	r3, #4
 800726c:	bf02      	ittt	eq
 800726e:	68e5      	ldreq	r5, [r4, #12]
 8007270:	6833      	ldreq	r3, [r6, #0]
 8007272:	1aed      	subeq	r5, r5, r3
 8007274:	68a3      	ldr	r3, [r4, #8]
 8007276:	bf0c      	ite	eq
 8007278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800727c:	2500      	movne	r5, #0
 800727e:	4293      	cmp	r3, r2
 8007280:	bfc4      	itt	gt
 8007282:	1a9b      	subgt	r3, r3, r2
 8007284:	18ed      	addgt	r5, r5, r3
 8007286:	2600      	movs	r6, #0
 8007288:	341a      	adds	r4, #26
 800728a:	42b5      	cmp	r5, r6
 800728c:	d11a      	bne.n	80072c4 <_printf_common+0xc8>
 800728e:	2000      	movs	r0, #0
 8007290:	e008      	b.n	80072a4 <_printf_common+0xa8>
 8007292:	2301      	movs	r3, #1
 8007294:	4652      	mov	r2, sl
 8007296:	4641      	mov	r1, r8
 8007298:	4638      	mov	r0, r7
 800729a:	47c8      	blx	r9
 800729c:	3001      	adds	r0, #1
 800729e:	d103      	bne.n	80072a8 <_printf_common+0xac>
 80072a0:	f04f 30ff 	mov.w	r0, #4294967295
 80072a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a8:	3501      	adds	r5, #1
 80072aa:	e7c6      	b.n	800723a <_printf_common+0x3e>
 80072ac:	18e1      	adds	r1, r4, r3
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	2030      	movs	r0, #48	@ 0x30
 80072b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80072b6:	4422      	add	r2, r4
 80072b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80072bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80072c0:	3302      	adds	r3, #2
 80072c2:	e7c7      	b.n	8007254 <_printf_common+0x58>
 80072c4:	2301      	movs	r3, #1
 80072c6:	4622      	mov	r2, r4
 80072c8:	4641      	mov	r1, r8
 80072ca:	4638      	mov	r0, r7
 80072cc:	47c8      	blx	r9
 80072ce:	3001      	adds	r0, #1
 80072d0:	d0e6      	beq.n	80072a0 <_printf_common+0xa4>
 80072d2:	3601      	adds	r6, #1
 80072d4:	e7d9      	b.n	800728a <_printf_common+0x8e>
	...

080072d8 <_printf_i>:
 80072d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072dc:	7e0f      	ldrb	r7, [r1, #24]
 80072de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80072e0:	2f78      	cmp	r7, #120	@ 0x78
 80072e2:	4691      	mov	r9, r2
 80072e4:	4680      	mov	r8, r0
 80072e6:	460c      	mov	r4, r1
 80072e8:	469a      	mov	sl, r3
 80072ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80072ee:	d807      	bhi.n	8007300 <_printf_i+0x28>
 80072f0:	2f62      	cmp	r7, #98	@ 0x62
 80072f2:	d80a      	bhi.n	800730a <_printf_i+0x32>
 80072f4:	2f00      	cmp	r7, #0
 80072f6:	f000 80d1 	beq.w	800749c <_printf_i+0x1c4>
 80072fa:	2f58      	cmp	r7, #88	@ 0x58
 80072fc:	f000 80b8 	beq.w	8007470 <_printf_i+0x198>
 8007300:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007304:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007308:	e03a      	b.n	8007380 <_printf_i+0xa8>
 800730a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800730e:	2b15      	cmp	r3, #21
 8007310:	d8f6      	bhi.n	8007300 <_printf_i+0x28>
 8007312:	a101      	add	r1, pc, #4	@ (adr r1, 8007318 <_printf_i+0x40>)
 8007314:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007318:	08007371 	.word	0x08007371
 800731c:	08007385 	.word	0x08007385
 8007320:	08007301 	.word	0x08007301
 8007324:	08007301 	.word	0x08007301
 8007328:	08007301 	.word	0x08007301
 800732c:	08007301 	.word	0x08007301
 8007330:	08007385 	.word	0x08007385
 8007334:	08007301 	.word	0x08007301
 8007338:	08007301 	.word	0x08007301
 800733c:	08007301 	.word	0x08007301
 8007340:	08007301 	.word	0x08007301
 8007344:	08007483 	.word	0x08007483
 8007348:	080073af 	.word	0x080073af
 800734c:	0800743d 	.word	0x0800743d
 8007350:	08007301 	.word	0x08007301
 8007354:	08007301 	.word	0x08007301
 8007358:	080074a5 	.word	0x080074a5
 800735c:	08007301 	.word	0x08007301
 8007360:	080073af 	.word	0x080073af
 8007364:	08007301 	.word	0x08007301
 8007368:	08007301 	.word	0x08007301
 800736c:	08007445 	.word	0x08007445
 8007370:	6833      	ldr	r3, [r6, #0]
 8007372:	1d1a      	adds	r2, r3, #4
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	6032      	str	r2, [r6, #0]
 8007378:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800737c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007380:	2301      	movs	r3, #1
 8007382:	e09c      	b.n	80074be <_printf_i+0x1e6>
 8007384:	6833      	ldr	r3, [r6, #0]
 8007386:	6820      	ldr	r0, [r4, #0]
 8007388:	1d19      	adds	r1, r3, #4
 800738a:	6031      	str	r1, [r6, #0]
 800738c:	0606      	lsls	r6, r0, #24
 800738e:	d501      	bpl.n	8007394 <_printf_i+0xbc>
 8007390:	681d      	ldr	r5, [r3, #0]
 8007392:	e003      	b.n	800739c <_printf_i+0xc4>
 8007394:	0645      	lsls	r5, r0, #25
 8007396:	d5fb      	bpl.n	8007390 <_printf_i+0xb8>
 8007398:	f9b3 5000 	ldrsh.w	r5, [r3]
 800739c:	2d00      	cmp	r5, #0
 800739e:	da03      	bge.n	80073a8 <_printf_i+0xd0>
 80073a0:	232d      	movs	r3, #45	@ 0x2d
 80073a2:	426d      	negs	r5, r5
 80073a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073a8:	4858      	ldr	r0, [pc, #352]	@ (800750c <_printf_i+0x234>)
 80073aa:	230a      	movs	r3, #10
 80073ac:	e011      	b.n	80073d2 <_printf_i+0xfa>
 80073ae:	6821      	ldr	r1, [r4, #0]
 80073b0:	6833      	ldr	r3, [r6, #0]
 80073b2:	0608      	lsls	r0, r1, #24
 80073b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80073b8:	d402      	bmi.n	80073c0 <_printf_i+0xe8>
 80073ba:	0649      	lsls	r1, r1, #25
 80073bc:	bf48      	it	mi
 80073be:	b2ad      	uxthmi	r5, r5
 80073c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80073c2:	4852      	ldr	r0, [pc, #328]	@ (800750c <_printf_i+0x234>)
 80073c4:	6033      	str	r3, [r6, #0]
 80073c6:	bf14      	ite	ne
 80073c8:	230a      	movne	r3, #10
 80073ca:	2308      	moveq	r3, #8
 80073cc:	2100      	movs	r1, #0
 80073ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80073d2:	6866      	ldr	r6, [r4, #4]
 80073d4:	60a6      	str	r6, [r4, #8]
 80073d6:	2e00      	cmp	r6, #0
 80073d8:	db05      	blt.n	80073e6 <_printf_i+0x10e>
 80073da:	6821      	ldr	r1, [r4, #0]
 80073dc:	432e      	orrs	r6, r5
 80073de:	f021 0104 	bic.w	r1, r1, #4
 80073e2:	6021      	str	r1, [r4, #0]
 80073e4:	d04b      	beq.n	800747e <_printf_i+0x1a6>
 80073e6:	4616      	mov	r6, r2
 80073e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80073ec:	fb03 5711 	mls	r7, r3, r1, r5
 80073f0:	5dc7      	ldrb	r7, [r0, r7]
 80073f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073f6:	462f      	mov	r7, r5
 80073f8:	42bb      	cmp	r3, r7
 80073fa:	460d      	mov	r5, r1
 80073fc:	d9f4      	bls.n	80073e8 <_printf_i+0x110>
 80073fe:	2b08      	cmp	r3, #8
 8007400:	d10b      	bne.n	800741a <_printf_i+0x142>
 8007402:	6823      	ldr	r3, [r4, #0]
 8007404:	07df      	lsls	r7, r3, #31
 8007406:	d508      	bpl.n	800741a <_printf_i+0x142>
 8007408:	6923      	ldr	r3, [r4, #16]
 800740a:	6861      	ldr	r1, [r4, #4]
 800740c:	4299      	cmp	r1, r3
 800740e:	bfde      	ittt	le
 8007410:	2330      	movle	r3, #48	@ 0x30
 8007412:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007416:	f106 36ff 	addle.w	r6, r6, #4294967295
 800741a:	1b92      	subs	r2, r2, r6
 800741c:	6122      	str	r2, [r4, #16]
 800741e:	f8cd a000 	str.w	sl, [sp]
 8007422:	464b      	mov	r3, r9
 8007424:	aa03      	add	r2, sp, #12
 8007426:	4621      	mov	r1, r4
 8007428:	4640      	mov	r0, r8
 800742a:	f7ff fee7 	bl	80071fc <_printf_common>
 800742e:	3001      	adds	r0, #1
 8007430:	d14a      	bne.n	80074c8 <_printf_i+0x1f0>
 8007432:	f04f 30ff 	mov.w	r0, #4294967295
 8007436:	b004      	add	sp, #16
 8007438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	f043 0320 	orr.w	r3, r3, #32
 8007442:	6023      	str	r3, [r4, #0]
 8007444:	4832      	ldr	r0, [pc, #200]	@ (8007510 <_printf_i+0x238>)
 8007446:	2778      	movs	r7, #120	@ 0x78
 8007448:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	6831      	ldr	r1, [r6, #0]
 8007450:	061f      	lsls	r7, r3, #24
 8007452:	f851 5b04 	ldr.w	r5, [r1], #4
 8007456:	d402      	bmi.n	800745e <_printf_i+0x186>
 8007458:	065f      	lsls	r7, r3, #25
 800745a:	bf48      	it	mi
 800745c:	b2ad      	uxthmi	r5, r5
 800745e:	6031      	str	r1, [r6, #0]
 8007460:	07d9      	lsls	r1, r3, #31
 8007462:	bf44      	itt	mi
 8007464:	f043 0320 	orrmi.w	r3, r3, #32
 8007468:	6023      	strmi	r3, [r4, #0]
 800746a:	b11d      	cbz	r5, 8007474 <_printf_i+0x19c>
 800746c:	2310      	movs	r3, #16
 800746e:	e7ad      	b.n	80073cc <_printf_i+0xf4>
 8007470:	4826      	ldr	r0, [pc, #152]	@ (800750c <_printf_i+0x234>)
 8007472:	e7e9      	b.n	8007448 <_printf_i+0x170>
 8007474:	6823      	ldr	r3, [r4, #0]
 8007476:	f023 0320 	bic.w	r3, r3, #32
 800747a:	6023      	str	r3, [r4, #0]
 800747c:	e7f6      	b.n	800746c <_printf_i+0x194>
 800747e:	4616      	mov	r6, r2
 8007480:	e7bd      	b.n	80073fe <_printf_i+0x126>
 8007482:	6833      	ldr	r3, [r6, #0]
 8007484:	6825      	ldr	r5, [r4, #0]
 8007486:	6961      	ldr	r1, [r4, #20]
 8007488:	1d18      	adds	r0, r3, #4
 800748a:	6030      	str	r0, [r6, #0]
 800748c:	062e      	lsls	r6, r5, #24
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	d501      	bpl.n	8007496 <_printf_i+0x1be>
 8007492:	6019      	str	r1, [r3, #0]
 8007494:	e002      	b.n	800749c <_printf_i+0x1c4>
 8007496:	0668      	lsls	r0, r5, #25
 8007498:	d5fb      	bpl.n	8007492 <_printf_i+0x1ba>
 800749a:	8019      	strh	r1, [r3, #0]
 800749c:	2300      	movs	r3, #0
 800749e:	6123      	str	r3, [r4, #16]
 80074a0:	4616      	mov	r6, r2
 80074a2:	e7bc      	b.n	800741e <_printf_i+0x146>
 80074a4:	6833      	ldr	r3, [r6, #0]
 80074a6:	1d1a      	adds	r2, r3, #4
 80074a8:	6032      	str	r2, [r6, #0]
 80074aa:	681e      	ldr	r6, [r3, #0]
 80074ac:	6862      	ldr	r2, [r4, #4]
 80074ae:	2100      	movs	r1, #0
 80074b0:	4630      	mov	r0, r6
 80074b2:	f7f8 fe95 	bl	80001e0 <memchr>
 80074b6:	b108      	cbz	r0, 80074bc <_printf_i+0x1e4>
 80074b8:	1b80      	subs	r0, r0, r6
 80074ba:	6060      	str	r0, [r4, #4]
 80074bc:	6863      	ldr	r3, [r4, #4]
 80074be:	6123      	str	r3, [r4, #16]
 80074c0:	2300      	movs	r3, #0
 80074c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074c6:	e7aa      	b.n	800741e <_printf_i+0x146>
 80074c8:	6923      	ldr	r3, [r4, #16]
 80074ca:	4632      	mov	r2, r6
 80074cc:	4649      	mov	r1, r9
 80074ce:	4640      	mov	r0, r8
 80074d0:	47d0      	blx	sl
 80074d2:	3001      	adds	r0, #1
 80074d4:	d0ad      	beq.n	8007432 <_printf_i+0x15a>
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	079b      	lsls	r3, r3, #30
 80074da:	d413      	bmi.n	8007504 <_printf_i+0x22c>
 80074dc:	68e0      	ldr	r0, [r4, #12]
 80074de:	9b03      	ldr	r3, [sp, #12]
 80074e0:	4298      	cmp	r0, r3
 80074e2:	bfb8      	it	lt
 80074e4:	4618      	movlt	r0, r3
 80074e6:	e7a6      	b.n	8007436 <_printf_i+0x15e>
 80074e8:	2301      	movs	r3, #1
 80074ea:	4632      	mov	r2, r6
 80074ec:	4649      	mov	r1, r9
 80074ee:	4640      	mov	r0, r8
 80074f0:	47d0      	blx	sl
 80074f2:	3001      	adds	r0, #1
 80074f4:	d09d      	beq.n	8007432 <_printf_i+0x15a>
 80074f6:	3501      	adds	r5, #1
 80074f8:	68e3      	ldr	r3, [r4, #12]
 80074fa:	9903      	ldr	r1, [sp, #12]
 80074fc:	1a5b      	subs	r3, r3, r1
 80074fe:	42ab      	cmp	r3, r5
 8007500:	dcf2      	bgt.n	80074e8 <_printf_i+0x210>
 8007502:	e7eb      	b.n	80074dc <_printf_i+0x204>
 8007504:	2500      	movs	r5, #0
 8007506:	f104 0619 	add.w	r6, r4, #25
 800750a:	e7f5      	b.n	80074f8 <_printf_i+0x220>
 800750c:	0800b502 	.word	0x0800b502
 8007510:	0800b513 	.word	0x0800b513

08007514 <_scanf_float>:
 8007514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007518:	b087      	sub	sp, #28
 800751a:	4691      	mov	r9, r2
 800751c:	9303      	str	r3, [sp, #12]
 800751e:	688b      	ldr	r3, [r1, #8]
 8007520:	1e5a      	subs	r2, r3, #1
 8007522:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007526:	bf81      	itttt	hi
 8007528:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800752c:	eb03 0b05 	addhi.w	fp, r3, r5
 8007530:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007534:	608b      	strhi	r3, [r1, #8]
 8007536:	680b      	ldr	r3, [r1, #0]
 8007538:	460a      	mov	r2, r1
 800753a:	f04f 0500 	mov.w	r5, #0
 800753e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007542:	f842 3b1c 	str.w	r3, [r2], #28
 8007546:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800754a:	4680      	mov	r8, r0
 800754c:	460c      	mov	r4, r1
 800754e:	bf98      	it	ls
 8007550:	f04f 0b00 	movls.w	fp, #0
 8007554:	9201      	str	r2, [sp, #4]
 8007556:	4616      	mov	r6, r2
 8007558:	46aa      	mov	sl, r5
 800755a:	462f      	mov	r7, r5
 800755c:	9502      	str	r5, [sp, #8]
 800755e:	68a2      	ldr	r2, [r4, #8]
 8007560:	b15a      	cbz	r2, 800757a <_scanf_float+0x66>
 8007562:	f8d9 3000 	ldr.w	r3, [r9]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	2b4e      	cmp	r3, #78	@ 0x4e
 800756a:	d863      	bhi.n	8007634 <_scanf_float+0x120>
 800756c:	2b40      	cmp	r3, #64	@ 0x40
 800756e:	d83b      	bhi.n	80075e8 <_scanf_float+0xd4>
 8007570:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007574:	b2c8      	uxtb	r0, r1
 8007576:	280e      	cmp	r0, #14
 8007578:	d939      	bls.n	80075ee <_scanf_float+0xda>
 800757a:	b11f      	cbz	r7, 8007584 <_scanf_float+0x70>
 800757c:	6823      	ldr	r3, [r4, #0]
 800757e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007582:	6023      	str	r3, [r4, #0]
 8007584:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007588:	f1ba 0f01 	cmp.w	sl, #1
 800758c:	f200 8114 	bhi.w	80077b8 <_scanf_float+0x2a4>
 8007590:	9b01      	ldr	r3, [sp, #4]
 8007592:	429e      	cmp	r6, r3
 8007594:	f200 8105 	bhi.w	80077a2 <_scanf_float+0x28e>
 8007598:	2001      	movs	r0, #1
 800759a:	b007      	add	sp, #28
 800759c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80075a4:	2a0d      	cmp	r2, #13
 80075a6:	d8e8      	bhi.n	800757a <_scanf_float+0x66>
 80075a8:	a101      	add	r1, pc, #4	@ (adr r1, 80075b0 <_scanf_float+0x9c>)
 80075aa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80075ae:	bf00      	nop
 80075b0:	080076f9 	.word	0x080076f9
 80075b4:	0800757b 	.word	0x0800757b
 80075b8:	0800757b 	.word	0x0800757b
 80075bc:	0800757b 	.word	0x0800757b
 80075c0:	08007755 	.word	0x08007755
 80075c4:	0800772f 	.word	0x0800772f
 80075c8:	0800757b 	.word	0x0800757b
 80075cc:	0800757b 	.word	0x0800757b
 80075d0:	08007707 	.word	0x08007707
 80075d4:	0800757b 	.word	0x0800757b
 80075d8:	0800757b 	.word	0x0800757b
 80075dc:	0800757b 	.word	0x0800757b
 80075e0:	0800757b 	.word	0x0800757b
 80075e4:	080076c3 	.word	0x080076c3
 80075e8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80075ec:	e7da      	b.n	80075a4 <_scanf_float+0x90>
 80075ee:	290e      	cmp	r1, #14
 80075f0:	d8c3      	bhi.n	800757a <_scanf_float+0x66>
 80075f2:	a001      	add	r0, pc, #4	@ (adr r0, 80075f8 <_scanf_float+0xe4>)
 80075f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80075f8:	080076b3 	.word	0x080076b3
 80075fc:	0800757b 	.word	0x0800757b
 8007600:	080076b3 	.word	0x080076b3
 8007604:	08007743 	.word	0x08007743
 8007608:	0800757b 	.word	0x0800757b
 800760c:	08007655 	.word	0x08007655
 8007610:	08007699 	.word	0x08007699
 8007614:	08007699 	.word	0x08007699
 8007618:	08007699 	.word	0x08007699
 800761c:	08007699 	.word	0x08007699
 8007620:	08007699 	.word	0x08007699
 8007624:	08007699 	.word	0x08007699
 8007628:	08007699 	.word	0x08007699
 800762c:	08007699 	.word	0x08007699
 8007630:	08007699 	.word	0x08007699
 8007634:	2b6e      	cmp	r3, #110	@ 0x6e
 8007636:	d809      	bhi.n	800764c <_scanf_float+0x138>
 8007638:	2b60      	cmp	r3, #96	@ 0x60
 800763a:	d8b1      	bhi.n	80075a0 <_scanf_float+0x8c>
 800763c:	2b54      	cmp	r3, #84	@ 0x54
 800763e:	d07b      	beq.n	8007738 <_scanf_float+0x224>
 8007640:	2b59      	cmp	r3, #89	@ 0x59
 8007642:	d19a      	bne.n	800757a <_scanf_float+0x66>
 8007644:	2d07      	cmp	r5, #7
 8007646:	d198      	bne.n	800757a <_scanf_float+0x66>
 8007648:	2508      	movs	r5, #8
 800764a:	e02f      	b.n	80076ac <_scanf_float+0x198>
 800764c:	2b74      	cmp	r3, #116	@ 0x74
 800764e:	d073      	beq.n	8007738 <_scanf_float+0x224>
 8007650:	2b79      	cmp	r3, #121	@ 0x79
 8007652:	e7f6      	b.n	8007642 <_scanf_float+0x12e>
 8007654:	6821      	ldr	r1, [r4, #0]
 8007656:	05c8      	lsls	r0, r1, #23
 8007658:	d51e      	bpl.n	8007698 <_scanf_float+0x184>
 800765a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800765e:	6021      	str	r1, [r4, #0]
 8007660:	3701      	adds	r7, #1
 8007662:	f1bb 0f00 	cmp.w	fp, #0
 8007666:	d003      	beq.n	8007670 <_scanf_float+0x15c>
 8007668:	3201      	adds	r2, #1
 800766a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800766e:	60a2      	str	r2, [r4, #8]
 8007670:	68a3      	ldr	r3, [r4, #8]
 8007672:	3b01      	subs	r3, #1
 8007674:	60a3      	str	r3, [r4, #8]
 8007676:	6923      	ldr	r3, [r4, #16]
 8007678:	3301      	adds	r3, #1
 800767a:	6123      	str	r3, [r4, #16]
 800767c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007680:	3b01      	subs	r3, #1
 8007682:	2b00      	cmp	r3, #0
 8007684:	f8c9 3004 	str.w	r3, [r9, #4]
 8007688:	f340 8082 	ble.w	8007790 <_scanf_float+0x27c>
 800768c:	f8d9 3000 	ldr.w	r3, [r9]
 8007690:	3301      	adds	r3, #1
 8007692:	f8c9 3000 	str.w	r3, [r9]
 8007696:	e762      	b.n	800755e <_scanf_float+0x4a>
 8007698:	eb1a 0105 	adds.w	r1, sl, r5
 800769c:	f47f af6d 	bne.w	800757a <_scanf_float+0x66>
 80076a0:	6822      	ldr	r2, [r4, #0]
 80076a2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80076a6:	6022      	str	r2, [r4, #0]
 80076a8:	460d      	mov	r5, r1
 80076aa:	468a      	mov	sl, r1
 80076ac:	f806 3b01 	strb.w	r3, [r6], #1
 80076b0:	e7de      	b.n	8007670 <_scanf_float+0x15c>
 80076b2:	6822      	ldr	r2, [r4, #0]
 80076b4:	0610      	lsls	r0, r2, #24
 80076b6:	f57f af60 	bpl.w	800757a <_scanf_float+0x66>
 80076ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80076be:	6022      	str	r2, [r4, #0]
 80076c0:	e7f4      	b.n	80076ac <_scanf_float+0x198>
 80076c2:	f1ba 0f00 	cmp.w	sl, #0
 80076c6:	d10c      	bne.n	80076e2 <_scanf_float+0x1ce>
 80076c8:	b977      	cbnz	r7, 80076e8 <_scanf_float+0x1d4>
 80076ca:	6822      	ldr	r2, [r4, #0]
 80076cc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80076d0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80076d4:	d108      	bne.n	80076e8 <_scanf_float+0x1d4>
 80076d6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80076da:	6022      	str	r2, [r4, #0]
 80076dc:	f04f 0a01 	mov.w	sl, #1
 80076e0:	e7e4      	b.n	80076ac <_scanf_float+0x198>
 80076e2:	f1ba 0f02 	cmp.w	sl, #2
 80076e6:	d050      	beq.n	800778a <_scanf_float+0x276>
 80076e8:	2d01      	cmp	r5, #1
 80076ea:	d002      	beq.n	80076f2 <_scanf_float+0x1de>
 80076ec:	2d04      	cmp	r5, #4
 80076ee:	f47f af44 	bne.w	800757a <_scanf_float+0x66>
 80076f2:	3501      	adds	r5, #1
 80076f4:	b2ed      	uxtb	r5, r5
 80076f6:	e7d9      	b.n	80076ac <_scanf_float+0x198>
 80076f8:	f1ba 0f01 	cmp.w	sl, #1
 80076fc:	f47f af3d 	bne.w	800757a <_scanf_float+0x66>
 8007700:	f04f 0a02 	mov.w	sl, #2
 8007704:	e7d2      	b.n	80076ac <_scanf_float+0x198>
 8007706:	b975      	cbnz	r5, 8007726 <_scanf_float+0x212>
 8007708:	2f00      	cmp	r7, #0
 800770a:	f47f af37 	bne.w	800757c <_scanf_float+0x68>
 800770e:	6822      	ldr	r2, [r4, #0]
 8007710:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007714:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007718:	f040 8103 	bne.w	8007922 <_scanf_float+0x40e>
 800771c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007720:	6022      	str	r2, [r4, #0]
 8007722:	2501      	movs	r5, #1
 8007724:	e7c2      	b.n	80076ac <_scanf_float+0x198>
 8007726:	2d03      	cmp	r5, #3
 8007728:	d0e3      	beq.n	80076f2 <_scanf_float+0x1de>
 800772a:	2d05      	cmp	r5, #5
 800772c:	e7df      	b.n	80076ee <_scanf_float+0x1da>
 800772e:	2d02      	cmp	r5, #2
 8007730:	f47f af23 	bne.w	800757a <_scanf_float+0x66>
 8007734:	2503      	movs	r5, #3
 8007736:	e7b9      	b.n	80076ac <_scanf_float+0x198>
 8007738:	2d06      	cmp	r5, #6
 800773a:	f47f af1e 	bne.w	800757a <_scanf_float+0x66>
 800773e:	2507      	movs	r5, #7
 8007740:	e7b4      	b.n	80076ac <_scanf_float+0x198>
 8007742:	6822      	ldr	r2, [r4, #0]
 8007744:	0591      	lsls	r1, r2, #22
 8007746:	f57f af18 	bpl.w	800757a <_scanf_float+0x66>
 800774a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800774e:	6022      	str	r2, [r4, #0]
 8007750:	9702      	str	r7, [sp, #8]
 8007752:	e7ab      	b.n	80076ac <_scanf_float+0x198>
 8007754:	6822      	ldr	r2, [r4, #0]
 8007756:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800775a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800775e:	d005      	beq.n	800776c <_scanf_float+0x258>
 8007760:	0550      	lsls	r0, r2, #21
 8007762:	f57f af0a 	bpl.w	800757a <_scanf_float+0x66>
 8007766:	2f00      	cmp	r7, #0
 8007768:	f000 80db 	beq.w	8007922 <_scanf_float+0x40e>
 800776c:	0591      	lsls	r1, r2, #22
 800776e:	bf58      	it	pl
 8007770:	9902      	ldrpl	r1, [sp, #8]
 8007772:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007776:	bf58      	it	pl
 8007778:	1a79      	subpl	r1, r7, r1
 800777a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800777e:	bf58      	it	pl
 8007780:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007784:	6022      	str	r2, [r4, #0]
 8007786:	2700      	movs	r7, #0
 8007788:	e790      	b.n	80076ac <_scanf_float+0x198>
 800778a:	f04f 0a03 	mov.w	sl, #3
 800778e:	e78d      	b.n	80076ac <_scanf_float+0x198>
 8007790:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007794:	4649      	mov	r1, r9
 8007796:	4640      	mov	r0, r8
 8007798:	4798      	blx	r3
 800779a:	2800      	cmp	r0, #0
 800779c:	f43f aedf 	beq.w	800755e <_scanf_float+0x4a>
 80077a0:	e6eb      	b.n	800757a <_scanf_float+0x66>
 80077a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80077a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80077aa:	464a      	mov	r2, r9
 80077ac:	4640      	mov	r0, r8
 80077ae:	4798      	blx	r3
 80077b0:	6923      	ldr	r3, [r4, #16]
 80077b2:	3b01      	subs	r3, #1
 80077b4:	6123      	str	r3, [r4, #16]
 80077b6:	e6eb      	b.n	8007590 <_scanf_float+0x7c>
 80077b8:	1e6b      	subs	r3, r5, #1
 80077ba:	2b06      	cmp	r3, #6
 80077bc:	d824      	bhi.n	8007808 <_scanf_float+0x2f4>
 80077be:	2d02      	cmp	r5, #2
 80077c0:	d836      	bhi.n	8007830 <_scanf_float+0x31c>
 80077c2:	9b01      	ldr	r3, [sp, #4]
 80077c4:	429e      	cmp	r6, r3
 80077c6:	f67f aee7 	bls.w	8007598 <_scanf_float+0x84>
 80077ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80077ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80077d2:	464a      	mov	r2, r9
 80077d4:	4640      	mov	r0, r8
 80077d6:	4798      	blx	r3
 80077d8:	6923      	ldr	r3, [r4, #16]
 80077da:	3b01      	subs	r3, #1
 80077dc:	6123      	str	r3, [r4, #16]
 80077de:	e7f0      	b.n	80077c2 <_scanf_float+0x2ae>
 80077e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80077e4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80077e8:	464a      	mov	r2, r9
 80077ea:	4640      	mov	r0, r8
 80077ec:	4798      	blx	r3
 80077ee:	6923      	ldr	r3, [r4, #16]
 80077f0:	3b01      	subs	r3, #1
 80077f2:	6123      	str	r3, [r4, #16]
 80077f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077f8:	fa5f fa8a 	uxtb.w	sl, sl
 80077fc:	f1ba 0f02 	cmp.w	sl, #2
 8007800:	d1ee      	bne.n	80077e0 <_scanf_float+0x2cc>
 8007802:	3d03      	subs	r5, #3
 8007804:	b2ed      	uxtb	r5, r5
 8007806:	1b76      	subs	r6, r6, r5
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	05da      	lsls	r2, r3, #23
 800780c:	d530      	bpl.n	8007870 <_scanf_float+0x35c>
 800780e:	055b      	lsls	r3, r3, #21
 8007810:	d511      	bpl.n	8007836 <_scanf_float+0x322>
 8007812:	9b01      	ldr	r3, [sp, #4]
 8007814:	429e      	cmp	r6, r3
 8007816:	f67f aebf 	bls.w	8007598 <_scanf_float+0x84>
 800781a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800781e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007822:	464a      	mov	r2, r9
 8007824:	4640      	mov	r0, r8
 8007826:	4798      	blx	r3
 8007828:	6923      	ldr	r3, [r4, #16]
 800782a:	3b01      	subs	r3, #1
 800782c:	6123      	str	r3, [r4, #16]
 800782e:	e7f0      	b.n	8007812 <_scanf_float+0x2fe>
 8007830:	46aa      	mov	sl, r5
 8007832:	46b3      	mov	fp, r6
 8007834:	e7de      	b.n	80077f4 <_scanf_float+0x2e0>
 8007836:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800783a:	6923      	ldr	r3, [r4, #16]
 800783c:	2965      	cmp	r1, #101	@ 0x65
 800783e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007842:	f106 35ff 	add.w	r5, r6, #4294967295
 8007846:	6123      	str	r3, [r4, #16]
 8007848:	d00c      	beq.n	8007864 <_scanf_float+0x350>
 800784a:	2945      	cmp	r1, #69	@ 0x45
 800784c:	d00a      	beq.n	8007864 <_scanf_float+0x350>
 800784e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007852:	464a      	mov	r2, r9
 8007854:	4640      	mov	r0, r8
 8007856:	4798      	blx	r3
 8007858:	6923      	ldr	r3, [r4, #16]
 800785a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800785e:	3b01      	subs	r3, #1
 8007860:	1eb5      	subs	r5, r6, #2
 8007862:	6123      	str	r3, [r4, #16]
 8007864:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007868:	464a      	mov	r2, r9
 800786a:	4640      	mov	r0, r8
 800786c:	4798      	blx	r3
 800786e:	462e      	mov	r6, r5
 8007870:	6822      	ldr	r2, [r4, #0]
 8007872:	f012 0210 	ands.w	r2, r2, #16
 8007876:	d001      	beq.n	800787c <_scanf_float+0x368>
 8007878:	2000      	movs	r0, #0
 800787a:	e68e      	b.n	800759a <_scanf_float+0x86>
 800787c:	7032      	strb	r2, [r6, #0]
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007888:	d125      	bne.n	80078d6 <_scanf_float+0x3c2>
 800788a:	9b02      	ldr	r3, [sp, #8]
 800788c:	429f      	cmp	r7, r3
 800788e:	d00a      	beq.n	80078a6 <_scanf_float+0x392>
 8007890:	1bda      	subs	r2, r3, r7
 8007892:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007896:	429e      	cmp	r6, r3
 8007898:	bf28      	it	cs
 800789a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800789e:	4922      	ldr	r1, [pc, #136]	@ (8007928 <_scanf_float+0x414>)
 80078a0:	4630      	mov	r0, r6
 80078a2:	f000 f919 	bl	8007ad8 <siprintf>
 80078a6:	9901      	ldr	r1, [sp, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	4640      	mov	r0, r8
 80078ac:	f002 fc04 	bl	800a0b8 <_strtod_r>
 80078b0:	9b03      	ldr	r3, [sp, #12]
 80078b2:	6821      	ldr	r1, [r4, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f011 0f02 	tst.w	r1, #2
 80078ba:	ec57 6b10 	vmov	r6, r7, d0
 80078be:	f103 0204 	add.w	r2, r3, #4
 80078c2:	d015      	beq.n	80078f0 <_scanf_float+0x3dc>
 80078c4:	9903      	ldr	r1, [sp, #12]
 80078c6:	600a      	str	r2, [r1, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	e9c3 6700 	strd	r6, r7, [r3]
 80078ce:	68e3      	ldr	r3, [r4, #12]
 80078d0:	3301      	adds	r3, #1
 80078d2:	60e3      	str	r3, [r4, #12]
 80078d4:	e7d0      	b.n	8007878 <_scanf_float+0x364>
 80078d6:	9b04      	ldr	r3, [sp, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d0e4      	beq.n	80078a6 <_scanf_float+0x392>
 80078dc:	9905      	ldr	r1, [sp, #20]
 80078de:	230a      	movs	r3, #10
 80078e0:	3101      	adds	r1, #1
 80078e2:	4640      	mov	r0, r8
 80078e4:	f002 fc68 	bl	800a1b8 <_strtol_r>
 80078e8:	9b04      	ldr	r3, [sp, #16]
 80078ea:	9e05      	ldr	r6, [sp, #20]
 80078ec:	1ac2      	subs	r2, r0, r3
 80078ee:	e7d0      	b.n	8007892 <_scanf_float+0x37e>
 80078f0:	f011 0f04 	tst.w	r1, #4
 80078f4:	9903      	ldr	r1, [sp, #12]
 80078f6:	600a      	str	r2, [r1, #0]
 80078f8:	d1e6      	bne.n	80078c8 <_scanf_float+0x3b4>
 80078fa:	681d      	ldr	r5, [r3, #0]
 80078fc:	4632      	mov	r2, r6
 80078fe:	463b      	mov	r3, r7
 8007900:	4630      	mov	r0, r6
 8007902:	4639      	mov	r1, r7
 8007904:	f7f9 f91a 	bl	8000b3c <__aeabi_dcmpun>
 8007908:	b128      	cbz	r0, 8007916 <_scanf_float+0x402>
 800790a:	4808      	ldr	r0, [pc, #32]	@ (800792c <_scanf_float+0x418>)
 800790c:	f000 f9ca 	bl	8007ca4 <nanf>
 8007910:	ed85 0a00 	vstr	s0, [r5]
 8007914:	e7db      	b.n	80078ce <_scanf_float+0x3ba>
 8007916:	4630      	mov	r0, r6
 8007918:	4639      	mov	r1, r7
 800791a:	f7f9 f96d 	bl	8000bf8 <__aeabi_d2f>
 800791e:	6028      	str	r0, [r5, #0]
 8007920:	e7d5      	b.n	80078ce <_scanf_float+0x3ba>
 8007922:	2700      	movs	r7, #0
 8007924:	e62e      	b.n	8007584 <_scanf_float+0x70>
 8007926:	bf00      	nop
 8007928:	0800b524 	.word	0x0800b524
 800792c:	0800b665 	.word	0x0800b665

08007930 <std>:
 8007930:	2300      	movs	r3, #0
 8007932:	b510      	push	{r4, lr}
 8007934:	4604      	mov	r4, r0
 8007936:	e9c0 3300 	strd	r3, r3, [r0]
 800793a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800793e:	6083      	str	r3, [r0, #8]
 8007940:	8181      	strh	r1, [r0, #12]
 8007942:	6643      	str	r3, [r0, #100]	@ 0x64
 8007944:	81c2      	strh	r2, [r0, #14]
 8007946:	6183      	str	r3, [r0, #24]
 8007948:	4619      	mov	r1, r3
 800794a:	2208      	movs	r2, #8
 800794c:	305c      	adds	r0, #92	@ 0x5c
 800794e:	f000 f928 	bl	8007ba2 <memset>
 8007952:	4b0d      	ldr	r3, [pc, #52]	@ (8007988 <std+0x58>)
 8007954:	6263      	str	r3, [r4, #36]	@ 0x24
 8007956:	4b0d      	ldr	r3, [pc, #52]	@ (800798c <std+0x5c>)
 8007958:	62a3      	str	r3, [r4, #40]	@ 0x28
 800795a:	4b0d      	ldr	r3, [pc, #52]	@ (8007990 <std+0x60>)
 800795c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800795e:	4b0d      	ldr	r3, [pc, #52]	@ (8007994 <std+0x64>)
 8007960:	6323      	str	r3, [r4, #48]	@ 0x30
 8007962:	4b0d      	ldr	r3, [pc, #52]	@ (8007998 <std+0x68>)
 8007964:	6224      	str	r4, [r4, #32]
 8007966:	429c      	cmp	r4, r3
 8007968:	d006      	beq.n	8007978 <std+0x48>
 800796a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800796e:	4294      	cmp	r4, r2
 8007970:	d002      	beq.n	8007978 <std+0x48>
 8007972:	33d0      	adds	r3, #208	@ 0xd0
 8007974:	429c      	cmp	r4, r3
 8007976:	d105      	bne.n	8007984 <std+0x54>
 8007978:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800797c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007980:	f000 b98c 	b.w	8007c9c <__retarget_lock_init_recursive>
 8007984:	bd10      	pop	{r4, pc}
 8007986:	bf00      	nop
 8007988:	08007b1d 	.word	0x08007b1d
 800798c:	08007b3f 	.word	0x08007b3f
 8007990:	08007b77 	.word	0x08007b77
 8007994:	08007b9b 	.word	0x08007b9b
 8007998:	200005ac 	.word	0x200005ac

0800799c <stdio_exit_handler>:
 800799c:	4a02      	ldr	r2, [pc, #8]	@ (80079a8 <stdio_exit_handler+0xc>)
 800799e:	4903      	ldr	r1, [pc, #12]	@ (80079ac <stdio_exit_handler+0x10>)
 80079a0:	4803      	ldr	r0, [pc, #12]	@ (80079b0 <stdio_exit_handler+0x14>)
 80079a2:	f000 b869 	b.w	8007a78 <_fwalk_sglue>
 80079a6:	bf00      	nop
 80079a8:	20000030 	.word	0x20000030
 80079ac:	0800a7f9 	.word	0x0800a7f9
 80079b0:	20000040 	.word	0x20000040

080079b4 <cleanup_stdio>:
 80079b4:	6841      	ldr	r1, [r0, #4]
 80079b6:	4b0c      	ldr	r3, [pc, #48]	@ (80079e8 <cleanup_stdio+0x34>)
 80079b8:	4299      	cmp	r1, r3
 80079ba:	b510      	push	{r4, lr}
 80079bc:	4604      	mov	r4, r0
 80079be:	d001      	beq.n	80079c4 <cleanup_stdio+0x10>
 80079c0:	f002 ff1a 	bl	800a7f8 <_fflush_r>
 80079c4:	68a1      	ldr	r1, [r4, #8]
 80079c6:	4b09      	ldr	r3, [pc, #36]	@ (80079ec <cleanup_stdio+0x38>)
 80079c8:	4299      	cmp	r1, r3
 80079ca:	d002      	beq.n	80079d2 <cleanup_stdio+0x1e>
 80079cc:	4620      	mov	r0, r4
 80079ce:	f002 ff13 	bl	800a7f8 <_fflush_r>
 80079d2:	68e1      	ldr	r1, [r4, #12]
 80079d4:	4b06      	ldr	r3, [pc, #24]	@ (80079f0 <cleanup_stdio+0x3c>)
 80079d6:	4299      	cmp	r1, r3
 80079d8:	d004      	beq.n	80079e4 <cleanup_stdio+0x30>
 80079da:	4620      	mov	r0, r4
 80079dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079e0:	f002 bf0a 	b.w	800a7f8 <_fflush_r>
 80079e4:	bd10      	pop	{r4, pc}
 80079e6:	bf00      	nop
 80079e8:	200005ac 	.word	0x200005ac
 80079ec:	20000614 	.word	0x20000614
 80079f0:	2000067c 	.word	0x2000067c

080079f4 <global_stdio_init.part.0>:
 80079f4:	b510      	push	{r4, lr}
 80079f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007a24 <global_stdio_init.part.0+0x30>)
 80079f8:	4c0b      	ldr	r4, [pc, #44]	@ (8007a28 <global_stdio_init.part.0+0x34>)
 80079fa:	4a0c      	ldr	r2, [pc, #48]	@ (8007a2c <global_stdio_init.part.0+0x38>)
 80079fc:	601a      	str	r2, [r3, #0]
 80079fe:	4620      	mov	r0, r4
 8007a00:	2200      	movs	r2, #0
 8007a02:	2104      	movs	r1, #4
 8007a04:	f7ff ff94 	bl	8007930 <std>
 8007a08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	2109      	movs	r1, #9
 8007a10:	f7ff ff8e 	bl	8007930 <std>
 8007a14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a18:	2202      	movs	r2, #2
 8007a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a1e:	2112      	movs	r1, #18
 8007a20:	f7ff bf86 	b.w	8007930 <std>
 8007a24:	200006e4 	.word	0x200006e4
 8007a28:	200005ac 	.word	0x200005ac
 8007a2c:	0800799d 	.word	0x0800799d

08007a30 <__sfp_lock_acquire>:
 8007a30:	4801      	ldr	r0, [pc, #4]	@ (8007a38 <__sfp_lock_acquire+0x8>)
 8007a32:	f000 b934 	b.w	8007c9e <__retarget_lock_acquire_recursive>
 8007a36:	bf00      	nop
 8007a38:	200006ed 	.word	0x200006ed

08007a3c <__sfp_lock_release>:
 8007a3c:	4801      	ldr	r0, [pc, #4]	@ (8007a44 <__sfp_lock_release+0x8>)
 8007a3e:	f000 b92f 	b.w	8007ca0 <__retarget_lock_release_recursive>
 8007a42:	bf00      	nop
 8007a44:	200006ed 	.word	0x200006ed

08007a48 <__sinit>:
 8007a48:	b510      	push	{r4, lr}
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	f7ff fff0 	bl	8007a30 <__sfp_lock_acquire>
 8007a50:	6a23      	ldr	r3, [r4, #32]
 8007a52:	b11b      	cbz	r3, 8007a5c <__sinit+0x14>
 8007a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a58:	f7ff bff0 	b.w	8007a3c <__sfp_lock_release>
 8007a5c:	4b04      	ldr	r3, [pc, #16]	@ (8007a70 <__sinit+0x28>)
 8007a5e:	6223      	str	r3, [r4, #32]
 8007a60:	4b04      	ldr	r3, [pc, #16]	@ (8007a74 <__sinit+0x2c>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1f5      	bne.n	8007a54 <__sinit+0xc>
 8007a68:	f7ff ffc4 	bl	80079f4 <global_stdio_init.part.0>
 8007a6c:	e7f2      	b.n	8007a54 <__sinit+0xc>
 8007a6e:	bf00      	nop
 8007a70:	080079b5 	.word	0x080079b5
 8007a74:	200006e4 	.word	0x200006e4

08007a78 <_fwalk_sglue>:
 8007a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a7c:	4607      	mov	r7, r0
 8007a7e:	4688      	mov	r8, r1
 8007a80:	4614      	mov	r4, r2
 8007a82:	2600      	movs	r6, #0
 8007a84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a88:	f1b9 0901 	subs.w	r9, r9, #1
 8007a8c:	d505      	bpl.n	8007a9a <_fwalk_sglue+0x22>
 8007a8e:	6824      	ldr	r4, [r4, #0]
 8007a90:	2c00      	cmp	r4, #0
 8007a92:	d1f7      	bne.n	8007a84 <_fwalk_sglue+0xc>
 8007a94:	4630      	mov	r0, r6
 8007a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a9a:	89ab      	ldrh	r3, [r5, #12]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d907      	bls.n	8007ab0 <_fwalk_sglue+0x38>
 8007aa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	d003      	beq.n	8007ab0 <_fwalk_sglue+0x38>
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	4638      	mov	r0, r7
 8007aac:	47c0      	blx	r8
 8007aae:	4306      	orrs	r6, r0
 8007ab0:	3568      	adds	r5, #104	@ 0x68
 8007ab2:	e7e9      	b.n	8007a88 <_fwalk_sglue+0x10>

08007ab4 <iprintf>:
 8007ab4:	b40f      	push	{r0, r1, r2, r3}
 8007ab6:	b507      	push	{r0, r1, r2, lr}
 8007ab8:	4906      	ldr	r1, [pc, #24]	@ (8007ad4 <iprintf+0x20>)
 8007aba:	ab04      	add	r3, sp, #16
 8007abc:	6808      	ldr	r0, [r1, #0]
 8007abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ac2:	6881      	ldr	r1, [r0, #8]
 8007ac4:	9301      	str	r3, [sp, #4]
 8007ac6:	f002 fcfb 	bl	800a4c0 <_vfiprintf_r>
 8007aca:	b003      	add	sp, #12
 8007acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ad0:	b004      	add	sp, #16
 8007ad2:	4770      	bx	lr
 8007ad4:	2000003c 	.word	0x2000003c

08007ad8 <siprintf>:
 8007ad8:	b40e      	push	{r1, r2, r3}
 8007ada:	b510      	push	{r4, lr}
 8007adc:	b09d      	sub	sp, #116	@ 0x74
 8007ade:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007ae0:	9002      	str	r0, [sp, #8]
 8007ae2:	9006      	str	r0, [sp, #24]
 8007ae4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007ae8:	480a      	ldr	r0, [pc, #40]	@ (8007b14 <siprintf+0x3c>)
 8007aea:	9107      	str	r1, [sp, #28]
 8007aec:	9104      	str	r1, [sp, #16]
 8007aee:	490a      	ldr	r1, [pc, #40]	@ (8007b18 <siprintf+0x40>)
 8007af0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007af4:	9105      	str	r1, [sp, #20]
 8007af6:	2400      	movs	r4, #0
 8007af8:	a902      	add	r1, sp, #8
 8007afa:	6800      	ldr	r0, [r0, #0]
 8007afc:	9301      	str	r3, [sp, #4]
 8007afe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007b00:	f002 fbb8 	bl	800a274 <_svfiprintf_r>
 8007b04:	9b02      	ldr	r3, [sp, #8]
 8007b06:	701c      	strb	r4, [r3, #0]
 8007b08:	b01d      	add	sp, #116	@ 0x74
 8007b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b0e:	b003      	add	sp, #12
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	2000003c 	.word	0x2000003c
 8007b18:	ffff0208 	.word	0xffff0208

08007b1c <__sread>:
 8007b1c:	b510      	push	{r4, lr}
 8007b1e:	460c      	mov	r4, r1
 8007b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b24:	f000 f86c 	bl	8007c00 <_read_r>
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	bfab      	itete	ge
 8007b2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b2e:	89a3      	ldrhlt	r3, [r4, #12]
 8007b30:	181b      	addge	r3, r3, r0
 8007b32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b36:	bfac      	ite	ge
 8007b38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b3a:	81a3      	strhlt	r3, [r4, #12]
 8007b3c:	bd10      	pop	{r4, pc}

08007b3e <__swrite>:
 8007b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b42:	461f      	mov	r7, r3
 8007b44:	898b      	ldrh	r3, [r1, #12]
 8007b46:	05db      	lsls	r3, r3, #23
 8007b48:	4605      	mov	r5, r0
 8007b4a:	460c      	mov	r4, r1
 8007b4c:	4616      	mov	r6, r2
 8007b4e:	d505      	bpl.n	8007b5c <__swrite+0x1e>
 8007b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b54:	2302      	movs	r3, #2
 8007b56:	2200      	movs	r2, #0
 8007b58:	f000 f840 	bl	8007bdc <_lseek_r>
 8007b5c:	89a3      	ldrh	r3, [r4, #12]
 8007b5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b66:	81a3      	strh	r3, [r4, #12]
 8007b68:	4632      	mov	r2, r6
 8007b6a:	463b      	mov	r3, r7
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b72:	f000 b857 	b.w	8007c24 <_write_r>

08007b76 <__sseek>:
 8007b76:	b510      	push	{r4, lr}
 8007b78:	460c      	mov	r4, r1
 8007b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b7e:	f000 f82d 	bl	8007bdc <_lseek_r>
 8007b82:	1c43      	adds	r3, r0, #1
 8007b84:	89a3      	ldrh	r3, [r4, #12]
 8007b86:	bf15      	itete	ne
 8007b88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b92:	81a3      	strheq	r3, [r4, #12]
 8007b94:	bf18      	it	ne
 8007b96:	81a3      	strhne	r3, [r4, #12]
 8007b98:	bd10      	pop	{r4, pc}

08007b9a <__sclose>:
 8007b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b9e:	f000 b80d 	b.w	8007bbc <_close_r>

08007ba2 <memset>:
 8007ba2:	4402      	add	r2, r0
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d100      	bne.n	8007bac <memset+0xa>
 8007baa:	4770      	bx	lr
 8007bac:	f803 1b01 	strb.w	r1, [r3], #1
 8007bb0:	e7f9      	b.n	8007ba6 <memset+0x4>
	...

08007bb4 <_localeconv_r>:
 8007bb4:	4800      	ldr	r0, [pc, #0]	@ (8007bb8 <_localeconv_r+0x4>)
 8007bb6:	4770      	bx	lr
 8007bb8:	2000017c 	.word	0x2000017c

08007bbc <_close_r>:
 8007bbc:	b538      	push	{r3, r4, r5, lr}
 8007bbe:	4d06      	ldr	r5, [pc, #24]	@ (8007bd8 <_close_r+0x1c>)
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	4608      	mov	r0, r1
 8007bc6:	602b      	str	r3, [r5, #0]
 8007bc8:	f7fa fd98 	bl	80026fc <_close>
 8007bcc:	1c43      	adds	r3, r0, #1
 8007bce:	d102      	bne.n	8007bd6 <_close_r+0x1a>
 8007bd0:	682b      	ldr	r3, [r5, #0]
 8007bd2:	b103      	cbz	r3, 8007bd6 <_close_r+0x1a>
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	bd38      	pop	{r3, r4, r5, pc}
 8007bd8:	200006e8 	.word	0x200006e8

08007bdc <_lseek_r>:
 8007bdc:	b538      	push	{r3, r4, r5, lr}
 8007bde:	4d07      	ldr	r5, [pc, #28]	@ (8007bfc <_lseek_r+0x20>)
 8007be0:	4604      	mov	r4, r0
 8007be2:	4608      	mov	r0, r1
 8007be4:	4611      	mov	r1, r2
 8007be6:	2200      	movs	r2, #0
 8007be8:	602a      	str	r2, [r5, #0]
 8007bea:	461a      	mov	r2, r3
 8007bec:	f7fa fdad 	bl	800274a <_lseek>
 8007bf0:	1c43      	adds	r3, r0, #1
 8007bf2:	d102      	bne.n	8007bfa <_lseek_r+0x1e>
 8007bf4:	682b      	ldr	r3, [r5, #0]
 8007bf6:	b103      	cbz	r3, 8007bfa <_lseek_r+0x1e>
 8007bf8:	6023      	str	r3, [r4, #0]
 8007bfa:	bd38      	pop	{r3, r4, r5, pc}
 8007bfc:	200006e8 	.word	0x200006e8

08007c00 <_read_r>:
 8007c00:	b538      	push	{r3, r4, r5, lr}
 8007c02:	4d07      	ldr	r5, [pc, #28]	@ (8007c20 <_read_r+0x20>)
 8007c04:	4604      	mov	r4, r0
 8007c06:	4608      	mov	r0, r1
 8007c08:	4611      	mov	r1, r2
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	602a      	str	r2, [r5, #0]
 8007c0e:	461a      	mov	r2, r3
 8007c10:	f7fa fd57 	bl	80026c2 <_read>
 8007c14:	1c43      	adds	r3, r0, #1
 8007c16:	d102      	bne.n	8007c1e <_read_r+0x1e>
 8007c18:	682b      	ldr	r3, [r5, #0]
 8007c1a:	b103      	cbz	r3, 8007c1e <_read_r+0x1e>
 8007c1c:	6023      	str	r3, [r4, #0]
 8007c1e:	bd38      	pop	{r3, r4, r5, pc}
 8007c20:	200006e8 	.word	0x200006e8

08007c24 <_write_r>:
 8007c24:	b538      	push	{r3, r4, r5, lr}
 8007c26:	4d07      	ldr	r5, [pc, #28]	@ (8007c44 <_write_r+0x20>)
 8007c28:	4604      	mov	r4, r0
 8007c2a:	4608      	mov	r0, r1
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	2200      	movs	r2, #0
 8007c30:	602a      	str	r2, [r5, #0]
 8007c32:	461a      	mov	r2, r3
 8007c34:	f7f9 f9fc 	bl	8001030 <_write>
 8007c38:	1c43      	adds	r3, r0, #1
 8007c3a:	d102      	bne.n	8007c42 <_write_r+0x1e>
 8007c3c:	682b      	ldr	r3, [r5, #0]
 8007c3e:	b103      	cbz	r3, 8007c42 <_write_r+0x1e>
 8007c40:	6023      	str	r3, [r4, #0]
 8007c42:	bd38      	pop	{r3, r4, r5, pc}
 8007c44:	200006e8 	.word	0x200006e8

08007c48 <__errno>:
 8007c48:	4b01      	ldr	r3, [pc, #4]	@ (8007c50 <__errno+0x8>)
 8007c4a:	6818      	ldr	r0, [r3, #0]
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	2000003c 	.word	0x2000003c

08007c54 <__libc_init_array>:
 8007c54:	b570      	push	{r4, r5, r6, lr}
 8007c56:	4d0d      	ldr	r5, [pc, #52]	@ (8007c8c <__libc_init_array+0x38>)
 8007c58:	4c0d      	ldr	r4, [pc, #52]	@ (8007c90 <__libc_init_array+0x3c>)
 8007c5a:	1b64      	subs	r4, r4, r5
 8007c5c:	10a4      	asrs	r4, r4, #2
 8007c5e:	2600      	movs	r6, #0
 8007c60:	42a6      	cmp	r6, r4
 8007c62:	d109      	bne.n	8007c78 <__libc_init_array+0x24>
 8007c64:	4d0b      	ldr	r5, [pc, #44]	@ (8007c94 <__libc_init_array+0x40>)
 8007c66:	4c0c      	ldr	r4, [pc, #48]	@ (8007c98 <__libc_init_array+0x44>)
 8007c68:	f003 fb78 	bl	800b35c <_init>
 8007c6c:	1b64      	subs	r4, r4, r5
 8007c6e:	10a4      	asrs	r4, r4, #2
 8007c70:	2600      	movs	r6, #0
 8007c72:	42a6      	cmp	r6, r4
 8007c74:	d105      	bne.n	8007c82 <__libc_init_array+0x2e>
 8007c76:	bd70      	pop	{r4, r5, r6, pc}
 8007c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c7c:	4798      	blx	r3
 8007c7e:	3601      	adds	r6, #1
 8007c80:	e7ee      	b.n	8007c60 <__libc_init_array+0xc>
 8007c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c86:	4798      	blx	r3
 8007c88:	3601      	adds	r6, #1
 8007c8a:	e7f2      	b.n	8007c72 <__libc_init_array+0x1e>
 8007c8c:	0800b924 	.word	0x0800b924
 8007c90:	0800b924 	.word	0x0800b924
 8007c94:	0800b924 	.word	0x0800b924
 8007c98:	0800b928 	.word	0x0800b928

08007c9c <__retarget_lock_init_recursive>:
 8007c9c:	4770      	bx	lr

08007c9e <__retarget_lock_acquire_recursive>:
 8007c9e:	4770      	bx	lr

08007ca0 <__retarget_lock_release_recursive>:
 8007ca0:	4770      	bx	lr
	...

08007ca4 <nanf>:
 8007ca4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007cac <nanf+0x8>
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	7fc00000 	.word	0x7fc00000

08007cb0 <quorem>:
 8007cb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb4:	6903      	ldr	r3, [r0, #16]
 8007cb6:	690c      	ldr	r4, [r1, #16]
 8007cb8:	42a3      	cmp	r3, r4
 8007cba:	4607      	mov	r7, r0
 8007cbc:	db7e      	blt.n	8007dbc <quorem+0x10c>
 8007cbe:	3c01      	subs	r4, #1
 8007cc0:	f101 0814 	add.w	r8, r1, #20
 8007cc4:	00a3      	lsls	r3, r4, #2
 8007cc6:	f100 0514 	add.w	r5, r0, #20
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cd0:	9301      	str	r3, [sp, #4]
 8007cd2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007cd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ce2:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ce6:	d32e      	bcc.n	8007d46 <quorem+0x96>
 8007ce8:	f04f 0a00 	mov.w	sl, #0
 8007cec:	46c4      	mov	ip, r8
 8007cee:	46ae      	mov	lr, r5
 8007cf0:	46d3      	mov	fp, sl
 8007cf2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007cf6:	b298      	uxth	r0, r3
 8007cf8:	fb06 a000 	mla	r0, r6, r0, sl
 8007cfc:	0c02      	lsrs	r2, r0, #16
 8007cfe:	0c1b      	lsrs	r3, r3, #16
 8007d00:	fb06 2303 	mla	r3, r6, r3, r2
 8007d04:	f8de 2000 	ldr.w	r2, [lr]
 8007d08:	b280      	uxth	r0, r0
 8007d0a:	b292      	uxth	r2, r2
 8007d0c:	1a12      	subs	r2, r2, r0
 8007d0e:	445a      	add	r2, fp
 8007d10:	f8de 0000 	ldr.w	r0, [lr]
 8007d14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007d1e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007d22:	b292      	uxth	r2, r2
 8007d24:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007d28:	45e1      	cmp	r9, ip
 8007d2a:	f84e 2b04 	str.w	r2, [lr], #4
 8007d2e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007d32:	d2de      	bcs.n	8007cf2 <quorem+0x42>
 8007d34:	9b00      	ldr	r3, [sp, #0]
 8007d36:	58eb      	ldr	r3, [r5, r3]
 8007d38:	b92b      	cbnz	r3, 8007d46 <quorem+0x96>
 8007d3a:	9b01      	ldr	r3, [sp, #4]
 8007d3c:	3b04      	subs	r3, #4
 8007d3e:	429d      	cmp	r5, r3
 8007d40:	461a      	mov	r2, r3
 8007d42:	d32f      	bcc.n	8007da4 <quorem+0xf4>
 8007d44:	613c      	str	r4, [r7, #16]
 8007d46:	4638      	mov	r0, r7
 8007d48:	f001 f9c6 	bl	80090d8 <__mcmp>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	db25      	blt.n	8007d9c <quorem+0xec>
 8007d50:	4629      	mov	r1, r5
 8007d52:	2000      	movs	r0, #0
 8007d54:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d58:	f8d1 c000 	ldr.w	ip, [r1]
 8007d5c:	fa1f fe82 	uxth.w	lr, r2
 8007d60:	fa1f f38c 	uxth.w	r3, ip
 8007d64:	eba3 030e 	sub.w	r3, r3, lr
 8007d68:	4403      	add	r3, r0
 8007d6a:	0c12      	lsrs	r2, r2, #16
 8007d6c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007d70:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d7a:	45c1      	cmp	r9, r8
 8007d7c:	f841 3b04 	str.w	r3, [r1], #4
 8007d80:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007d84:	d2e6      	bcs.n	8007d54 <quorem+0xa4>
 8007d86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d8e:	b922      	cbnz	r2, 8007d9a <quorem+0xea>
 8007d90:	3b04      	subs	r3, #4
 8007d92:	429d      	cmp	r5, r3
 8007d94:	461a      	mov	r2, r3
 8007d96:	d30b      	bcc.n	8007db0 <quorem+0x100>
 8007d98:	613c      	str	r4, [r7, #16]
 8007d9a:	3601      	adds	r6, #1
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	b003      	add	sp, #12
 8007da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da4:	6812      	ldr	r2, [r2, #0]
 8007da6:	3b04      	subs	r3, #4
 8007da8:	2a00      	cmp	r2, #0
 8007daa:	d1cb      	bne.n	8007d44 <quorem+0x94>
 8007dac:	3c01      	subs	r4, #1
 8007dae:	e7c6      	b.n	8007d3e <quorem+0x8e>
 8007db0:	6812      	ldr	r2, [r2, #0]
 8007db2:	3b04      	subs	r3, #4
 8007db4:	2a00      	cmp	r2, #0
 8007db6:	d1ef      	bne.n	8007d98 <quorem+0xe8>
 8007db8:	3c01      	subs	r4, #1
 8007dba:	e7ea      	b.n	8007d92 <quorem+0xe2>
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	e7ee      	b.n	8007d9e <quorem+0xee>

08007dc0 <_dtoa_r>:
 8007dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc4:	69c7      	ldr	r7, [r0, #28]
 8007dc6:	b097      	sub	sp, #92	@ 0x5c
 8007dc8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007dcc:	ec55 4b10 	vmov	r4, r5, d0
 8007dd0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007dd2:	9107      	str	r1, [sp, #28]
 8007dd4:	4681      	mov	r9, r0
 8007dd6:	920c      	str	r2, [sp, #48]	@ 0x30
 8007dd8:	9311      	str	r3, [sp, #68]	@ 0x44
 8007dda:	b97f      	cbnz	r7, 8007dfc <_dtoa_r+0x3c>
 8007ddc:	2010      	movs	r0, #16
 8007dde:	f000 fe09 	bl	80089f4 <malloc>
 8007de2:	4602      	mov	r2, r0
 8007de4:	f8c9 001c 	str.w	r0, [r9, #28]
 8007de8:	b920      	cbnz	r0, 8007df4 <_dtoa_r+0x34>
 8007dea:	4ba9      	ldr	r3, [pc, #676]	@ (8008090 <_dtoa_r+0x2d0>)
 8007dec:	21ef      	movs	r1, #239	@ 0xef
 8007dee:	48a9      	ldr	r0, [pc, #676]	@ (8008094 <_dtoa_r+0x2d4>)
 8007df0:	f002 fe12 	bl	800aa18 <__assert_func>
 8007df4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007df8:	6007      	str	r7, [r0, #0]
 8007dfa:	60c7      	str	r7, [r0, #12]
 8007dfc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007e00:	6819      	ldr	r1, [r3, #0]
 8007e02:	b159      	cbz	r1, 8007e1c <_dtoa_r+0x5c>
 8007e04:	685a      	ldr	r2, [r3, #4]
 8007e06:	604a      	str	r2, [r1, #4]
 8007e08:	2301      	movs	r3, #1
 8007e0a:	4093      	lsls	r3, r2
 8007e0c:	608b      	str	r3, [r1, #8]
 8007e0e:	4648      	mov	r0, r9
 8007e10:	f000 fee6 	bl	8008be0 <_Bfree>
 8007e14:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	601a      	str	r2, [r3, #0]
 8007e1c:	1e2b      	subs	r3, r5, #0
 8007e1e:	bfb9      	ittee	lt
 8007e20:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007e24:	9305      	strlt	r3, [sp, #20]
 8007e26:	2300      	movge	r3, #0
 8007e28:	6033      	strge	r3, [r6, #0]
 8007e2a:	9f05      	ldr	r7, [sp, #20]
 8007e2c:	4b9a      	ldr	r3, [pc, #616]	@ (8008098 <_dtoa_r+0x2d8>)
 8007e2e:	bfbc      	itt	lt
 8007e30:	2201      	movlt	r2, #1
 8007e32:	6032      	strlt	r2, [r6, #0]
 8007e34:	43bb      	bics	r3, r7
 8007e36:	d112      	bne.n	8007e5e <_dtoa_r+0x9e>
 8007e38:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007e3a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007e3e:	6013      	str	r3, [r2, #0]
 8007e40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007e44:	4323      	orrs	r3, r4
 8007e46:	f000 855a 	beq.w	80088fe <_dtoa_r+0xb3e>
 8007e4a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e4c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80080ac <_dtoa_r+0x2ec>
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f000 855c 	beq.w	800890e <_dtoa_r+0xb4e>
 8007e56:	f10a 0303 	add.w	r3, sl, #3
 8007e5a:	f000 bd56 	b.w	800890a <_dtoa_r+0xb4a>
 8007e5e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007e62:	2200      	movs	r2, #0
 8007e64:	ec51 0b17 	vmov	r0, r1, d7
 8007e68:	2300      	movs	r3, #0
 8007e6a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007e6e:	f7f8 fe33 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e72:	4680      	mov	r8, r0
 8007e74:	b158      	cbz	r0, 8007e8e <_dtoa_r+0xce>
 8007e76:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007e78:	2301      	movs	r3, #1
 8007e7a:	6013      	str	r3, [r2, #0]
 8007e7c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e7e:	b113      	cbz	r3, 8007e86 <_dtoa_r+0xc6>
 8007e80:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007e82:	4b86      	ldr	r3, [pc, #536]	@ (800809c <_dtoa_r+0x2dc>)
 8007e84:	6013      	str	r3, [r2, #0]
 8007e86:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80080b0 <_dtoa_r+0x2f0>
 8007e8a:	f000 bd40 	b.w	800890e <_dtoa_r+0xb4e>
 8007e8e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007e92:	aa14      	add	r2, sp, #80	@ 0x50
 8007e94:	a915      	add	r1, sp, #84	@ 0x54
 8007e96:	4648      	mov	r0, r9
 8007e98:	f001 fa3e 	bl	8009318 <__d2b>
 8007e9c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007ea0:	9002      	str	r0, [sp, #8]
 8007ea2:	2e00      	cmp	r6, #0
 8007ea4:	d078      	beq.n	8007f98 <_dtoa_r+0x1d8>
 8007ea6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ea8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007eac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007eb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007eb4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007eb8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007ebc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	4b76      	ldr	r3, [pc, #472]	@ (80080a0 <_dtoa_r+0x2e0>)
 8007ec6:	f7f8 f9e7 	bl	8000298 <__aeabi_dsub>
 8007eca:	a36b      	add	r3, pc, #428	@ (adr r3, 8008078 <_dtoa_r+0x2b8>)
 8007ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed0:	f7f8 fb9a 	bl	8000608 <__aeabi_dmul>
 8007ed4:	a36a      	add	r3, pc, #424	@ (adr r3, 8008080 <_dtoa_r+0x2c0>)
 8007ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eda:	f7f8 f9df 	bl	800029c <__adddf3>
 8007ede:	4604      	mov	r4, r0
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	460d      	mov	r5, r1
 8007ee4:	f7f8 fb26 	bl	8000534 <__aeabi_i2d>
 8007ee8:	a367      	add	r3, pc, #412	@ (adr r3, 8008088 <_dtoa_r+0x2c8>)
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	f7f8 fb8b 	bl	8000608 <__aeabi_dmul>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	4629      	mov	r1, r5
 8007efa:	f7f8 f9cf 	bl	800029c <__adddf3>
 8007efe:	4604      	mov	r4, r0
 8007f00:	460d      	mov	r5, r1
 8007f02:	f7f8 fe31 	bl	8000b68 <__aeabi_d2iz>
 8007f06:	2200      	movs	r2, #0
 8007f08:	4607      	mov	r7, r0
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	4629      	mov	r1, r5
 8007f10:	f7f8 fdec 	bl	8000aec <__aeabi_dcmplt>
 8007f14:	b140      	cbz	r0, 8007f28 <_dtoa_r+0x168>
 8007f16:	4638      	mov	r0, r7
 8007f18:	f7f8 fb0c 	bl	8000534 <__aeabi_i2d>
 8007f1c:	4622      	mov	r2, r4
 8007f1e:	462b      	mov	r3, r5
 8007f20:	f7f8 fdda 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f24:	b900      	cbnz	r0, 8007f28 <_dtoa_r+0x168>
 8007f26:	3f01      	subs	r7, #1
 8007f28:	2f16      	cmp	r7, #22
 8007f2a:	d852      	bhi.n	8007fd2 <_dtoa_r+0x212>
 8007f2c:	4b5d      	ldr	r3, [pc, #372]	@ (80080a4 <_dtoa_r+0x2e4>)
 8007f2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007f3a:	f7f8 fdd7 	bl	8000aec <__aeabi_dcmplt>
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	d049      	beq.n	8007fd6 <_dtoa_r+0x216>
 8007f42:	3f01      	subs	r7, #1
 8007f44:	2300      	movs	r3, #0
 8007f46:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f48:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007f4a:	1b9b      	subs	r3, r3, r6
 8007f4c:	1e5a      	subs	r2, r3, #1
 8007f4e:	bf45      	ittet	mi
 8007f50:	f1c3 0301 	rsbmi	r3, r3, #1
 8007f54:	9300      	strmi	r3, [sp, #0]
 8007f56:	2300      	movpl	r3, #0
 8007f58:	2300      	movmi	r3, #0
 8007f5a:	9206      	str	r2, [sp, #24]
 8007f5c:	bf54      	ite	pl
 8007f5e:	9300      	strpl	r3, [sp, #0]
 8007f60:	9306      	strmi	r3, [sp, #24]
 8007f62:	2f00      	cmp	r7, #0
 8007f64:	db39      	blt.n	8007fda <_dtoa_r+0x21a>
 8007f66:	9b06      	ldr	r3, [sp, #24]
 8007f68:	970d      	str	r7, [sp, #52]	@ 0x34
 8007f6a:	443b      	add	r3, r7
 8007f6c:	9306      	str	r3, [sp, #24]
 8007f6e:	2300      	movs	r3, #0
 8007f70:	9308      	str	r3, [sp, #32]
 8007f72:	9b07      	ldr	r3, [sp, #28]
 8007f74:	2b09      	cmp	r3, #9
 8007f76:	d863      	bhi.n	8008040 <_dtoa_r+0x280>
 8007f78:	2b05      	cmp	r3, #5
 8007f7a:	bfc4      	itt	gt
 8007f7c:	3b04      	subgt	r3, #4
 8007f7e:	9307      	strgt	r3, [sp, #28]
 8007f80:	9b07      	ldr	r3, [sp, #28]
 8007f82:	f1a3 0302 	sub.w	r3, r3, #2
 8007f86:	bfcc      	ite	gt
 8007f88:	2400      	movgt	r4, #0
 8007f8a:	2401      	movle	r4, #1
 8007f8c:	2b03      	cmp	r3, #3
 8007f8e:	d863      	bhi.n	8008058 <_dtoa_r+0x298>
 8007f90:	e8df f003 	tbb	[pc, r3]
 8007f94:	2b375452 	.word	0x2b375452
 8007f98:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007f9c:	441e      	add	r6, r3
 8007f9e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007fa2:	2b20      	cmp	r3, #32
 8007fa4:	bfc1      	itttt	gt
 8007fa6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007faa:	409f      	lslgt	r7, r3
 8007fac:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007fb0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007fb4:	bfd6      	itet	le
 8007fb6:	f1c3 0320 	rsble	r3, r3, #32
 8007fba:	ea47 0003 	orrgt.w	r0, r7, r3
 8007fbe:	fa04 f003 	lslle.w	r0, r4, r3
 8007fc2:	f7f8 faa7 	bl	8000514 <__aeabi_ui2d>
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007fcc:	3e01      	subs	r6, #1
 8007fce:	9212      	str	r2, [sp, #72]	@ 0x48
 8007fd0:	e776      	b.n	8007ec0 <_dtoa_r+0x100>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e7b7      	b.n	8007f46 <_dtoa_r+0x186>
 8007fd6:	9010      	str	r0, [sp, #64]	@ 0x40
 8007fd8:	e7b6      	b.n	8007f48 <_dtoa_r+0x188>
 8007fda:	9b00      	ldr	r3, [sp, #0]
 8007fdc:	1bdb      	subs	r3, r3, r7
 8007fde:	9300      	str	r3, [sp, #0]
 8007fe0:	427b      	negs	r3, r7
 8007fe2:	9308      	str	r3, [sp, #32]
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	930d      	str	r3, [sp, #52]	@ 0x34
 8007fe8:	e7c3      	b.n	8007f72 <_dtoa_r+0x1b2>
 8007fea:	2301      	movs	r3, #1
 8007fec:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ff0:	eb07 0b03 	add.w	fp, r7, r3
 8007ff4:	f10b 0301 	add.w	r3, fp, #1
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	9303      	str	r3, [sp, #12]
 8007ffc:	bfb8      	it	lt
 8007ffe:	2301      	movlt	r3, #1
 8008000:	e006      	b.n	8008010 <_dtoa_r+0x250>
 8008002:	2301      	movs	r3, #1
 8008004:	9309      	str	r3, [sp, #36]	@ 0x24
 8008006:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008008:	2b00      	cmp	r3, #0
 800800a:	dd28      	ble.n	800805e <_dtoa_r+0x29e>
 800800c:	469b      	mov	fp, r3
 800800e:	9303      	str	r3, [sp, #12]
 8008010:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008014:	2100      	movs	r1, #0
 8008016:	2204      	movs	r2, #4
 8008018:	f102 0514 	add.w	r5, r2, #20
 800801c:	429d      	cmp	r5, r3
 800801e:	d926      	bls.n	800806e <_dtoa_r+0x2ae>
 8008020:	6041      	str	r1, [r0, #4]
 8008022:	4648      	mov	r0, r9
 8008024:	f000 fd9c 	bl	8008b60 <_Balloc>
 8008028:	4682      	mov	sl, r0
 800802a:	2800      	cmp	r0, #0
 800802c:	d142      	bne.n	80080b4 <_dtoa_r+0x2f4>
 800802e:	4b1e      	ldr	r3, [pc, #120]	@ (80080a8 <_dtoa_r+0x2e8>)
 8008030:	4602      	mov	r2, r0
 8008032:	f240 11af 	movw	r1, #431	@ 0x1af
 8008036:	e6da      	b.n	8007dee <_dtoa_r+0x2e>
 8008038:	2300      	movs	r3, #0
 800803a:	e7e3      	b.n	8008004 <_dtoa_r+0x244>
 800803c:	2300      	movs	r3, #0
 800803e:	e7d5      	b.n	8007fec <_dtoa_r+0x22c>
 8008040:	2401      	movs	r4, #1
 8008042:	2300      	movs	r3, #0
 8008044:	9307      	str	r3, [sp, #28]
 8008046:	9409      	str	r4, [sp, #36]	@ 0x24
 8008048:	f04f 3bff 	mov.w	fp, #4294967295
 800804c:	2200      	movs	r2, #0
 800804e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008052:	2312      	movs	r3, #18
 8008054:	920c      	str	r2, [sp, #48]	@ 0x30
 8008056:	e7db      	b.n	8008010 <_dtoa_r+0x250>
 8008058:	2301      	movs	r3, #1
 800805a:	9309      	str	r3, [sp, #36]	@ 0x24
 800805c:	e7f4      	b.n	8008048 <_dtoa_r+0x288>
 800805e:	f04f 0b01 	mov.w	fp, #1
 8008062:	f8cd b00c 	str.w	fp, [sp, #12]
 8008066:	465b      	mov	r3, fp
 8008068:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800806c:	e7d0      	b.n	8008010 <_dtoa_r+0x250>
 800806e:	3101      	adds	r1, #1
 8008070:	0052      	lsls	r2, r2, #1
 8008072:	e7d1      	b.n	8008018 <_dtoa_r+0x258>
 8008074:	f3af 8000 	nop.w
 8008078:	636f4361 	.word	0x636f4361
 800807c:	3fd287a7 	.word	0x3fd287a7
 8008080:	8b60c8b3 	.word	0x8b60c8b3
 8008084:	3fc68a28 	.word	0x3fc68a28
 8008088:	509f79fb 	.word	0x509f79fb
 800808c:	3fd34413 	.word	0x3fd34413
 8008090:	0800b536 	.word	0x0800b536
 8008094:	0800b54d 	.word	0x0800b54d
 8008098:	7ff00000 	.word	0x7ff00000
 800809c:	0800b501 	.word	0x0800b501
 80080a0:	3ff80000 	.word	0x3ff80000
 80080a4:	0800b700 	.word	0x0800b700
 80080a8:	0800b5a5 	.word	0x0800b5a5
 80080ac:	0800b532 	.word	0x0800b532
 80080b0:	0800b500 	.word	0x0800b500
 80080b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80080b8:	6018      	str	r0, [r3, #0]
 80080ba:	9b03      	ldr	r3, [sp, #12]
 80080bc:	2b0e      	cmp	r3, #14
 80080be:	f200 80a1 	bhi.w	8008204 <_dtoa_r+0x444>
 80080c2:	2c00      	cmp	r4, #0
 80080c4:	f000 809e 	beq.w	8008204 <_dtoa_r+0x444>
 80080c8:	2f00      	cmp	r7, #0
 80080ca:	dd33      	ble.n	8008134 <_dtoa_r+0x374>
 80080cc:	4b9c      	ldr	r3, [pc, #624]	@ (8008340 <_dtoa_r+0x580>)
 80080ce:	f007 020f 	and.w	r2, r7, #15
 80080d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080d6:	ed93 7b00 	vldr	d7, [r3]
 80080da:	05f8      	lsls	r0, r7, #23
 80080dc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80080e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80080e4:	d516      	bpl.n	8008114 <_dtoa_r+0x354>
 80080e6:	4b97      	ldr	r3, [pc, #604]	@ (8008344 <_dtoa_r+0x584>)
 80080e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80080ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80080f0:	f7f8 fbb4 	bl	800085c <__aeabi_ddiv>
 80080f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080f8:	f004 040f 	and.w	r4, r4, #15
 80080fc:	2603      	movs	r6, #3
 80080fe:	4d91      	ldr	r5, [pc, #580]	@ (8008344 <_dtoa_r+0x584>)
 8008100:	b954      	cbnz	r4, 8008118 <_dtoa_r+0x358>
 8008102:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008106:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800810a:	f7f8 fba7 	bl	800085c <__aeabi_ddiv>
 800810e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008112:	e028      	b.n	8008166 <_dtoa_r+0x3a6>
 8008114:	2602      	movs	r6, #2
 8008116:	e7f2      	b.n	80080fe <_dtoa_r+0x33e>
 8008118:	07e1      	lsls	r1, r4, #31
 800811a:	d508      	bpl.n	800812e <_dtoa_r+0x36e>
 800811c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008120:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008124:	f7f8 fa70 	bl	8000608 <__aeabi_dmul>
 8008128:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800812c:	3601      	adds	r6, #1
 800812e:	1064      	asrs	r4, r4, #1
 8008130:	3508      	adds	r5, #8
 8008132:	e7e5      	b.n	8008100 <_dtoa_r+0x340>
 8008134:	f000 80af 	beq.w	8008296 <_dtoa_r+0x4d6>
 8008138:	427c      	negs	r4, r7
 800813a:	4b81      	ldr	r3, [pc, #516]	@ (8008340 <_dtoa_r+0x580>)
 800813c:	4d81      	ldr	r5, [pc, #516]	@ (8008344 <_dtoa_r+0x584>)
 800813e:	f004 020f 	and.w	r2, r4, #15
 8008142:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800814e:	f7f8 fa5b 	bl	8000608 <__aeabi_dmul>
 8008152:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008156:	1124      	asrs	r4, r4, #4
 8008158:	2300      	movs	r3, #0
 800815a:	2602      	movs	r6, #2
 800815c:	2c00      	cmp	r4, #0
 800815e:	f040 808f 	bne.w	8008280 <_dtoa_r+0x4c0>
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1d3      	bne.n	800810e <_dtoa_r+0x34e>
 8008166:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008168:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 8094 	beq.w	800829a <_dtoa_r+0x4da>
 8008172:	4b75      	ldr	r3, [pc, #468]	@ (8008348 <_dtoa_r+0x588>)
 8008174:	2200      	movs	r2, #0
 8008176:	4620      	mov	r0, r4
 8008178:	4629      	mov	r1, r5
 800817a:	f7f8 fcb7 	bl	8000aec <__aeabi_dcmplt>
 800817e:	2800      	cmp	r0, #0
 8008180:	f000 808b 	beq.w	800829a <_dtoa_r+0x4da>
 8008184:	9b03      	ldr	r3, [sp, #12]
 8008186:	2b00      	cmp	r3, #0
 8008188:	f000 8087 	beq.w	800829a <_dtoa_r+0x4da>
 800818c:	f1bb 0f00 	cmp.w	fp, #0
 8008190:	dd34      	ble.n	80081fc <_dtoa_r+0x43c>
 8008192:	4620      	mov	r0, r4
 8008194:	4b6d      	ldr	r3, [pc, #436]	@ (800834c <_dtoa_r+0x58c>)
 8008196:	2200      	movs	r2, #0
 8008198:	4629      	mov	r1, r5
 800819a:	f7f8 fa35 	bl	8000608 <__aeabi_dmul>
 800819e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081a2:	f107 38ff 	add.w	r8, r7, #4294967295
 80081a6:	3601      	adds	r6, #1
 80081a8:	465c      	mov	r4, fp
 80081aa:	4630      	mov	r0, r6
 80081ac:	f7f8 f9c2 	bl	8000534 <__aeabi_i2d>
 80081b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081b4:	f7f8 fa28 	bl	8000608 <__aeabi_dmul>
 80081b8:	4b65      	ldr	r3, [pc, #404]	@ (8008350 <_dtoa_r+0x590>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	f7f8 f86e 	bl	800029c <__adddf3>
 80081c0:	4605      	mov	r5, r0
 80081c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80081c6:	2c00      	cmp	r4, #0
 80081c8:	d16a      	bne.n	80082a0 <_dtoa_r+0x4e0>
 80081ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081ce:	4b61      	ldr	r3, [pc, #388]	@ (8008354 <_dtoa_r+0x594>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	f7f8 f861 	bl	8000298 <__aeabi_dsub>
 80081d6:	4602      	mov	r2, r0
 80081d8:	460b      	mov	r3, r1
 80081da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80081de:	462a      	mov	r2, r5
 80081e0:	4633      	mov	r3, r6
 80081e2:	f7f8 fca1 	bl	8000b28 <__aeabi_dcmpgt>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	f040 8298 	bne.w	800871c <_dtoa_r+0x95c>
 80081ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081f0:	462a      	mov	r2, r5
 80081f2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80081f6:	f7f8 fc79 	bl	8000aec <__aeabi_dcmplt>
 80081fa:	bb38      	cbnz	r0, 800824c <_dtoa_r+0x48c>
 80081fc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008200:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008204:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008206:	2b00      	cmp	r3, #0
 8008208:	f2c0 8157 	blt.w	80084ba <_dtoa_r+0x6fa>
 800820c:	2f0e      	cmp	r7, #14
 800820e:	f300 8154 	bgt.w	80084ba <_dtoa_r+0x6fa>
 8008212:	4b4b      	ldr	r3, [pc, #300]	@ (8008340 <_dtoa_r+0x580>)
 8008214:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008218:	ed93 7b00 	vldr	d7, [r3]
 800821c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800821e:	2b00      	cmp	r3, #0
 8008220:	ed8d 7b00 	vstr	d7, [sp]
 8008224:	f280 80e5 	bge.w	80083f2 <_dtoa_r+0x632>
 8008228:	9b03      	ldr	r3, [sp, #12]
 800822a:	2b00      	cmp	r3, #0
 800822c:	f300 80e1 	bgt.w	80083f2 <_dtoa_r+0x632>
 8008230:	d10c      	bne.n	800824c <_dtoa_r+0x48c>
 8008232:	4b48      	ldr	r3, [pc, #288]	@ (8008354 <_dtoa_r+0x594>)
 8008234:	2200      	movs	r2, #0
 8008236:	ec51 0b17 	vmov	r0, r1, d7
 800823a:	f7f8 f9e5 	bl	8000608 <__aeabi_dmul>
 800823e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008242:	f7f8 fc67 	bl	8000b14 <__aeabi_dcmpge>
 8008246:	2800      	cmp	r0, #0
 8008248:	f000 8266 	beq.w	8008718 <_dtoa_r+0x958>
 800824c:	2400      	movs	r4, #0
 800824e:	4625      	mov	r5, r4
 8008250:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008252:	4656      	mov	r6, sl
 8008254:	ea6f 0803 	mvn.w	r8, r3
 8008258:	2700      	movs	r7, #0
 800825a:	4621      	mov	r1, r4
 800825c:	4648      	mov	r0, r9
 800825e:	f000 fcbf 	bl	8008be0 <_Bfree>
 8008262:	2d00      	cmp	r5, #0
 8008264:	f000 80bd 	beq.w	80083e2 <_dtoa_r+0x622>
 8008268:	b12f      	cbz	r7, 8008276 <_dtoa_r+0x4b6>
 800826a:	42af      	cmp	r7, r5
 800826c:	d003      	beq.n	8008276 <_dtoa_r+0x4b6>
 800826e:	4639      	mov	r1, r7
 8008270:	4648      	mov	r0, r9
 8008272:	f000 fcb5 	bl	8008be0 <_Bfree>
 8008276:	4629      	mov	r1, r5
 8008278:	4648      	mov	r0, r9
 800827a:	f000 fcb1 	bl	8008be0 <_Bfree>
 800827e:	e0b0      	b.n	80083e2 <_dtoa_r+0x622>
 8008280:	07e2      	lsls	r2, r4, #31
 8008282:	d505      	bpl.n	8008290 <_dtoa_r+0x4d0>
 8008284:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008288:	f7f8 f9be 	bl	8000608 <__aeabi_dmul>
 800828c:	3601      	adds	r6, #1
 800828e:	2301      	movs	r3, #1
 8008290:	1064      	asrs	r4, r4, #1
 8008292:	3508      	adds	r5, #8
 8008294:	e762      	b.n	800815c <_dtoa_r+0x39c>
 8008296:	2602      	movs	r6, #2
 8008298:	e765      	b.n	8008166 <_dtoa_r+0x3a6>
 800829a:	9c03      	ldr	r4, [sp, #12]
 800829c:	46b8      	mov	r8, r7
 800829e:	e784      	b.n	80081aa <_dtoa_r+0x3ea>
 80082a0:	4b27      	ldr	r3, [pc, #156]	@ (8008340 <_dtoa_r+0x580>)
 80082a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80082a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80082a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80082ac:	4454      	add	r4, sl
 80082ae:	2900      	cmp	r1, #0
 80082b0:	d054      	beq.n	800835c <_dtoa_r+0x59c>
 80082b2:	4929      	ldr	r1, [pc, #164]	@ (8008358 <_dtoa_r+0x598>)
 80082b4:	2000      	movs	r0, #0
 80082b6:	f7f8 fad1 	bl	800085c <__aeabi_ddiv>
 80082ba:	4633      	mov	r3, r6
 80082bc:	462a      	mov	r2, r5
 80082be:	f7f7 ffeb 	bl	8000298 <__aeabi_dsub>
 80082c2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80082c6:	4656      	mov	r6, sl
 80082c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082cc:	f7f8 fc4c 	bl	8000b68 <__aeabi_d2iz>
 80082d0:	4605      	mov	r5, r0
 80082d2:	f7f8 f92f 	bl	8000534 <__aeabi_i2d>
 80082d6:	4602      	mov	r2, r0
 80082d8:	460b      	mov	r3, r1
 80082da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082de:	f7f7 ffdb 	bl	8000298 <__aeabi_dsub>
 80082e2:	3530      	adds	r5, #48	@ 0x30
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80082ec:	f806 5b01 	strb.w	r5, [r6], #1
 80082f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80082f4:	f7f8 fbfa 	bl	8000aec <__aeabi_dcmplt>
 80082f8:	2800      	cmp	r0, #0
 80082fa:	d172      	bne.n	80083e2 <_dtoa_r+0x622>
 80082fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008300:	4911      	ldr	r1, [pc, #68]	@ (8008348 <_dtoa_r+0x588>)
 8008302:	2000      	movs	r0, #0
 8008304:	f7f7 ffc8 	bl	8000298 <__aeabi_dsub>
 8008308:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800830c:	f7f8 fbee 	bl	8000aec <__aeabi_dcmplt>
 8008310:	2800      	cmp	r0, #0
 8008312:	f040 80b4 	bne.w	800847e <_dtoa_r+0x6be>
 8008316:	42a6      	cmp	r6, r4
 8008318:	f43f af70 	beq.w	80081fc <_dtoa_r+0x43c>
 800831c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008320:	4b0a      	ldr	r3, [pc, #40]	@ (800834c <_dtoa_r+0x58c>)
 8008322:	2200      	movs	r2, #0
 8008324:	f7f8 f970 	bl	8000608 <__aeabi_dmul>
 8008328:	4b08      	ldr	r3, [pc, #32]	@ (800834c <_dtoa_r+0x58c>)
 800832a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800832e:	2200      	movs	r2, #0
 8008330:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008334:	f7f8 f968 	bl	8000608 <__aeabi_dmul>
 8008338:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800833c:	e7c4      	b.n	80082c8 <_dtoa_r+0x508>
 800833e:	bf00      	nop
 8008340:	0800b700 	.word	0x0800b700
 8008344:	0800b6d8 	.word	0x0800b6d8
 8008348:	3ff00000 	.word	0x3ff00000
 800834c:	40240000 	.word	0x40240000
 8008350:	401c0000 	.word	0x401c0000
 8008354:	40140000 	.word	0x40140000
 8008358:	3fe00000 	.word	0x3fe00000
 800835c:	4631      	mov	r1, r6
 800835e:	4628      	mov	r0, r5
 8008360:	f7f8 f952 	bl	8000608 <__aeabi_dmul>
 8008364:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008368:	9413      	str	r4, [sp, #76]	@ 0x4c
 800836a:	4656      	mov	r6, sl
 800836c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008370:	f7f8 fbfa 	bl	8000b68 <__aeabi_d2iz>
 8008374:	4605      	mov	r5, r0
 8008376:	f7f8 f8dd 	bl	8000534 <__aeabi_i2d>
 800837a:	4602      	mov	r2, r0
 800837c:	460b      	mov	r3, r1
 800837e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008382:	f7f7 ff89 	bl	8000298 <__aeabi_dsub>
 8008386:	3530      	adds	r5, #48	@ 0x30
 8008388:	f806 5b01 	strb.w	r5, [r6], #1
 800838c:	4602      	mov	r2, r0
 800838e:	460b      	mov	r3, r1
 8008390:	42a6      	cmp	r6, r4
 8008392:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008396:	f04f 0200 	mov.w	r2, #0
 800839a:	d124      	bne.n	80083e6 <_dtoa_r+0x626>
 800839c:	4baf      	ldr	r3, [pc, #700]	@ (800865c <_dtoa_r+0x89c>)
 800839e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80083a2:	f7f7 ff7b 	bl	800029c <__adddf3>
 80083a6:	4602      	mov	r2, r0
 80083a8:	460b      	mov	r3, r1
 80083aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083ae:	f7f8 fbbb 	bl	8000b28 <__aeabi_dcmpgt>
 80083b2:	2800      	cmp	r0, #0
 80083b4:	d163      	bne.n	800847e <_dtoa_r+0x6be>
 80083b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80083ba:	49a8      	ldr	r1, [pc, #672]	@ (800865c <_dtoa_r+0x89c>)
 80083bc:	2000      	movs	r0, #0
 80083be:	f7f7 ff6b 	bl	8000298 <__aeabi_dsub>
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083ca:	f7f8 fb8f 	bl	8000aec <__aeabi_dcmplt>
 80083ce:	2800      	cmp	r0, #0
 80083d0:	f43f af14 	beq.w	80081fc <_dtoa_r+0x43c>
 80083d4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80083d6:	1e73      	subs	r3, r6, #1
 80083d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80083da:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80083de:	2b30      	cmp	r3, #48	@ 0x30
 80083e0:	d0f8      	beq.n	80083d4 <_dtoa_r+0x614>
 80083e2:	4647      	mov	r7, r8
 80083e4:	e03b      	b.n	800845e <_dtoa_r+0x69e>
 80083e6:	4b9e      	ldr	r3, [pc, #632]	@ (8008660 <_dtoa_r+0x8a0>)
 80083e8:	f7f8 f90e 	bl	8000608 <__aeabi_dmul>
 80083ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083f0:	e7bc      	b.n	800836c <_dtoa_r+0x5ac>
 80083f2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80083f6:	4656      	mov	r6, sl
 80083f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083fc:	4620      	mov	r0, r4
 80083fe:	4629      	mov	r1, r5
 8008400:	f7f8 fa2c 	bl	800085c <__aeabi_ddiv>
 8008404:	f7f8 fbb0 	bl	8000b68 <__aeabi_d2iz>
 8008408:	4680      	mov	r8, r0
 800840a:	f7f8 f893 	bl	8000534 <__aeabi_i2d>
 800840e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008412:	f7f8 f8f9 	bl	8000608 <__aeabi_dmul>
 8008416:	4602      	mov	r2, r0
 8008418:	460b      	mov	r3, r1
 800841a:	4620      	mov	r0, r4
 800841c:	4629      	mov	r1, r5
 800841e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008422:	f7f7 ff39 	bl	8000298 <__aeabi_dsub>
 8008426:	f806 4b01 	strb.w	r4, [r6], #1
 800842a:	9d03      	ldr	r5, [sp, #12]
 800842c:	eba6 040a 	sub.w	r4, r6, sl
 8008430:	42a5      	cmp	r5, r4
 8008432:	4602      	mov	r2, r0
 8008434:	460b      	mov	r3, r1
 8008436:	d133      	bne.n	80084a0 <_dtoa_r+0x6e0>
 8008438:	f7f7 ff30 	bl	800029c <__adddf3>
 800843c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008440:	4604      	mov	r4, r0
 8008442:	460d      	mov	r5, r1
 8008444:	f7f8 fb70 	bl	8000b28 <__aeabi_dcmpgt>
 8008448:	b9c0      	cbnz	r0, 800847c <_dtoa_r+0x6bc>
 800844a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800844e:	4620      	mov	r0, r4
 8008450:	4629      	mov	r1, r5
 8008452:	f7f8 fb41 	bl	8000ad8 <__aeabi_dcmpeq>
 8008456:	b110      	cbz	r0, 800845e <_dtoa_r+0x69e>
 8008458:	f018 0f01 	tst.w	r8, #1
 800845c:	d10e      	bne.n	800847c <_dtoa_r+0x6bc>
 800845e:	9902      	ldr	r1, [sp, #8]
 8008460:	4648      	mov	r0, r9
 8008462:	f000 fbbd 	bl	8008be0 <_Bfree>
 8008466:	2300      	movs	r3, #0
 8008468:	7033      	strb	r3, [r6, #0]
 800846a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800846c:	3701      	adds	r7, #1
 800846e:	601f      	str	r7, [r3, #0]
 8008470:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 824b 	beq.w	800890e <_dtoa_r+0xb4e>
 8008478:	601e      	str	r6, [r3, #0]
 800847a:	e248      	b.n	800890e <_dtoa_r+0xb4e>
 800847c:	46b8      	mov	r8, r7
 800847e:	4633      	mov	r3, r6
 8008480:	461e      	mov	r6, r3
 8008482:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008486:	2a39      	cmp	r2, #57	@ 0x39
 8008488:	d106      	bne.n	8008498 <_dtoa_r+0x6d8>
 800848a:	459a      	cmp	sl, r3
 800848c:	d1f8      	bne.n	8008480 <_dtoa_r+0x6c0>
 800848e:	2230      	movs	r2, #48	@ 0x30
 8008490:	f108 0801 	add.w	r8, r8, #1
 8008494:	f88a 2000 	strb.w	r2, [sl]
 8008498:	781a      	ldrb	r2, [r3, #0]
 800849a:	3201      	adds	r2, #1
 800849c:	701a      	strb	r2, [r3, #0]
 800849e:	e7a0      	b.n	80083e2 <_dtoa_r+0x622>
 80084a0:	4b6f      	ldr	r3, [pc, #444]	@ (8008660 <_dtoa_r+0x8a0>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	f7f8 f8b0 	bl	8000608 <__aeabi_dmul>
 80084a8:	2200      	movs	r2, #0
 80084aa:	2300      	movs	r3, #0
 80084ac:	4604      	mov	r4, r0
 80084ae:	460d      	mov	r5, r1
 80084b0:	f7f8 fb12 	bl	8000ad8 <__aeabi_dcmpeq>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	d09f      	beq.n	80083f8 <_dtoa_r+0x638>
 80084b8:	e7d1      	b.n	800845e <_dtoa_r+0x69e>
 80084ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084bc:	2a00      	cmp	r2, #0
 80084be:	f000 80ea 	beq.w	8008696 <_dtoa_r+0x8d6>
 80084c2:	9a07      	ldr	r2, [sp, #28]
 80084c4:	2a01      	cmp	r2, #1
 80084c6:	f300 80cd 	bgt.w	8008664 <_dtoa_r+0x8a4>
 80084ca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80084cc:	2a00      	cmp	r2, #0
 80084ce:	f000 80c1 	beq.w	8008654 <_dtoa_r+0x894>
 80084d2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80084d6:	9c08      	ldr	r4, [sp, #32]
 80084d8:	9e00      	ldr	r6, [sp, #0]
 80084da:	9a00      	ldr	r2, [sp, #0]
 80084dc:	441a      	add	r2, r3
 80084de:	9200      	str	r2, [sp, #0]
 80084e0:	9a06      	ldr	r2, [sp, #24]
 80084e2:	2101      	movs	r1, #1
 80084e4:	441a      	add	r2, r3
 80084e6:	4648      	mov	r0, r9
 80084e8:	9206      	str	r2, [sp, #24]
 80084ea:	f000 fc77 	bl	8008ddc <__i2b>
 80084ee:	4605      	mov	r5, r0
 80084f0:	b166      	cbz	r6, 800850c <_dtoa_r+0x74c>
 80084f2:	9b06      	ldr	r3, [sp, #24]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	dd09      	ble.n	800850c <_dtoa_r+0x74c>
 80084f8:	42b3      	cmp	r3, r6
 80084fa:	9a00      	ldr	r2, [sp, #0]
 80084fc:	bfa8      	it	ge
 80084fe:	4633      	movge	r3, r6
 8008500:	1ad2      	subs	r2, r2, r3
 8008502:	9200      	str	r2, [sp, #0]
 8008504:	9a06      	ldr	r2, [sp, #24]
 8008506:	1af6      	subs	r6, r6, r3
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	9306      	str	r3, [sp, #24]
 800850c:	9b08      	ldr	r3, [sp, #32]
 800850e:	b30b      	cbz	r3, 8008554 <_dtoa_r+0x794>
 8008510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008512:	2b00      	cmp	r3, #0
 8008514:	f000 80c6 	beq.w	80086a4 <_dtoa_r+0x8e4>
 8008518:	2c00      	cmp	r4, #0
 800851a:	f000 80c0 	beq.w	800869e <_dtoa_r+0x8de>
 800851e:	4629      	mov	r1, r5
 8008520:	4622      	mov	r2, r4
 8008522:	4648      	mov	r0, r9
 8008524:	f000 fd12 	bl	8008f4c <__pow5mult>
 8008528:	9a02      	ldr	r2, [sp, #8]
 800852a:	4601      	mov	r1, r0
 800852c:	4605      	mov	r5, r0
 800852e:	4648      	mov	r0, r9
 8008530:	f000 fc6a 	bl	8008e08 <__multiply>
 8008534:	9902      	ldr	r1, [sp, #8]
 8008536:	4680      	mov	r8, r0
 8008538:	4648      	mov	r0, r9
 800853a:	f000 fb51 	bl	8008be0 <_Bfree>
 800853e:	9b08      	ldr	r3, [sp, #32]
 8008540:	1b1b      	subs	r3, r3, r4
 8008542:	9308      	str	r3, [sp, #32]
 8008544:	f000 80b1 	beq.w	80086aa <_dtoa_r+0x8ea>
 8008548:	9a08      	ldr	r2, [sp, #32]
 800854a:	4641      	mov	r1, r8
 800854c:	4648      	mov	r0, r9
 800854e:	f000 fcfd 	bl	8008f4c <__pow5mult>
 8008552:	9002      	str	r0, [sp, #8]
 8008554:	2101      	movs	r1, #1
 8008556:	4648      	mov	r0, r9
 8008558:	f000 fc40 	bl	8008ddc <__i2b>
 800855c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800855e:	4604      	mov	r4, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	f000 81d8 	beq.w	8008916 <_dtoa_r+0xb56>
 8008566:	461a      	mov	r2, r3
 8008568:	4601      	mov	r1, r0
 800856a:	4648      	mov	r0, r9
 800856c:	f000 fcee 	bl	8008f4c <__pow5mult>
 8008570:	9b07      	ldr	r3, [sp, #28]
 8008572:	2b01      	cmp	r3, #1
 8008574:	4604      	mov	r4, r0
 8008576:	f300 809f 	bgt.w	80086b8 <_dtoa_r+0x8f8>
 800857a:	9b04      	ldr	r3, [sp, #16]
 800857c:	2b00      	cmp	r3, #0
 800857e:	f040 8097 	bne.w	80086b0 <_dtoa_r+0x8f0>
 8008582:	9b05      	ldr	r3, [sp, #20]
 8008584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008588:	2b00      	cmp	r3, #0
 800858a:	f040 8093 	bne.w	80086b4 <_dtoa_r+0x8f4>
 800858e:	9b05      	ldr	r3, [sp, #20]
 8008590:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008594:	0d1b      	lsrs	r3, r3, #20
 8008596:	051b      	lsls	r3, r3, #20
 8008598:	b133      	cbz	r3, 80085a8 <_dtoa_r+0x7e8>
 800859a:	9b00      	ldr	r3, [sp, #0]
 800859c:	3301      	adds	r3, #1
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	9b06      	ldr	r3, [sp, #24]
 80085a2:	3301      	adds	r3, #1
 80085a4:	9306      	str	r3, [sp, #24]
 80085a6:	2301      	movs	r3, #1
 80085a8:	9308      	str	r3, [sp, #32]
 80085aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f000 81b8 	beq.w	8008922 <_dtoa_r+0xb62>
 80085b2:	6923      	ldr	r3, [r4, #16]
 80085b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80085b8:	6918      	ldr	r0, [r3, #16]
 80085ba:	f000 fbc3 	bl	8008d44 <__hi0bits>
 80085be:	f1c0 0020 	rsb	r0, r0, #32
 80085c2:	9b06      	ldr	r3, [sp, #24]
 80085c4:	4418      	add	r0, r3
 80085c6:	f010 001f 	ands.w	r0, r0, #31
 80085ca:	f000 8082 	beq.w	80086d2 <_dtoa_r+0x912>
 80085ce:	f1c0 0320 	rsb	r3, r0, #32
 80085d2:	2b04      	cmp	r3, #4
 80085d4:	dd73      	ble.n	80086be <_dtoa_r+0x8fe>
 80085d6:	9b00      	ldr	r3, [sp, #0]
 80085d8:	f1c0 001c 	rsb	r0, r0, #28
 80085dc:	4403      	add	r3, r0
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	9b06      	ldr	r3, [sp, #24]
 80085e2:	4403      	add	r3, r0
 80085e4:	4406      	add	r6, r0
 80085e6:	9306      	str	r3, [sp, #24]
 80085e8:	9b00      	ldr	r3, [sp, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	dd05      	ble.n	80085fa <_dtoa_r+0x83a>
 80085ee:	9902      	ldr	r1, [sp, #8]
 80085f0:	461a      	mov	r2, r3
 80085f2:	4648      	mov	r0, r9
 80085f4:	f000 fd04 	bl	8009000 <__lshift>
 80085f8:	9002      	str	r0, [sp, #8]
 80085fa:	9b06      	ldr	r3, [sp, #24]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	dd05      	ble.n	800860c <_dtoa_r+0x84c>
 8008600:	4621      	mov	r1, r4
 8008602:	461a      	mov	r2, r3
 8008604:	4648      	mov	r0, r9
 8008606:	f000 fcfb 	bl	8009000 <__lshift>
 800860a:	4604      	mov	r4, r0
 800860c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800860e:	2b00      	cmp	r3, #0
 8008610:	d061      	beq.n	80086d6 <_dtoa_r+0x916>
 8008612:	9802      	ldr	r0, [sp, #8]
 8008614:	4621      	mov	r1, r4
 8008616:	f000 fd5f 	bl	80090d8 <__mcmp>
 800861a:	2800      	cmp	r0, #0
 800861c:	da5b      	bge.n	80086d6 <_dtoa_r+0x916>
 800861e:	2300      	movs	r3, #0
 8008620:	9902      	ldr	r1, [sp, #8]
 8008622:	220a      	movs	r2, #10
 8008624:	4648      	mov	r0, r9
 8008626:	f000 fafd 	bl	8008c24 <__multadd>
 800862a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800862c:	9002      	str	r0, [sp, #8]
 800862e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008632:	2b00      	cmp	r3, #0
 8008634:	f000 8177 	beq.w	8008926 <_dtoa_r+0xb66>
 8008638:	4629      	mov	r1, r5
 800863a:	2300      	movs	r3, #0
 800863c:	220a      	movs	r2, #10
 800863e:	4648      	mov	r0, r9
 8008640:	f000 faf0 	bl	8008c24 <__multadd>
 8008644:	f1bb 0f00 	cmp.w	fp, #0
 8008648:	4605      	mov	r5, r0
 800864a:	dc6f      	bgt.n	800872c <_dtoa_r+0x96c>
 800864c:	9b07      	ldr	r3, [sp, #28]
 800864e:	2b02      	cmp	r3, #2
 8008650:	dc49      	bgt.n	80086e6 <_dtoa_r+0x926>
 8008652:	e06b      	b.n	800872c <_dtoa_r+0x96c>
 8008654:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008656:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800865a:	e73c      	b.n	80084d6 <_dtoa_r+0x716>
 800865c:	3fe00000 	.word	0x3fe00000
 8008660:	40240000 	.word	0x40240000
 8008664:	9b03      	ldr	r3, [sp, #12]
 8008666:	1e5c      	subs	r4, r3, #1
 8008668:	9b08      	ldr	r3, [sp, #32]
 800866a:	42a3      	cmp	r3, r4
 800866c:	db09      	blt.n	8008682 <_dtoa_r+0x8c2>
 800866e:	1b1c      	subs	r4, r3, r4
 8008670:	9b03      	ldr	r3, [sp, #12]
 8008672:	2b00      	cmp	r3, #0
 8008674:	f6bf af30 	bge.w	80084d8 <_dtoa_r+0x718>
 8008678:	9b00      	ldr	r3, [sp, #0]
 800867a:	9a03      	ldr	r2, [sp, #12]
 800867c:	1a9e      	subs	r6, r3, r2
 800867e:	2300      	movs	r3, #0
 8008680:	e72b      	b.n	80084da <_dtoa_r+0x71a>
 8008682:	9b08      	ldr	r3, [sp, #32]
 8008684:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008686:	9408      	str	r4, [sp, #32]
 8008688:	1ae3      	subs	r3, r4, r3
 800868a:	441a      	add	r2, r3
 800868c:	9e00      	ldr	r6, [sp, #0]
 800868e:	9b03      	ldr	r3, [sp, #12]
 8008690:	920d      	str	r2, [sp, #52]	@ 0x34
 8008692:	2400      	movs	r4, #0
 8008694:	e721      	b.n	80084da <_dtoa_r+0x71a>
 8008696:	9c08      	ldr	r4, [sp, #32]
 8008698:	9e00      	ldr	r6, [sp, #0]
 800869a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800869c:	e728      	b.n	80084f0 <_dtoa_r+0x730>
 800869e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80086a2:	e751      	b.n	8008548 <_dtoa_r+0x788>
 80086a4:	9a08      	ldr	r2, [sp, #32]
 80086a6:	9902      	ldr	r1, [sp, #8]
 80086a8:	e750      	b.n	800854c <_dtoa_r+0x78c>
 80086aa:	f8cd 8008 	str.w	r8, [sp, #8]
 80086ae:	e751      	b.n	8008554 <_dtoa_r+0x794>
 80086b0:	2300      	movs	r3, #0
 80086b2:	e779      	b.n	80085a8 <_dtoa_r+0x7e8>
 80086b4:	9b04      	ldr	r3, [sp, #16]
 80086b6:	e777      	b.n	80085a8 <_dtoa_r+0x7e8>
 80086b8:	2300      	movs	r3, #0
 80086ba:	9308      	str	r3, [sp, #32]
 80086bc:	e779      	b.n	80085b2 <_dtoa_r+0x7f2>
 80086be:	d093      	beq.n	80085e8 <_dtoa_r+0x828>
 80086c0:	9a00      	ldr	r2, [sp, #0]
 80086c2:	331c      	adds	r3, #28
 80086c4:	441a      	add	r2, r3
 80086c6:	9200      	str	r2, [sp, #0]
 80086c8:	9a06      	ldr	r2, [sp, #24]
 80086ca:	441a      	add	r2, r3
 80086cc:	441e      	add	r6, r3
 80086ce:	9206      	str	r2, [sp, #24]
 80086d0:	e78a      	b.n	80085e8 <_dtoa_r+0x828>
 80086d2:	4603      	mov	r3, r0
 80086d4:	e7f4      	b.n	80086c0 <_dtoa_r+0x900>
 80086d6:	9b03      	ldr	r3, [sp, #12]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	46b8      	mov	r8, r7
 80086dc:	dc20      	bgt.n	8008720 <_dtoa_r+0x960>
 80086de:	469b      	mov	fp, r3
 80086e0:	9b07      	ldr	r3, [sp, #28]
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	dd1e      	ble.n	8008724 <_dtoa_r+0x964>
 80086e6:	f1bb 0f00 	cmp.w	fp, #0
 80086ea:	f47f adb1 	bne.w	8008250 <_dtoa_r+0x490>
 80086ee:	4621      	mov	r1, r4
 80086f0:	465b      	mov	r3, fp
 80086f2:	2205      	movs	r2, #5
 80086f4:	4648      	mov	r0, r9
 80086f6:	f000 fa95 	bl	8008c24 <__multadd>
 80086fa:	4601      	mov	r1, r0
 80086fc:	4604      	mov	r4, r0
 80086fe:	9802      	ldr	r0, [sp, #8]
 8008700:	f000 fcea 	bl	80090d8 <__mcmp>
 8008704:	2800      	cmp	r0, #0
 8008706:	f77f ada3 	ble.w	8008250 <_dtoa_r+0x490>
 800870a:	4656      	mov	r6, sl
 800870c:	2331      	movs	r3, #49	@ 0x31
 800870e:	f806 3b01 	strb.w	r3, [r6], #1
 8008712:	f108 0801 	add.w	r8, r8, #1
 8008716:	e59f      	b.n	8008258 <_dtoa_r+0x498>
 8008718:	9c03      	ldr	r4, [sp, #12]
 800871a:	46b8      	mov	r8, r7
 800871c:	4625      	mov	r5, r4
 800871e:	e7f4      	b.n	800870a <_dtoa_r+0x94a>
 8008720:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008724:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008726:	2b00      	cmp	r3, #0
 8008728:	f000 8101 	beq.w	800892e <_dtoa_r+0xb6e>
 800872c:	2e00      	cmp	r6, #0
 800872e:	dd05      	ble.n	800873c <_dtoa_r+0x97c>
 8008730:	4629      	mov	r1, r5
 8008732:	4632      	mov	r2, r6
 8008734:	4648      	mov	r0, r9
 8008736:	f000 fc63 	bl	8009000 <__lshift>
 800873a:	4605      	mov	r5, r0
 800873c:	9b08      	ldr	r3, [sp, #32]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d05c      	beq.n	80087fc <_dtoa_r+0xa3c>
 8008742:	6869      	ldr	r1, [r5, #4]
 8008744:	4648      	mov	r0, r9
 8008746:	f000 fa0b 	bl	8008b60 <_Balloc>
 800874a:	4606      	mov	r6, r0
 800874c:	b928      	cbnz	r0, 800875a <_dtoa_r+0x99a>
 800874e:	4b82      	ldr	r3, [pc, #520]	@ (8008958 <_dtoa_r+0xb98>)
 8008750:	4602      	mov	r2, r0
 8008752:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008756:	f7ff bb4a 	b.w	8007dee <_dtoa_r+0x2e>
 800875a:	692a      	ldr	r2, [r5, #16]
 800875c:	3202      	adds	r2, #2
 800875e:	0092      	lsls	r2, r2, #2
 8008760:	f105 010c 	add.w	r1, r5, #12
 8008764:	300c      	adds	r0, #12
 8008766:	f002 f93f 	bl	800a9e8 <memcpy>
 800876a:	2201      	movs	r2, #1
 800876c:	4631      	mov	r1, r6
 800876e:	4648      	mov	r0, r9
 8008770:	f000 fc46 	bl	8009000 <__lshift>
 8008774:	f10a 0301 	add.w	r3, sl, #1
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	eb0a 030b 	add.w	r3, sl, fp
 800877e:	9308      	str	r3, [sp, #32]
 8008780:	9b04      	ldr	r3, [sp, #16]
 8008782:	f003 0301 	and.w	r3, r3, #1
 8008786:	462f      	mov	r7, r5
 8008788:	9306      	str	r3, [sp, #24]
 800878a:	4605      	mov	r5, r0
 800878c:	9b00      	ldr	r3, [sp, #0]
 800878e:	9802      	ldr	r0, [sp, #8]
 8008790:	4621      	mov	r1, r4
 8008792:	f103 3bff 	add.w	fp, r3, #4294967295
 8008796:	f7ff fa8b 	bl	8007cb0 <quorem>
 800879a:	4603      	mov	r3, r0
 800879c:	3330      	adds	r3, #48	@ 0x30
 800879e:	9003      	str	r0, [sp, #12]
 80087a0:	4639      	mov	r1, r7
 80087a2:	9802      	ldr	r0, [sp, #8]
 80087a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80087a6:	f000 fc97 	bl	80090d8 <__mcmp>
 80087aa:	462a      	mov	r2, r5
 80087ac:	9004      	str	r0, [sp, #16]
 80087ae:	4621      	mov	r1, r4
 80087b0:	4648      	mov	r0, r9
 80087b2:	f000 fcad 	bl	8009110 <__mdiff>
 80087b6:	68c2      	ldr	r2, [r0, #12]
 80087b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ba:	4606      	mov	r6, r0
 80087bc:	bb02      	cbnz	r2, 8008800 <_dtoa_r+0xa40>
 80087be:	4601      	mov	r1, r0
 80087c0:	9802      	ldr	r0, [sp, #8]
 80087c2:	f000 fc89 	bl	80090d8 <__mcmp>
 80087c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087c8:	4602      	mov	r2, r0
 80087ca:	4631      	mov	r1, r6
 80087cc:	4648      	mov	r0, r9
 80087ce:	920c      	str	r2, [sp, #48]	@ 0x30
 80087d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80087d2:	f000 fa05 	bl	8008be0 <_Bfree>
 80087d6:	9b07      	ldr	r3, [sp, #28]
 80087d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80087da:	9e00      	ldr	r6, [sp, #0]
 80087dc:	ea42 0103 	orr.w	r1, r2, r3
 80087e0:	9b06      	ldr	r3, [sp, #24]
 80087e2:	4319      	orrs	r1, r3
 80087e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087e6:	d10d      	bne.n	8008804 <_dtoa_r+0xa44>
 80087e8:	2b39      	cmp	r3, #57	@ 0x39
 80087ea:	d027      	beq.n	800883c <_dtoa_r+0xa7c>
 80087ec:	9a04      	ldr	r2, [sp, #16]
 80087ee:	2a00      	cmp	r2, #0
 80087f0:	dd01      	ble.n	80087f6 <_dtoa_r+0xa36>
 80087f2:	9b03      	ldr	r3, [sp, #12]
 80087f4:	3331      	adds	r3, #49	@ 0x31
 80087f6:	f88b 3000 	strb.w	r3, [fp]
 80087fa:	e52e      	b.n	800825a <_dtoa_r+0x49a>
 80087fc:	4628      	mov	r0, r5
 80087fe:	e7b9      	b.n	8008774 <_dtoa_r+0x9b4>
 8008800:	2201      	movs	r2, #1
 8008802:	e7e2      	b.n	80087ca <_dtoa_r+0xa0a>
 8008804:	9904      	ldr	r1, [sp, #16]
 8008806:	2900      	cmp	r1, #0
 8008808:	db04      	blt.n	8008814 <_dtoa_r+0xa54>
 800880a:	9807      	ldr	r0, [sp, #28]
 800880c:	4301      	orrs	r1, r0
 800880e:	9806      	ldr	r0, [sp, #24]
 8008810:	4301      	orrs	r1, r0
 8008812:	d120      	bne.n	8008856 <_dtoa_r+0xa96>
 8008814:	2a00      	cmp	r2, #0
 8008816:	ddee      	ble.n	80087f6 <_dtoa_r+0xa36>
 8008818:	9902      	ldr	r1, [sp, #8]
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	2201      	movs	r2, #1
 800881e:	4648      	mov	r0, r9
 8008820:	f000 fbee 	bl	8009000 <__lshift>
 8008824:	4621      	mov	r1, r4
 8008826:	9002      	str	r0, [sp, #8]
 8008828:	f000 fc56 	bl	80090d8 <__mcmp>
 800882c:	2800      	cmp	r0, #0
 800882e:	9b00      	ldr	r3, [sp, #0]
 8008830:	dc02      	bgt.n	8008838 <_dtoa_r+0xa78>
 8008832:	d1e0      	bne.n	80087f6 <_dtoa_r+0xa36>
 8008834:	07da      	lsls	r2, r3, #31
 8008836:	d5de      	bpl.n	80087f6 <_dtoa_r+0xa36>
 8008838:	2b39      	cmp	r3, #57	@ 0x39
 800883a:	d1da      	bne.n	80087f2 <_dtoa_r+0xa32>
 800883c:	2339      	movs	r3, #57	@ 0x39
 800883e:	f88b 3000 	strb.w	r3, [fp]
 8008842:	4633      	mov	r3, r6
 8008844:	461e      	mov	r6, r3
 8008846:	3b01      	subs	r3, #1
 8008848:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800884c:	2a39      	cmp	r2, #57	@ 0x39
 800884e:	d04e      	beq.n	80088ee <_dtoa_r+0xb2e>
 8008850:	3201      	adds	r2, #1
 8008852:	701a      	strb	r2, [r3, #0]
 8008854:	e501      	b.n	800825a <_dtoa_r+0x49a>
 8008856:	2a00      	cmp	r2, #0
 8008858:	dd03      	ble.n	8008862 <_dtoa_r+0xaa2>
 800885a:	2b39      	cmp	r3, #57	@ 0x39
 800885c:	d0ee      	beq.n	800883c <_dtoa_r+0xa7c>
 800885e:	3301      	adds	r3, #1
 8008860:	e7c9      	b.n	80087f6 <_dtoa_r+0xa36>
 8008862:	9a00      	ldr	r2, [sp, #0]
 8008864:	9908      	ldr	r1, [sp, #32]
 8008866:	f802 3c01 	strb.w	r3, [r2, #-1]
 800886a:	428a      	cmp	r2, r1
 800886c:	d028      	beq.n	80088c0 <_dtoa_r+0xb00>
 800886e:	9902      	ldr	r1, [sp, #8]
 8008870:	2300      	movs	r3, #0
 8008872:	220a      	movs	r2, #10
 8008874:	4648      	mov	r0, r9
 8008876:	f000 f9d5 	bl	8008c24 <__multadd>
 800887a:	42af      	cmp	r7, r5
 800887c:	9002      	str	r0, [sp, #8]
 800887e:	f04f 0300 	mov.w	r3, #0
 8008882:	f04f 020a 	mov.w	r2, #10
 8008886:	4639      	mov	r1, r7
 8008888:	4648      	mov	r0, r9
 800888a:	d107      	bne.n	800889c <_dtoa_r+0xadc>
 800888c:	f000 f9ca 	bl	8008c24 <__multadd>
 8008890:	4607      	mov	r7, r0
 8008892:	4605      	mov	r5, r0
 8008894:	9b00      	ldr	r3, [sp, #0]
 8008896:	3301      	adds	r3, #1
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	e777      	b.n	800878c <_dtoa_r+0x9cc>
 800889c:	f000 f9c2 	bl	8008c24 <__multadd>
 80088a0:	4629      	mov	r1, r5
 80088a2:	4607      	mov	r7, r0
 80088a4:	2300      	movs	r3, #0
 80088a6:	220a      	movs	r2, #10
 80088a8:	4648      	mov	r0, r9
 80088aa:	f000 f9bb 	bl	8008c24 <__multadd>
 80088ae:	4605      	mov	r5, r0
 80088b0:	e7f0      	b.n	8008894 <_dtoa_r+0xad4>
 80088b2:	f1bb 0f00 	cmp.w	fp, #0
 80088b6:	bfcc      	ite	gt
 80088b8:	465e      	movgt	r6, fp
 80088ba:	2601      	movle	r6, #1
 80088bc:	4456      	add	r6, sl
 80088be:	2700      	movs	r7, #0
 80088c0:	9902      	ldr	r1, [sp, #8]
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	2201      	movs	r2, #1
 80088c6:	4648      	mov	r0, r9
 80088c8:	f000 fb9a 	bl	8009000 <__lshift>
 80088cc:	4621      	mov	r1, r4
 80088ce:	9002      	str	r0, [sp, #8]
 80088d0:	f000 fc02 	bl	80090d8 <__mcmp>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	dcb4      	bgt.n	8008842 <_dtoa_r+0xa82>
 80088d8:	d102      	bne.n	80088e0 <_dtoa_r+0xb20>
 80088da:	9b00      	ldr	r3, [sp, #0]
 80088dc:	07db      	lsls	r3, r3, #31
 80088de:	d4b0      	bmi.n	8008842 <_dtoa_r+0xa82>
 80088e0:	4633      	mov	r3, r6
 80088e2:	461e      	mov	r6, r3
 80088e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088e8:	2a30      	cmp	r2, #48	@ 0x30
 80088ea:	d0fa      	beq.n	80088e2 <_dtoa_r+0xb22>
 80088ec:	e4b5      	b.n	800825a <_dtoa_r+0x49a>
 80088ee:	459a      	cmp	sl, r3
 80088f0:	d1a8      	bne.n	8008844 <_dtoa_r+0xa84>
 80088f2:	2331      	movs	r3, #49	@ 0x31
 80088f4:	f108 0801 	add.w	r8, r8, #1
 80088f8:	f88a 3000 	strb.w	r3, [sl]
 80088fc:	e4ad      	b.n	800825a <_dtoa_r+0x49a>
 80088fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008900:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800895c <_dtoa_r+0xb9c>
 8008904:	b11b      	cbz	r3, 800890e <_dtoa_r+0xb4e>
 8008906:	f10a 0308 	add.w	r3, sl, #8
 800890a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800890c:	6013      	str	r3, [r2, #0]
 800890e:	4650      	mov	r0, sl
 8008910:	b017      	add	sp, #92	@ 0x5c
 8008912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008916:	9b07      	ldr	r3, [sp, #28]
 8008918:	2b01      	cmp	r3, #1
 800891a:	f77f ae2e 	ble.w	800857a <_dtoa_r+0x7ba>
 800891e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008920:	9308      	str	r3, [sp, #32]
 8008922:	2001      	movs	r0, #1
 8008924:	e64d      	b.n	80085c2 <_dtoa_r+0x802>
 8008926:	f1bb 0f00 	cmp.w	fp, #0
 800892a:	f77f aed9 	ble.w	80086e0 <_dtoa_r+0x920>
 800892e:	4656      	mov	r6, sl
 8008930:	9802      	ldr	r0, [sp, #8]
 8008932:	4621      	mov	r1, r4
 8008934:	f7ff f9bc 	bl	8007cb0 <quorem>
 8008938:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800893c:	f806 3b01 	strb.w	r3, [r6], #1
 8008940:	eba6 020a 	sub.w	r2, r6, sl
 8008944:	4593      	cmp	fp, r2
 8008946:	ddb4      	ble.n	80088b2 <_dtoa_r+0xaf2>
 8008948:	9902      	ldr	r1, [sp, #8]
 800894a:	2300      	movs	r3, #0
 800894c:	220a      	movs	r2, #10
 800894e:	4648      	mov	r0, r9
 8008950:	f000 f968 	bl	8008c24 <__multadd>
 8008954:	9002      	str	r0, [sp, #8]
 8008956:	e7eb      	b.n	8008930 <_dtoa_r+0xb70>
 8008958:	0800b5a5 	.word	0x0800b5a5
 800895c:	0800b529 	.word	0x0800b529

08008960 <_free_r>:
 8008960:	b538      	push	{r3, r4, r5, lr}
 8008962:	4605      	mov	r5, r0
 8008964:	2900      	cmp	r1, #0
 8008966:	d041      	beq.n	80089ec <_free_r+0x8c>
 8008968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800896c:	1f0c      	subs	r4, r1, #4
 800896e:	2b00      	cmp	r3, #0
 8008970:	bfb8      	it	lt
 8008972:	18e4      	addlt	r4, r4, r3
 8008974:	f000 f8e8 	bl	8008b48 <__malloc_lock>
 8008978:	4a1d      	ldr	r2, [pc, #116]	@ (80089f0 <_free_r+0x90>)
 800897a:	6813      	ldr	r3, [r2, #0]
 800897c:	b933      	cbnz	r3, 800898c <_free_r+0x2c>
 800897e:	6063      	str	r3, [r4, #4]
 8008980:	6014      	str	r4, [r2, #0]
 8008982:	4628      	mov	r0, r5
 8008984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008988:	f000 b8e4 	b.w	8008b54 <__malloc_unlock>
 800898c:	42a3      	cmp	r3, r4
 800898e:	d908      	bls.n	80089a2 <_free_r+0x42>
 8008990:	6820      	ldr	r0, [r4, #0]
 8008992:	1821      	adds	r1, r4, r0
 8008994:	428b      	cmp	r3, r1
 8008996:	bf01      	itttt	eq
 8008998:	6819      	ldreq	r1, [r3, #0]
 800899a:	685b      	ldreq	r3, [r3, #4]
 800899c:	1809      	addeq	r1, r1, r0
 800899e:	6021      	streq	r1, [r4, #0]
 80089a0:	e7ed      	b.n	800897e <_free_r+0x1e>
 80089a2:	461a      	mov	r2, r3
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	b10b      	cbz	r3, 80089ac <_free_r+0x4c>
 80089a8:	42a3      	cmp	r3, r4
 80089aa:	d9fa      	bls.n	80089a2 <_free_r+0x42>
 80089ac:	6811      	ldr	r1, [r2, #0]
 80089ae:	1850      	adds	r0, r2, r1
 80089b0:	42a0      	cmp	r0, r4
 80089b2:	d10b      	bne.n	80089cc <_free_r+0x6c>
 80089b4:	6820      	ldr	r0, [r4, #0]
 80089b6:	4401      	add	r1, r0
 80089b8:	1850      	adds	r0, r2, r1
 80089ba:	4283      	cmp	r3, r0
 80089bc:	6011      	str	r1, [r2, #0]
 80089be:	d1e0      	bne.n	8008982 <_free_r+0x22>
 80089c0:	6818      	ldr	r0, [r3, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	6053      	str	r3, [r2, #4]
 80089c6:	4408      	add	r0, r1
 80089c8:	6010      	str	r0, [r2, #0]
 80089ca:	e7da      	b.n	8008982 <_free_r+0x22>
 80089cc:	d902      	bls.n	80089d4 <_free_r+0x74>
 80089ce:	230c      	movs	r3, #12
 80089d0:	602b      	str	r3, [r5, #0]
 80089d2:	e7d6      	b.n	8008982 <_free_r+0x22>
 80089d4:	6820      	ldr	r0, [r4, #0]
 80089d6:	1821      	adds	r1, r4, r0
 80089d8:	428b      	cmp	r3, r1
 80089da:	bf04      	itt	eq
 80089dc:	6819      	ldreq	r1, [r3, #0]
 80089de:	685b      	ldreq	r3, [r3, #4]
 80089e0:	6063      	str	r3, [r4, #4]
 80089e2:	bf04      	itt	eq
 80089e4:	1809      	addeq	r1, r1, r0
 80089e6:	6021      	streq	r1, [r4, #0]
 80089e8:	6054      	str	r4, [r2, #4]
 80089ea:	e7ca      	b.n	8008982 <_free_r+0x22>
 80089ec:	bd38      	pop	{r3, r4, r5, pc}
 80089ee:	bf00      	nop
 80089f0:	200006f4 	.word	0x200006f4

080089f4 <malloc>:
 80089f4:	4b02      	ldr	r3, [pc, #8]	@ (8008a00 <malloc+0xc>)
 80089f6:	4601      	mov	r1, r0
 80089f8:	6818      	ldr	r0, [r3, #0]
 80089fa:	f000 b825 	b.w	8008a48 <_malloc_r>
 80089fe:	bf00      	nop
 8008a00:	2000003c 	.word	0x2000003c

08008a04 <sbrk_aligned>:
 8008a04:	b570      	push	{r4, r5, r6, lr}
 8008a06:	4e0f      	ldr	r6, [pc, #60]	@ (8008a44 <sbrk_aligned+0x40>)
 8008a08:	460c      	mov	r4, r1
 8008a0a:	6831      	ldr	r1, [r6, #0]
 8008a0c:	4605      	mov	r5, r0
 8008a0e:	b911      	cbnz	r1, 8008a16 <sbrk_aligned+0x12>
 8008a10:	f001 ffda 	bl	800a9c8 <_sbrk_r>
 8008a14:	6030      	str	r0, [r6, #0]
 8008a16:	4621      	mov	r1, r4
 8008a18:	4628      	mov	r0, r5
 8008a1a:	f001 ffd5 	bl	800a9c8 <_sbrk_r>
 8008a1e:	1c43      	adds	r3, r0, #1
 8008a20:	d103      	bne.n	8008a2a <sbrk_aligned+0x26>
 8008a22:	f04f 34ff 	mov.w	r4, #4294967295
 8008a26:	4620      	mov	r0, r4
 8008a28:	bd70      	pop	{r4, r5, r6, pc}
 8008a2a:	1cc4      	adds	r4, r0, #3
 8008a2c:	f024 0403 	bic.w	r4, r4, #3
 8008a30:	42a0      	cmp	r0, r4
 8008a32:	d0f8      	beq.n	8008a26 <sbrk_aligned+0x22>
 8008a34:	1a21      	subs	r1, r4, r0
 8008a36:	4628      	mov	r0, r5
 8008a38:	f001 ffc6 	bl	800a9c8 <_sbrk_r>
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	d1f2      	bne.n	8008a26 <sbrk_aligned+0x22>
 8008a40:	e7ef      	b.n	8008a22 <sbrk_aligned+0x1e>
 8008a42:	bf00      	nop
 8008a44:	200006f0 	.word	0x200006f0

08008a48 <_malloc_r>:
 8008a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a4c:	1ccd      	adds	r5, r1, #3
 8008a4e:	f025 0503 	bic.w	r5, r5, #3
 8008a52:	3508      	adds	r5, #8
 8008a54:	2d0c      	cmp	r5, #12
 8008a56:	bf38      	it	cc
 8008a58:	250c      	movcc	r5, #12
 8008a5a:	2d00      	cmp	r5, #0
 8008a5c:	4606      	mov	r6, r0
 8008a5e:	db01      	blt.n	8008a64 <_malloc_r+0x1c>
 8008a60:	42a9      	cmp	r1, r5
 8008a62:	d904      	bls.n	8008a6e <_malloc_r+0x26>
 8008a64:	230c      	movs	r3, #12
 8008a66:	6033      	str	r3, [r6, #0]
 8008a68:	2000      	movs	r0, #0
 8008a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b44 <_malloc_r+0xfc>
 8008a72:	f000 f869 	bl	8008b48 <__malloc_lock>
 8008a76:	f8d8 3000 	ldr.w	r3, [r8]
 8008a7a:	461c      	mov	r4, r3
 8008a7c:	bb44      	cbnz	r4, 8008ad0 <_malloc_r+0x88>
 8008a7e:	4629      	mov	r1, r5
 8008a80:	4630      	mov	r0, r6
 8008a82:	f7ff ffbf 	bl	8008a04 <sbrk_aligned>
 8008a86:	1c43      	adds	r3, r0, #1
 8008a88:	4604      	mov	r4, r0
 8008a8a:	d158      	bne.n	8008b3e <_malloc_r+0xf6>
 8008a8c:	f8d8 4000 	ldr.w	r4, [r8]
 8008a90:	4627      	mov	r7, r4
 8008a92:	2f00      	cmp	r7, #0
 8008a94:	d143      	bne.n	8008b1e <_malloc_r+0xd6>
 8008a96:	2c00      	cmp	r4, #0
 8008a98:	d04b      	beq.n	8008b32 <_malloc_r+0xea>
 8008a9a:	6823      	ldr	r3, [r4, #0]
 8008a9c:	4639      	mov	r1, r7
 8008a9e:	4630      	mov	r0, r6
 8008aa0:	eb04 0903 	add.w	r9, r4, r3
 8008aa4:	f001 ff90 	bl	800a9c8 <_sbrk_r>
 8008aa8:	4581      	cmp	r9, r0
 8008aaa:	d142      	bne.n	8008b32 <_malloc_r+0xea>
 8008aac:	6821      	ldr	r1, [r4, #0]
 8008aae:	1a6d      	subs	r5, r5, r1
 8008ab0:	4629      	mov	r1, r5
 8008ab2:	4630      	mov	r0, r6
 8008ab4:	f7ff ffa6 	bl	8008a04 <sbrk_aligned>
 8008ab8:	3001      	adds	r0, #1
 8008aba:	d03a      	beq.n	8008b32 <_malloc_r+0xea>
 8008abc:	6823      	ldr	r3, [r4, #0]
 8008abe:	442b      	add	r3, r5
 8008ac0:	6023      	str	r3, [r4, #0]
 8008ac2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ac6:	685a      	ldr	r2, [r3, #4]
 8008ac8:	bb62      	cbnz	r2, 8008b24 <_malloc_r+0xdc>
 8008aca:	f8c8 7000 	str.w	r7, [r8]
 8008ace:	e00f      	b.n	8008af0 <_malloc_r+0xa8>
 8008ad0:	6822      	ldr	r2, [r4, #0]
 8008ad2:	1b52      	subs	r2, r2, r5
 8008ad4:	d420      	bmi.n	8008b18 <_malloc_r+0xd0>
 8008ad6:	2a0b      	cmp	r2, #11
 8008ad8:	d917      	bls.n	8008b0a <_malloc_r+0xc2>
 8008ada:	1961      	adds	r1, r4, r5
 8008adc:	42a3      	cmp	r3, r4
 8008ade:	6025      	str	r5, [r4, #0]
 8008ae0:	bf18      	it	ne
 8008ae2:	6059      	strne	r1, [r3, #4]
 8008ae4:	6863      	ldr	r3, [r4, #4]
 8008ae6:	bf08      	it	eq
 8008ae8:	f8c8 1000 	streq.w	r1, [r8]
 8008aec:	5162      	str	r2, [r4, r5]
 8008aee:	604b      	str	r3, [r1, #4]
 8008af0:	4630      	mov	r0, r6
 8008af2:	f000 f82f 	bl	8008b54 <__malloc_unlock>
 8008af6:	f104 000b 	add.w	r0, r4, #11
 8008afa:	1d23      	adds	r3, r4, #4
 8008afc:	f020 0007 	bic.w	r0, r0, #7
 8008b00:	1ac2      	subs	r2, r0, r3
 8008b02:	bf1c      	itt	ne
 8008b04:	1a1b      	subne	r3, r3, r0
 8008b06:	50a3      	strne	r3, [r4, r2]
 8008b08:	e7af      	b.n	8008a6a <_malloc_r+0x22>
 8008b0a:	6862      	ldr	r2, [r4, #4]
 8008b0c:	42a3      	cmp	r3, r4
 8008b0e:	bf0c      	ite	eq
 8008b10:	f8c8 2000 	streq.w	r2, [r8]
 8008b14:	605a      	strne	r2, [r3, #4]
 8008b16:	e7eb      	b.n	8008af0 <_malloc_r+0xa8>
 8008b18:	4623      	mov	r3, r4
 8008b1a:	6864      	ldr	r4, [r4, #4]
 8008b1c:	e7ae      	b.n	8008a7c <_malloc_r+0x34>
 8008b1e:	463c      	mov	r4, r7
 8008b20:	687f      	ldr	r7, [r7, #4]
 8008b22:	e7b6      	b.n	8008a92 <_malloc_r+0x4a>
 8008b24:	461a      	mov	r2, r3
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	42a3      	cmp	r3, r4
 8008b2a:	d1fb      	bne.n	8008b24 <_malloc_r+0xdc>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	6053      	str	r3, [r2, #4]
 8008b30:	e7de      	b.n	8008af0 <_malloc_r+0xa8>
 8008b32:	230c      	movs	r3, #12
 8008b34:	6033      	str	r3, [r6, #0]
 8008b36:	4630      	mov	r0, r6
 8008b38:	f000 f80c 	bl	8008b54 <__malloc_unlock>
 8008b3c:	e794      	b.n	8008a68 <_malloc_r+0x20>
 8008b3e:	6005      	str	r5, [r0, #0]
 8008b40:	e7d6      	b.n	8008af0 <_malloc_r+0xa8>
 8008b42:	bf00      	nop
 8008b44:	200006f4 	.word	0x200006f4

08008b48 <__malloc_lock>:
 8008b48:	4801      	ldr	r0, [pc, #4]	@ (8008b50 <__malloc_lock+0x8>)
 8008b4a:	f7ff b8a8 	b.w	8007c9e <__retarget_lock_acquire_recursive>
 8008b4e:	bf00      	nop
 8008b50:	200006ec 	.word	0x200006ec

08008b54 <__malloc_unlock>:
 8008b54:	4801      	ldr	r0, [pc, #4]	@ (8008b5c <__malloc_unlock+0x8>)
 8008b56:	f7ff b8a3 	b.w	8007ca0 <__retarget_lock_release_recursive>
 8008b5a:	bf00      	nop
 8008b5c:	200006ec 	.word	0x200006ec

08008b60 <_Balloc>:
 8008b60:	b570      	push	{r4, r5, r6, lr}
 8008b62:	69c6      	ldr	r6, [r0, #28]
 8008b64:	4604      	mov	r4, r0
 8008b66:	460d      	mov	r5, r1
 8008b68:	b976      	cbnz	r6, 8008b88 <_Balloc+0x28>
 8008b6a:	2010      	movs	r0, #16
 8008b6c:	f7ff ff42 	bl	80089f4 <malloc>
 8008b70:	4602      	mov	r2, r0
 8008b72:	61e0      	str	r0, [r4, #28]
 8008b74:	b920      	cbnz	r0, 8008b80 <_Balloc+0x20>
 8008b76:	4b18      	ldr	r3, [pc, #96]	@ (8008bd8 <_Balloc+0x78>)
 8008b78:	4818      	ldr	r0, [pc, #96]	@ (8008bdc <_Balloc+0x7c>)
 8008b7a:	216b      	movs	r1, #107	@ 0x6b
 8008b7c:	f001 ff4c 	bl	800aa18 <__assert_func>
 8008b80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b84:	6006      	str	r6, [r0, #0]
 8008b86:	60c6      	str	r6, [r0, #12]
 8008b88:	69e6      	ldr	r6, [r4, #28]
 8008b8a:	68f3      	ldr	r3, [r6, #12]
 8008b8c:	b183      	cbz	r3, 8008bb0 <_Balloc+0x50>
 8008b8e:	69e3      	ldr	r3, [r4, #28]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b96:	b9b8      	cbnz	r0, 8008bc8 <_Balloc+0x68>
 8008b98:	2101      	movs	r1, #1
 8008b9a:	fa01 f605 	lsl.w	r6, r1, r5
 8008b9e:	1d72      	adds	r2, r6, #5
 8008ba0:	0092      	lsls	r2, r2, #2
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f001 ff56 	bl	800aa54 <_calloc_r>
 8008ba8:	b160      	cbz	r0, 8008bc4 <_Balloc+0x64>
 8008baa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008bae:	e00e      	b.n	8008bce <_Balloc+0x6e>
 8008bb0:	2221      	movs	r2, #33	@ 0x21
 8008bb2:	2104      	movs	r1, #4
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f001 ff4d 	bl	800aa54 <_calloc_r>
 8008bba:	69e3      	ldr	r3, [r4, #28]
 8008bbc:	60f0      	str	r0, [r6, #12]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1e4      	bne.n	8008b8e <_Balloc+0x2e>
 8008bc4:	2000      	movs	r0, #0
 8008bc6:	bd70      	pop	{r4, r5, r6, pc}
 8008bc8:	6802      	ldr	r2, [r0, #0]
 8008bca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008bce:	2300      	movs	r3, #0
 8008bd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bd4:	e7f7      	b.n	8008bc6 <_Balloc+0x66>
 8008bd6:	bf00      	nop
 8008bd8:	0800b536 	.word	0x0800b536
 8008bdc:	0800b5b6 	.word	0x0800b5b6

08008be0 <_Bfree>:
 8008be0:	b570      	push	{r4, r5, r6, lr}
 8008be2:	69c6      	ldr	r6, [r0, #28]
 8008be4:	4605      	mov	r5, r0
 8008be6:	460c      	mov	r4, r1
 8008be8:	b976      	cbnz	r6, 8008c08 <_Bfree+0x28>
 8008bea:	2010      	movs	r0, #16
 8008bec:	f7ff ff02 	bl	80089f4 <malloc>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	61e8      	str	r0, [r5, #28]
 8008bf4:	b920      	cbnz	r0, 8008c00 <_Bfree+0x20>
 8008bf6:	4b09      	ldr	r3, [pc, #36]	@ (8008c1c <_Bfree+0x3c>)
 8008bf8:	4809      	ldr	r0, [pc, #36]	@ (8008c20 <_Bfree+0x40>)
 8008bfa:	218f      	movs	r1, #143	@ 0x8f
 8008bfc:	f001 ff0c 	bl	800aa18 <__assert_func>
 8008c00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c04:	6006      	str	r6, [r0, #0]
 8008c06:	60c6      	str	r6, [r0, #12]
 8008c08:	b13c      	cbz	r4, 8008c1a <_Bfree+0x3a>
 8008c0a:	69eb      	ldr	r3, [r5, #28]
 8008c0c:	6862      	ldr	r2, [r4, #4]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c14:	6021      	str	r1, [r4, #0]
 8008c16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c1a:	bd70      	pop	{r4, r5, r6, pc}
 8008c1c:	0800b536 	.word	0x0800b536
 8008c20:	0800b5b6 	.word	0x0800b5b6

08008c24 <__multadd>:
 8008c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c28:	690d      	ldr	r5, [r1, #16]
 8008c2a:	4607      	mov	r7, r0
 8008c2c:	460c      	mov	r4, r1
 8008c2e:	461e      	mov	r6, r3
 8008c30:	f101 0c14 	add.w	ip, r1, #20
 8008c34:	2000      	movs	r0, #0
 8008c36:	f8dc 3000 	ldr.w	r3, [ip]
 8008c3a:	b299      	uxth	r1, r3
 8008c3c:	fb02 6101 	mla	r1, r2, r1, r6
 8008c40:	0c1e      	lsrs	r6, r3, #16
 8008c42:	0c0b      	lsrs	r3, r1, #16
 8008c44:	fb02 3306 	mla	r3, r2, r6, r3
 8008c48:	b289      	uxth	r1, r1
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c50:	4285      	cmp	r5, r0
 8008c52:	f84c 1b04 	str.w	r1, [ip], #4
 8008c56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c5a:	dcec      	bgt.n	8008c36 <__multadd+0x12>
 8008c5c:	b30e      	cbz	r6, 8008ca2 <__multadd+0x7e>
 8008c5e:	68a3      	ldr	r3, [r4, #8]
 8008c60:	42ab      	cmp	r3, r5
 8008c62:	dc19      	bgt.n	8008c98 <__multadd+0x74>
 8008c64:	6861      	ldr	r1, [r4, #4]
 8008c66:	4638      	mov	r0, r7
 8008c68:	3101      	adds	r1, #1
 8008c6a:	f7ff ff79 	bl	8008b60 <_Balloc>
 8008c6e:	4680      	mov	r8, r0
 8008c70:	b928      	cbnz	r0, 8008c7e <__multadd+0x5a>
 8008c72:	4602      	mov	r2, r0
 8008c74:	4b0c      	ldr	r3, [pc, #48]	@ (8008ca8 <__multadd+0x84>)
 8008c76:	480d      	ldr	r0, [pc, #52]	@ (8008cac <__multadd+0x88>)
 8008c78:	21ba      	movs	r1, #186	@ 0xba
 8008c7a:	f001 fecd 	bl	800aa18 <__assert_func>
 8008c7e:	6922      	ldr	r2, [r4, #16]
 8008c80:	3202      	adds	r2, #2
 8008c82:	f104 010c 	add.w	r1, r4, #12
 8008c86:	0092      	lsls	r2, r2, #2
 8008c88:	300c      	adds	r0, #12
 8008c8a:	f001 fead 	bl	800a9e8 <memcpy>
 8008c8e:	4621      	mov	r1, r4
 8008c90:	4638      	mov	r0, r7
 8008c92:	f7ff ffa5 	bl	8008be0 <_Bfree>
 8008c96:	4644      	mov	r4, r8
 8008c98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c9c:	3501      	adds	r5, #1
 8008c9e:	615e      	str	r6, [r3, #20]
 8008ca0:	6125      	str	r5, [r4, #16]
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ca8:	0800b5a5 	.word	0x0800b5a5
 8008cac:	0800b5b6 	.word	0x0800b5b6

08008cb0 <__s2b>:
 8008cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cb4:	460c      	mov	r4, r1
 8008cb6:	4615      	mov	r5, r2
 8008cb8:	461f      	mov	r7, r3
 8008cba:	2209      	movs	r2, #9
 8008cbc:	3308      	adds	r3, #8
 8008cbe:	4606      	mov	r6, r0
 8008cc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	db09      	blt.n	8008ce0 <__s2b+0x30>
 8008ccc:	4630      	mov	r0, r6
 8008cce:	f7ff ff47 	bl	8008b60 <_Balloc>
 8008cd2:	b940      	cbnz	r0, 8008ce6 <__s2b+0x36>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	4b19      	ldr	r3, [pc, #100]	@ (8008d3c <__s2b+0x8c>)
 8008cd8:	4819      	ldr	r0, [pc, #100]	@ (8008d40 <__s2b+0x90>)
 8008cda:	21d3      	movs	r1, #211	@ 0xd3
 8008cdc:	f001 fe9c 	bl	800aa18 <__assert_func>
 8008ce0:	0052      	lsls	r2, r2, #1
 8008ce2:	3101      	adds	r1, #1
 8008ce4:	e7f0      	b.n	8008cc8 <__s2b+0x18>
 8008ce6:	9b08      	ldr	r3, [sp, #32]
 8008ce8:	6143      	str	r3, [r0, #20]
 8008cea:	2d09      	cmp	r5, #9
 8008cec:	f04f 0301 	mov.w	r3, #1
 8008cf0:	6103      	str	r3, [r0, #16]
 8008cf2:	dd16      	ble.n	8008d22 <__s2b+0x72>
 8008cf4:	f104 0909 	add.w	r9, r4, #9
 8008cf8:	46c8      	mov	r8, r9
 8008cfa:	442c      	add	r4, r5
 8008cfc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008d00:	4601      	mov	r1, r0
 8008d02:	3b30      	subs	r3, #48	@ 0x30
 8008d04:	220a      	movs	r2, #10
 8008d06:	4630      	mov	r0, r6
 8008d08:	f7ff ff8c 	bl	8008c24 <__multadd>
 8008d0c:	45a0      	cmp	r8, r4
 8008d0e:	d1f5      	bne.n	8008cfc <__s2b+0x4c>
 8008d10:	f1a5 0408 	sub.w	r4, r5, #8
 8008d14:	444c      	add	r4, r9
 8008d16:	1b2d      	subs	r5, r5, r4
 8008d18:	1963      	adds	r3, r4, r5
 8008d1a:	42bb      	cmp	r3, r7
 8008d1c:	db04      	blt.n	8008d28 <__s2b+0x78>
 8008d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d22:	340a      	adds	r4, #10
 8008d24:	2509      	movs	r5, #9
 8008d26:	e7f6      	b.n	8008d16 <__s2b+0x66>
 8008d28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008d2c:	4601      	mov	r1, r0
 8008d2e:	3b30      	subs	r3, #48	@ 0x30
 8008d30:	220a      	movs	r2, #10
 8008d32:	4630      	mov	r0, r6
 8008d34:	f7ff ff76 	bl	8008c24 <__multadd>
 8008d38:	e7ee      	b.n	8008d18 <__s2b+0x68>
 8008d3a:	bf00      	nop
 8008d3c:	0800b5a5 	.word	0x0800b5a5
 8008d40:	0800b5b6 	.word	0x0800b5b6

08008d44 <__hi0bits>:
 8008d44:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008d48:	4603      	mov	r3, r0
 8008d4a:	bf36      	itet	cc
 8008d4c:	0403      	lslcc	r3, r0, #16
 8008d4e:	2000      	movcs	r0, #0
 8008d50:	2010      	movcc	r0, #16
 8008d52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d56:	bf3c      	itt	cc
 8008d58:	021b      	lslcc	r3, r3, #8
 8008d5a:	3008      	addcc	r0, #8
 8008d5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d60:	bf3c      	itt	cc
 8008d62:	011b      	lslcc	r3, r3, #4
 8008d64:	3004      	addcc	r0, #4
 8008d66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d6a:	bf3c      	itt	cc
 8008d6c:	009b      	lslcc	r3, r3, #2
 8008d6e:	3002      	addcc	r0, #2
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	db05      	blt.n	8008d80 <__hi0bits+0x3c>
 8008d74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008d78:	f100 0001 	add.w	r0, r0, #1
 8008d7c:	bf08      	it	eq
 8008d7e:	2020      	moveq	r0, #32
 8008d80:	4770      	bx	lr

08008d82 <__lo0bits>:
 8008d82:	6803      	ldr	r3, [r0, #0]
 8008d84:	4602      	mov	r2, r0
 8008d86:	f013 0007 	ands.w	r0, r3, #7
 8008d8a:	d00b      	beq.n	8008da4 <__lo0bits+0x22>
 8008d8c:	07d9      	lsls	r1, r3, #31
 8008d8e:	d421      	bmi.n	8008dd4 <__lo0bits+0x52>
 8008d90:	0798      	lsls	r0, r3, #30
 8008d92:	bf49      	itett	mi
 8008d94:	085b      	lsrmi	r3, r3, #1
 8008d96:	089b      	lsrpl	r3, r3, #2
 8008d98:	2001      	movmi	r0, #1
 8008d9a:	6013      	strmi	r3, [r2, #0]
 8008d9c:	bf5c      	itt	pl
 8008d9e:	6013      	strpl	r3, [r2, #0]
 8008da0:	2002      	movpl	r0, #2
 8008da2:	4770      	bx	lr
 8008da4:	b299      	uxth	r1, r3
 8008da6:	b909      	cbnz	r1, 8008dac <__lo0bits+0x2a>
 8008da8:	0c1b      	lsrs	r3, r3, #16
 8008daa:	2010      	movs	r0, #16
 8008dac:	b2d9      	uxtb	r1, r3
 8008dae:	b909      	cbnz	r1, 8008db4 <__lo0bits+0x32>
 8008db0:	3008      	adds	r0, #8
 8008db2:	0a1b      	lsrs	r3, r3, #8
 8008db4:	0719      	lsls	r1, r3, #28
 8008db6:	bf04      	itt	eq
 8008db8:	091b      	lsreq	r3, r3, #4
 8008dba:	3004      	addeq	r0, #4
 8008dbc:	0799      	lsls	r1, r3, #30
 8008dbe:	bf04      	itt	eq
 8008dc0:	089b      	lsreq	r3, r3, #2
 8008dc2:	3002      	addeq	r0, #2
 8008dc4:	07d9      	lsls	r1, r3, #31
 8008dc6:	d403      	bmi.n	8008dd0 <__lo0bits+0x4e>
 8008dc8:	085b      	lsrs	r3, r3, #1
 8008dca:	f100 0001 	add.w	r0, r0, #1
 8008dce:	d003      	beq.n	8008dd8 <__lo0bits+0x56>
 8008dd0:	6013      	str	r3, [r2, #0]
 8008dd2:	4770      	bx	lr
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	4770      	bx	lr
 8008dd8:	2020      	movs	r0, #32
 8008dda:	4770      	bx	lr

08008ddc <__i2b>:
 8008ddc:	b510      	push	{r4, lr}
 8008dde:	460c      	mov	r4, r1
 8008de0:	2101      	movs	r1, #1
 8008de2:	f7ff febd 	bl	8008b60 <_Balloc>
 8008de6:	4602      	mov	r2, r0
 8008de8:	b928      	cbnz	r0, 8008df6 <__i2b+0x1a>
 8008dea:	4b05      	ldr	r3, [pc, #20]	@ (8008e00 <__i2b+0x24>)
 8008dec:	4805      	ldr	r0, [pc, #20]	@ (8008e04 <__i2b+0x28>)
 8008dee:	f240 1145 	movw	r1, #325	@ 0x145
 8008df2:	f001 fe11 	bl	800aa18 <__assert_func>
 8008df6:	2301      	movs	r3, #1
 8008df8:	6144      	str	r4, [r0, #20]
 8008dfa:	6103      	str	r3, [r0, #16]
 8008dfc:	bd10      	pop	{r4, pc}
 8008dfe:	bf00      	nop
 8008e00:	0800b5a5 	.word	0x0800b5a5
 8008e04:	0800b5b6 	.word	0x0800b5b6

08008e08 <__multiply>:
 8008e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0c:	4617      	mov	r7, r2
 8008e0e:	690a      	ldr	r2, [r1, #16]
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	bfa8      	it	ge
 8008e16:	463b      	movge	r3, r7
 8008e18:	4689      	mov	r9, r1
 8008e1a:	bfa4      	itt	ge
 8008e1c:	460f      	movge	r7, r1
 8008e1e:	4699      	movge	r9, r3
 8008e20:	693d      	ldr	r5, [r7, #16]
 8008e22:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	6879      	ldr	r1, [r7, #4]
 8008e2a:	eb05 060a 	add.w	r6, r5, sl
 8008e2e:	42b3      	cmp	r3, r6
 8008e30:	b085      	sub	sp, #20
 8008e32:	bfb8      	it	lt
 8008e34:	3101      	addlt	r1, #1
 8008e36:	f7ff fe93 	bl	8008b60 <_Balloc>
 8008e3a:	b930      	cbnz	r0, 8008e4a <__multiply+0x42>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	4b41      	ldr	r3, [pc, #260]	@ (8008f44 <__multiply+0x13c>)
 8008e40:	4841      	ldr	r0, [pc, #260]	@ (8008f48 <__multiply+0x140>)
 8008e42:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008e46:	f001 fde7 	bl	800aa18 <__assert_func>
 8008e4a:	f100 0414 	add.w	r4, r0, #20
 8008e4e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008e52:	4623      	mov	r3, r4
 8008e54:	2200      	movs	r2, #0
 8008e56:	4573      	cmp	r3, lr
 8008e58:	d320      	bcc.n	8008e9c <__multiply+0x94>
 8008e5a:	f107 0814 	add.w	r8, r7, #20
 8008e5e:	f109 0114 	add.w	r1, r9, #20
 8008e62:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008e66:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008e6a:	9302      	str	r3, [sp, #8]
 8008e6c:	1beb      	subs	r3, r5, r7
 8008e6e:	3b15      	subs	r3, #21
 8008e70:	f023 0303 	bic.w	r3, r3, #3
 8008e74:	3304      	adds	r3, #4
 8008e76:	3715      	adds	r7, #21
 8008e78:	42bd      	cmp	r5, r7
 8008e7a:	bf38      	it	cc
 8008e7c:	2304      	movcc	r3, #4
 8008e7e:	9301      	str	r3, [sp, #4]
 8008e80:	9b02      	ldr	r3, [sp, #8]
 8008e82:	9103      	str	r1, [sp, #12]
 8008e84:	428b      	cmp	r3, r1
 8008e86:	d80c      	bhi.n	8008ea2 <__multiply+0x9a>
 8008e88:	2e00      	cmp	r6, #0
 8008e8a:	dd03      	ble.n	8008e94 <__multiply+0x8c>
 8008e8c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d055      	beq.n	8008f40 <__multiply+0x138>
 8008e94:	6106      	str	r6, [r0, #16]
 8008e96:	b005      	add	sp, #20
 8008e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e9c:	f843 2b04 	str.w	r2, [r3], #4
 8008ea0:	e7d9      	b.n	8008e56 <__multiply+0x4e>
 8008ea2:	f8b1 a000 	ldrh.w	sl, [r1]
 8008ea6:	f1ba 0f00 	cmp.w	sl, #0
 8008eaa:	d01f      	beq.n	8008eec <__multiply+0xe4>
 8008eac:	46c4      	mov	ip, r8
 8008eae:	46a1      	mov	r9, r4
 8008eb0:	2700      	movs	r7, #0
 8008eb2:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008eb6:	f8d9 3000 	ldr.w	r3, [r9]
 8008eba:	fa1f fb82 	uxth.w	fp, r2
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ec4:	443b      	add	r3, r7
 8008ec6:	f8d9 7000 	ldr.w	r7, [r9]
 8008eca:	0c12      	lsrs	r2, r2, #16
 8008ecc:	0c3f      	lsrs	r7, r7, #16
 8008ece:	fb0a 7202 	mla	r2, sl, r2, r7
 8008ed2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008edc:	4565      	cmp	r5, ip
 8008ede:	f849 3b04 	str.w	r3, [r9], #4
 8008ee2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008ee6:	d8e4      	bhi.n	8008eb2 <__multiply+0xaa>
 8008ee8:	9b01      	ldr	r3, [sp, #4]
 8008eea:	50e7      	str	r7, [r4, r3]
 8008eec:	9b03      	ldr	r3, [sp, #12]
 8008eee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008ef2:	3104      	adds	r1, #4
 8008ef4:	f1b9 0f00 	cmp.w	r9, #0
 8008ef8:	d020      	beq.n	8008f3c <__multiply+0x134>
 8008efa:	6823      	ldr	r3, [r4, #0]
 8008efc:	4647      	mov	r7, r8
 8008efe:	46a4      	mov	ip, r4
 8008f00:	f04f 0a00 	mov.w	sl, #0
 8008f04:	f8b7 b000 	ldrh.w	fp, [r7]
 8008f08:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008f0c:	fb09 220b 	mla	r2, r9, fp, r2
 8008f10:	4452      	add	r2, sl
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f18:	f84c 3b04 	str.w	r3, [ip], #4
 8008f1c:	f857 3b04 	ldr.w	r3, [r7], #4
 8008f20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f24:	f8bc 3000 	ldrh.w	r3, [ip]
 8008f28:	fb09 330a 	mla	r3, r9, sl, r3
 8008f2c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008f30:	42bd      	cmp	r5, r7
 8008f32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f36:	d8e5      	bhi.n	8008f04 <__multiply+0xfc>
 8008f38:	9a01      	ldr	r2, [sp, #4]
 8008f3a:	50a3      	str	r3, [r4, r2]
 8008f3c:	3404      	adds	r4, #4
 8008f3e:	e79f      	b.n	8008e80 <__multiply+0x78>
 8008f40:	3e01      	subs	r6, #1
 8008f42:	e7a1      	b.n	8008e88 <__multiply+0x80>
 8008f44:	0800b5a5 	.word	0x0800b5a5
 8008f48:	0800b5b6 	.word	0x0800b5b6

08008f4c <__pow5mult>:
 8008f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f50:	4615      	mov	r5, r2
 8008f52:	f012 0203 	ands.w	r2, r2, #3
 8008f56:	4607      	mov	r7, r0
 8008f58:	460e      	mov	r6, r1
 8008f5a:	d007      	beq.n	8008f6c <__pow5mult+0x20>
 8008f5c:	4c25      	ldr	r4, [pc, #148]	@ (8008ff4 <__pow5mult+0xa8>)
 8008f5e:	3a01      	subs	r2, #1
 8008f60:	2300      	movs	r3, #0
 8008f62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f66:	f7ff fe5d 	bl	8008c24 <__multadd>
 8008f6a:	4606      	mov	r6, r0
 8008f6c:	10ad      	asrs	r5, r5, #2
 8008f6e:	d03d      	beq.n	8008fec <__pow5mult+0xa0>
 8008f70:	69fc      	ldr	r4, [r7, #28]
 8008f72:	b97c      	cbnz	r4, 8008f94 <__pow5mult+0x48>
 8008f74:	2010      	movs	r0, #16
 8008f76:	f7ff fd3d 	bl	80089f4 <malloc>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	61f8      	str	r0, [r7, #28]
 8008f7e:	b928      	cbnz	r0, 8008f8c <__pow5mult+0x40>
 8008f80:	4b1d      	ldr	r3, [pc, #116]	@ (8008ff8 <__pow5mult+0xac>)
 8008f82:	481e      	ldr	r0, [pc, #120]	@ (8008ffc <__pow5mult+0xb0>)
 8008f84:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008f88:	f001 fd46 	bl	800aa18 <__assert_func>
 8008f8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f90:	6004      	str	r4, [r0, #0]
 8008f92:	60c4      	str	r4, [r0, #12]
 8008f94:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008f98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f9c:	b94c      	cbnz	r4, 8008fb2 <__pow5mult+0x66>
 8008f9e:	f240 2171 	movw	r1, #625	@ 0x271
 8008fa2:	4638      	mov	r0, r7
 8008fa4:	f7ff ff1a 	bl	8008ddc <__i2b>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fae:	4604      	mov	r4, r0
 8008fb0:	6003      	str	r3, [r0, #0]
 8008fb2:	f04f 0900 	mov.w	r9, #0
 8008fb6:	07eb      	lsls	r3, r5, #31
 8008fb8:	d50a      	bpl.n	8008fd0 <__pow5mult+0x84>
 8008fba:	4631      	mov	r1, r6
 8008fbc:	4622      	mov	r2, r4
 8008fbe:	4638      	mov	r0, r7
 8008fc0:	f7ff ff22 	bl	8008e08 <__multiply>
 8008fc4:	4631      	mov	r1, r6
 8008fc6:	4680      	mov	r8, r0
 8008fc8:	4638      	mov	r0, r7
 8008fca:	f7ff fe09 	bl	8008be0 <_Bfree>
 8008fce:	4646      	mov	r6, r8
 8008fd0:	106d      	asrs	r5, r5, #1
 8008fd2:	d00b      	beq.n	8008fec <__pow5mult+0xa0>
 8008fd4:	6820      	ldr	r0, [r4, #0]
 8008fd6:	b938      	cbnz	r0, 8008fe8 <__pow5mult+0x9c>
 8008fd8:	4622      	mov	r2, r4
 8008fda:	4621      	mov	r1, r4
 8008fdc:	4638      	mov	r0, r7
 8008fde:	f7ff ff13 	bl	8008e08 <__multiply>
 8008fe2:	6020      	str	r0, [r4, #0]
 8008fe4:	f8c0 9000 	str.w	r9, [r0]
 8008fe8:	4604      	mov	r4, r0
 8008fea:	e7e4      	b.n	8008fb6 <__pow5mult+0x6a>
 8008fec:	4630      	mov	r0, r6
 8008fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ff2:	bf00      	nop
 8008ff4:	0800b6c8 	.word	0x0800b6c8
 8008ff8:	0800b536 	.word	0x0800b536
 8008ffc:	0800b5b6 	.word	0x0800b5b6

08009000 <__lshift>:
 8009000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009004:	460c      	mov	r4, r1
 8009006:	6849      	ldr	r1, [r1, #4]
 8009008:	6923      	ldr	r3, [r4, #16]
 800900a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800900e:	68a3      	ldr	r3, [r4, #8]
 8009010:	4607      	mov	r7, r0
 8009012:	4691      	mov	r9, r2
 8009014:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009018:	f108 0601 	add.w	r6, r8, #1
 800901c:	42b3      	cmp	r3, r6
 800901e:	db0b      	blt.n	8009038 <__lshift+0x38>
 8009020:	4638      	mov	r0, r7
 8009022:	f7ff fd9d 	bl	8008b60 <_Balloc>
 8009026:	4605      	mov	r5, r0
 8009028:	b948      	cbnz	r0, 800903e <__lshift+0x3e>
 800902a:	4602      	mov	r2, r0
 800902c:	4b28      	ldr	r3, [pc, #160]	@ (80090d0 <__lshift+0xd0>)
 800902e:	4829      	ldr	r0, [pc, #164]	@ (80090d4 <__lshift+0xd4>)
 8009030:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009034:	f001 fcf0 	bl	800aa18 <__assert_func>
 8009038:	3101      	adds	r1, #1
 800903a:	005b      	lsls	r3, r3, #1
 800903c:	e7ee      	b.n	800901c <__lshift+0x1c>
 800903e:	2300      	movs	r3, #0
 8009040:	f100 0114 	add.w	r1, r0, #20
 8009044:	f100 0210 	add.w	r2, r0, #16
 8009048:	4618      	mov	r0, r3
 800904a:	4553      	cmp	r3, sl
 800904c:	db33      	blt.n	80090b6 <__lshift+0xb6>
 800904e:	6920      	ldr	r0, [r4, #16]
 8009050:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009054:	f104 0314 	add.w	r3, r4, #20
 8009058:	f019 091f 	ands.w	r9, r9, #31
 800905c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009060:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009064:	d02b      	beq.n	80090be <__lshift+0xbe>
 8009066:	f1c9 0e20 	rsb	lr, r9, #32
 800906a:	468a      	mov	sl, r1
 800906c:	2200      	movs	r2, #0
 800906e:	6818      	ldr	r0, [r3, #0]
 8009070:	fa00 f009 	lsl.w	r0, r0, r9
 8009074:	4310      	orrs	r0, r2
 8009076:	f84a 0b04 	str.w	r0, [sl], #4
 800907a:	f853 2b04 	ldr.w	r2, [r3], #4
 800907e:	459c      	cmp	ip, r3
 8009080:	fa22 f20e 	lsr.w	r2, r2, lr
 8009084:	d8f3      	bhi.n	800906e <__lshift+0x6e>
 8009086:	ebac 0304 	sub.w	r3, ip, r4
 800908a:	3b15      	subs	r3, #21
 800908c:	f023 0303 	bic.w	r3, r3, #3
 8009090:	3304      	adds	r3, #4
 8009092:	f104 0015 	add.w	r0, r4, #21
 8009096:	4560      	cmp	r0, ip
 8009098:	bf88      	it	hi
 800909a:	2304      	movhi	r3, #4
 800909c:	50ca      	str	r2, [r1, r3]
 800909e:	b10a      	cbz	r2, 80090a4 <__lshift+0xa4>
 80090a0:	f108 0602 	add.w	r6, r8, #2
 80090a4:	3e01      	subs	r6, #1
 80090a6:	4638      	mov	r0, r7
 80090a8:	612e      	str	r6, [r5, #16]
 80090aa:	4621      	mov	r1, r4
 80090ac:	f7ff fd98 	bl	8008be0 <_Bfree>
 80090b0:	4628      	mov	r0, r5
 80090b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80090ba:	3301      	adds	r3, #1
 80090bc:	e7c5      	b.n	800904a <__lshift+0x4a>
 80090be:	3904      	subs	r1, #4
 80090c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80090c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80090c8:	459c      	cmp	ip, r3
 80090ca:	d8f9      	bhi.n	80090c0 <__lshift+0xc0>
 80090cc:	e7ea      	b.n	80090a4 <__lshift+0xa4>
 80090ce:	bf00      	nop
 80090d0:	0800b5a5 	.word	0x0800b5a5
 80090d4:	0800b5b6 	.word	0x0800b5b6

080090d8 <__mcmp>:
 80090d8:	690a      	ldr	r2, [r1, #16]
 80090da:	4603      	mov	r3, r0
 80090dc:	6900      	ldr	r0, [r0, #16]
 80090de:	1a80      	subs	r0, r0, r2
 80090e0:	b530      	push	{r4, r5, lr}
 80090e2:	d10e      	bne.n	8009102 <__mcmp+0x2a>
 80090e4:	3314      	adds	r3, #20
 80090e6:	3114      	adds	r1, #20
 80090e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80090ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80090f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80090f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80090f8:	4295      	cmp	r5, r2
 80090fa:	d003      	beq.n	8009104 <__mcmp+0x2c>
 80090fc:	d205      	bcs.n	800910a <__mcmp+0x32>
 80090fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009102:	bd30      	pop	{r4, r5, pc}
 8009104:	42a3      	cmp	r3, r4
 8009106:	d3f3      	bcc.n	80090f0 <__mcmp+0x18>
 8009108:	e7fb      	b.n	8009102 <__mcmp+0x2a>
 800910a:	2001      	movs	r0, #1
 800910c:	e7f9      	b.n	8009102 <__mcmp+0x2a>
	...

08009110 <__mdiff>:
 8009110:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009114:	4689      	mov	r9, r1
 8009116:	4606      	mov	r6, r0
 8009118:	4611      	mov	r1, r2
 800911a:	4648      	mov	r0, r9
 800911c:	4614      	mov	r4, r2
 800911e:	f7ff ffdb 	bl	80090d8 <__mcmp>
 8009122:	1e05      	subs	r5, r0, #0
 8009124:	d112      	bne.n	800914c <__mdiff+0x3c>
 8009126:	4629      	mov	r1, r5
 8009128:	4630      	mov	r0, r6
 800912a:	f7ff fd19 	bl	8008b60 <_Balloc>
 800912e:	4602      	mov	r2, r0
 8009130:	b928      	cbnz	r0, 800913e <__mdiff+0x2e>
 8009132:	4b3f      	ldr	r3, [pc, #252]	@ (8009230 <__mdiff+0x120>)
 8009134:	f240 2137 	movw	r1, #567	@ 0x237
 8009138:	483e      	ldr	r0, [pc, #248]	@ (8009234 <__mdiff+0x124>)
 800913a:	f001 fc6d 	bl	800aa18 <__assert_func>
 800913e:	2301      	movs	r3, #1
 8009140:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009144:	4610      	mov	r0, r2
 8009146:	b003      	add	sp, #12
 8009148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800914c:	bfbc      	itt	lt
 800914e:	464b      	movlt	r3, r9
 8009150:	46a1      	movlt	r9, r4
 8009152:	4630      	mov	r0, r6
 8009154:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009158:	bfba      	itte	lt
 800915a:	461c      	movlt	r4, r3
 800915c:	2501      	movlt	r5, #1
 800915e:	2500      	movge	r5, #0
 8009160:	f7ff fcfe 	bl	8008b60 <_Balloc>
 8009164:	4602      	mov	r2, r0
 8009166:	b918      	cbnz	r0, 8009170 <__mdiff+0x60>
 8009168:	4b31      	ldr	r3, [pc, #196]	@ (8009230 <__mdiff+0x120>)
 800916a:	f240 2145 	movw	r1, #581	@ 0x245
 800916e:	e7e3      	b.n	8009138 <__mdiff+0x28>
 8009170:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009174:	6926      	ldr	r6, [r4, #16]
 8009176:	60c5      	str	r5, [r0, #12]
 8009178:	f109 0310 	add.w	r3, r9, #16
 800917c:	f109 0514 	add.w	r5, r9, #20
 8009180:	f104 0e14 	add.w	lr, r4, #20
 8009184:	f100 0b14 	add.w	fp, r0, #20
 8009188:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800918c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009190:	9301      	str	r3, [sp, #4]
 8009192:	46d9      	mov	r9, fp
 8009194:	f04f 0c00 	mov.w	ip, #0
 8009198:	9b01      	ldr	r3, [sp, #4]
 800919a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800919e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80091a2:	9301      	str	r3, [sp, #4]
 80091a4:	fa1f f38a 	uxth.w	r3, sl
 80091a8:	4619      	mov	r1, r3
 80091aa:	b283      	uxth	r3, r0
 80091ac:	1acb      	subs	r3, r1, r3
 80091ae:	0c00      	lsrs	r0, r0, #16
 80091b0:	4463      	add	r3, ip
 80091b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80091b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80091c0:	4576      	cmp	r6, lr
 80091c2:	f849 3b04 	str.w	r3, [r9], #4
 80091c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80091ca:	d8e5      	bhi.n	8009198 <__mdiff+0x88>
 80091cc:	1b33      	subs	r3, r6, r4
 80091ce:	3b15      	subs	r3, #21
 80091d0:	f023 0303 	bic.w	r3, r3, #3
 80091d4:	3415      	adds	r4, #21
 80091d6:	3304      	adds	r3, #4
 80091d8:	42a6      	cmp	r6, r4
 80091da:	bf38      	it	cc
 80091dc:	2304      	movcc	r3, #4
 80091de:	441d      	add	r5, r3
 80091e0:	445b      	add	r3, fp
 80091e2:	461e      	mov	r6, r3
 80091e4:	462c      	mov	r4, r5
 80091e6:	4544      	cmp	r4, r8
 80091e8:	d30e      	bcc.n	8009208 <__mdiff+0xf8>
 80091ea:	f108 0103 	add.w	r1, r8, #3
 80091ee:	1b49      	subs	r1, r1, r5
 80091f0:	f021 0103 	bic.w	r1, r1, #3
 80091f4:	3d03      	subs	r5, #3
 80091f6:	45a8      	cmp	r8, r5
 80091f8:	bf38      	it	cc
 80091fa:	2100      	movcc	r1, #0
 80091fc:	440b      	add	r3, r1
 80091fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009202:	b191      	cbz	r1, 800922a <__mdiff+0x11a>
 8009204:	6117      	str	r7, [r2, #16]
 8009206:	e79d      	b.n	8009144 <__mdiff+0x34>
 8009208:	f854 1b04 	ldr.w	r1, [r4], #4
 800920c:	46e6      	mov	lr, ip
 800920e:	0c08      	lsrs	r0, r1, #16
 8009210:	fa1c fc81 	uxtah	ip, ip, r1
 8009214:	4471      	add	r1, lr
 8009216:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800921a:	b289      	uxth	r1, r1
 800921c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009220:	f846 1b04 	str.w	r1, [r6], #4
 8009224:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009228:	e7dd      	b.n	80091e6 <__mdiff+0xd6>
 800922a:	3f01      	subs	r7, #1
 800922c:	e7e7      	b.n	80091fe <__mdiff+0xee>
 800922e:	bf00      	nop
 8009230:	0800b5a5 	.word	0x0800b5a5
 8009234:	0800b5b6 	.word	0x0800b5b6

08009238 <__ulp>:
 8009238:	b082      	sub	sp, #8
 800923a:	ed8d 0b00 	vstr	d0, [sp]
 800923e:	9a01      	ldr	r2, [sp, #4]
 8009240:	4b0f      	ldr	r3, [pc, #60]	@ (8009280 <__ulp+0x48>)
 8009242:	4013      	ands	r3, r2
 8009244:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009248:	2b00      	cmp	r3, #0
 800924a:	dc08      	bgt.n	800925e <__ulp+0x26>
 800924c:	425b      	negs	r3, r3
 800924e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009252:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009256:	da04      	bge.n	8009262 <__ulp+0x2a>
 8009258:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800925c:	4113      	asrs	r3, r2
 800925e:	2200      	movs	r2, #0
 8009260:	e008      	b.n	8009274 <__ulp+0x3c>
 8009262:	f1a2 0314 	sub.w	r3, r2, #20
 8009266:	2b1e      	cmp	r3, #30
 8009268:	bfda      	itte	le
 800926a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800926e:	40da      	lsrle	r2, r3
 8009270:	2201      	movgt	r2, #1
 8009272:	2300      	movs	r3, #0
 8009274:	4619      	mov	r1, r3
 8009276:	4610      	mov	r0, r2
 8009278:	ec41 0b10 	vmov	d0, r0, r1
 800927c:	b002      	add	sp, #8
 800927e:	4770      	bx	lr
 8009280:	7ff00000 	.word	0x7ff00000

08009284 <__b2d>:
 8009284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009288:	6906      	ldr	r6, [r0, #16]
 800928a:	f100 0814 	add.w	r8, r0, #20
 800928e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009292:	1f37      	subs	r7, r6, #4
 8009294:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009298:	4610      	mov	r0, r2
 800929a:	f7ff fd53 	bl	8008d44 <__hi0bits>
 800929e:	f1c0 0320 	rsb	r3, r0, #32
 80092a2:	280a      	cmp	r0, #10
 80092a4:	600b      	str	r3, [r1, #0]
 80092a6:	491b      	ldr	r1, [pc, #108]	@ (8009314 <__b2d+0x90>)
 80092a8:	dc15      	bgt.n	80092d6 <__b2d+0x52>
 80092aa:	f1c0 0c0b 	rsb	ip, r0, #11
 80092ae:	fa22 f30c 	lsr.w	r3, r2, ip
 80092b2:	45b8      	cmp	r8, r7
 80092b4:	ea43 0501 	orr.w	r5, r3, r1
 80092b8:	bf34      	ite	cc
 80092ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80092be:	2300      	movcs	r3, #0
 80092c0:	3015      	adds	r0, #21
 80092c2:	fa02 f000 	lsl.w	r0, r2, r0
 80092c6:	fa23 f30c 	lsr.w	r3, r3, ip
 80092ca:	4303      	orrs	r3, r0
 80092cc:	461c      	mov	r4, r3
 80092ce:	ec45 4b10 	vmov	d0, r4, r5
 80092d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092d6:	45b8      	cmp	r8, r7
 80092d8:	bf3a      	itte	cc
 80092da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80092de:	f1a6 0708 	subcc.w	r7, r6, #8
 80092e2:	2300      	movcs	r3, #0
 80092e4:	380b      	subs	r0, #11
 80092e6:	d012      	beq.n	800930e <__b2d+0x8a>
 80092e8:	f1c0 0120 	rsb	r1, r0, #32
 80092ec:	fa23 f401 	lsr.w	r4, r3, r1
 80092f0:	4082      	lsls	r2, r0
 80092f2:	4322      	orrs	r2, r4
 80092f4:	4547      	cmp	r7, r8
 80092f6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80092fa:	bf8c      	ite	hi
 80092fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009300:	2200      	movls	r2, #0
 8009302:	4083      	lsls	r3, r0
 8009304:	40ca      	lsrs	r2, r1
 8009306:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800930a:	4313      	orrs	r3, r2
 800930c:	e7de      	b.n	80092cc <__b2d+0x48>
 800930e:	ea42 0501 	orr.w	r5, r2, r1
 8009312:	e7db      	b.n	80092cc <__b2d+0x48>
 8009314:	3ff00000 	.word	0x3ff00000

08009318 <__d2b>:
 8009318:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800931c:	460f      	mov	r7, r1
 800931e:	2101      	movs	r1, #1
 8009320:	ec59 8b10 	vmov	r8, r9, d0
 8009324:	4616      	mov	r6, r2
 8009326:	f7ff fc1b 	bl	8008b60 <_Balloc>
 800932a:	4604      	mov	r4, r0
 800932c:	b930      	cbnz	r0, 800933c <__d2b+0x24>
 800932e:	4602      	mov	r2, r0
 8009330:	4b23      	ldr	r3, [pc, #140]	@ (80093c0 <__d2b+0xa8>)
 8009332:	4824      	ldr	r0, [pc, #144]	@ (80093c4 <__d2b+0xac>)
 8009334:	f240 310f 	movw	r1, #783	@ 0x30f
 8009338:	f001 fb6e 	bl	800aa18 <__assert_func>
 800933c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009340:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009344:	b10d      	cbz	r5, 800934a <__d2b+0x32>
 8009346:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800934a:	9301      	str	r3, [sp, #4]
 800934c:	f1b8 0300 	subs.w	r3, r8, #0
 8009350:	d023      	beq.n	800939a <__d2b+0x82>
 8009352:	4668      	mov	r0, sp
 8009354:	9300      	str	r3, [sp, #0]
 8009356:	f7ff fd14 	bl	8008d82 <__lo0bits>
 800935a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800935e:	b1d0      	cbz	r0, 8009396 <__d2b+0x7e>
 8009360:	f1c0 0320 	rsb	r3, r0, #32
 8009364:	fa02 f303 	lsl.w	r3, r2, r3
 8009368:	430b      	orrs	r3, r1
 800936a:	40c2      	lsrs	r2, r0
 800936c:	6163      	str	r3, [r4, #20]
 800936e:	9201      	str	r2, [sp, #4]
 8009370:	9b01      	ldr	r3, [sp, #4]
 8009372:	61a3      	str	r3, [r4, #24]
 8009374:	2b00      	cmp	r3, #0
 8009376:	bf0c      	ite	eq
 8009378:	2201      	moveq	r2, #1
 800937a:	2202      	movne	r2, #2
 800937c:	6122      	str	r2, [r4, #16]
 800937e:	b1a5      	cbz	r5, 80093aa <__d2b+0x92>
 8009380:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009384:	4405      	add	r5, r0
 8009386:	603d      	str	r5, [r7, #0]
 8009388:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800938c:	6030      	str	r0, [r6, #0]
 800938e:	4620      	mov	r0, r4
 8009390:	b003      	add	sp, #12
 8009392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009396:	6161      	str	r1, [r4, #20]
 8009398:	e7ea      	b.n	8009370 <__d2b+0x58>
 800939a:	a801      	add	r0, sp, #4
 800939c:	f7ff fcf1 	bl	8008d82 <__lo0bits>
 80093a0:	9b01      	ldr	r3, [sp, #4]
 80093a2:	6163      	str	r3, [r4, #20]
 80093a4:	3020      	adds	r0, #32
 80093a6:	2201      	movs	r2, #1
 80093a8:	e7e8      	b.n	800937c <__d2b+0x64>
 80093aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80093b2:	6038      	str	r0, [r7, #0]
 80093b4:	6918      	ldr	r0, [r3, #16]
 80093b6:	f7ff fcc5 	bl	8008d44 <__hi0bits>
 80093ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093be:	e7e5      	b.n	800938c <__d2b+0x74>
 80093c0:	0800b5a5 	.word	0x0800b5a5
 80093c4:	0800b5b6 	.word	0x0800b5b6

080093c8 <__ratio>:
 80093c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093cc:	b085      	sub	sp, #20
 80093ce:	e9cd 1000 	strd	r1, r0, [sp]
 80093d2:	a902      	add	r1, sp, #8
 80093d4:	f7ff ff56 	bl	8009284 <__b2d>
 80093d8:	9800      	ldr	r0, [sp, #0]
 80093da:	a903      	add	r1, sp, #12
 80093dc:	ec55 4b10 	vmov	r4, r5, d0
 80093e0:	f7ff ff50 	bl	8009284 <__b2d>
 80093e4:	9b01      	ldr	r3, [sp, #4]
 80093e6:	6919      	ldr	r1, [r3, #16]
 80093e8:	9b00      	ldr	r3, [sp, #0]
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	1ac9      	subs	r1, r1, r3
 80093ee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80093f2:	1a9b      	subs	r3, r3, r2
 80093f4:	ec5b ab10 	vmov	sl, fp, d0
 80093f8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	bfce      	itee	gt
 8009400:	462a      	movgt	r2, r5
 8009402:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009406:	465a      	movle	r2, fp
 8009408:	462f      	mov	r7, r5
 800940a:	46d9      	mov	r9, fp
 800940c:	bfcc      	ite	gt
 800940e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009412:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009416:	464b      	mov	r3, r9
 8009418:	4652      	mov	r2, sl
 800941a:	4620      	mov	r0, r4
 800941c:	4639      	mov	r1, r7
 800941e:	f7f7 fa1d 	bl	800085c <__aeabi_ddiv>
 8009422:	ec41 0b10 	vmov	d0, r0, r1
 8009426:	b005      	add	sp, #20
 8009428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800942c <__copybits>:
 800942c:	3901      	subs	r1, #1
 800942e:	b570      	push	{r4, r5, r6, lr}
 8009430:	1149      	asrs	r1, r1, #5
 8009432:	6914      	ldr	r4, [r2, #16]
 8009434:	3101      	adds	r1, #1
 8009436:	f102 0314 	add.w	r3, r2, #20
 800943a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800943e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009442:	1f05      	subs	r5, r0, #4
 8009444:	42a3      	cmp	r3, r4
 8009446:	d30c      	bcc.n	8009462 <__copybits+0x36>
 8009448:	1aa3      	subs	r3, r4, r2
 800944a:	3b11      	subs	r3, #17
 800944c:	f023 0303 	bic.w	r3, r3, #3
 8009450:	3211      	adds	r2, #17
 8009452:	42a2      	cmp	r2, r4
 8009454:	bf88      	it	hi
 8009456:	2300      	movhi	r3, #0
 8009458:	4418      	add	r0, r3
 800945a:	2300      	movs	r3, #0
 800945c:	4288      	cmp	r0, r1
 800945e:	d305      	bcc.n	800946c <__copybits+0x40>
 8009460:	bd70      	pop	{r4, r5, r6, pc}
 8009462:	f853 6b04 	ldr.w	r6, [r3], #4
 8009466:	f845 6f04 	str.w	r6, [r5, #4]!
 800946a:	e7eb      	b.n	8009444 <__copybits+0x18>
 800946c:	f840 3b04 	str.w	r3, [r0], #4
 8009470:	e7f4      	b.n	800945c <__copybits+0x30>

08009472 <__any_on>:
 8009472:	f100 0214 	add.w	r2, r0, #20
 8009476:	6900      	ldr	r0, [r0, #16]
 8009478:	114b      	asrs	r3, r1, #5
 800947a:	4298      	cmp	r0, r3
 800947c:	b510      	push	{r4, lr}
 800947e:	db11      	blt.n	80094a4 <__any_on+0x32>
 8009480:	dd0a      	ble.n	8009498 <__any_on+0x26>
 8009482:	f011 011f 	ands.w	r1, r1, #31
 8009486:	d007      	beq.n	8009498 <__any_on+0x26>
 8009488:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800948c:	fa24 f001 	lsr.w	r0, r4, r1
 8009490:	fa00 f101 	lsl.w	r1, r0, r1
 8009494:	428c      	cmp	r4, r1
 8009496:	d10b      	bne.n	80094b0 <__any_on+0x3e>
 8009498:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800949c:	4293      	cmp	r3, r2
 800949e:	d803      	bhi.n	80094a8 <__any_on+0x36>
 80094a0:	2000      	movs	r0, #0
 80094a2:	bd10      	pop	{r4, pc}
 80094a4:	4603      	mov	r3, r0
 80094a6:	e7f7      	b.n	8009498 <__any_on+0x26>
 80094a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80094ac:	2900      	cmp	r1, #0
 80094ae:	d0f5      	beq.n	800949c <__any_on+0x2a>
 80094b0:	2001      	movs	r0, #1
 80094b2:	e7f6      	b.n	80094a2 <__any_on+0x30>

080094b4 <sulp>:
 80094b4:	b570      	push	{r4, r5, r6, lr}
 80094b6:	4604      	mov	r4, r0
 80094b8:	460d      	mov	r5, r1
 80094ba:	ec45 4b10 	vmov	d0, r4, r5
 80094be:	4616      	mov	r6, r2
 80094c0:	f7ff feba 	bl	8009238 <__ulp>
 80094c4:	ec51 0b10 	vmov	r0, r1, d0
 80094c8:	b17e      	cbz	r6, 80094ea <sulp+0x36>
 80094ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80094ce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	dd09      	ble.n	80094ea <sulp+0x36>
 80094d6:	051b      	lsls	r3, r3, #20
 80094d8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80094dc:	2400      	movs	r4, #0
 80094de:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80094e2:	4622      	mov	r2, r4
 80094e4:	462b      	mov	r3, r5
 80094e6:	f7f7 f88f 	bl	8000608 <__aeabi_dmul>
 80094ea:	ec41 0b10 	vmov	d0, r0, r1
 80094ee:	bd70      	pop	{r4, r5, r6, pc}

080094f0 <_strtod_l>:
 80094f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f4:	b09f      	sub	sp, #124	@ 0x7c
 80094f6:	460c      	mov	r4, r1
 80094f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80094fa:	2200      	movs	r2, #0
 80094fc:	921a      	str	r2, [sp, #104]	@ 0x68
 80094fe:	9005      	str	r0, [sp, #20]
 8009500:	f04f 0a00 	mov.w	sl, #0
 8009504:	f04f 0b00 	mov.w	fp, #0
 8009508:	460a      	mov	r2, r1
 800950a:	9219      	str	r2, [sp, #100]	@ 0x64
 800950c:	7811      	ldrb	r1, [r2, #0]
 800950e:	292b      	cmp	r1, #43	@ 0x2b
 8009510:	d04a      	beq.n	80095a8 <_strtod_l+0xb8>
 8009512:	d838      	bhi.n	8009586 <_strtod_l+0x96>
 8009514:	290d      	cmp	r1, #13
 8009516:	d832      	bhi.n	800957e <_strtod_l+0x8e>
 8009518:	2908      	cmp	r1, #8
 800951a:	d832      	bhi.n	8009582 <_strtod_l+0x92>
 800951c:	2900      	cmp	r1, #0
 800951e:	d03b      	beq.n	8009598 <_strtod_l+0xa8>
 8009520:	2200      	movs	r2, #0
 8009522:	920e      	str	r2, [sp, #56]	@ 0x38
 8009524:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009526:	782a      	ldrb	r2, [r5, #0]
 8009528:	2a30      	cmp	r2, #48	@ 0x30
 800952a:	f040 80b2 	bne.w	8009692 <_strtod_l+0x1a2>
 800952e:	786a      	ldrb	r2, [r5, #1]
 8009530:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009534:	2a58      	cmp	r2, #88	@ 0x58
 8009536:	d16e      	bne.n	8009616 <_strtod_l+0x126>
 8009538:	9302      	str	r3, [sp, #8]
 800953a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800953c:	9301      	str	r3, [sp, #4]
 800953e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	4a8f      	ldr	r2, [pc, #572]	@ (8009780 <_strtod_l+0x290>)
 8009544:	9805      	ldr	r0, [sp, #20]
 8009546:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009548:	a919      	add	r1, sp, #100	@ 0x64
 800954a:	f001 faff 	bl	800ab4c <__gethex>
 800954e:	f010 060f 	ands.w	r6, r0, #15
 8009552:	4604      	mov	r4, r0
 8009554:	d005      	beq.n	8009562 <_strtod_l+0x72>
 8009556:	2e06      	cmp	r6, #6
 8009558:	d128      	bne.n	80095ac <_strtod_l+0xbc>
 800955a:	3501      	adds	r5, #1
 800955c:	2300      	movs	r3, #0
 800955e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009560:	930e      	str	r3, [sp, #56]	@ 0x38
 8009562:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009564:	2b00      	cmp	r3, #0
 8009566:	f040 858e 	bne.w	800a086 <_strtod_l+0xb96>
 800956a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800956c:	b1cb      	cbz	r3, 80095a2 <_strtod_l+0xb2>
 800956e:	4652      	mov	r2, sl
 8009570:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009574:	ec43 2b10 	vmov	d0, r2, r3
 8009578:	b01f      	add	sp, #124	@ 0x7c
 800957a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800957e:	2920      	cmp	r1, #32
 8009580:	d1ce      	bne.n	8009520 <_strtod_l+0x30>
 8009582:	3201      	adds	r2, #1
 8009584:	e7c1      	b.n	800950a <_strtod_l+0x1a>
 8009586:	292d      	cmp	r1, #45	@ 0x2d
 8009588:	d1ca      	bne.n	8009520 <_strtod_l+0x30>
 800958a:	2101      	movs	r1, #1
 800958c:	910e      	str	r1, [sp, #56]	@ 0x38
 800958e:	1c51      	adds	r1, r2, #1
 8009590:	9119      	str	r1, [sp, #100]	@ 0x64
 8009592:	7852      	ldrb	r2, [r2, #1]
 8009594:	2a00      	cmp	r2, #0
 8009596:	d1c5      	bne.n	8009524 <_strtod_l+0x34>
 8009598:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800959a:	9419      	str	r4, [sp, #100]	@ 0x64
 800959c:	2b00      	cmp	r3, #0
 800959e:	f040 8570 	bne.w	800a082 <_strtod_l+0xb92>
 80095a2:	4652      	mov	r2, sl
 80095a4:	465b      	mov	r3, fp
 80095a6:	e7e5      	b.n	8009574 <_strtod_l+0x84>
 80095a8:	2100      	movs	r1, #0
 80095aa:	e7ef      	b.n	800958c <_strtod_l+0x9c>
 80095ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80095ae:	b13a      	cbz	r2, 80095c0 <_strtod_l+0xd0>
 80095b0:	2135      	movs	r1, #53	@ 0x35
 80095b2:	a81c      	add	r0, sp, #112	@ 0x70
 80095b4:	f7ff ff3a 	bl	800942c <__copybits>
 80095b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095ba:	9805      	ldr	r0, [sp, #20]
 80095bc:	f7ff fb10 	bl	8008be0 <_Bfree>
 80095c0:	3e01      	subs	r6, #1
 80095c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80095c4:	2e04      	cmp	r6, #4
 80095c6:	d806      	bhi.n	80095d6 <_strtod_l+0xe6>
 80095c8:	e8df f006 	tbb	[pc, r6]
 80095cc:	201d0314 	.word	0x201d0314
 80095d0:	14          	.byte	0x14
 80095d1:	00          	.byte	0x00
 80095d2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80095d6:	05e1      	lsls	r1, r4, #23
 80095d8:	bf48      	it	mi
 80095da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80095de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80095e2:	0d1b      	lsrs	r3, r3, #20
 80095e4:	051b      	lsls	r3, r3, #20
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1bb      	bne.n	8009562 <_strtod_l+0x72>
 80095ea:	f7fe fb2d 	bl	8007c48 <__errno>
 80095ee:	2322      	movs	r3, #34	@ 0x22
 80095f0:	6003      	str	r3, [r0, #0]
 80095f2:	e7b6      	b.n	8009562 <_strtod_l+0x72>
 80095f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80095f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80095fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009600:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009604:	e7e7      	b.n	80095d6 <_strtod_l+0xe6>
 8009606:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009788 <_strtod_l+0x298>
 800960a:	e7e4      	b.n	80095d6 <_strtod_l+0xe6>
 800960c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009610:	f04f 3aff 	mov.w	sl, #4294967295
 8009614:	e7df      	b.n	80095d6 <_strtod_l+0xe6>
 8009616:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009618:	1c5a      	adds	r2, r3, #1
 800961a:	9219      	str	r2, [sp, #100]	@ 0x64
 800961c:	785b      	ldrb	r3, [r3, #1]
 800961e:	2b30      	cmp	r3, #48	@ 0x30
 8009620:	d0f9      	beq.n	8009616 <_strtod_l+0x126>
 8009622:	2b00      	cmp	r3, #0
 8009624:	d09d      	beq.n	8009562 <_strtod_l+0x72>
 8009626:	2301      	movs	r3, #1
 8009628:	2700      	movs	r7, #0
 800962a:	9308      	str	r3, [sp, #32]
 800962c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800962e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009630:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009632:	46b9      	mov	r9, r7
 8009634:	220a      	movs	r2, #10
 8009636:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009638:	7805      	ldrb	r5, [r0, #0]
 800963a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800963e:	b2d9      	uxtb	r1, r3
 8009640:	2909      	cmp	r1, #9
 8009642:	d928      	bls.n	8009696 <_strtod_l+0x1a6>
 8009644:	494f      	ldr	r1, [pc, #316]	@ (8009784 <_strtod_l+0x294>)
 8009646:	2201      	movs	r2, #1
 8009648:	f001 f9ac 	bl	800a9a4 <strncmp>
 800964c:	2800      	cmp	r0, #0
 800964e:	d032      	beq.n	80096b6 <_strtod_l+0x1c6>
 8009650:	2000      	movs	r0, #0
 8009652:	462a      	mov	r2, r5
 8009654:	900a      	str	r0, [sp, #40]	@ 0x28
 8009656:	464d      	mov	r5, r9
 8009658:	4603      	mov	r3, r0
 800965a:	2a65      	cmp	r2, #101	@ 0x65
 800965c:	d001      	beq.n	8009662 <_strtod_l+0x172>
 800965e:	2a45      	cmp	r2, #69	@ 0x45
 8009660:	d114      	bne.n	800968c <_strtod_l+0x19c>
 8009662:	b91d      	cbnz	r5, 800966c <_strtod_l+0x17c>
 8009664:	9a08      	ldr	r2, [sp, #32]
 8009666:	4302      	orrs	r2, r0
 8009668:	d096      	beq.n	8009598 <_strtod_l+0xa8>
 800966a:	2500      	movs	r5, #0
 800966c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800966e:	1c62      	adds	r2, r4, #1
 8009670:	9219      	str	r2, [sp, #100]	@ 0x64
 8009672:	7862      	ldrb	r2, [r4, #1]
 8009674:	2a2b      	cmp	r2, #43	@ 0x2b
 8009676:	d07a      	beq.n	800976e <_strtod_l+0x27e>
 8009678:	2a2d      	cmp	r2, #45	@ 0x2d
 800967a:	d07e      	beq.n	800977a <_strtod_l+0x28a>
 800967c:	f04f 0c00 	mov.w	ip, #0
 8009680:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009684:	2909      	cmp	r1, #9
 8009686:	f240 8085 	bls.w	8009794 <_strtod_l+0x2a4>
 800968a:	9419      	str	r4, [sp, #100]	@ 0x64
 800968c:	f04f 0800 	mov.w	r8, #0
 8009690:	e0a5      	b.n	80097de <_strtod_l+0x2ee>
 8009692:	2300      	movs	r3, #0
 8009694:	e7c8      	b.n	8009628 <_strtod_l+0x138>
 8009696:	f1b9 0f08 	cmp.w	r9, #8
 800969a:	bfd8      	it	le
 800969c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800969e:	f100 0001 	add.w	r0, r0, #1
 80096a2:	bfda      	itte	le
 80096a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80096a8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80096aa:	fb02 3707 	mlagt	r7, r2, r7, r3
 80096ae:	f109 0901 	add.w	r9, r9, #1
 80096b2:	9019      	str	r0, [sp, #100]	@ 0x64
 80096b4:	e7bf      	b.n	8009636 <_strtod_l+0x146>
 80096b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096b8:	1c5a      	adds	r2, r3, #1
 80096ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80096bc:	785a      	ldrb	r2, [r3, #1]
 80096be:	f1b9 0f00 	cmp.w	r9, #0
 80096c2:	d03b      	beq.n	800973c <_strtod_l+0x24c>
 80096c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80096c6:	464d      	mov	r5, r9
 80096c8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80096cc:	2b09      	cmp	r3, #9
 80096ce:	d912      	bls.n	80096f6 <_strtod_l+0x206>
 80096d0:	2301      	movs	r3, #1
 80096d2:	e7c2      	b.n	800965a <_strtod_l+0x16a>
 80096d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096d6:	1c5a      	adds	r2, r3, #1
 80096d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80096da:	785a      	ldrb	r2, [r3, #1]
 80096dc:	3001      	adds	r0, #1
 80096de:	2a30      	cmp	r2, #48	@ 0x30
 80096e0:	d0f8      	beq.n	80096d4 <_strtod_l+0x1e4>
 80096e2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80096e6:	2b08      	cmp	r3, #8
 80096e8:	f200 84d2 	bhi.w	800a090 <_strtod_l+0xba0>
 80096ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096ee:	900a      	str	r0, [sp, #40]	@ 0x28
 80096f0:	2000      	movs	r0, #0
 80096f2:	930c      	str	r3, [sp, #48]	@ 0x30
 80096f4:	4605      	mov	r5, r0
 80096f6:	3a30      	subs	r2, #48	@ 0x30
 80096f8:	f100 0301 	add.w	r3, r0, #1
 80096fc:	d018      	beq.n	8009730 <_strtod_l+0x240>
 80096fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009700:	4419      	add	r1, r3
 8009702:	910a      	str	r1, [sp, #40]	@ 0x28
 8009704:	462e      	mov	r6, r5
 8009706:	f04f 0e0a 	mov.w	lr, #10
 800970a:	1c71      	adds	r1, r6, #1
 800970c:	eba1 0c05 	sub.w	ip, r1, r5
 8009710:	4563      	cmp	r3, ip
 8009712:	dc15      	bgt.n	8009740 <_strtod_l+0x250>
 8009714:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009718:	182b      	adds	r3, r5, r0
 800971a:	2b08      	cmp	r3, #8
 800971c:	f105 0501 	add.w	r5, r5, #1
 8009720:	4405      	add	r5, r0
 8009722:	dc1a      	bgt.n	800975a <_strtod_l+0x26a>
 8009724:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009726:	230a      	movs	r3, #10
 8009728:	fb03 2301 	mla	r3, r3, r1, r2
 800972c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800972e:	2300      	movs	r3, #0
 8009730:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009732:	1c51      	adds	r1, r2, #1
 8009734:	9119      	str	r1, [sp, #100]	@ 0x64
 8009736:	7852      	ldrb	r2, [r2, #1]
 8009738:	4618      	mov	r0, r3
 800973a:	e7c5      	b.n	80096c8 <_strtod_l+0x1d8>
 800973c:	4648      	mov	r0, r9
 800973e:	e7ce      	b.n	80096de <_strtod_l+0x1ee>
 8009740:	2e08      	cmp	r6, #8
 8009742:	dc05      	bgt.n	8009750 <_strtod_l+0x260>
 8009744:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009746:	fb0e f606 	mul.w	r6, lr, r6
 800974a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800974c:	460e      	mov	r6, r1
 800974e:	e7dc      	b.n	800970a <_strtod_l+0x21a>
 8009750:	2910      	cmp	r1, #16
 8009752:	bfd8      	it	le
 8009754:	fb0e f707 	mulle.w	r7, lr, r7
 8009758:	e7f8      	b.n	800974c <_strtod_l+0x25c>
 800975a:	2b0f      	cmp	r3, #15
 800975c:	bfdc      	itt	le
 800975e:	230a      	movle	r3, #10
 8009760:	fb03 2707 	mlale	r7, r3, r7, r2
 8009764:	e7e3      	b.n	800972e <_strtod_l+0x23e>
 8009766:	2300      	movs	r3, #0
 8009768:	930a      	str	r3, [sp, #40]	@ 0x28
 800976a:	2301      	movs	r3, #1
 800976c:	e77a      	b.n	8009664 <_strtod_l+0x174>
 800976e:	f04f 0c00 	mov.w	ip, #0
 8009772:	1ca2      	adds	r2, r4, #2
 8009774:	9219      	str	r2, [sp, #100]	@ 0x64
 8009776:	78a2      	ldrb	r2, [r4, #2]
 8009778:	e782      	b.n	8009680 <_strtod_l+0x190>
 800977a:	f04f 0c01 	mov.w	ip, #1
 800977e:	e7f8      	b.n	8009772 <_strtod_l+0x282>
 8009780:	0800b7dc 	.word	0x0800b7dc
 8009784:	0800b60f 	.word	0x0800b60f
 8009788:	7ff00000 	.word	0x7ff00000
 800978c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800978e:	1c51      	adds	r1, r2, #1
 8009790:	9119      	str	r1, [sp, #100]	@ 0x64
 8009792:	7852      	ldrb	r2, [r2, #1]
 8009794:	2a30      	cmp	r2, #48	@ 0x30
 8009796:	d0f9      	beq.n	800978c <_strtod_l+0x29c>
 8009798:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800979c:	2908      	cmp	r1, #8
 800979e:	f63f af75 	bhi.w	800968c <_strtod_l+0x19c>
 80097a2:	3a30      	subs	r2, #48	@ 0x30
 80097a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80097a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80097a8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80097aa:	f04f 080a 	mov.w	r8, #10
 80097ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80097b0:	1c56      	adds	r6, r2, #1
 80097b2:	9619      	str	r6, [sp, #100]	@ 0x64
 80097b4:	7852      	ldrb	r2, [r2, #1]
 80097b6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80097ba:	f1be 0f09 	cmp.w	lr, #9
 80097be:	d939      	bls.n	8009834 <_strtod_l+0x344>
 80097c0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80097c2:	1a76      	subs	r6, r6, r1
 80097c4:	2e08      	cmp	r6, #8
 80097c6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80097ca:	dc03      	bgt.n	80097d4 <_strtod_l+0x2e4>
 80097cc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80097ce:	4588      	cmp	r8, r1
 80097d0:	bfa8      	it	ge
 80097d2:	4688      	movge	r8, r1
 80097d4:	f1bc 0f00 	cmp.w	ip, #0
 80097d8:	d001      	beq.n	80097de <_strtod_l+0x2ee>
 80097da:	f1c8 0800 	rsb	r8, r8, #0
 80097de:	2d00      	cmp	r5, #0
 80097e0:	d14e      	bne.n	8009880 <_strtod_l+0x390>
 80097e2:	9908      	ldr	r1, [sp, #32]
 80097e4:	4308      	orrs	r0, r1
 80097e6:	f47f aebc 	bne.w	8009562 <_strtod_l+0x72>
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f47f aed4 	bne.w	8009598 <_strtod_l+0xa8>
 80097f0:	2a69      	cmp	r2, #105	@ 0x69
 80097f2:	d028      	beq.n	8009846 <_strtod_l+0x356>
 80097f4:	dc25      	bgt.n	8009842 <_strtod_l+0x352>
 80097f6:	2a49      	cmp	r2, #73	@ 0x49
 80097f8:	d025      	beq.n	8009846 <_strtod_l+0x356>
 80097fa:	2a4e      	cmp	r2, #78	@ 0x4e
 80097fc:	f47f aecc 	bne.w	8009598 <_strtod_l+0xa8>
 8009800:	499a      	ldr	r1, [pc, #616]	@ (8009a6c <_strtod_l+0x57c>)
 8009802:	a819      	add	r0, sp, #100	@ 0x64
 8009804:	f001 fbc4 	bl	800af90 <__match>
 8009808:	2800      	cmp	r0, #0
 800980a:	f43f aec5 	beq.w	8009598 <_strtod_l+0xa8>
 800980e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	2b28      	cmp	r3, #40	@ 0x28
 8009814:	d12e      	bne.n	8009874 <_strtod_l+0x384>
 8009816:	4996      	ldr	r1, [pc, #600]	@ (8009a70 <_strtod_l+0x580>)
 8009818:	aa1c      	add	r2, sp, #112	@ 0x70
 800981a:	a819      	add	r0, sp, #100	@ 0x64
 800981c:	f001 fbcc 	bl	800afb8 <__hexnan>
 8009820:	2805      	cmp	r0, #5
 8009822:	d127      	bne.n	8009874 <_strtod_l+0x384>
 8009824:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009826:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800982a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800982e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009832:	e696      	b.n	8009562 <_strtod_l+0x72>
 8009834:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009836:	fb08 2101 	mla	r1, r8, r1, r2
 800983a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800983e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009840:	e7b5      	b.n	80097ae <_strtod_l+0x2be>
 8009842:	2a6e      	cmp	r2, #110	@ 0x6e
 8009844:	e7da      	b.n	80097fc <_strtod_l+0x30c>
 8009846:	498b      	ldr	r1, [pc, #556]	@ (8009a74 <_strtod_l+0x584>)
 8009848:	a819      	add	r0, sp, #100	@ 0x64
 800984a:	f001 fba1 	bl	800af90 <__match>
 800984e:	2800      	cmp	r0, #0
 8009850:	f43f aea2 	beq.w	8009598 <_strtod_l+0xa8>
 8009854:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009856:	4988      	ldr	r1, [pc, #544]	@ (8009a78 <_strtod_l+0x588>)
 8009858:	3b01      	subs	r3, #1
 800985a:	a819      	add	r0, sp, #100	@ 0x64
 800985c:	9319      	str	r3, [sp, #100]	@ 0x64
 800985e:	f001 fb97 	bl	800af90 <__match>
 8009862:	b910      	cbnz	r0, 800986a <_strtod_l+0x37a>
 8009864:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009866:	3301      	adds	r3, #1
 8009868:	9319      	str	r3, [sp, #100]	@ 0x64
 800986a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8009a88 <_strtod_l+0x598>
 800986e:	f04f 0a00 	mov.w	sl, #0
 8009872:	e676      	b.n	8009562 <_strtod_l+0x72>
 8009874:	4881      	ldr	r0, [pc, #516]	@ (8009a7c <_strtod_l+0x58c>)
 8009876:	f001 f8c7 	bl	800aa08 <nan>
 800987a:	ec5b ab10 	vmov	sl, fp, d0
 800987e:	e670      	b.n	8009562 <_strtod_l+0x72>
 8009880:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009882:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009884:	eba8 0303 	sub.w	r3, r8, r3
 8009888:	f1b9 0f00 	cmp.w	r9, #0
 800988c:	bf08      	it	eq
 800988e:	46a9      	moveq	r9, r5
 8009890:	2d10      	cmp	r5, #16
 8009892:	9309      	str	r3, [sp, #36]	@ 0x24
 8009894:	462c      	mov	r4, r5
 8009896:	bfa8      	it	ge
 8009898:	2410      	movge	r4, #16
 800989a:	f7f6 fe3b 	bl	8000514 <__aeabi_ui2d>
 800989e:	2d09      	cmp	r5, #9
 80098a0:	4682      	mov	sl, r0
 80098a2:	468b      	mov	fp, r1
 80098a4:	dc13      	bgt.n	80098ce <_strtod_l+0x3de>
 80098a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f43f ae5a 	beq.w	8009562 <_strtod_l+0x72>
 80098ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098b0:	dd78      	ble.n	80099a4 <_strtod_l+0x4b4>
 80098b2:	2b16      	cmp	r3, #22
 80098b4:	dc5f      	bgt.n	8009976 <_strtod_l+0x486>
 80098b6:	4972      	ldr	r1, [pc, #456]	@ (8009a80 <_strtod_l+0x590>)
 80098b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80098bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098c0:	4652      	mov	r2, sl
 80098c2:	465b      	mov	r3, fp
 80098c4:	f7f6 fea0 	bl	8000608 <__aeabi_dmul>
 80098c8:	4682      	mov	sl, r0
 80098ca:	468b      	mov	fp, r1
 80098cc:	e649      	b.n	8009562 <_strtod_l+0x72>
 80098ce:	4b6c      	ldr	r3, [pc, #432]	@ (8009a80 <_strtod_l+0x590>)
 80098d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80098d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80098d8:	f7f6 fe96 	bl	8000608 <__aeabi_dmul>
 80098dc:	4682      	mov	sl, r0
 80098de:	4638      	mov	r0, r7
 80098e0:	468b      	mov	fp, r1
 80098e2:	f7f6 fe17 	bl	8000514 <__aeabi_ui2d>
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	4650      	mov	r0, sl
 80098ec:	4659      	mov	r1, fp
 80098ee:	f7f6 fcd5 	bl	800029c <__adddf3>
 80098f2:	2d0f      	cmp	r5, #15
 80098f4:	4682      	mov	sl, r0
 80098f6:	468b      	mov	fp, r1
 80098f8:	ddd5      	ble.n	80098a6 <_strtod_l+0x3b6>
 80098fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098fc:	1b2c      	subs	r4, r5, r4
 80098fe:	441c      	add	r4, r3
 8009900:	2c00      	cmp	r4, #0
 8009902:	f340 8093 	ble.w	8009a2c <_strtod_l+0x53c>
 8009906:	f014 030f 	ands.w	r3, r4, #15
 800990a:	d00a      	beq.n	8009922 <_strtod_l+0x432>
 800990c:	495c      	ldr	r1, [pc, #368]	@ (8009a80 <_strtod_l+0x590>)
 800990e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009912:	4652      	mov	r2, sl
 8009914:	465b      	mov	r3, fp
 8009916:	e9d1 0100 	ldrd	r0, r1, [r1]
 800991a:	f7f6 fe75 	bl	8000608 <__aeabi_dmul>
 800991e:	4682      	mov	sl, r0
 8009920:	468b      	mov	fp, r1
 8009922:	f034 040f 	bics.w	r4, r4, #15
 8009926:	d073      	beq.n	8009a10 <_strtod_l+0x520>
 8009928:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800992c:	dd49      	ble.n	80099c2 <_strtod_l+0x4d2>
 800992e:	2400      	movs	r4, #0
 8009930:	46a0      	mov	r8, r4
 8009932:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009934:	46a1      	mov	r9, r4
 8009936:	9a05      	ldr	r2, [sp, #20]
 8009938:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8009a88 <_strtod_l+0x598>
 800993c:	2322      	movs	r3, #34	@ 0x22
 800993e:	6013      	str	r3, [r2, #0]
 8009940:	f04f 0a00 	mov.w	sl, #0
 8009944:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009946:	2b00      	cmp	r3, #0
 8009948:	f43f ae0b 	beq.w	8009562 <_strtod_l+0x72>
 800994c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800994e:	9805      	ldr	r0, [sp, #20]
 8009950:	f7ff f946 	bl	8008be0 <_Bfree>
 8009954:	9805      	ldr	r0, [sp, #20]
 8009956:	4649      	mov	r1, r9
 8009958:	f7ff f942 	bl	8008be0 <_Bfree>
 800995c:	9805      	ldr	r0, [sp, #20]
 800995e:	4641      	mov	r1, r8
 8009960:	f7ff f93e 	bl	8008be0 <_Bfree>
 8009964:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009966:	9805      	ldr	r0, [sp, #20]
 8009968:	f7ff f93a 	bl	8008be0 <_Bfree>
 800996c:	9805      	ldr	r0, [sp, #20]
 800996e:	4621      	mov	r1, r4
 8009970:	f7ff f936 	bl	8008be0 <_Bfree>
 8009974:	e5f5      	b.n	8009562 <_strtod_l+0x72>
 8009976:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009978:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800997c:	4293      	cmp	r3, r2
 800997e:	dbbc      	blt.n	80098fa <_strtod_l+0x40a>
 8009980:	4c3f      	ldr	r4, [pc, #252]	@ (8009a80 <_strtod_l+0x590>)
 8009982:	f1c5 050f 	rsb	r5, r5, #15
 8009986:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800998a:	4652      	mov	r2, sl
 800998c:	465b      	mov	r3, fp
 800998e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009992:	f7f6 fe39 	bl	8000608 <__aeabi_dmul>
 8009996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009998:	1b5d      	subs	r5, r3, r5
 800999a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800999e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80099a2:	e78f      	b.n	80098c4 <_strtod_l+0x3d4>
 80099a4:	3316      	adds	r3, #22
 80099a6:	dba8      	blt.n	80098fa <_strtod_l+0x40a>
 80099a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099aa:	eba3 0808 	sub.w	r8, r3, r8
 80099ae:	4b34      	ldr	r3, [pc, #208]	@ (8009a80 <_strtod_l+0x590>)
 80099b0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80099b4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80099b8:	4650      	mov	r0, sl
 80099ba:	4659      	mov	r1, fp
 80099bc:	f7f6 ff4e 	bl	800085c <__aeabi_ddiv>
 80099c0:	e782      	b.n	80098c8 <_strtod_l+0x3d8>
 80099c2:	2300      	movs	r3, #0
 80099c4:	4f2f      	ldr	r7, [pc, #188]	@ (8009a84 <_strtod_l+0x594>)
 80099c6:	1124      	asrs	r4, r4, #4
 80099c8:	4650      	mov	r0, sl
 80099ca:	4659      	mov	r1, fp
 80099cc:	461e      	mov	r6, r3
 80099ce:	2c01      	cmp	r4, #1
 80099d0:	dc21      	bgt.n	8009a16 <_strtod_l+0x526>
 80099d2:	b10b      	cbz	r3, 80099d8 <_strtod_l+0x4e8>
 80099d4:	4682      	mov	sl, r0
 80099d6:	468b      	mov	fp, r1
 80099d8:	492a      	ldr	r1, [pc, #168]	@ (8009a84 <_strtod_l+0x594>)
 80099da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80099de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80099e2:	4652      	mov	r2, sl
 80099e4:	465b      	mov	r3, fp
 80099e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099ea:	f7f6 fe0d 	bl	8000608 <__aeabi_dmul>
 80099ee:	4b26      	ldr	r3, [pc, #152]	@ (8009a88 <_strtod_l+0x598>)
 80099f0:	460a      	mov	r2, r1
 80099f2:	400b      	ands	r3, r1
 80099f4:	4925      	ldr	r1, [pc, #148]	@ (8009a8c <_strtod_l+0x59c>)
 80099f6:	428b      	cmp	r3, r1
 80099f8:	4682      	mov	sl, r0
 80099fa:	d898      	bhi.n	800992e <_strtod_l+0x43e>
 80099fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009a00:	428b      	cmp	r3, r1
 8009a02:	bf86      	itte	hi
 8009a04:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8009a90 <_strtod_l+0x5a0>
 8009a08:	f04f 3aff 	movhi.w	sl, #4294967295
 8009a0c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009a10:	2300      	movs	r3, #0
 8009a12:	9308      	str	r3, [sp, #32]
 8009a14:	e076      	b.n	8009b04 <_strtod_l+0x614>
 8009a16:	07e2      	lsls	r2, r4, #31
 8009a18:	d504      	bpl.n	8009a24 <_strtod_l+0x534>
 8009a1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a1e:	f7f6 fdf3 	bl	8000608 <__aeabi_dmul>
 8009a22:	2301      	movs	r3, #1
 8009a24:	3601      	adds	r6, #1
 8009a26:	1064      	asrs	r4, r4, #1
 8009a28:	3708      	adds	r7, #8
 8009a2a:	e7d0      	b.n	80099ce <_strtod_l+0x4de>
 8009a2c:	d0f0      	beq.n	8009a10 <_strtod_l+0x520>
 8009a2e:	4264      	negs	r4, r4
 8009a30:	f014 020f 	ands.w	r2, r4, #15
 8009a34:	d00a      	beq.n	8009a4c <_strtod_l+0x55c>
 8009a36:	4b12      	ldr	r3, [pc, #72]	@ (8009a80 <_strtod_l+0x590>)
 8009a38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a3c:	4650      	mov	r0, sl
 8009a3e:	4659      	mov	r1, fp
 8009a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a44:	f7f6 ff0a 	bl	800085c <__aeabi_ddiv>
 8009a48:	4682      	mov	sl, r0
 8009a4a:	468b      	mov	fp, r1
 8009a4c:	1124      	asrs	r4, r4, #4
 8009a4e:	d0df      	beq.n	8009a10 <_strtod_l+0x520>
 8009a50:	2c1f      	cmp	r4, #31
 8009a52:	dd1f      	ble.n	8009a94 <_strtod_l+0x5a4>
 8009a54:	2400      	movs	r4, #0
 8009a56:	46a0      	mov	r8, r4
 8009a58:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009a5a:	46a1      	mov	r9, r4
 8009a5c:	9a05      	ldr	r2, [sp, #20]
 8009a5e:	2322      	movs	r3, #34	@ 0x22
 8009a60:	f04f 0a00 	mov.w	sl, #0
 8009a64:	f04f 0b00 	mov.w	fp, #0
 8009a68:	6013      	str	r3, [r2, #0]
 8009a6a:	e76b      	b.n	8009944 <_strtod_l+0x454>
 8009a6c:	0800b4fd 	.word	0x0800b4fd
 8009a70:	0800b7c8 	.word	0x0800b7c8
 8009a74:	0800b4f5 	.word	0x0800b4f5
 8009a78:	0800b52c 	.word	0x0800b52c
 8009a7c:	0800b665 	.word	0x0800b665
 8009a80:	0800b700 	.word	0x0800b700
 8009a84:	0800b6d8 	.word	0x0800b6d8
 8009a88:	7ff00000 	.word	0x7ff00000
 8009a8c:	7ca00000 	.word	0x7ca00000
 8009a90:	7fefffff 	.word	0x7fefffff
 8009a94:	f014 0310 	ands.w	r3, r4, #16
 8009a98:	bf18      	it	ne
 8009a9a:	236a      	movne	r3, #106	@ 0x6a
 8009a9c:	4ea9      	ldr	r6, [pc, #676]	@ (8009d44 <_strtod_l+0x854>)
 8009a9e:	9308      	str	r3, [sp, #32]
 8009aa0:	4650      	mov	r0, sl
 8009aa2:	4659      	mov	r1, fp
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	07e7      	lsls	r7, r4, #31
 8009aa8:	d504      	bpl.n	8009ab4 <_strtod_l+0x5c4>
 8009aaa:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009aae:	f7f6 fdab 	bl	8000608 <__aeabi_dmul>
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	1064      	asrs	r4, r4, #1
 8009ab6:	f106 0608 	add.w	r6, r6, #8
 8009aba:	d1f4      	bne.n	8009aa6 <_strtod_l+0x5b6>
 8009abc:	b10b      	cbz	r3, 8009ac2 <_strtod_l+0x5d2>
 8009abe:	4682      	mov	sl, r0
 8009ac0:	468b      	mov	fp, r1
 8009ac2:	9b08      	ldr	r3, [sp, #32]
 8009ac4:	b1b3      	cbz	r3, 8009af4 <_strtod_l+0x604>
 8009ac6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009aca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	4659      	mov	r1, fp
 8009ad2:	dd0f      	ble.n	8009af4 <_strtod_l+0x604>
 8009ad4:	2b1f      	cmp	r3, #31
 8009ad6:	dd56      	ble.n	8009b86 <_strtod_l+0x696>
 8009ad8:	2b34      	cmp	r3, #52	@ 0x34
 8009ada:	bfde      	ittt	le
 8009adc:	f04f 33ff 	movle.w	r3, #4294967295
 8009ae0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009ae4:	4093      	lslle	r3, r2
 8009ae6:	f04f 0a00 	mov.w	sl, #0
 8009aea:	bfcc      	ite	gt
 8009aec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009af0:	ea03 0b01 	andle.w	fp, r3, r1
 8009af4:	2200      	movs	r2, #0
 8009af6:	2300      	movs	r3, #0
 8009af8:	4650      	mov	r0, sl
 8009afa:	4659      	mov	r1, fp
 8009afc:	f7f6 ffec 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b00:	2800      	cmp	r0, #0
 8009b02:	d1a7      	bne.n	8009a54 <_strtod_l+0x564>
 8009b04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b06:	9300      	str	r3, [sp, #0]
 8009b08:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009b0a:	9805      	ldr	r0, [sp, #20]
 8009b0c:	462b      	mov	r3, r5
 8009b0e:	464a      	mov	r2, r9
 8009b10:	f7ff f8ce 	bl	8008cb0 <__s2b>
 8009b14:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009b16:	2800      	cmp	r0, #0
 8009b18:	f43f af09 	beq.w	800992e <_strtod_l+0x43e>
 8009b1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b20:	2a00      	cmp	r2, #0
 8009b22:	eba3 0308 	sub.w	r3, r3, r8
 8009b26:	bfa8      	it	ge
 8009b28:	2300      	movge	r3, #0
 8009b2a:	9312      	str	r3, [sp, #72]	@ 0x48
 8009b2c:	2400      	movs	r4, #0
 8009b2e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009b32:	9316      	str	r3, [sp, #88]	@ 0x58
 8009b34:	46a0      	mov	r8, r4
 8009b36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b38:	9805      	ldr	r0, [sp, #20]
 8009b3a:	6859      	ldr	r1, [r3, #4]
 8009b3c:	f7ff f810 	bl	8008b60 <_Balloc>
 8009b40:	4681      	mov	r9, r0
 8009b42:	2800      	cmp	r0, #0
 8009b44:	f43f aef7 	beq.w	8009936 <_strtod_l+0x446>
 8009b48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b4a:	691a      	ldr	r2, [r3, #16]
 8009b4c:	3202      	adds	r2, #2
 8009b4e:	f103 010c 	add.w	r1, r3, #12
 8009b52:	0092      	lsls	r2, r2, #2
 8009b54:	300c      	adds	r0, #12
 8009b56:	f000 ff47 	bl	800a9e8 <memcpy>
 8009b5a:	ec4b ab10 	vmov	d0, sl, fp
 8009b5e:	9805      	ldr	r0, [sp, #20]
 8009b60:	aa1c      	add	r2, sp, #112	@ 0x70
 8009b62:	a91b      	add	r1, sp, #108	@ 0x6c
 8009b64:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009b68:	f7ff fbd6 	bl	8009318 <__d2b>
 8009b6c:	901a      	str	r0, [sp, #104]	@ 0x68
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	f43f aee1 	beq.w	8009936 <_strtod_l+0x446>
 8009b74:	9805      	ldr	r0, [sp, #20]
 8009b76:	2101      	movs	r1, #1
 8009b78:	f7ff f930 	bl	8008ddc <__i2b>
 8009b7c:	4680      	mov	r8, r0
 8009b7e:	b948      	cbnz	r0, 8009b94 <_strtod_l+0x6a4>
 8009b80:	f04f 0800 	mov.w	r8, #0
 8009b84:	e6d7      	b.n	8009936 <_strtod_l+0x446>
 8009b86:	f04f 32ff 	mov.w	r2, #4294967295
 8009b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b8e:	ea03 0a0a 	and.w	sl, r3, sl
 8009b92:	e7af      	b.n	8009af4 <_strtod_l+0x604>
 8009b94:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009b96:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009b98:	2d00      	cmp	r5, #0
 8009b9a:	bfab      	itete	ge
 8009b9c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009b9e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009ba0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009ba2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009ba4:	bfac      	ite	ge
 8009ba6:	18ef      	addge	r7, r5, r3
 8009ba8:	1b5e      	sublt	r6, r3, r5
 8009baa:	9b08      	ldr	r3, [sp, #32]
 8009bac:	1aed      	subs	r5, r5, r3
 8009bae:	4415      	add	r5, r2
 8009bb0:	4b65      	ldr	r3, [pc, #404]	@ (8009d48 <_strtod_l+0x858>)
 8009bb2:	3d01      	subs	r5, #1
 8009bb4:	429d      	cmp	r5, r3
 8009bb6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009bba:	da50      	bge.n	8009c5e <_strtod_l+0x76e>
 8009bbc:	1b5b      	subs	r3, r3, r5
 8009bbe:	2b1f      	cmp	r3, #31
 8009bc0:	eba2 0203 	sub.w	r2, r2, r3
 8009bc4:	f04f 0101 	mov.w	r1, #1
 8009bc8:	dc3d      	bgt.n	8009c46 <_strtod_l+0x756>
 8009bca:	fa01 f303 	lsl.w	r3, r1, r3
 8009bce:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	9310      	str	r3, [sp, #64]	@ 0x40
 8009bd4:	18bd      	adds	r5, r7, r2
 8009bd6:	9b08      	ldr	r3, [sp, #32]
 8009bd8:	42af      	cmp	r7, r5
 8009bda:	4416      	add	r6, r2
 8009bdc:	441e      	add	r6, r3
 8009bde:	463b      	mov	r3, r7
 8009be0:	bfa8      	it	ge
 8009be2:	462b      	movge	r3, r5
 8009be4:	42b3      	cmp	r3, r6
 8009be6:	bfa8      	it	ge
 8009be8:	4633      	movge	r3, r6
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	bfc2      	ittt	gt
 8009bee:	1aed      	subgt	r5, r5, r3
 8009bf0:	1af6      	subgt	r6, r6, r3
 8009bf2:	1aff      	subgt	r7, r7, r3
 8009bf4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	dd16      	ble.n	8009c28 <_strtod_l+0x738>
 8009bfa:	4641      	mov	r1, r8
 8009bfc:	9805      	ldr	r0, [sp, #20]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	f7ff f9a4 	bl	8008f4c <__pow5mult>
 8009c04:	4680      	mov	r8, r0
 8009c06:	2800      	cmp	r0, #0
 8009c08:	d0ba      	beq.n	8009b80 <_strtod_l+0x690>
 8009c0a:	4601      	mov	r1, r0
 8009c0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009c0e:	9805      	ldr	r0, [sp, #20]
 8009c10:	f7ff f8fa 	bl	8008e08 <__multiply>
 8009c14:	900a      	str	r0, [sp, #40]	@ 0x28
 8009c16:	2800      	cmp	r0, #0
 8009c18:	f43f ae8d 	beq.w	8009936 <_strtod_l+0x446>
 8009c1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c1e:	9805      	ldr	r0, [sp, #20]
 8009c20:	f7fe ffde 	bl	8008be0 <_Bfree>
 8009c24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c26:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c28:	2d00      	cmp	r5, #0
 8009c2a:	dc1d      	bgt.n	8009c68 <_strtod_l+0x778>
 8009c2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	dd23      	ble.n	8009c7a <_strtod_l+0x78a>
 8009c32:	4649      	mov	r1, r9
 8009c34:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009c36:	9805      	ldr	r0, [sp, #20]
 8009c38:	f7ff f988 	bl	8008f4c <__pow5mult>
 8009c3c:	4681      	mov	r9, r0
 8009c3e:	b9e0      	cbnz	r0, 8009c7a <_strtod_l+0x78a>
 8009c40:	f04f 0900 	mov.w	r9, #0
 8009c44:	e677      	b.n	8009936 <_strtod_l+0x446>
 8009c46:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009c4a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009c4e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009c52:	35e2      	adds	r5, #226	@ 0xe2
 8009c54:	fa01 f305 	lsl.w	r3, r1, r5
 8009c58:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c5a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009c5c:	e7ba      	b.n	8009bd4 <_strtod_l+0x6e4>
 8009c5e:	2300      	movs	r3, #0
 8009c60:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c62:	2301      	movs	r3, #1
 8009c64:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c66:	e7b5      	b.n	8009bd4 <_strtod_l+0x6e4>
 8009c68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c6a:	9805      	ldr	r0, [sp, #20]
 8009c6c:	462a      	mov	r2, r5
 8009c6e:	f7ff f9c7 	bl	8009000 <__lshift>
 8009c72:	901a      	str	r0, [sp, #104]	@ 0x68
 8009c74:	2800      	cmp	r0, #0
 8009c76:	d1d9      	bne.n	8009c2c <_strtod_l+0x73c>
 8009c78:	e65d      	b.n	8009936 <_strtod_l+0x446>
 8009c7a:	2e00      	cmp	r6, #0
 8009c7c:	dd07      	ble.n	8009c8e <_strtod_l+0x79e>
 8009c7e:	4649      	mov	r1, r9
 8009c80:	9805      	ldr	r0, [sp, #20]
 8009c82:	4632      	mov	r2, r6
 8009c84:	f7ff f9bc 	bl	8009000 <__lshift>
 8009c88:	4681      	mov	r9, r0
 8009c8a:	2800      	cmp	r0, #0
 8009c8c:	d0d8      	beq.n	8009c40 <_strtod_l+0x750>
 8009c8e:	2f00      	cmp	r7, #0
 8009c90:	dd08      	ble.n	8009ca4 <_strtod_l+0x7b4>
 8009c92:	4641      	mov	r1, r8
 8009c94:	9805      	ldr	r0, [sp, #20]
 8009c96:	463a      	mov	r2, r7
 8009c98:	f7ff f9b2 	bl	8009000 <__lshift>
 8009c9c:	4680      	mov	r8, r0
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	f43f ae49 	beq.w	8009936 <_strtod_l+0x446>
 8009ca4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ca6:	9805      	ldr	r0, [sp, #20]
 8009ca8:	464a      	mov	r2, r9
 8009caa:	f7ff fa31 	bl	8009110 <__mdiff>
 8009cae:	4604      	mov	r4, r0
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	f43f ae40 	beq.w	8009936 <_strtod_l+0x446>
 8009cb6:	68c3      	ldr	r3, [r0, #12]
 8009cb8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009cba:	2300      	movs	r3, #0
 8009cbc:	60c3      	str	r3, [r0, #12]
 8009cbe:	4641      	mov	r1, r8
 8009cc0:	f7ff fa0a 	bl	80090d8 <__mcmp>
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	da45      	bge.n	8009d54 <_strtod_l+0x864>
 8009cc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cca:	ea53 030a 	orrs.w	r3, r3, sl
 8009cce:	d16b      	bne.n	8009da8 <_strtod_l+0x8b8>
 8009cd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d167      	bne.n	8009da8 <_strtod_l+0x8b8>
 8009cd8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009cdc:	0d1b      	lsrs	r3, r3, #20
 8009cde:	051b      	lsls	r3, r3, #20
 8009ce0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009ce4:	d960      	bls.n	8009da8 <_strtod_l+0x8b8>
 8009ce6:	6963      	ldr	r3, [r4, #20]
 8009ce8:	b913      	cbnz	r3, 8009cf0 <_strtod_l+0x800>
 8009cea:	6923      	ldr	r3, [r4, #16]
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	dd5b      	ble.n	8009da8 <_strtod_l+0x8b8>
 8009cf0:	4621      	mov	r1, r4
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	9805      	ldr	r0, [sp, #20]
 8009cf6:	f7ff f983 	bl	8009000 <__lshift>
 8009cfa:	4641      	mov	r1, r8
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	f7ff f9eb 	bl	80090d8 <__mcmp>
 8009d02:	2800      	cmp	r0, #0
 8009d04:	dd50      	ble.n	8009da8 <_strtod_l+0x8b8>
 8009d06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d0a:	9a08      	ldr	r2, [sp, #32]
 8009d0c:	0d1b      	lsrs	r3, r3, #20
 8009d0e:	051b      	lsls	r3, r3, #20
 8009d10:	2a00      	cmp	r2, #0
 8009d12:	d06a      	beq.n	8009dea <_strtod_l+0x8fa>
 8009d14:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009d18:	d867      	bhi.n	8009dea <_strtod_l+0x8fa>
 8009d1a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009d1e:	f67f ae9d 	bls.w	8009a5c <_strtod_l+0x56c>
 8009d22:	4b0a      	ldr	r3, [pc, #40]	@ (8009d4c <_strtod_l+0x85c>)
 8009d24:	4650      	mov	r0, sl
 8009d26:	4659      	mov	r1, fp
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f7f6 fc6d 	bl	8000608 <__aeabi_dmul>
 8009d2e:	4b08      	ldr	r3, [pc, #32]	@ (8009d50 <_strtod_l+0x860>)
 8009d30:	400b      	ands	r3, r1
 8009d32:	4682      	mov	sl, r0
 8009d34:	468b      	mov	fp, r1
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	f47f ae08 	bne.w	800994c <_strtod_l+0x45c>
 8009d3c:	9a05      	ldr	r2, [sp, #20]
 8009d3e:	2322      	movs	r3, #34	@ 0x22
 8009d40:	6013      	str	r3, [r2, #0]
 8009d42:	e603      	b.n	800994c <_strtod_l+0x45c>
 8009d44:	0800b7f0 	.word	0x0800b7f0
 8009d48:	fffffc02 	.word	0xfffffc02
 8009d4c:	39500000 	.word	0x39500000
 8009d50:	7ff00000 	.word	0x7ff00000
 8009d54:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009d58:	d165      	bne.n	8009e26 <_strtod_l+0x936>
 8009d5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009d5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d60:	b35a      	cbz	r2, 8009dba <_strtod_l+0x8ca>
 8009d62:	4a9f      	ldr	r2, [pc, #636]	@ (8009fe0 <_strtod_l+0xaf0>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d12b      	bne.n	8009dc0 <_strtod_l+0x8d0>
 8009d68:	9b08      	ldr	r3, [sp, #32]
 8009d6a:	4651      	mov	r1, sl
 8009d6c:	b303      	cbz	r3, 8009db0 <_strtod_l+0x8c0>
 8009d6e:	4b9d      	ldr	r3, [pc, #628]	@ (8009fe4 <_strtod_l+0xaf4>)
 8009d70:	465a      	mov	r2, fp
 8009d72:	4013      	ands	r3, r2
 8009d74:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009d78:	f04f 32ff 	mov.w	r2, #4294967295
 8009d7c:	d81b      	bhi.n	8009db6 <_strtod_l+0x8c6>
 8009d7e:	0d1b      	lsrs	r3, r3, #20
 8009d80:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009d84:	fa02 f303 	lsl.w	r3, r2, r3
 8009d88:	4299      	cmp	r1, r3
 8009d8a:	d119      	bne.n	8009dc0 <_strtod_l+0x8d0>
 8009d8c:	4b96      	ldr	r3, [pc, #600]	@ (8009fe8 <_strtod_l+0xaf8>)
 8009d8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d102      	bne.n	8009d9a <_strtod_l+0x8aa>
 8009d94:	3101      	adds	r1, #1
 8009d96:	f43f adce 	beq.w	8009936 <_strtod_l+0x446>
 8009d9a:	4b92      	ldr	r3, [pc, #584]	@ (8009fe4 <_strtod_l+0xaf4>)
 8009d9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d9e:	401a      	ands	r2, r3
 8009da0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009da4:	f04f 0a00 	mov.w	sl, #0
 8009da8:	9b08      	ldr	r3, [sp, #32]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1b9      	bne.n	8009d22 <_strtod_l+0x832>
 8009dae:	e5cd      	b.n	800994c <_strtod_l+0x45c>
 8009db0:	f04f 33ff 	mov.w	r3, #4294967295
 8009db4:	e7e8      	b.n	8009d88 <_strtod_l+0x898>
 8009db6:	4613      	mov	r3, r2
 8009db8:	e7e6      	b.n	8009d88 <_strtod_l+0x898>
 8009dba:	ea53 030a 	orrs.w	r3, r3, sl
 8009dbe:	d0a2      	beq.n	8009d06 <_strtod_l+0x816>
 8009dc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009dc2:	b1db      	cbz	r3, 8009dfc <_strtod_l+0x90c>
 8009dc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009dc6:	4213      	tst	r3, r2
 8009dc8:	d0ee      	beq.n	8009da8 <_strtod_l+0x8b8>
 8009dca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dcc:	9a08      	ldr	r2, [sp, #32]
 8009dce:	4650      	mov	r0, sl
 8009dd0:	4659      	mov	r1, fp
 8009dd2:	b1bb      	cbz	r3, 8009e04 <_strtod_l+0x914>
 8009dd4:	f7ff fb6e 	bl	80094b4 <sulp>
 8009dd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ddc:	ec53 2b10 	vmov	r2, r3, d0
 8009de0:	f7f6 fa5c 	bl	800029c <__adddf3>
 8009de4:	4682      	mov	sl, r0
 8009de6:	468b      	mov	fp, r1
 8009de8:	e7de      	b.n	8009da8 <_strtod_l+0x8b8>
 8009dea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009dee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009df2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009df6:	f04f 3aff 	mov.w	sl, #4294967295
 8009dfa:	e7d5      	b.n	8009da8 <_strtod_l+0x8b8>
 8009dfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009dfe:	ea13 0f0a 	tst.w	r3, sl
 8009e02:	e7e1      	b.n	8009dc8 <_strtod_l+0x8d8>
 8009e04:	f7ff fb56 	bl	80094b4 <sulp>
 8009e08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e0c:	ec53 2b10 	vmov	r2, r3, d0
 8009e10:	f7f6 fa42 	bl	8000298 <__aeabi_dsub>
 8009e14:	2200      	movs	r2, #0
 8009e16:	2300      	movs	r3, #0
 8009e18:	4682      	mov	sl, r0
 8009e1a:	468b      	mov	fp, r1
 8009e1c:	f7f6 fe5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e20:	2800      	cmp	r0, #0
 8009e22:	d0c1      	beq.n	8009da8 <_strtod_l+0x8b8>
 8009e24:	e61a      	b.n	8009a5c <_strtod_l+0x56c>
 8009e26:	4641      	mov	r1, r8
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f7ff facd 	bl	80093c8 <__ratio>
 8009e2e:	ec57 6b10 	vmov	r6, r7, d0
 8009e32:	2200      	movs	r2, #0
 8009e34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009e38:	4630      	mov	r0, r6
 8009e3a:	4639      	mov	r1, r7
 8009e3c:	f7f6 fe60 	bl	8000b00 <__aeabi_dcmple>
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d06f      	beq.n	8009f24 <_strtod_l+0xa34>
 8009e44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d17a      	bne.n	8009f40 <_strtod_l+0xa50>
 8009e4a:	f1ba 0f00 	cmp.w	sl, #0
 8009e4e:	d158      	bne.n	8009f02 <_strtod_l+0xa12>
 8009e50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d15a      	bne.n	8009f10 <_strtod_l+0xa20>
 8009e5a:	4b64      	ldr	r3, [pc, #400]	@ (8009fec <_strtod_l+0xafc>)
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	4630      	mov	r0, r6
 8009e60:	4639      	mov	r1, r7
 8009e62:	f7f6 fe43 	bl	8000aec <__aeabi_dcmplt>
 8009e66:	2800      	cmp	r0, #0
 8009e68:	d159      	bne.n	8009f1e <_strtod_l+0xa2e>
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	4639      	mov	r1, r7
 8009e6e:	4b60      	ldr	r3, [pc, #384]	@ (8009ff0 <_strtod_l+0xb00>)
 8009e70:	2200      	movs	r2, #0
 8009e72:	f7f6 fbc9 	bl	8000608 <__aeabi_dmul>
 8009e76:	4606      	mov	r6, r0
 8009e78:	460f      	mov	r7, r1
 8009e7a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009e7e:	9606      	str	r6, [sp, #24]
 8009e80:	9307      	str	r3, [sp, #28]
 8009e82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e86:	4d57      	ldr	r5, [pc, #348]	@ (8009fe4 <_strtod_l+0xaf4>)
 8009e88:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009e8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e8e:	401d      	ands	r5, r3
 8009e90:	4b58      	ldr	r3, [pc, #352]	@ (8009ff4 <_strtod_l+0xb04>)
 8009e92:	429d      	cmp	r5, r3
 8009e94:	f040 80b2 	bne.w	8009ffc <_strtod_l+0xb0c>
 8009e98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e9a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009e9e:	ec4b ab10 	vmov	d0, sl, fp
 8009ea2:	f7ff f9c9 	bl	8009238 <__ulp>
 8009ea6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009eaa:	ec51 0b10 	vmov	r0, r1, d0
 8009eae:	f7f6 fbab 	bl	8000608 <__aeabi_dmul>
 8009eb2:	4652      	mov	r2, sl
 8009eb4:	465b      	mov	r3, fp
 8009eb6:	f7f6 f9f1 	bl	800029c <__adddf3>
 8009eba:	460b      	mov	r3, r1
 8009ebc:	4949      	ldr	r1, [pc, #292]	@ (8009fe4 <_strtod_l+0xaf4>)
 8009ebe:	4a4e      	ldr	r2, [pc, #312]	@ (8009ff8 <_strtod_l+0xb08>)
 8009ec0:	4019      	ands	r1, r3
 8009ec2:	4291      	cmp	r1, r2
 8009ec4:	4682      	mov	sl, r0
 8009ec6:	d942      	bls.n	8009f4e <_strtod_l+0xa5e>
 8009ec8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009eca:	4b47      	ldr	r3, [pc, #284]	@ (8009fe8 <_strtod_l+0xaf8>)
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d103      	bne.n	8009ed8 <_strtod_l+0x9e8>
 8009ed0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	f43f ad2f 	beq.w	8009936 <_strtod_l+0x446>
 8009ed8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009fe8 <_strtod_l+0xaf8>
 8009edc:	f04f 3aff 	mov.w	sl, #4294967295
 8009ee0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ee2:	9805      	ldr	r0, [sp, #20]
 8009ee4:	f7fe fe7c 	bl	8008be0 <_Bfree>
 8009ee8:	9805      	ldr	r0, [sp, #20]
 8009eea:	4649      	mov	r1, r9
 8009eec:	f7fe fe78 	bl	8008be0 <_Bfree>
 8009ef0:	9805      	ldr	r0, [sp, #20]
 8009ef2:	4641      	mov	r1, r8
 8009ef4:	f7fe fe74 	bl	8008be0 <_Bfree>
 8009ef8:	9805      	ldr	r0, [sp, #20]
 8009efa:	4621      	mov	r1, r4
 8009efc:	f7fe fe70 	bl	8008be0 <_Bfree>
 8009f00:	e619      	b.n	8009b36 <_strtod_l+0x646>
 8009f02:	f1ba 0f01 	cmp.w	sl, #1
 8009f06:	d103      	bne.n	8009f10 <_strtod_l+0xa20>
 8009f08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	f43f ada6 	beq.w	8009a5c <_strtod_l+0x56c>
 8009f10:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009fc0 <_strtod_l+0xad0>
 8009f14:	4f35      	ldr	r7, [pc, #212]	@ (8009fec <_strtod_l+0xafc>)
 8009f16:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009f1a:	2600      	movs	r6, #0
 8009f1c:	e7b1      	b.n	8009e82 <_strtod_l+0x992>
 8009f1e:	4f34      	ldr	r7, [pc, #208]	@ (8009ff0 <_strtod_l+0xb00>)
 8009f20:	2600      	movs	r6, #0
 8009f22:	e7aa      	b.n	8009e7a <_strtod_l+0x98a>
 8009f24:	4b32      	ldr	r3, [pc, #200]	@ (8009ff0 <_strtod_l+0xb00>)
 8009f26:	4630      	mov	r0, r6
 8009f28:	4639      	mov	r1, r7
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f7f6 fb6c 	bl	8000608 <__aeabi_dmul>
 8009f30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f32:	4606      	mov	r6, r0
 8009f34:	460f      	mov	r7, r1
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d09f      	beq.n	8009e7a <_strtod_l+0x98a>
 8009f3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009f3e:	e7a0      	b.n	8009e82 <_strtod_l+0x992>
 8009f40:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009fc8 <_strtod_l+0xad8>
 8009f44:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009f48:	ec57 6b17 	vmov	r6, r7, d7
 8009f4c:	e799      	b.n	8009e82 <_strtod_l+0x992>
 8009f4e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009f52:	9b08      	ldr	r3, [sp, #32]
 8009f54:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d1c1      	bne.n	8009ee0 <_strtod_l+0x9f0>
 8009f5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f60:	0d1b      	lsrs	r3, r3, #20
 8009f62:	051b      	lsls	r3, r3, #20
 8009f64:	429d      	cmp	r5, r3
 8009f66:	d1bb      	bne.n	8009ee0 <_strtod_l+0x9f0>
 8009f68:	4630      	mov	r0, r6
 8009f6a:	4639      	mov	r1, r7
 8009f6c:	f7f6 feac 	bl	8000cc8 <__aeabi_d2lz>
 8009f70:	f7f6 fb1c 	bl	80005ac <__aeabi_l2d>
 8009f74:	4602      	mov	r2, r0
 8009f76:	460b      	mov	r3, r1
 8009f78:	4630      	mov	r0, r6
 8009f7a:	4639      	mov	r1, r7
 8009f7c:	f7f6 f98c 	bl	8000298 <__aeabi_dsub>
 8009f80:	460b      	mov	r3, r1
 8009f82:	4602      	mov	r2, r0
 8009f84:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009f88:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009f8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f8e:	ea46 060a 	orr.w	r6, r6, sl
 8009f92:	431e      	orrs	r6, r3
 8009f94:	d06f      	beq.n	800a076 <_strtod_l+0xb86>
 8009f96:	a30e      	add	r3, pc, #56	@ (adr r3, 8009fd0 <_strtod_l+0xae0>)
 8009f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9c:	f7f6 fda6 	bl	8000aec <__aeabi_dcmplt>
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	f47f acd3 	bne.w	800994c <_strtod_l+0x45c>
 8009fa6:	a30c      	add	r3, pc, #48	@ (adr r3, 8009fd8 <_strtod_l+0xae8>)
 8009fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009fb0:	f7f6 fdba 	bl	8000b28 <__aeabi_dcmpgt>
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	d093      	beq.n	8009ee0 <_strtod_l+0x9f0>
 8009fb8:	e4c8      	b.n	800994c <_strtod_l+0x45c>
 8009fba:	bf00      	nop
 8009fbc:	f3af 8000 	nop.w
 8009fc0:	00000000 	.word	0x00000000
 8009fc4:	bff00000 	.word	0xbff00000
 8009fc8:	00000000 	.word	0x00000000
 8009fcc:	3ff00000 	.word	0x3ff00000
 8009fd0:	94a03595 	.word	0x94a03595
 8009fd4:	3fdfffff 	.word	0x3fdfffff
 8009fd8:	35afe535 	.word	0x35afe535
 8009fdc:	3fe00000 	.word	0x3fe00000
 8009fe0:	000fffff 	.word	0x000fffff
 8009fe4:	7ff00000 	.word	0x7ff00000
 8009fe8:	7fefffff 	.word	0x7fefffff
 8009fec:	3ff00000 	.word	0x3ff00000
 8009ff0:	3fe00000 	.word	0x3fe00000
 8009ff4:	7fe00000 	.word	0x7fe00000
 8009ff8:	7c9fffff 	.word	0x7c9fffff
 8009ffc:	9b08      	ldr	r3, [sp, #32]
 8009ffe:	b323      	cbz	r3, 800a04a <_strtod_l+0xb5a>
 800a000:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a004:	d821      	bhi.n	800a04a <_strtod_l+0xb5a>
 800a006:	a328      	add	r3, pc, #160	@ (adr r3, 800a0a8 <_strtod_l+0xbb8>)
 800a008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00c:	4630      	mov	r0, r6
 800a00e:	4639      	mov	r1, r7
 800a010:	f7f6 fd76 	bl	8000b00 <__aeabi_dcmple>
 800a014:	b1a0      	cbz	r0, 800a040 <_strtod_l+0xb50>
 800a016:	4639      	mov	r1, r7
 800a018:	4630      	mov	r0, r6
 800a01a:	f7f6 fdcd 	bl	8000bb8 <__aeabi_d2uiz>
 800a01e:	2801      	cmp	r0, #1
 800a020:	bf38      	it	cc
 800a022:	2001      	movcc	r0, #1
 800a024:	f7f6 fa76 	bl	8000514 <__aeabi_ui2d>
 800a028:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a02a:	4606      	mov	r6, r0
 800a02c:	460f      	mov	r7, r1
 800a02e:	b9fb      	cbnz	r3, 800a070 <_strtod_l+0xb80>
 800a030:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a034:	9014      	str	r0, [sp, #80]	@ 0x50
 800a036:	9315      	str	r3, [sp, #84]	@ 0x54
 800a038:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a03c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a040:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a042:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a046:	1b5b      	subs	r3, r3, r5
 800a048:	9311      	str	r3, [sp, #68]	@ 0x44
 800a04a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a04e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a052:	f7ff f8f1 	bl	8009238 <__ulp>
 800a056:	4650      	mov	r0, sl
 800a058:	ec53 2b10 	vmov	r2, r3, d0
 800a05c:	4659      	mov	r1, fp
 800a05e:	f7f6 fad3 	bl	8000608 <__aeabi_dmul>
 800a062:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a066:	f7f6 f919 	bl	800029c <__adddf3>
 800a06a:	4682      	mov	sl, r0
 800a06c:	468b      	mov	fp, r1
 800a06e:	e770      	b.n	8009f52 <_strtod_l+0xa62>
 800a070:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a074:	e7e0      	b.n	800a038 <_strtod_l+0xb48>
 800a076:	a30e      	add	r3, pc, #56	@ (adr r3, 800a0b0 <_strtod_l+0xbc0>)
 800a078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07c:	f7f6 fd36 	bl	8000aec <__aeabi_dcmplt>
 800a080:	e798      	b.n	8009fb4 <_strtod_l+0xac4>
 800a082:	2300      	movs	r3, #0
 800a084:	930e      	str	r3, [sp, #56]	@ 0x38
 800a086:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a088:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a08a:	6013      	str	r3, [r2, #0]
 800a08c:	f7ff ba6d 	b.w	800956a <_strtod_l+0x7a>
 800a090:	2a65      	cmp	r2, #101	@ 0x65
 800a092:	f43f ab68 	beq.w	8009766 <_strtod_l+0x276>
 800a096:	2a45      	cmp	r2, #69	@ 0x45
 800a098:	f43f ab65 	beq.w	8009766 <_strtod_l+0x276>
 800a09c:	2301      	movs	r3, #1
 800a09e:	f7ff bba0 	b.w	80097e2 <_strtod_l+0x2f2>
 800a0a2:	bf00      	nop
 800a0a4:	f3af 8000 	nop.w
 800a0a8:	ffc00000 	.word	0xffc00000
 800a0ac:	41dfffff 	.word	0x41dfffff
 800a0b0:	94a03595 	.word	0x94a03595
 800a0b4:	3fcfffff 	.word	0x3fcfffff

0800a0b8 <_strtod_r>:
 800a0b8:	4b01      	ldr	r3, [pc, #4]	@ (800a0c0 <_strtod_r+0x8>)
 800a0ba:	f7ff ba19 	b.w	80094f0 <_strtod_l>
 800a0be:	bf00      	nop
 800a0c0:	2000008c 	.word	0x2000008c

0800a0c4 <_strtol_l.isra.0>:
 800a0c4:	2b24      	cmp	r3, #36	@ 0x24
 800a0c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0ca:	4686      	mov	lr, r0
 800a0cc:	4690      	mov	r8, r2
 800a0ce:	d801      	bhi.n	800a0d4 <_strtol_l.isra.0+0x10>
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d106      	bne.n	800a0e2 <_strtol_l.isra.0+0x1e>
 800a0d4:	f7fd fdb8 	bl	8007c48 <__errno>
 800a0d8:	2316      	movs	r3, #22
 800a0da:	6003      	str	r3, [r0, #0]
 800a0dc:	2000      	movs	r0, #0
 800a0de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0e2:	4834      	ldr	r0, [pc, #208]	@ (800a1b4 <_strtol_l.isra.0+0xf0>)
 800a0e4:	460d      	mov	r5, r1
 800a0e6:	462a      	mov	r2, r5
 800a0e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0ec:	5d06      	ldrb	r6, [r0, r4]
 800a0ee:	f016 0608 	ands.w	r6, r6, #8
 800a0f2:	d1f8      	bne.n	800a0e6 <_strtol_l.isra.0+0x22>
 800a0f4:	2c2d      	cmp	r4, #45	@ 0x2d
 800a0f6:	d110      	bne.n	800a11a <_strtol_l.isra.0+0x56>
 800a0f8:	782c      	ldrb	r4, [r5, #0]
 800a0fa:	2601      	movs	r6, #1
 800a0fc:	1c95      	adds	r5, r2, #2
 800a0fe:	f033 0210 	bics.w	r2, r3, #16
 800a102:	d115      	bne.n	800a130 <_strtol_l.isra.0+0x6c>
 800a104:	2c30      	cmp	r4, #48	@ 0x30
 800a106:	d10d      	bne.n	800a124 <_strtol_l.isra.0+0x60>
 800a108:	782a      	ldrb	r2, [r5, #0]
 800a10a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a10e:	2a58      	cmp	r2, #88	@ 0x58
 800a110:	d108      	bne.n	800a124 <_strtol_l.isra.0+0x60>
 800a112:	786c      	ldrb	r4, [r5, #1]
 800a114:	3502      	adds	r5, #2
 800a116:	2310      	movs	r3, #16
 800a118:	e00a      	b.n	800a130 <_strtol_l.isra.0+0x6c>
 800a11a:	2c2b      	cmp	r4, #43	@ 0x2b
 800a11c:	bf04      	itt	eq
 800a11e:	782c      	ldrbeq	r4, [r5, #0]
 800a120:	1c95      	addeq	r5, r2, #2
 800a122:	e7ec      	b.n	800a0fe <_strtol_l.isra.0+0x3a>
 800a124:	2b00      	cmp	r3, #0
 800a126:	d1f6      	bne.n	800a116 <_strtol_l.isra.0+0x52>
 800a128:	2c30      	cmp	r4, #48	@ 0x30
 800a12a:	bf14      	ite	ne
 800a12c:	230a      	movne	r3, #10
 800a12e:	2308      	moveq	r3, #8
 800a130:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a134:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a138:	2200      	movs	r2, #0
 800a13a:	fbbc f9f3 	udiv	r9, ip, r3
 800a13e:	4610      	mov	r0, r2
 800a140:	fb03 ca19 	mls	sl, r3, r9, ip
 800a144:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a148:	2f09      	cmp	r7, #9
 800a14a:	d80f      	bhi.n	800a16c <_strtol_l.isra.0+0xa8>
 800a14c:	463c      	mov	r4, r7
 800a14e:	42a3      	cmp	r3, r4
 800a150:	dd1b      	ble.n	800a18a <_strtol_l.isra.0+0xc6>
 800a152:	1c57      	adds	r7, r2, #1
 800a154:	d007      	beq.n	800a166 <_strtol_l.isra.0+0xa2>
 800a156:	4581      	cmp	r9, r0
 800a158:	d314      	bcc.n	800a184 <_strtol_l.isra.0+0xc0>
 800a15a:	d101      	bne.n	800a160 <_strtol_l.isra.0+0x9c>
 800a15c:	45a2      	cmp	sl, r4
 800a15e:	db11      	blt.n	800a184 <_strtol_l.isra.0+0xc0>
 800a160:	fb00 4003 	mla	r0, r0, r3, r4
 800a164:	2201      	movs	r2, #1
 800a166:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a16a:	e7eb      	b.n	800a144 <_strtol_l.isra.0+0x80>
 800a16c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a170:	2f19      	cmp	r7, #25
 800a172:	d801      	bhi.n	800a178 <_strtol_l.isra.0+0xb4>
 800a174:	3c37      	subs	r4, #55	@ 0x37
 800a176:	e7ea      	b.n	800a14e <_strtol_l.isra.0+0x8a>
 800a178:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a17c:	2f19      	cmp	r7, #25
 800a17e:	d804      	bhi.n	800a18a <_strtol_l.isra.0+0xc6>
 800a180:	3c57      	subs	r4, #87	@ 0x57
 800a182:	e7e4      	b.n	800a14e <_strtol_l.isra.0+0x8a>
 800a184:	f04f 32ff 	mov.w	r2, #4294967295
 800a188:	e7ed      	b.n	800a166 <_strtol_l.isra.0+0xa2>
 800a18a:	1c53      	adds	r3, r2, #1
 800a18c:	d108      	bne.n	800a1a0 <_strtol_l.isra.0+0xdc>
 800a18e:	2322      	movs	r3, #34	@ 0x22
 800a190:	f8ce 3000 	str.w	r3, [lr]
 800a194:	4660      	mov	r0, ip
 800a196:	f1b8 0f00 	cmp.w	r8, #0
 800a19a:	d0a0      	beq.n	800a0de <_strtol_l.isra.0+0x1a>
 800a19c:	1e69      	subs	r1, r5, #1
 800a19e:	e006      	b.n	800a1ae <_strtol_l.isra.0+0xea>
 800a1a0:	b106      	cbz	r6, 800a1a4 <_strtol_l.isra.0+0xe0>
 800a1a2:	4240      	negs	r0, r0
 800a1a4:	f1b8 0f00 	cmp.w	r8, #0
 800a1a8:	d099      	beq.n	800a0de <_strtol_l.isra.0+0x1a>
 800a1aa:	2a00      	cmp	r2, #0
 800a1ac:	d1f6      	bne.n	800a19c <_strtol_l.isra.0+0xd8>
 800a1ae:	f8c8 1000 	str.w	r1, [r8]
 800a1b2:	e794      	b.n	800a0de <_strtol_l.isra.0+0x1a>
 800a1b4:	0800b819 	.word	0x0800b819

0800a1b8 <_strtol_r>:
 800a1b8:	f7ff bf84 	b.w	800a0c4 <_strtol_l.isra.0>

0800a1bc <__ssputs_r>:
 800a1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1c0:	688e      	ldr	r6, [r1, #8]
 800a1c2:	461f      	mov	r7, r3
 800a1c4:	42be      	cmp	r6, r7
 800a1c6:	680b      	ldr	r3, [r1, #0]
 800a1c8:	4682      	mov	sl, r0
 800a1ca:	460c      	mov	r4, r1
 800a1cc:	4690      	mov	r8, r2
 800a1ce:	d82d      	bhi.n	800a22c <__ssputs_r+0x70>
 800a1d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a1d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a1d8:	d026      	beq.n	800a228 <__ssputs_r+0x6c>
 800a1da:	6965      	ldr	r5, [r4, #20]
 800a1dc:	6909      	ldr	r1, [r1, #16]
 800a1de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1e2:	eba3 0901 	sub.w	r9, r3, r1
 800a1e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a1ea:	1c7b      	adds	r3, r7, #1
 800a1ec:	444b      	add	r3, r9
 800a1ee:	106d      	asrs	r5, r5, #1
 800a1f0:	429d      	cmp	r5, r3
 800a1f2:	bf38      	it	cc
 800a1f4:	461d      	movcc	r5, r3
 800a1f6:	0553      	lsls	r3, r2, #21
 800a1f8:	d527      	bpl.n	800a24a <__ssputs_r+0x8e>
 800a1fa:	4629      	mov	r1, r5
 800a1fc:	f7fe fc24 	bl	8008a48 <_malloc_r>
 800a200:	4606      	mov	r6, r0
 800a202:	b360      	cbz	r0, 800a25e <__ssputs_r+0xa2>
 800a204:	6921      	ldr	r1, [r4, #16]
 800a206:	464a      	mov	r2, r9
 800a208:	f000 fbee 	bl	800a9e8 <memcpy>
 800a20c:	89a3      	ldrh	r3, [r4, #12]
 800a20e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a216:	81a3      	strh	r3, [r4, #12]
 800a218:	6126      	str	r6, [r4, #16]
 800a21a:	6165      	str	r5, [r4, #20]
 800a21c:	444e      	add	r6, r9
 800a21e:	eba5 0509 	sub.w	r5, r5, r9
 800a222:	6026      	str	r6, [r4, #0]
 800a224:	60a5      	str	r5, [r4, #8]
 800a226:	463e      	mov	r6, r7
 800a228:	42be      	cmp	r6, r7
 800a22a:	d900      	bls.n	800a22e <__ssputs_r+0x72>
 800a22c:	463e      	mov	r6, r7
 800a22e:	6820      	ldr	r0, [r4, #0]
 800a230:	4632      	mov	r2, r6
 800a232:	4641      	mov	r1, r8
 800a234:	f000 fb9c 	bl	800a970 <memmove>
 800a238:	68a3      	ldr	r3, [r4, #8]
 800a23a:	1b9b      	subs	r3, r3, r6
 800a23c:	60a3      	str	r3, [r4, #8]
 800a23e:	6823      	ldr	r3, [r4, #0]
 800a240:	4433      	add	r3, r6
 800a242:	6023      	str	r3, [r4, #0]
 800a244:	2000      	movs	r0, #0
 800a246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a24a:	462a      	mov	r2, r5
 800a24c:	f000 ff61 	bl	800b112 <_realloc_r>
 800a250:	4606      	mov	r6, r0
 800a252:	2800      	cmp	r0, #0
 800a254:	d1e0      	bne.n	800a218 <__ssputs_r+0x5c>
 800a256:	6921      	ldr	r1, [r4, #16]
 800a258:	4650      	mov	r0, sl
 800a25a:	f7fe fb81 	bl	8008960 <_free_r>
 800a25e:	230c      	movs	r3, #12
 800a260:	f8ca 3000 	str.w	r3, [sl]
 800a264:	89a3      	ldrh	r3, [r4, #12]
 800a266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a26a:	81a3      	strh	r3, [r4, #12]
 800a26c:	f04f 30ff 	mov.w	r0, #4294967295
 800a270:	e7e9      	b.n	800a246 <__ssputs_r+0x8a>
	...

0800a274 <_svfiprintf_r>:
 800a274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a278:	4698      	mov	r8, r3
 800a27a:	898b      	ldrh	r3, [r1, #12]
 800a27c:	061b      	lsls	r3, r3, #24
 800a27e:	b09d      	sub	sp, #116	@ 0x74
 800a280:	4607      	mov	r7, r0
 800a282:	460d      	mov	r5, r1
 800a284:	4614      	mov	r4, r2
 800a286:	d510      	bpl.n	800a2aa <_svfiprintf_r+0x36>
 800a288:	690b      	ldr	r3, [r1, #16]
 800a28a:	b973      	cbnz	r3, 800a2aa <_svfiprintf_r+0x36>
 800a28c:	2140      	movs	r1, #64	@ 0x40
 800a28e:	f7fe fbdb 	bl	8008a48 <_malloc_r>
 800a292:	6028      	str	r0, [r5, #0]
 800a294:	6128      	str	r0, [r5, #16]
 800a296:	b930      	cbnz	r0, 800a2a6 <_svfiprintf_r+0x32>
 800a298:	230c      	movs	r3, #12
 800a29a:	603b      	str	r3, [r7, #0]
 800a29c:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a0:	b01d      	add	sp, #116	@ 0x74
 800a2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2a6:	2340      	movs	r3, #64	@ 0x40
 800a2a8:	616b      	str	r3, [r5, #20]
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2ae:	2320      	movs	r3, #32
 800a2b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a2b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2b8:	2330      	movs	r3, #48	@ 0x30
 800a2ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a458 <_svfiprintf_r+0x1e4>
 800a2be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a2c2:	f04f 0901 	mov.w	r9, #1
 800a2c6:	4623      	mov	r3, r4
 800a2c8:	469a      	mov	sl, r3
 800a2ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2ce:	b10a      	cbz	r2, 800a2d4 <_svfiprintf_r+0x60>
 800a2d0:	2a25      	cmp	r2, #37	@ 0x25
 800a2d2:	d1f9      	bne.n	800a2c8 <_svfiprintf_r+0x54>
 800a2d4:	ebba 0b04 	subs.w	fp, sl, r4
 800a2d8:	d00b      	beq.n	800a2f2 <_svfiprintf_r+0x7e>
 800a2da:	465b      	mov	r3, fp
 800a2dc:	4622      	mov	r2, r4
 800a2de:	4629      	mov	r1, r5
 800a2e0:	4638      	mov	r0, r7
 800a2e2:	f7ff ff6b 	bl	800a1bc <__ssputs_r>
 800a2e6:	3001      	adds	r0, #1
 800a2e8:	f000 80a7 	beq.w	800a43a <_svfiprintf_r+0x1c6>
 800a2ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2ee:	445a      	add	r2, fp
 800a2f0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	f000 809f 	beq.w	800a43a <_svfiprintf_r+0x1c6>
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a302:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a306:	f10a 0a01 	add.w	sl, sl, #1
 800a30a:	9304      	str	r3, [sp, #16]
 800a30c:	9307      	str	r3, [sp, #28]
 800a30e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a312:	931a      	str	r3, [sp, #104]	@ 0x68
 800a314:	4654      	mov	r4, sl
 800a316:	2205      	movs	r2, #5
 800a318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a31c:	484e      	ldr	r0, [pc, #312]	@ (800a458 <_svfiprintf_r+0x1e4>)
 800a31e:	f7f5 ff5f 	bl	80001e0 <memchr>
 800a322:	9a04      	ldr	r2, [sp, #16]
 800a324:	b9d8      	cbnz	r0, 800a35e <_svfiprintf_r+0xea>
 800a326:	06d0      	lsls	r0, r2, #27
 800a328:	bf44      	itt	mi
 800a32a:	2320      	movmi	r3, #32
 800a32c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a330:	0711      	lsls	r1, r2, #28
 800a332:	bf44      	itt	mi
 800a334:	232b      	movmi	r3, #43	@ 0x2b
 800a336:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a33a:	f89a 3000 	ldrb.w	r3, [sl]
 800a33e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a340:	d015      	beq.n	800a36e <_svfiprintf_r+0xfa>
 800a342:	9a07      	ldr	r2, [sp, #28]
 800a344:	4654      	mov	r4, sl
 800a346:	2000      	movs	r0, #0
 800a348:	f04f 0c0a 	mov.w	ip, #10
 800a34c:	4621      	mov	r1, r4
 800a34e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a352:	3b30      	subs	r3, #48	@ 0x30
 800a354:	2b09      	cmp	r3, #9
 800a356:	d94b      	bls.n	800a3f0 <_svfiprintf_r+0x17c>
 800a358:	b1b0      	cbz	r0, 800a388 <_svfiprintf_r+0x114>
 800a35a:	9207      	str	r2, [sp, #28]
 800a35c:	e014      	b.n	800a388 <_svfiprintf_r+0x114>
 800a35e:	eba0 0308 	sub.w	r3, r0, r8
 800a362:	fa09 f303 	lsl.w	r3, r9, r3
 800a366:	4313      	orrs	r3, r2
 800a368:	9304      	str	r3, [sp, #16]
 800a36a:	46a2      	mov	sl, r4
 800a36c:	e7d2      	b.n	800a314 <_svfiprintf_r+0xa0>
 800a36e:	9b03      	ldr	r3, [sp, #12]
 800a370:	1d19      	adds	r1, r3, #4
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	9103      	str	r1, [sp, #12]
 800a376:	2b00      	cmp	r3, #0
 800a378:	bfbb      	ittet	lt
 800a37a:	425b      	neglt	r3, r3
 800a37c:	f042 0202 	orrlt.w	r2, r2, #2
 800a380:	9307      	strge	r3, [sp, #28]
 800a382:	9307      	strlt	r3, [sp, #28]
 800a384:	bfb8      	it	lt
 800a386:	9204      	strlt	r2, [sp, #16]
 800a388:	7823      	ldrb	r3, [r4, #0]
 800a38a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a38c:	d10a      	bne.n	800a3a4 <_svfiprintf_r+0x130>
 800a38e:	7863      	ldrb	r3, [r4, #1]
 800a390:	2b2a      	cmp	r3, #42	@ 0x2a
 800a392:	d132      	bne.n	800a3fa <_svfiprintf_r+0x186>
 800a394:	9b03      	ldr	r3, [sp, #12]
 800a396:	1d1a      	adds	r2, r3, #4
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	9203      	str	r2, [sp, #12]
 800a39c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a3a0:	3402      	adds	r4, #2
 800a3a2:	9305      	str	r3, [sp, #20]
 800a3a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a468 <_svfiprintf_r+0x1f4>
 800a3a8:	7821      	ldrb	r1, [r4, #0]
 800a3aa:	2203      	movs	r2, #3
 800a3ac:	4650      	mov	r0, sl
 800a3ae:	f7f5 ff17 	bl	80001e0 <memchr>
 800a3b2:	b138      	cbz	r0, 800a3c4 <_svfiprintf_r+0x150>
 800a3b4:	9b04      	ldr	r3, [sp, #16]
 800a3b6:	eba0 000a 	sub.w	r0, r0, sl
 800a3ba:	2240      	movs	r2, #64	@ 0x40
 800a3bc:	4082      	lsls	r2, r0
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	3401      	adds	r4, #1
 800a3c2:	9304      	str	r3, [sp, #16]
 800a3c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3c8:	4824      	ldr	r0, [pc, #144]	@ (800a45c <_svfiprintf_r+0x1e8>)
 800a3ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a3ce:	2206      	movs	r2, #6
 800a3d0:	f7f5 ff06 	bl	80001e0 <memchr>
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	d036      	beq.n	800a446 <_svfiprintf_r+0x1d2>
 800a3d8:	4b21      	ldr	r3, [pc, #132]	@ (800a460 <_svfiprintf_r+0x1ec>)
 800a3da:	bb1b      	cbnz	r3, 800a424 <_svfiprintf_r+0x1b0>
 800a3dc:	9b03      	ldr	r3, [sp, #12]
 800a3de:	3307      	adds	r3, #7
 800a3e0:	f023 0307 	bic.w	r3, r3, #7
 800a3e4:	3308      	adds	r3, #8
 800a3e6:	9303      	str	r3, [sp, #12]
 800a3e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3ea:	4433      	add	r3, r6
 800a3ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3ee:	e76a      	b.n	800a2c6 <_svfiprintf_r+0x52>
 800a3f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3f4:	460c      	mov	r4, r1
 800a3f6:	2001      	movs	r0, #1
 800a3f8:	e7a8      	b.n	800a34c <_svfiprintf_r+0xd8>
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	3401      	adds	r4, #1
 800a3fe:	9305      	str	r3, [sp, #20]
 800a400:	4619      	mov	r1, r3
 800a402:	f04f 0c0a 	mov.w	ip, #10
 800a406:	4620      	mov	r0, r4
 800a408:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a40c:	3a30      	subs	r2, #48	@ 0x30
 800a40e:	2a09      	cmp	r2, #9
 800a410:	d903      	bls.n	800a41a <_svfiprintf_r+0x1a6>
 800a412:	2b00      	cmp	r3, #0
 800a414:	d0c6      	beq.n	800a3a4 <_svfiprintf_r+0x130>
 800a416:	9105      	str	r1, [sp, #20]
 800a418:	e7c4      	b.n	800a3a4 <_svfiprintf_r+0x130>
 800a41a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a41e:	4604      	mov	r4, r0
 800a420:	2301      	movs	r3, #1
 800a422:	e7f0      	b.n	800a406 <_svfiprintf_r+0x192>
 800a424:	ab03      	add	r3, sp, #12
 800a426:	9300      	str	r3, [sp, #0]
 800a428:	462a      	mov	r2, r5
 800a42a:	4b0e      	ldr	r3, [pc, #56]	@ (800a464 <_svfiprintf_r+0x1f0>)
 800a42c:	a904      	add	r1, sp, #16
 800a42e:	4638      	mov	r0, r7
 800a430:	f7fc fcba 	bl	8006da8 <_printf_float>
 800a434:	1c42      	adds	r2, r0, #1
 800a436:	4606      	mov	r6, r0
 800a438:	d1d6      	bne.n	800a3e8 <_svfiprintf_r+0x174>
 800a43a:	89ab      	ldrh	r3, [r5, #12]
 800a43c:	065b      	lsls	r3, r3, #25
 800a43e:	f53f af2d 	bmi.w	800a29c <_svfiprintf_r+0x28>
 800a442:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a444:	e72c      	b.n	800a2a0 <_svfiprintf_r+0x2c>
 800a446:	ab03      	add	r3, sp, #12
 800a448:	9300      	str	r3, [sp, #0]
 800a44a:	462a      	mov	r2, r5
 800a44c:	4b05      	ldr	r3, [pc, #20]	@ (800a464 <_svfiprintf_r+0x1f0>)
 800a44e:	a904      	add	r1, sp, #16
 800a450:	4638      	mov	r0, r7
 800a452:	f7fc ff41 	bl	80072d8 <_printf_i>
 800a456:	e7ed      	b.n	800a434 <_svfiprintf_r+0x1c0>
 800a458:	0800b611 	.word	0x0800b611
 800a45c:	0800b61b 	.word	0x0800b61b
 800a460:	08006da9 	.word	0x08006da9
 800a464:	0800a1bd 	.word	0x0800a1bd
 800a468:	0800b617 	.word	0x0800b617

0800a46c <__sfputc_r>:
 800a46c:	6893      	ldr	r3, [r2, #8]
 800a46e:	3b01      	subs	r3, #1
 800a470:	2b00      	cmp	r3, #0
 800a472:	b410      	push	{r4}
 800a474:	6093      	str	r3, [r2, #8]
 800a476:	da08      	bge.n	800a48a <__sfputc_r+0x1e>
 800a478:	6994      	ldr	r4, [r2, #24]
 800a47a:	42a3      	cmp	r3, r4
 800a47c:	db01      	blt.n	800a482 <__sfputc_r+0x16>
 800a47e:	290a      	cmp	r1, #10
 800a480:	d103      	bne.n	800a48a <__sfputc_r+0x1e>
 800a482:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a486:	f000 b9df 	b.w	800a848 <__swbuf_r>
 800a48a:	6813      	ldr	r3, [r2, #0]
 800a48c:	1c58      	adds	r0, r3, #1
 800a48e:	6010      	str	r0, [r2, #0]
 800a490:	7019      	strb	r1, [r3, #0]
 800a492:	4608      	mov	r0, r1
 800a494:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a498:	4770      	bx	lr

0800a49a <__sfputs_r>:
 800a49a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49c:	4606      	mov	r6, r0
 800a49e:	460f      	mov	r7, r1
 800a4a0:	4614      	mov	r4, r2
 800a4a2:	18d5      	adds	r5, r2, r3
 800a4a4:	42ac      	cmp	r4, r5
 800a4a6:	d101      	bne.n	800a4ac <__sfputs_r+0x12>
 800a4a8:	2000      	movs	r0, #0
 800a4aa:	e007      	b.n	800a4bc <__sfputs_r+0x22>
 800a4ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4b0:	463a      	mov	r2, r7
 800a4b2:	4630      	mov	r0, r6
 800a4b4:	f7ff ffda 	bl	800a46c <__sfputc_r>
 800a4b8:	1c43      	adds	r3, r0, #1
 800a4ba:	d1f3      	bne.n	800a4a4 <__sfputs_r+0xa>
 800a4bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a4c0 <_vfiprintf_r>:
 800a4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c4:	460d      	mov	r5, r1
 800a4c6:	b09d      	sub	sp, #116	@ 0x74
 800a4c8:	4614      	mov	r4, r2
 800a4ca:	4698      	mov	r8, r3
 800a4cc:	4606      	mov	r6, r0
 800a4ce:	b118      	cbz	r0, 800a4d8 <_vfiprintf_r+0x18>
 800a4d0:	6a03      	ldr	r3, [r0, #32]
 800a4d2:	b90b      	cbnz	r3, 800a4d8 <_vfiprintf_r+0x18>
 800a4d4:	f7fd fab8 	bl	8007a48 <__sinit>
 800a4d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4da:	07d9      	lsls	r1, r3, #31
 800a4dc:	d405      	bmi.n	800a4ea <_vfiprintf_r+0x2a>
 800a4de:	89ab      	ldrh	r3, [r5, #12]
 800a4e0:	059a      	lsls	r2, r3, #22
 800a4e2:	d402      	bmi.n	800a4ea <_vfiprintf_r+0x2a>
 800a4e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4e6:	f7fd fbda 	bl	8007c9e <__retarget_lock_acquire_recursive>
 800a4ea:	89ab      	ldrh	r3, [r5, #12]
 800a4ec:	071b      	lsls	r3, r3, #28
 800a4ee:	d501      	bpl.n	800a4f4 <_vfiprintf_r+0x34>
 800a4f0:	692b      	ldr	r3, [r5, #16]
 800a4f2:	b99b      	cbnz	r3, 800a51c <_vfiprintf_r+0x5c>
 800a4f4:	4629      	mov	r1, r5
 800a4f6:	4630      	mov	r0, r6
 800a4f8:	f000 f9e4 	bl	800a8c4 <__swsetup_r>
 800a4fc:	b170      	cbz	r0, 800a51c <_vfiprintf_r+0x5c>
 800a4fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a500:	07dc      	lsls	r4, r3, #31
 800a502:	d504      	bpl.n	800a50e <_vfiprintf_r+0x4e>
 800a504:	f04f 30ff 	mov.w	r0, #4294967295
 800a508:	b01d      	add	sp, #116	@ 0x74
 800a50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a50e:	89ab      	ldrh	r3, [r5, #12]
 800a510:	0598      	lsls	r0, r3, #22
 800a512:	d4f7      	bmi.n	800a504 <_vfiprintf_r+0x44>
 800a514:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a516:	f7fd fbc3 	bl	8007ca0 <__retarget_lock_release_recursive>
 800a51a:	e7f3      	b.n	800a504 <_vfiprintf_r+0x44>
 800a51c:	2300      	movs	r3, #0
 800a51e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a520:	2320      	movs	r3, #32
 800a522:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a526:	f8cd 800c 	str.w	r8, [sp, #12]
 800a52a:	2330      	movs	r3, #48	@ 0x30
 800a52c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a6dc <_vfiprintf_r+0x21c>
 800a530:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a534:	f04f 0901 	mov.w	r9, #1
 800a538:	4623      	mov	r3, r4
 800a53a:	469a      	mov	sl, r3
 800a53c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a540:	b10a      	cbz	r2, 800a546 <_vfiprintf_r+0x86>
 800a542:	2a25      	cmp	r2, #37	@ 0x25
 800a544:	d1f9      	bne.n	800a53a <_vfiprintf_r+0x7a>
 800a546:	ebba 0b04 	subs.w	fp, sl, r4
 800a54a:	d00b      	beq.n	800a564 <_vfiprintf_r+0xa4>
 800a54c:	465b      	mov	r3, fp
 800a54e:	4622      	mov	r2, r4
 800a550:	4629      	mov	r1, r5
 800a552:	4630      	mov	r0, r6
 800a554:	f7ff ffa1 	bl	800a49a <__sfputs_r>
 800a558:	3001      	adds	r0, #1
 800a55a:	f000 80a7 	beq.w	800a6ac <_vfiprintf_r+0x1ec>
 800a55e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a560:	445a      	add	r2, fp
 800a562:	9209      	str	r2, [sp, #36]	@ 0x24
 800a564:	f89a 3000 	ldrb.w	r3, [sl]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f000 809f 	beq.w	800a6ac <_vfiprintf_r+0x1ec>
 800a56e:	2300      	movs	r3, #0
 800a570:	f04f 32ff 	mov.w	r2, #4294967295
 800a574:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a578:	f10a 0a01 	add.w	sl, sl, #1
 800a57c:	9304      	str	r3, [sp, #16]
 800a57e:	9307      	str	r3, [sp, #28]
 800a580:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a584:	931a      	str	r3, [sp, #104]	@ 0x68
 800a586:	4654      	mov	r4, sl
 800a588:	2205      	movs	r2, #5
 800a58a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a58e:	4853      	ldr	r0, [pc, #332]	@ (800a6dc <_vfiprintf_r+0x21c>)
 800a590:	f7f5 fe26 	bl	80001e0 <memchr>
 800a594:	9a04      	ldr	r2, [sp, #16]
 800a596:	b9d8      	cbnz	r0, 800a5d0 <_vfiprintf_r+0x110>
 800a598:	06d1      	lsls	r1, r2, #27
 800a59a:	bf44      	itt	mi
 800a59c:	2320      	movmi	r3, #32
 800a59e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5a2:	0713      	lsls	r3, r2, #28
 800a5a4:	bf44      	itt	mi
 800a5a6:	232b      	movmi	r3, #43	@ 0x2b
 800a5a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a5b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5b2:	d015      	beq.n	800a5e0 <_vfiprintf_r+0x120>
 800a5b4:	9a07      	ldr	r2, [sp, #28]
 800a5b6:	4654      	mov	r4, sl
 800a5b8:	2000      	movs	r0, #0
 800a5ba:	f04f 0c0a 	mov.w	ip, #10
 800a5be:	4621      	mov	r1, r4
 800a5c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5c4:	3b30      	subs	r3, #48	@ 0x30
 800a5c6:	2b09      	cmp	r3, #9
 800a5c8:	d94b      	bls.n	800a662 <_vfiprintf_r+0x1a2>
 800a5ca:	b1b0      	cbz	r0, 800a5fa <_vfiprintf_r+0x13a>
 800a5cc:	9207      	str	r2, [sp, #28]
 800a5ce:	e014      	b.n	800a5fa <_vfiprintf_r+0x13a>
 800a5d0:	eba0 0308 	sub.w	r3, r0, r8
 800a5d4:	fa09 f303 	lsl.w	r3, r9, r3
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	9304      	str	r3, [sp, #16]
 800a5dc:	46a2      	mov	sl, r4
 800a5de:	e7d2      	b.n	800a586 <_vfiprintf_r+0xc6>
 800a5e0:	9b03      	ldr	r3, [sp, #12]
 800a5e2:	1d19      	adds	r1, r3, #4
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	9103      	str	r1, [sp, #12]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	bfbb      	ittet	lt
 800a5ec:	425b      	neglt	r3, r3
 800a5ee:	f042 0202 	orrlt.w	r2, r2, #2
 800a5f2:	9307      	strge	r3, [sp, #28]
 800a5f4:	9307      	strlt	r3, [sp, #28]
 800a5f6:	bfb8      	it	lt
 800a5f8:	9204      	strlt	r2, [sp, #16]
 800a5fa:	7823      	ldrb	r3, [r4, #0]
 800a5fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a5fe:	d10a      	bne.n	800a616 <_vfiprintf_r+0x156>
 800a600:	7863      	ldrb	r3, [r4, #1]
 800a602:	2b2a      	cmp	r3, #42	@ 0x2a
 800a604:	d132      	bne.n	800a66c <_vfiprintf_r+0x1ac>
 800a606:	9b03      	ldr	r3, [sp, #12]
 800a608:	1d1a      	adds	r2, r3, #4
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	9203      	str	r2, [sp, #12]
 800a60e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a612:	3402      	adds	r4, #2
 800a614:	9305      	str	r3, [sp, #20]
 800a616:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a6ec <_vfiprintf_r+0x22c>
 800a61a:	7821      	ldrb	r1, [r4, #0]
 800a61c:	2203      	movs	r2, #3
 800a61e:	4650      	mov	r0, sl
 800a620:	f7f5 fdde 	bl	80001e0 <memchr>
 800a624:	b138      	cbz	r0, 800a636 <_vfiprintf_r+0x176>
 800a626:	9b04      	ldr	r3, [sp, #16]
 800a628:	eba0 000a 	sub.w	r0, r0, sl
 800a62c:	2240      	movs	r2, #64	@ 0x40
 800a62e:	4082      	lsls	r2, r0
 800a630:	4313      	orrs	r3, r2
 800a632:	3401      	adds	r4, #1
 800a634:	9304      	str	r3, [sp, #16]
 800a636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a63a:	4829      	ldr	r0, [pc, #164]	@ (800a6e0 <_vfiprintf_r+0x220>)
 800a63c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a640:	2206      	movs	r2, #6
 800a642:	f7f5 fdcd 	bl	80001e0 <memchr>
 800a646:	2800      	cmp	r0, #0
 800a648:	d03f      	beq.n	800a6ca <_vfiprintf_r+0x20a>
 800a64a:	4b26      	ldr	r3, [pc, #152]	@ (800a6e4 <_vfiprintf_r+0x224>)
 800a64c:	bb1b      	cbnz	r3, 800a696 <_vfiprintf_r+0x1d6>
 800a64e:	9b03      	ldr	r3, [sp, #12]
 800a650:	3307      	adds	r3, #7
 800a652:	f023 0307 	bic.w	r3, r3, #7
 800a656:	3308      	adds	r3, #8
 800a658:	9303      	str	r3, [sp, #12]
 800a65a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a65c:	443b      	add	r3, r7
 800a65e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a660:	e76a      	b.n	800a538 <_vfiprintf_r+0x78>
 800a662:	fb0c 3202 	mla	r2, ip, r2, r3
 800a666:	460c      	mov	r4, r1
 800a668:	2001      	movs	r0, #1
 800a66a:	e7a8      	b.n	800a5be <_vfiprintf_r+0xfe>
 800a66c:	2300      	movs	r3, #0
 800a66e:	3401      	adds	r4, #1
 800a670:	9305      	str	r3, [sp, #20]
 800a672:	4619      	mov	r1, r3
 800a674:	f04f 0c0a 	mov.w	ip, #10
 800a678:	4620      	mov	r0, r4
 800a67a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a67e:	3a30      	subs	r2, #48	@ 0x30
 800a680:	2a09      	cmp	r2, #9
 800a682:	d903      	bls.n	800a68c <_vfiprintf_r+0x1cc>
 800a684:	2b00      	cmp	r3, #0
 800a686:	d0c6      	beq.n	800a616 <_vfiprintf_r+0x156>
 800a688:	9105      	str	r1, [sp, #20]
 800a68a:	e7c4      	b.n	800a616 <_vfiprintf_r+0x156>
 800a68c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a690:	4604      	mov	r4, r0
 800a692:	2301      	movs	r3, #1
 800a694:	e7f0      	b.n	800a678 <_vfiprintf_r+0x1b8>
 800a696:	ab03      	add	r3, sp, #12
 800a698:	9300      	str	r3, [sp, #0]
 800a69a:	462a      	mov	r2, r5
 800a69c:	4b12      	ldr	r3, [pc, #72]	@ (800a6e8 <_vfiprintf_r+0x228>)
 800a69e:	a904      	add	r1, sp, #16
 800a6a0:	4630      	mov	r0, r6
 800a6a2:	f7fc fb81 	bl	8006da8 <_printf_float>
 800a6a6:	4607      	mov	r7, r0
 800a6a8:	1c78      	adds	r0, r7, #1
 800a6aa:	d1d6      	bne.n	800a65a <_vfiprintf_r+0x19a>
 800a6ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6ae:	07d9      	lsls	r1, r3, #31
 800a6b0:	d405      	bmi.n	800a6be <_vfiprintf_r+0x1fe>
 800a6b2:	89ab      	ldrh	r3, [r5, #12]
 800a6b4:	059a      	lsls	r2, r3, #22
 800a6b6:	d402      	bmi.n	800a6be <_vfiprintf_r+0x1fe>
 800a6b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6ba:	f7fd faf1 	bl	8007ca0 <__retarget_lock_release_recursive>
 800a6be:	89ab      	ldrh	r3, [r5, #12]
 800a6c0:	065b      	lsls	r3, r3, #25
 800a6c2:	f53f af1f 	bmi.w	800a504 <_vfiprintf_r+0x44>
 800a6c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a6c8:	e71e      	b.n	800a508 <_vfiprintf_r+0x48>
 800a6ca:	ab03      	add	r3, sp, #12
 800a6cc:	9300      	str	r3, [sp, #0]
 800a6ce:	462a      	mov	r2, r5
 800a6d0:	4b05      	ldr	r3, [pc, #20]	@ (800a6e8 <_vfiprintf_r+0x228>)
 800a6d2:	a904      	add	r1, sp, #16
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	f7fc fdff 	bl	80072d8 <_printf_i>
 800a6da:	e7e4      	b.n	800a6a6 <_vfiprintf_r+0x1e6>
 800a6dc:	0800b611 	.word	0x0800b611
 800a6e0:	0800b61b 	.word	0x0800b61b
 800a6e4:	08006da9 	.word	0x08006da9
 800a6e8:	0800a49b 	.word	0x0800a49b
 800a6ec:	0800b617 	.word	0x0800b617

0800a6f0 <__sflush_r>:
 800a6f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6f8:	0716      	lsls	r6, r2, #28
 800a6fa:	4605      	mov	r5, r0
 800a6fc:	460c      	mov	r4, r1
 800a6fe:	d454      	bmi.n	800a7aa <__sflush_r+0xba>
 800a700:	684b      	ldr	r3, [r1, #4]
 800a702:	2b00      	cmp	r3, #0
 800a704:	dc02      	bgt.n	800a70c <__sflush_r+0x1c>
 800a706:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a708:	2b00      	cmp	r3, #0
 800a70a:	dd48      	ble.n	800a79e <__sflush_r+0xae>
 800a70c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a70e:	2e00      	cmp	r6, #0
 800a710:	d045      	beq.n	800a79e <__sflush_r+0xae>
 800a712:	2300      	movs	r3, #0
 800a714:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a718:	682f      	ldr	r7, [r5, #0]
 800a71a:	6a21      	ldr	r1, [r4, #32]
 800a71c:	602b      	str	r3, [r5, #0]
 800a71e:	d030      	beq.n	800a782 <__sflush_r+0x92>
 800a720:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a722:	89a3      	ldrh	r3, [r4, #12]
 800a724:	0759      	lsls	r1, r3, #29
 800a726:	d505      	bpl.n	800a734 <__sflush_r+0x44>
 800a728:	6863      	ldr	r3, [r4, #4]
 800a72a:	1ad2      	subs	r2, r2, r3
 800a72c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a72e:	b10b      	cbz	r3, 800a734 <__sflush_r+0x44>
 800a730:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a732:	1ad2      	subs	r2, r2, r3
 800a734:	2300      	movs	r3, #0
 800a736:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a738:	6a21      	ldr	r1, [r4, #32]
 800a73a:	4628      	mov	r0, r5
 800a73c:	47b0      	blx	r6
 800a73e:	1c43      	adds	r3, r0, #1
 800a740:	89a3      	ldrh	r3, [r4, #12]
 800a742:	d106      	bne.n	800a752 <__sflush_r+0x62>
 800a744:	6829      	ldr	r1, [r5, #0]
 800a746:	291d      	cmp	r1, #29
 800a748:	d82b      	bhi.n	800a7a2 <__sflush_r+0xb2>
 800a74a:	4a2a      	ldr	r2, [pc, #168]	@ (800a7f4 <__sflush_r+0x104>)
 800a74c:	40ca      	lsrs	r2, r1
 800a74e:	07d6      	lsls	r6, r2, #31
 800a750:	d527      	bpl.n	800a7a2 <__sflush_r+0xb2>
 800a752:	2200      	movs	r2, #0
 800a754:	6062      	str	r2, [r4, #4]
 800a756:	04d9      	lsls	r1, r3, #19
 800a758:	6922      	ldr	r2, [r4, #16]
 800a75a:	6022      	str	r2, [r4, #0]
 800a75c:	d504      	bpl.n	800a768 <__sflush_r+0x78>
 800a75e:	1c42      	adds	r2, r0, #1
 800a760:	d101      	bne.n	800a766 <__sflush_r+0x76>
 800a762:	682b      	ldr	r3, [r5, #0]
 800a764:	b903      	cbnz	r3, 800a768 <__sflush_r+0x78>
 800a766:	6560      	str	r0, [r4, #84]	@ 0x54
 800a768:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a76a:	602f      	str	r7, [r5, #0]
 800a76c:	b1b9      	cbz	r1, 800a79e <__sflush_r+0xae>
 800a76e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a772:	4299      	cmp	r1, r3
 800a774:	d002      	beq.n	800a77c <__sflush_r+0x8c>
 800a776:	4628      	mov	r0, r5
 800a778:	f7fe f8f2 	bl	8008960 <_free_r>
 800a77c:	2300      	movs	r3, #0
 800a77e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a780:	e00d      	b.n	800a79e <__sflush_r+0xae>
 800a782:	2301      	movs	r3, #1
 800a784:	4628      	mov	r0, r5
 800a786:	47b0      	blx	r6
 800a788:	4602      	mov	r2, r0
 800a78a:	1c50      	adds	r0, r2, #1
 800a78c:	d1c9      	bne.n	800a722 <__sflush_r+0x32>
 800a78e:	682b      	ldr	r3, [r5, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d0c6      	beq.n	800a722 <__sflush_r+0x32>
 800a794:	2b1d      	cmp	r3, #29
 800a796:	d001      	beq.n	800a79c <__sflush_r+0xac>
 800a798:	2b16      	cmp	r3, #22
 800a79a:	d11e      	bne.n	800a7da <__sflush_r+0xea>
 800a79c:	602f      	str	r7, [r5, #0]
 800a79e:	2000      	movs	r0, #0
 800a7a0:	e022      	b.n	800a7e8 <__sflush_r+0xf8>
 800a7a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7a6:	b21b      	sxth	r3, r3
 800a7a8:	e01b      	b.n	800a7e2 <__sflush_r+0xf2>
 800a7aa:	690f      	ldr	r7, [r1, #16]
 800a7ac:	2f00      	cmp	r7, #0
 800a7ae:	d0f6      	beq.n	800a79e <__sflush_r+0xae>
 800a7b0:	0793      	lsls	r3, r2, #30
 800a7b2:	680e      	ldr	r6, [r1, #0]
 800a7b4:	bf08      	it	eq
 800a7b6:	694b      	ldreq	r3, [r1, #20]
 800a7b8:	600f      	str	r7, [r1, #0]
 800a7ba:	bf18      	it	ne
 800a7bc:	2300      	movne	r3, #0
 800a7be:	eba6 0807 	sub.w	r8, r6, r7
 800a7c2:	608b      	str	r3, [r1, #8]
 800a7c4:	f1b8 0f00 	cmp.w	r8, #0
 800a7c8:	dde9      	ble.n	800a79e <__sflush_r+0xae>
 800a7ca:	6a21      	ldr	r1, [r4, #32]
 800a7cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a7ce:	4643      	mov	r3, r8
 800a7d0:	463a      	mov	r2, r7
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	47b0      	blx	r6
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	dc08      	bgt.n	800a7ec <__sflush_r+0xfc>
 800a7da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7e2:	81a3      	strh	r3, [r4, #12]
 800a7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7ec:	4407      	add	r7, r0
 800a7ee:	eba8 0800 	sub.w	r8, r8, r0
 800a7f2:	e7e7      	b.n	800a7c4 <__sflush_r+0xd4>
 800a7f4:	20400001 	.word	0x20400001

0800a7f8 <_fflush_r>:
 800a7f8:	b538      	push	{r3, r4, r5, lr}
 800a7fa:	690b      	ldr	r3, [r1, #16]
 800a7fc:	4605      	mov	r5, r0
 800a7fe:	460c      	mov	r4, r1
 800a800:	b913      	cbnz	r3, 800a808 <_fflush_r+0x10>
 800a802:	2500      	movs	r5, #0
 800a804:	4628      	mov	r0, r5
 800a806:	bd38      	pop	{r3, r4, r5, pc}
 800a808:	b118      	cbz	r0, 800a812 <_fflush_r+0x1a>
 800a80a:	6a03      	ldr	r3, [r0, #32]
 800a80c:	b90b      	cbnz	r3, 800a812 <_fflush_r+0x1a>
 800a80e:	f7fd f91b 	bl	8007a48 <__sinit>
 800a812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d0f3      	beq.n	800a802 <_fflush_r+0xa>
 800a81a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a81c:	07d0      	lsls	r0, r2, #31
 800a81e:	d404      	bmi.n	800a82a <_fflush_r+0x32>
 800a820:	0599      	lsls	r1, r3, #22
 800a822:	d402      	bmi.n	800a82a <_fflush_r+0x32>
 800a824:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a826:	f7fd fa3a 	bl	8007c9e <__retarget_lock_acquire_recursive>
 800a82a:	4628      	mov	r0, r5
 800a82c:	4621      	mov	r1, r4
 800a82e:	f7ff ff5f 	bl	800a6f0 <__sflush_r>
 800a832:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a834:	07da      	lsls	r2, r3, #31
 800a836:	4605      	mov	r5, r0
 800a838:	d4e4      	bmi.n	800a804 <_fflush_r+0xc>
 800a83a:	89a3      	ldrh	r3, [r4, #12]
 800a83c:	059b      	lsls	r3, r3, #22
 800a83e:	d4e1      	bmi.n	800a804 <_fflush_r+0xc>
 800a840:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a842:	f7fd fa2d 	bl	8007ca0 <__retarget_lock_release_recursive>
 800a846:	e7dd      	b.n	800a804 <_fflush_r+0xc>

0800a848 <__swbuf_r>:
 800a848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a84a:	460e      	mov	r6, r1
 800a84c:	4614      	mov	r4, r2
 800a84e:	4605      	mov	r5, r0
 800a850:	b118      	cbz	r0, 800a85a <__swbuf_r+0x12>
 800a852:	6a03      	ldr	r3, [r0, #32]
 800a854:	b90b      	cbnz	r3, 800a85a <__swbuf_r+0x12>
 800a856:	f7fd f8f7 	bl	8007a48 <__sinit>
 800a85a:	69a3      	ldr	r3, [r4, #24]
 800a85c:	60a3      	str	r3, [r4, #8]
 800a85e:	89a3      	ldrh	r3, [r4, #12]
 800a860:	071a      	lsls	r2, r3, #28
 800a862:	d501      	bpl.n	800a868 <__swbuf_r+0x20>
 800a864:	6923      	ldr	r3, [r4, #16]
 800a866:	b943      	cbnz	r3, 800a87a <__swbuf_r+0x32>
 800a868:	4621      	mov	r1, r4
 800a86a:	4628      	mov	r0, r5
 800a86c:	f000 f82a 	bl	800a8c4 <__swsetup_r>
 800a870:	b118      	cbz	r0, 800a87a <__swbuf_r+0x32>
 800a872:	f04f 37ff 	mov.w	r7, #4294967295
 800a876:	4638      	mov	r0, r7
 800a878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a87a:	6823      	ldr	r3, [r4, #0]
 800a87c:	6922      	ldr	r2, [r4, #16]
 800a87e:	1a98      	subs	r0, r3, r2
 800a880:	6963      	ldr	r3, [r4, #20]
 800a882:	b2f6      	uxtb	r6, r6
 800a884:	4283      	cmp	r3, r0
 800a886:	4637      	mov	r7, r6
 800a888:	dc05      	bgt.n	800a896 <__swbuf_r+0x4e>
 800a88a:	4621      	mov	r1, r4
 800a88c:	4628      	mov	r0, r5
 800a88e:	f7ff ffb3 	bl	800a7f8 <_fflush_r>
 800a892:	2800      	cmp	r0, #0
 800a894:	d1ed      	bne.n	800a872 <__swbuf_r+0x2a>
 800a896:	68a3      	ldr	r3, [r4, #8]
 800a898:	3b01      	subs	r3, #1
 800a89a:	60a3      	str	r3, [r4, #8]
 800a89c:	6823      	ldr	r3, [r4, #0]
 800a89e:	1c5a      	adds	r2, r3, #1
 800a8a0:	6022      	str	r2, [r4, #0]
 800a8a2:	701e      	strb	r6, [r3, #0]
 800a8a4:	6962      	ldr	r2, [r4, #20]
 800a8a6:	1c43      	adds	r3, r0, #1
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d004      	beq.n	800a8b6 <__swbuf_r+0x6e>
 800a8ac:	89a3      	ldrh	r3, [r4, #12]
 800a8ae:	07db      	lsls	r3, r3, #31
 800a8b0:	d5e1      	bpl.n	800a876 <__swbuf_r+0x2e>
 800a8b2:	2e0a      	cmp	r6, #10
 800a8b4:	d1df      	bne.n	800a876 <__swbuf_r+0x2e>
 800a8b6:	4621      	mov	r1, r4
 800a8b8:	4628      	mov	r0, r5
 800a8ba:	f7ff ff9d 	bl	800a7f8 <_fflush_r>
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	d0d9      	beq.n	800a876 <__swbuf_r+0x2e>
 800a8c2:	e7d6      	b.n	800a872 <__swbuf_r+0x2a>

0800a8c4 <__swsetup_r>:
 800a8c4:	b538      	push	{r3, r4, r5, lr}
 800a8c6:	4b29      	ldr	r3, [pc, #164]	@ (800a96c <__swsetup_r+0xa8>)
 800a8c8:	4605      	mov	r5, r0
 800a8ca:	6818      	ldr	r0, [r3, #0]
 800a8cc:	460c      	mov	r4, r1
 800a8ce:	b118      	cbz	r0, 800a8d8 <__swsetup_r+0x14>
 800a8d0:	6a03      	ldr	r3, [r0, #32]
 800a8d2:	b90b      	cbnz	r3, 800a8d8 <__swsetup_r+0x14>
 800a8d4:	f7fd f8b8 	bl	8007a48 <__sinit>
 800a8d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8dc:	0719      	lsls	r1, r3, #28
 800a8de:	d422      	bmi.n	800a926 <__swsetup_r+0x62>
 800a8e0:	06da      	lsls	r2, r3, #27
 800a8e2:	d407      	bmi.n	800a8f4 <__swsetup_r+0x30>
 800a8e4:	2209      	movs	r2, #9
 800a8e6:	602a      	str	r2, [r5, #0]
 800a8e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8ec:	81a3      	strh	r3, [r4, #12]
 800a8ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f2:	e033      	b.n	800a95c <__swsetup_r+0x98>
 800a8f4:	0758      	lsls	r0, r3, #29
 800a8f6:	d512      	bpl.n	800a91e <__swsetup_r+0x5a>
 800a8f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8fa:	b141      	cbz	r1, 800a90e <__swsetup_r+0x4a>
 800a8fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a900:	4299      	cmp	r1, r3
 800a902:	d002      	beq.n	800a90a <__swsetup_r+0x46>
 800a904:	4628      	mov	r0, r5
 800a906:	f7fe f82b 	bl	8008960 <_free_r>
 800a90a:	2300      	movs	r3, #0
 800a90c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a90e:	89a3      	ldrh	r3, [r4, #12]
 800a910:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a914:	81a3      	strh	r3, [r4, #12]
 800a916:	2300      	movs	r3, #0
 800a918:	6063      	str	r3, [r4, #4]
 800a91a:	6923      	ldr	r3, [r4, #16]
 800a91c:	6023      	str	r3, [r4, #0]
 800a91e:	89a3      	ldrh	r3, [r4, #12]
 800a920:	f043 0308 	orr.w	r3, r3, #8
 800a924:	81a3      	strh	r3, [r4, #12]
 800a926:	6923      	ldr	r3, [r4, #16]
 800a928:	b94b      	cbnz	r3, 800a93e <__swsetup_r+0x7a>
 800a92a:	89a3      	ldrh	r3, [r4, #12]
 800a92c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a934:	d003      	beq.n	800a93e <__swsetup_r+0x7a>
 800a936:	4621      	mov	r1, r4
 800a938:	4628      	mov	r0, r5
 800a93a:	f000 fc5d 	bl	800b1f8 <__smakebuf_r>
 800a93e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a942:	f013 0201 	ands.w	r2, r3, #1
 800a946:	d00a      	beq.n	800a95e <__swsetup_r+0x9a>
 800a948:	2200      	movs	r2, #0
 800a94a:	60a2      	str	r2, [r4, #8]
 800a94c:	6962      	ldr	r2, [r4, #20]
 800a94e:	4252      	negs	r2, r2
 800a950:	61a2      	str	r2, [r4, #24]
 800a952:	6922      	ldr	r2, [r4, #16]
 800a954:	b942      	cbnz	r2, 800a968 <__swsetup_r+0xa4>
 800a956:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a95a:	d1c5      	bne.n	800a8e8 <__swsetup_r+0x24>
 800a95c:	bd38      	pop	{r3, r4, r5, pc}
 800a95e:	0799      	lsls	r1, r3, #30
 800a960:	bf58      	it	pl
 800a962:	6962      	ldrpl	r2, [r4, #20]
 800a964:	60a2      	str	r2, [r4, #8]
 800a966:	e7f4      	b.n	800a952 <__swsetup_r+0x8e>
 800a968:	2000      	movs	r0, #0
 800a96a:	e7f7      	b.n	800a95c <__swsetup_r+0x98>
 800a96c:	2000003c 	.word	0x2000003c

0800a970 <memmove>:
 800a970:	4288      	cmp	r0, r1
 800a972:	b510      	push	{r4, lr}
 800a974:	eb01 0402 	add.w	r4, r1, r2
 800a978:	d902      	bls.n	800a980 <memmove+0x10>
 800a97a:	4284      	cmp	r4, r0
 800a97c:	4623      	mov	r3, r4
 800a97e:	d807      	bhi.n	800a990 <memmove+0x20>
 800a980:	1e43      	subs	r3, r0, #1
 800a982:	42a1      	cmp	r1, r4
 800a984:	d008      	beq.n	800a998 <memmove+0x28>
 800a986:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a98a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a98e:	e7f8      	b.n	800a982 <memmove+0x12>
 800a990:	4402      	add	r2, r0
 800a992:	4601      	mov	r1, r0
 800a994:	428a      	cmp	r2, r1
 800a996:	d100      	bne.n	800a99a <memmove+0x2a>
 800a998:	bd10      	pop	{r4, pc}
 800a99a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a99e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a9a2:	e7f7      	b.n	800a994 <memmove+0x24>

0800a9a4 <strncmp>:
 800a9a4:	b510      	push	{r4, lr}
 800a9a6:	b16a      	cbz	r2, 800a9c4 <strncmp+0x20>
 800a9a8:	3901      	subs	r1, #1
 800a9aa:	1884      	adds	r4, r0, r2
 800a9ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d103      	bne.n	800a9c0 <strncmp+0x1c>
 800a9b8:	42a0      	cmp	r0, r4
 800a9ba:	d001      	beq.n	800a9c0 <strncmp+0x1c>
 800a9bc:	2a00      	cmp	r2, #0
 800a9be:	d1f5      	bne.n	800a9ac <strncmp+0x8>
 800a9c0:	1ad0      	subs	r0, r2, r3
 800a9c2:	bd10      	pop	{r4, pc}
 800a9c4:	4610      	mov	r0, r2
 800a9c6:	e7fc      	b.n	800a9c2 <strncmp+0x1e>

0800a9c8 <_sbrk_r>:
 800a9c8:	b538      	push	{r3, r4, r5, lr}
 800a9ca:	4d06      	ldr	r5, [pc, #24]	@ (800a9e4 <_sbrk_r+0x1c>)
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	4604      	mov	r4, r0
 800a9d0:	4608      	mov	r0, r1
 800a9d2:	602b      	str	r3, [r5, #0]
 800a9d4:	f7f7 fec6 	bl	8002764 <_sbrk>
 800a9d8:	1c43      	adds	r3, r0, #1
 800a9da:	d102      	bne.n	800a9e2 <_sbrk_r+0x1a>
 800a9dc:	682b      	ldr	r3, [r5, #0]
 800a9de:	b103      	cbz	r3, 800a9e2 <_sbrk_r+0x1a>
 800a9e0:	6023      	str	r3, [r4, #0]
 800a9e2:	bd38      	pop	{r3, r4, r5, pc}
 800a9e4:	200006e8 	.word	0x200006e8

0800a9e8 <memcpy>:
 800a9e8:	440a      	add	r2, r1
 800a9ea:	4291      	cmp	r1, r2
 800a9ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9f0:	d100      	bne.n	800a9f4 <memcpy+0xc>
 800a9f2:	4770      	bx	lr
 800a9f4:	b510      	push	{r4, lr}
 800a9f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9fe:	4291      	cmp	r1, r2
 800aa00:	d1f9      	bne.n	800a9f6 <memcpy+0xe>
 800aa02:	bd10      	pop	{r4, pc}
 800aa04:	0000      	movs	r0, r0
	...

0800aa08 <nan>:
 800aa08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800aa10 <nan+0x8>
 800aa0c:	4770      	bx	lr
 800aa0e:	bf00      	nop
 800aa10:	00000000 	.word	0x00000000
 800aa14:	7ff80000 	.word	0x7ff80000

0800aa18 <__assert_func>:
 800aa18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa1a:	4614      	mov	r4, r2
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	4b09      	ldr	r3, [pc, #36]	@ (800aa44 <__assert_func+0x2c>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4605      	mov	r5, r0
 800aa24:	68d8      	ldr	r0, [r3, #12]
 800aa26:	b14c      	cbz	r4, 800aa3c <__assert_func+0x24>
 800aa28:	4b07      	ldr	r3, [pc, #28]	@ (800aa48 <__assert_func+0x30>)
 800aa2a:	9100      	str	r1, [sp, #0]
 800aa2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa30:	4906      	ldr	r1, [pc, #24]	@ (800aa4c <__assert_func+0x34>)
 800aa32:	462b      	mov	r3, r5
 800aa34:	f000 fba8 	bl	800b188 <fiprintf>
 800aa38:	f000 fc3c 	bl	800b2b4 <abort>
 800aa3c:	4b04      	ldr	r3, [pc, #16]	@ (800aa50 <__assert_func+0x38>)
 800aa3e:	461c      	mov	r4, r3
 800aa40:	e7f3      	b.n	800aa2a <__assert_func+0x12>
 800aa42:	bf00      	nop
 800aa44:	2000003c 	.word	0x2000003c
 800aa48:	0800b62a 	.word	0x0800b62a
 800aa4c:	0800b637 	.word	0x0800b637
 800aa50:	0800b665 	.word	0x0800b665

0800aa54 <_calloc_r>:
 800aa54:	b570      	push	{r4, r5, r6, lr}
 800aa56:	fba1 5402 	umull	r5, r4, r1, r2
 800aa5a:	b934      	cbnz	r4, 800aa6a <_calloc_r+0x16>
 800aa5c:	4629      	mov	r1, r5
 800aa5e:	f7fd fff3 	bl	8008a48 <_malloc_r>
 800aa62:	4606      	mov	r6, r0
 800aa64:	b928      	cbnz	r0, 800aa72 <_calloc_r+0x1e>
 800aa66:	4630      	mov	r0, r6
 800aa68:	bd70      	pop	{r4, r5, r6, pc}
 800aa6a:	220c      	movs	r2, #12
 800aa6c:	6002      	str	r2, [r0, #0]
 800aa6e:	2600      	movs	r6, #0
 800aa70:	e7f9      	b.n	800aa66 <_calloc_r+0x12>
 800aa72:	462a      	mov	r2, r5
 800aa74:	4621      	mov	r1, r4
 800aa76:	f7fd f894 	bl	8007ba2 <memset>
 800aa7a:	e7f4      	b.n	800aa66 <_calloc_r+0x12>

0800aa7c <rshift>:
 800aa7c:	6903      	ldr	r3, [r0, #16]
 800aa7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aa82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa86:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aa8a:	f100 0414 	add.w	r4, r0, #20
 800aa8e:	dd45      	ble.n	800ab1c <rshift+0xa0>
 800aa90:	f011 011f 	ands.w	r1, r1, #31
 800aa94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aa98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aa9c:	d10c      	bne.n	800aab8 <rshift+0x3c>
 800aa9e:	f100 0710 	add.w	r7, r0, #16
 800aaa2:	4629      	mov	r1, r5
 800aaa4:	42b1      	cmp	r1, r6
 800aaa6:	d334      	bcc.n	800ab12 <rshift+0x96>
 800aaa8:	1a9b      	subs	r3, r3, r2
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	1eea      	subs	r2, r5, #3
 800aaae:	4296      	cmp	r6, r2
 800aab0:	bf38      	it	cc
 800aab2:	2300      	movcc	r3, #0
 800aab4:	4423      	add	r3, r4
 800aab6:	e015      	b.n	800aae4 <rshift+0x68>
 800aab8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aabc:	f1c1 0820 	rsb	r8, r1, #32
 800aac0:	40cf      	lsrs	r7, r1
 800aac2:	f105 0e04 	add.w	lr, r5, #4
 800aac6:	46a1      	mov	r9, r4
 800aac8:	4576      	cmp	r6, lr
 800aaca:	46f4      	mov	ip, lr
 800aacc:	d815      	bhi.n	800aafa <rshift+0x7e>
 800aace:	1a9a      	subs	r2, r3, r2
 800aad0:	0092      	lsls	r2, r2, #2
 800aad2:	3a04      	subs	r2, #4
 800aad4:	3501      	adds	r5, #1
 800aad6:	42ae      	cmp	r6, r5
 800aad8:	bf38      	it	cc
 800aada:	2200      	movcc	r2, #0
 800aadc:	18a3      	adds	r3, r4, r2
 800aade:	50a7      	str	r7, [r4, r2]
 800aae0:	b107      	cbz	r7, 800aae4 <rshift+0x68>
 800aae2:	3304      	adds	r3, #4
 800aae4:	1b1a      	subs	r2, r3, r4
 800aae6:	42a3      	cmp	r3, r4
 800aae8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aaec:	bf08      	it	eq
 800aaee:	2300      	moveq	r3, #0
 800aaf0:	6102      	str	r2, [r0, #16]
 800aaf2:	bf08      	it	eq
 800aaf4:	6143      	streq	r3, [r0, #20]
 800aaf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aafa:	f8dc c000 	ldr.w	ip, [ip]
 800aafe:	fa0c fc08 	lsl.w	ip, ip, r8
 800ab02:	ea4c 0707 	orr.w	r7, ip, r7
 800ab06:	f849 7b04 	str.w	r7, [r9], #4
 800ab0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ab0e:	40cf      	lsrs	r7, r1
 800ab10:	e7da      	b.n	800aac8 <rshift+0x4c>
 800ab12:	f851 cb04 	ldr.w	ip, [r1], #4
 800ab16:	f847 cf04 	str.w	ip, [r7, #4]!
 800ab1a:	e7c3      	b.n	800aaa4 <rshift+0x28>
 800ab1c:	4623      	mov	r3, r4
 800ab1e:	e7e1      	b.n	800aae4 <rshift+0x68>

0800ab20 <__hexdig_fun>:
 800ab20:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ab24:	2b09      	cmp	r3, #9
 800ab26:	d802      	bhi.n	800ab2e <__hexdig_fun+0xe>
 800ab28:	3820      	subs	r0, #32
 800ab2a:	b2c0      	uxtb	r0, r0
 800ab2c:	4770      	bx	lr
 800ab2e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ab32:	2b05      	cmp	r3, #5
 800ab34:	d801      	bhi.n	800ab3a <__hexdig_fun+0x1a>
 800ab36:	3847      	subs	r0, #71	@ 0x47
 800ab38:	e7f7      	b.n	800ab2a <__hexdig_fun+0xa>
 800ab3a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ab3e:	2b05      	cmp	r3, #5
 800ab40:	d801      	bhi.n	800ab46 <__hexdig_fun+0x26>
 800ab42:	3827      	subs	r0, #39	@ 0x27
 800ab44:	e7f1      	b.n	800ab2a <__hexdig_fun+0xa>
 800ab46:	2000      	movs	r0, #0
 800ab48:	4770      	bx	lr
	...

0800ab4c <__gethex>:
 800ab4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab50:	b085      	sub	sp, #20
 800ab52:	468a      	mov	sl, r1
 800ab54:	9302      	str	r3, [sp, #8]
 800ab56:	680b      	ldr	r3, [r1, #0]
 800ab58:	9001      	str	r0, [sp, #4]
 800ab5a:	4690      	mov	r8, r2
 800ab5c:	1c9c      	adds	r4, r3, #2
 800ab5e:	46a1      	mov	r9, r4
 800ab60:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ab64:	2830      	cmp	r0, #48	@ 0x30
 800ab66:	d0fa      	beq.n	800ab5e <__gethex+0x12>
 800ab68:	eba9 0303 	sub.w	r3, r9, r3
 800ab6c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ab70:	f7ff ffd6 	bl	800ab20 <__hexdig_fun>
 800ab74:	4605      	mov	r5, r0
 800ab76:	2800      	cmp	r0, #0
 800ab78:	d168      	bne.n	800ac4c <__gethex+0x100>
 800ab7a:	49a0      	ldr	r1, [pc, #640]	@ (800adfc <__gethex+0x2b0>)
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	4648      	mov	r0, r9
 800ab80:	f7ff ff10 	bl	800a9a4 <strncmp>
 800ab84:	4607      	mov	r7, r0
 800ab86:	2800      	cmp	r0, #0
 800ab88:	d167      	bne.n	800ac5a <__gethex+0x10e>
 800ab8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ab8e:	4626      	mov	r6, r4
 800ab90:	f7ff ffc6 	bl	800ab20 <__hexdig_fun>
 800ab94:	2800      	cmp	r0, #0
 800ab96:	d062      	beq.n	800ac5e <__gethex+0x112>
 800ab98:	4623      	mov	r3, r4
 800ab9a:	7818      	ldrb	r0, [r3, #0]
 800ab9c:	2830      	cmp	r0, #48	@ 0x30
 800ab9e:	4699      	mov	r9, r3
 800aba0:	f103 0301 	add.w	r3, r3, #1
 800aba4:	d0f9      	beq.n	800ab9a <__gethex+0x4e>
 800aba6:	f7ff ffbb 	bl	800ab20 <__hexdig_fun>
 800abaa:	fab0 f580 	clz	r5, r0
 800abae:	096d      	lsrs	r5, r5, #5
 800abb0:	f04f 0b01 	mov.w	fp, #1
 800abb4:	464a      	mov	r2, r9
 800abb6:	4616      	mov	r6, r2
 800abb8:	3201      	adds	r2, #1
 800abba:	7830      	ldrb	r0, [r6, #0]
 800abbc:	f7ff ffb0 	bl	800ab20 <__hexdig_fun>
 800abc0:	2800      	cmp	r0, #0
 800abc2:	d1f8      	bne.n	800abb6 <__gethex+0x6a>
 800abc4:	498d      	ldr	r1, [pc, #564]	@ (800adfc <__gethex+0x2b0>)
 800abc6:	2201      	movs	r2, #1
 800abc8:	4630      	mov	r0, r6
 800abca:	f7ff feeb 	bl	800a9a4 <strncmp>
 800abce:	2800      	cmp	r0, #0
 800abd0:	d13f      	bne.n	800ac52 <__gethex+0x106>
 800abd2:	b944      	cbnz	r4, 800abe6 <__gethex+0x9a>
 800abd4:	1c74      	adds	r4, r6, #1
 800abd6:	4622      	mov	r2, r4
 800abd8:	4616      	mov	r6, r2
 800abda:	3201      	adds	r2, #1
 800abdc:	7830      	ldrb	r0, [r6, #0]
 800abde:	f7ff ff9f 	bl	800ab20 <__hexdig_fun>
 800abe2:	2800      	cmp	r0, #0
 800abe4:	d1f8      	bne.n	800abd8 <__gethex+0x8c>
 800abe6:	1ba4      	subs	r4, r4, r6
 800abe8:	00a7      	lsls	r7, r4, #2
 800abea:	7833      	ldrb	r3, [r6, #0]
 800abec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800abf0:	2b50      	cmp	r3, #80	@ 0x50
 800abf2:	d13e      	bne.n	800ac72 <__gethex+0x126>
 800abf4:	7873      	ldrb	r3, [r6, #1]
 800abf6:	2b2b      	cmp	r3, #43	@ 0x2b
 800abf8:	d033      	beq.n	800ac62 <__gethex+0x116>
 800abfa:	2b2d      	cmp	r3, #45	@ 0x2d
 800abfc:	d034      	beq.n	800ac68 <__gethex+0x11c>
 800abfe:	1c71      	adds	r1, r6, #1
 800ac00:	2400      	movs	r4, #0
 800ac02:	7808      	ldrb	r0, [r1, #0]
 800ac04:	f7ff ff8c 	bl	800ab20 <__hexdig_fun>
 800ac08:	1e43      	subs	r3, r0, #1
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	2b18      	cmp	r3, #24
 800ac0e:	d830      	bhi.n	800ac72 <__gethex+0x126>
 800ac10:	f1a0 0210 	sub.w	r2, r0, #16
 800ac14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ac18:	f7ff ff82 	bl	800ab20 <__hexdig_fun>
 800ac1c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ac20:	fa5f fc8c 	uxtb.w	ip, ip
 800ac24:	f1bc 0f18 	cmp.w	ip, #24
 800ac28:	f04f 030a 	mov.w	r3, #10
 800ac2c:	d91e      	bls.n	800ac6c <__gethex+0x120>
 800ac2e:	b104      	cbz	r4, 800ac32 <__gethex+0xe6>
 800ac30:	4252      	negs	r2, r2
 800ac32:	4417      	add	r7, r2
 800ac34:	f8ca 1000 	str.w	r1, [sl]
 800ac38:	b1ed      	cbz	r5, 800ac76 <__gethex+0x12a>
 800ac3a:	f1bb 0f00 	cmp.w	fp, #0
 800ac3e:	bf0c      	ite	eq
 800ac40:	2506      	moveq	r5, #6
 800ac42:	2500      	movne	r5, #0
 800ac44:	4628      	mov	r0, r5
 800ac46:	b005      	add	sp, #20
 800ac48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac4c:	2500      	movs	r5, #0
 800ac4e:	462c      	mov	r4, r5
 800ac50:	e7b0      	b.n	800abb4 <__gethex+0x68>
 800ac52:	2c00      	cmp	r4, #0
 800ac54:	d1c7      	bne.n	800abe6 <__gethex+0x9a>
 800ac56:	4627      	mov	r7, r4
 800ac58:	e7c7      	b.n	800abea <__gethex+0x9e>
 800ac5a:	464e      	mov	r6, r9
 800ac5c:	462f      	mov	r7, r5
 800ac5e:	2501      	movs	r5, #1
 800ac60:	e7c3      	b.n	800abea <__gethex+0x9e>
 800ac62:	2400      	movs	r4, #0
 800ac64:	1cb1      	adds	r1, r6, #2
 800ac66:	e7cc      	b.n	800ac02 <__gethex+0xb6>
 800ac68:	2401      	movs	r4, #1
 800ac6a:	e7fb      	b.n	800ac64 <__gethex+0x118>
 800ac6c:	fb03 0002 	mla	r0, r3, r2, r0
 800ac70:	e7ce      	b.n	800ac10 <__gethex+0xc4>
 800ac72:	4631      	mov	r1, r6
 800ac74:	e7de      	b.n	800ac34 <__gethex+0xe8>
 800ac76:	eba6 0309 	sub.w	r3, r6, r9
 800ac7a:	3b01      	subs	r3, #1
 800ac7c:	4629      	mov	r1, r5
 800ac7e:	2b07      	cmp	r3, #7
 800ac80:	dc0a      	bgt.n	800ac98 <__gethex+0x14c>
 800ac82:	9801      	ldr	r0, [sp, #4]
 800ac84:	f7fd ff6c 	bl	8008b60 <_Balloc>
 800ac88:	4604      	mov	r4, r0
 800ac8a:	b940      	cbnz	r0, 800ac9e <__gethex+0x152>
 800ac8c:	4b5c      	ldr	r3, [pc, #368]	@ (800ae00 <__gethex+0x2b4>)
 800ac8e:	4602      	mov	r2, r0
 800ac90:	21e4      	movs	r1, #228	@ 0xe4
 800ac92:	485c      	ldr	r0, [pc, #368]	@ (800ae04 <__gethex+0x2b8>)
 800ac94:	f7ff fec0 	bl	800aa18 <__assert_func>
 800ac98:	3101      	adds	r1, #1
 800ac9a:	105b      	asrs	r3, r3, #1
 800ac9c:	e7ef      	b.n	800ac7e <__gethex+0x132>
 800ac9e:	f100 0a14 	add.w	sl, r0, #20
 800aca2:	2300      	movs	r3, #0
 800aca4:	4655      	mov	r5, sl
 800aca6:	469b      	mov	fp, r3
 800aca8:	45b1      	cmp	r9, r6
 800acaa:	d337      	bcc.n	800ad1c <__gethex+0x1d0>
 800acac:	f845 bb04 	str.w	fp, [r5], #4
 800acb0:	eba5 050a 	sub.w	r5, r5, sl
 800acb4:	10ad      	asrs	r5, r5, #2
 800acb6:	6125      	str	r5, [r4, #16]
 800acb8:	4658      	mov	r0, fp
 800acba:	f7fe f843 	bl	8008d44 <__hi0bits>
 800acbe:	016d      	lsls	r5, r5, #5
 800acc0:	f8d8 6000 	ldr.w	r6, [r8]
 800acc4:	1a2d      	subs	r5, r5, r0
 800acc6:	42b5      	cmp	r5, r6
 800acc8:	dd54      	ble.n	800ad74 <__gethex+0x228>
 800acca:	1bad      	subs	r5, r5, r6
 800accc:	4629      	mov	r1, r5
 800acce:	4620      	mov	r0, r4
 800acd0:	f7fe fbcf 	bl	8009472 <__any_on>
 800acd4:	4681      	mov	r9, r0
 800acd6:	b178      	cbz	r0, 800acf8 <__gethex+0x1ac>
 800acd8:	1e6b      	subs	r3, r5, #1
 800acda:	1159      	asrs	r1, r3, #5
 800acdc:	f003 021f 	and.w	r2, r3, #31
 800ace0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ace4:	f04f 0901 	mov.w	r9, #1
 800ace8:	fa09 f202 	lsl.w	r2, r9, r2
 800acec:	420a      	tst	r2, r1
 800acee:	d003      	beq.n	800acf8 <__gethex+0x1ac>
 800acf0:	454b      	cmp	r3, r9
 800acf2:	dc36      	bgt.n	800ad62 <__gethex+0x216>
 800acf4:	f04f 0902 	mov.w	r9, #2
 800acf8:	4629      	mov	r1, r5
 800acfa:	4620      	mov	r0, r4
 800acfc:	f7ff febe 	bl	800aa7c <rshift>
 800ad00:	442f      	add	r7, r5
 800ad02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad06:	42bb      	cmp	r3, r7
 800ad08:	da42      	bge.n	800ad90 <__gethex+0x244>
 800ad0a:	9801      	ldr	r0, [sp, #4]
 800ad0c:	4621      	mov	r1, r4
 800ad0e:	f7fd ff67 	bl	8008be0 <_Bfree>
 800ad12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad14:	2300      	movs	r3, #0
 800ad16:	6013      	str	r3, [r2, #0]
 800ad18:	25a3      	movs	r5, #163	@ 0xa3
 800ad1a:	e793      	b.n	800ac44 <__gethex+0xf8>
 800ad1c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ad20:	2a2e      	cmp	r2, #46	@ 0x2e
 800ad22:	d012      	beq.n	800ad4a <__gethex+0x1fe>
 800ad24:	2b20      	cmp	r3, #32
 800ad26:	d104      	bne.n	800ad32 <__gethex+0x1e6>
 800ad28:	f845 bb04 	str.w	fp, [r5], #4
 800ad2c:	f04f 0b00 	mov.w	fp, #0
 800ad30:	465b      	mov	r3, fp
 800ad32:	7830      	ldrb	r0, [r6, #0]
 800ad34:	9303      	str	r3, [sp, #12]
 800ad36:	f7ff fef3 	bl	800ab20 <__hexdig_fun>
 800ad3a:	9b03      	ldr	r3, [sp, #12]
 800ad3c:	f000 000f 	and.w	r0, r0, #15
 800ad40:	4098      	lsls	r0, r3
 800ad42:	ea4b 0b00 	orr.w	fp, fp, r0
 800ad46:	3304      	adds	r3, #4
 800ad48:	e7ae      	b.n	800aca8 <__gethex+0x15c>
 800ad4a:	45b1      	cmp	r9, r6
 800ad4c:	d8ea      	bhi.n	800ad24 <__gethex+0x1d8>
 800ad4e:	492b      	ldr	r1, [pc, #172]	@ (800adfc <__gethex+0x2b0>)
 800ad50:	9303      	str	r3, [sp, #12]
 800ad52:	2201      	movs	r2, #1
 800ad54:	4630      	mov	r0, r6
 800ad56:	f7ff fe25 	bl	800a9a4 <strncmp>
 800ad5a:	9b03      	ldr	r3, [sp, #12]
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	d1e1      	bne.n	800ad24 <__gethex+0x1d8>
 800ad60:	e7a2      	b.n	800aca8 <__gethex+0x15c>
 800ad62:	1ea9      	subs	r1, r5, #2
 800ad64:	4620      	mov	r0, r4
 800ad66:	f7fe fb84 	bl	8009472 <__any_on>
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d0c2      	beq.n	800acf4 <__gethex+0x1a8>
 800ad6e:	f04f 0903 	mov.w	r9, #3
 800ad72:	e7c1      	b.n	800acf8 <__gethex+0x1ac>
 800ad74:	da09      	bge.n	800ad8a <__gethex+0x23e>
 800ad76:	1b75      	subs	r5, r6, r5
 800ad78:	4621      	mov	r1, r4
 800ad7a:	9801      	ldr	r0, [sp, #4]
 800ad7c:	462a      	mov	r2, r5
 800ad7e:	f7fe f93f 	bl	8009000 <__lshift>
 800ad82:	1b7f      	subs	r7, r7, r5
 800ad84:	4604      	mov	r4, r0
 800ad86:	f100 0a14 	add.w	sl, r0, #20
 800ad8a:	f04f 0900 	mov.w	r9, #0
 800ad8e:	e7b8      	b.n	800ad02 <__gethex+0x1b6>
 800ad90:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ad94:	42bd      	cmp	r5, r7
 800ad96:	dd6f      	ble.n	800ae78 <__gethex+0x32c>
 800ad98:	1bed      	subs	r5, r5, r7
 800ad9a:	42ae      	cmp	r6, r5
 800ad9c:	dc34      	bgt.n	800ae08 <__gethex+0x2bc>
 800ad9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ada2:	2b02      	cmp	r3, #2
 800ada4:	d022      	beq.n	800adec <__gethex+0x2a0>
 800ada6:	2b03      	cmp	r3, #3
 800ada8:	d024      	beq.n	800adf4 <__gethex+0x2a8>
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d115      	bne.n	800adda <__gethex+0x28e>
 800adae:	42ae      	cmp	r6, r5
 800adb0:	d113      	bne.n	800adda <__gethex+0x28e>
 800adb2:	2e01      	cmp	r6, #1
 800adb4:	d10b      	bne.n	800adce <__gethex+0x282>
 800adb6:	9a02      	ldr	r2, [sp, #8]
 800adb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800adbc:	6013      	str	r3, [r2, #0]
 800adbe:	2301      	movs	r3, #1
 800adc0:	6123      	str	r3, [r4, #16]
 800adc2:	f8ca 3000 	str.w	r3, [sl]
 800adc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800adc8:	2562      	movs	r5, #98	@ 0x62
 800adca:	601c      	str	r4, [r3, #0]
 800adcc:	e73a      	b.n	800ac44 <__gethex+0xf8>
 800adce:	1e71      	subs	r1, r6, #1
 800add0:	4620      	mov	r0, r4
 800add2:	f7fe fb4e 	bl	8009472 <__any_on>
 800add6:	2800      	cmp	r0, #0
 800add8:	d1ed      	bne.n	800adb6 <__gethex+0x26a>
 800adda:	9801      	ldr	r0, [sp, #4]
 800addc:	4621      	mov	r1, r4
 800adde:	f7fd feff 	bl	8008be0 <_Bfree>
 800ade2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ade4:	2300      	movs	r3, #0
 800ade6:	6013      	str	r3, [r2, #0]
 800ade8:	2550      	movs	r5, #80	@ 0x50
 800adea:	e72b      	b.n	800ac44 <__gethex+0xf8>
 800adec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d1f3      	bne.n	800adda <__gethex+0x28e>
 800adf2:	e7e0      	b.n	800adb6 <__gethex+0x26a>
 800adf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d1dd      	bne.n	800adb6 <__gethex+0x26a>
 800adfa:	e7ee      	b.n	800adda <__gethex+0x28e>
 800adfc:	0800b60f 	.word	0x0800b60f
 800ae00:	0800b5a5 	.word	0x0800b5a5
 800ae04:	0800b666 	.word	0x0800b666
 800ae08:	1e6f      	subs	r7, r5, #1
 800ae0a:	f1b9 0f00 	cmp.w	r9, #0
 800ae0e:	d130      	bne.n	800ae72 <__gethex+0x326>
 800ae10:	b127      	cbz	r7, 800ae1c <__gethex+0x2d0>
 800ae12:	4639      	mov	r1, r7
 800ae14:	4620      	mov	r0, r4
 800ae16:	f7fe fb2c 	bl	8009472 <__any_on>
 800ae1a:	4681      	mov	r9, r0
 800ae1c:	117a      	asrs	r2, r7, #5
 800ae1e:	2301      	movs	r3, #1
 800ae20:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ae24:	f007 071f 	and.w	r7, r7, #31
 800ae28:	40bb      	lsls	r3, r7
 800ae2a:	4213      	tst	r3, r2
 800ae2c:	4629      	mov	r1, r5
 800ae2e:	4620      	mov	r0, r4
 800ae30:	bf18      	it	ne
 800ae32:	f049 0902 	orrne.w	r9, r9, #2
 800ae36:	f7ff fe21 	bl	800aa7c <rshift>
 800ae3a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ae3e:	1b76      	subs	r6, r6, r5
 800ae40:	2502      	movs	r5, #2
 800ae42:	f1b9 0f00 	cmp.w	r9, #0
 800ae46:	d047      	beq.n	800aed8 <__gethex+0x38c>
 800ae48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae4c:	2b02      	cmp	r3, #2
 800ae4e:	d015      	beq.n	800ae7c <__gethex+0x330>
 800ae50:	2b03      	cmp	r3, #3
 800ae52:	d017      	beq.n	800ae84 <__gethex+0x338>
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d109      	bne.n	800ae6c <__gethex+0x320>
 800ae58:	f019 0f02 	tst.w	r9, #2
 800ae5c:	d006      	beq.n	800ae6c <__gethex+0x320>
 800ae5e:	f8da 3000 	ldr.w	r3, [sl]
 800ae62:	ea49 0903 	orr.w	r9, r9, r3
 800ae66:	f019 0f01 	tst.w	r9, #1
 800ae6a:	d10e      	bne.n	800ae8a <__gethex+0x33e>
 800ae6c:	f045 0510 	orr.w	r5, r5, #16
 800ae70:	e032      	b.n	800aed8 <__gethex+0x38c>
 800ae72:	f04f 0901 	mov.w	r9, #1
 800ae76:	e7d1      	b.n	800ae1c <__gethex+0x2d0>
 800ae78:	2501      	movs	r5, #1
 800ae7a:	e7e2      	b.n	800ae42 <__gethex+0x2f6>
 800ae7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae7e:	f1c3 0301 	rsb	r3, r3, #1
 800ae82:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ae84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d0f0      	beq.n	800ae6c <__gethex+0x320>
 800ae8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ae8e:	f104 0314 	add.w	r3, r4, #20
 800ae92:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ae96:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ae9a:	f04f 0c00 	mov.w	ip, #0
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aea4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aea8:	d01b      	beq.n	800aee2 <__gethex+0x396>
 800aeaa:	3201      	adds	r2, #1
 800aeac:	6002      	str	r2, [r0, #0]
 800aeae:	2d02      	cmp	r5, #2
 800aeb0:	f104 0314 	add.w	r3, r4, #20
 800aeb4:	d13c      	bne.n	800af30 <__gethex+0x3e4>
 800aeb6:	f8d8 2000 	ldr.w	r2, [r8]
 800aeba:	3a01      	subs	r2, #1
 800aebc:	42b2      	cmp	r2, r6
 800aebe:	d109      	bne.n	800aed4 <__gethex+0x388>
 800aec0:	1171      	asrs	r1, r6, #5
 800aec2:	2201      	movs	r2, #1
 800aec4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aec8:	f006 061f 	and.w	r6, r6, #31
 800aecc:	fa02 f606 	lsl.w	r6, r2, r6
 800aed0:	421e      	tst	r6, r3
 800aed2:	d13a      	bne.n	800af4a <__gethex+0x3fe>
 800aed4:	f045 0520 	orr.w	r5, r5, #32
 800aed8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aeda:	601c      	str	r4, [r3, #0]
 800aedc:	9b02      	ldr	r3, [sp, #8]
 800aede:	601f      	str	r7, [r3, #0]
 800aee0:	e6b0      	b.n	800ac44 <__gethex+0xf8>
 800aee2:	4299      	cmp	r1, r3
 800aee4:	f843 cc04 	str.w	ip, [r3, #-4]
 800aee8:	d8d9      	bhi.n	800ae9e <__gethex+0x352>
 800aeea:	68a3      	ldr	r3, [r4, #8]
 800aeec:	459b      	cmp	fp, r3
 800aeee:	db17      	blt.n	800af20 <__gethex+0x3d4>
 800aef0:	6861      	ldr	r1, [r4, #4]
 800aef2:	9801      	ldr	r0, [sp, #4]
 800aef4:	3101      	adds	r1, #1
 800aef6:	f7fd fe33 	bl	8008b60 <_Balloc>
 800aefa:	4681      	mov	r9, r0
 800aefc:	b918      	cbnz	r0, 800af06 <__gethex+0x3ba>
 800aefe:	4b1a      	ldr	r3, [pc, #104]	@ (800af68 <__gethex+0x41c>)
 800af00:	4602      	mov	r2, r0
 800af02:	2184      	movs	r1, #132	@ 0x84
 800af04:	e6c5      	b.n	800ac92 <__gethex+0x146>
 800af06:	6922      	ldr	r2, [r4, #16]
 800af08:	3202      	adds	r2, #2
 800af0a:	f104 010c 	add.w	r1, r4, #12
 800af0e:	0092      	lsls	r2, r2, #2
 800af10:	300c      	adds	r0, #12
 800af12:	f7ff fd69 	bl	800a9e8 <memcpy>
 800af16:	4621      	mov	r1, r4
 800af18:	9801      	ldr	r0, [sp, #4]
 800af1a:	f7fd fe61 	bl	8008be0 <_Bfree>
 800af1e:	464c      	mov	r4, r9
 800af20:	6923      	ldr	r3, [r4, #16]
 800af22:	1c5a      	adds	r2, r3, #1
 800af24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800af28:	6122      	str	r2, [r4, #16]
 800af2a:	2201      	movs	r2, #1
 800af2c:	615a      	str	r2, [r3, #20]
 800af2e:	e7be      	b.n	800aeae <__gethex+0x362>
 800af30:	6922      	ldr	r2, [r4, #16]
 800af32:	455a      	cmp	r2, fp
 800af34:	dd0b      	ble.n	800af4e <__gethex+0x402>
 800af36:	2101      	movs	r1, #1
 800af38:	4620      	mov	r0, r4
 800af3a:	f7ff fd9f 	bl	800aa7c <rshift>
 800af3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af42:	3701      	adds	r7, #1
 800af44:	42bb      	cmp	r3, r7
 800af46:	f6ff aee0 	blt.w	800ad0a <__gethex+0x1be>
 800af4a:	2501      	movs	r5, #1
 800af4c:	e7c2      	b.n	800aed4 <__gethex+0x388>
 800af4e:	f016 061f 	ands.w	r6, r6, #31
 800af52:	d0fa      	beq.n	800af4a <__gethex+0x3fe>
 800af54:	4453      	add	r3, sl
 800af56:	f1c6 0620 	rsb	r6, r6, #32
 800af5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800af5e:	f7fd fef1 	bl	8008d44 <__hi0bits>
 800af62:	42b0      	cmp	r0, r6
 800af64:	dbe7      	blt.n	800af36 <__gethex+0x3ea>
 800af66:	e7f0      	b.n	800af4a <__gethex+0x3fe>
 800af68:	0800b5a5 	.word	0x0800b5a5

0800af6c <L_shift>:
 800af6c:	f1c2 0208 	rsb	r2, r2, #8
 800af70:	0092      	lsls	r2, r2, #2
 800af72:	b570      	push	{r4, r5, r6, lr}
 800af74:	f1c2 0620 	rsb	r6, r2, #32
 800af78:	6843      	ldr	r3, [r0, #4]
 800af7a:	6804      	ldr	r4, [r0, #0]
 800af7c:	fa03 f506 	lsl.w	r5, r3, r6
 800af80:	432c      	orrs	r4, r5
 800af82:	40d3      	lsrs	r3, r2
 800af84:	6004      	str	r4, [r0, #0]
 800af86:	f840 3f04 	str.w	r3, [r0, #4]!
 800af8a:	4288      	cmp	r0, r1
 800af8c:	d3f4      	bcc.n	800af78 <L_shift+0xc>
 800af8e:	bd70      	pop	{r4, r5, r6, pc}

0800af90 <__match>:
 800af90:	b530      	push	{r4, r5, lr}
 800af92:	6803      	ldr	r3, [r0, #0]
 800af94:	3301      	adds	r3, #1
 800af96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af9a:	b914      	cbnz	r4, 800afa2 <__match+0x12>
 800af9c:	6003      	str	r3, [r0, #0]
 800af9e:	2001      	movs	r0, #1
 800afa0:	bd30      	pop	{r4, r5, pc}
 800afa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afa6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800afaa:	2d19      	cmp	r5, #25
 800afac:	bf98      	it	ls
 800afae:	3220      	addls	r2, #32
 800afb0:	42a2      	cmp	r2, r4
 800afb2:	d0f0      	beq.n	800af96 <__match+0x6>
 800afb4:	2000      	movs	r0, #0
 800afb6:	e7f3      	b.n	800afa0 <__match+0x10>

0800afb8 <__hexnan>:
 800afb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afbc:	680b      	ldr	r3, [r1, #0]
 800afbe:	6801      	ldr	r1, [r0, #0]
 800afc0:	115e      	asrs	r6, r3, #5
 800afc2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800afc6:	f013 031f 	ands.w	r3, r3, #31
 800afca:	b087      	sub	sp, #28
 800afcc:	bf18      	it	ne
 800afce:	3604      	addne	r6, #4
 800afd0:	2500      	movs	r5, #0
 800afd2:	1f37      	subs	r7, r6, #4
 800afd4:	4682      	mov	sl, r0
 800afd6:	4690      	mov	r8, r2
 800afd8:	9301      	str	r3, [sp, #4]
 800afda:	f846 5c04 	str.w	r5, [r6, #-4]
 800afde:	46b9      	mov	r9, r7
 800afe0:	463c      	mov	r4, r7
 800afe2:	9502      	str	r5, [sp, #8]
 800afe4:	46ab      	mov	fp, r5
 800afe6:	784a      	ldrb	r2, [r1, #1]
 800afe8:	1c4b      	adds	r3, r1, #1
 800afea:	9303      	str	r3, [sp, #12]
 800afec:	b342      	cbz	r2, 800b040 <__hexnan+0x88>
 800afee:	4610      	mov	r0, r2
 800aff0:	9105      	str	r1, [sp, #20]
 800aff2:	9204      	str	r2, [sp, #16]
 800aff4:	f7ff fd94 	bl	800ab20 <__hexdig_fun>
 800aff8:	2800      	cmp	r0, #0
 800affa:	d151      	bne.n	800b0a0 <__hexnan+0xe8>
 800affc:	9a04      	ldr	r2, [sp, #16]
 800affe:	9905      	ldr	r1, [sp, #20]
 800b000:	2a20      	cmp	r2, #32
 800b002:	d818      	bhi.n	800b036 <__hexnan+0x7e>
 800b004:	9b02      	ldr	r3, [sp, #8]
 800b006:	459b      	cmp	fp, r3
 800b008:	dd13      	ble.n	800b032 <__hexnan+0x7a>
 800b00a:	454c      	cmp	r4, r9
 800b00c:	d206      	bcs.n	800b01c <__hexnan+0x64>
 800b00e:	2d07      	cmp	r5, #7
 800b010:	dc04      	bgt.n	800b01c <__hexnan+0x64>
 800b012:	462a      	mov	r2, r5
 800b014:	4649      	mov	r1, r9
 800b016:	4620      	mov	r0, r4
 800b018:	f7ff ffa8 	bl	800af6c <L_shift>
 800b01c:	4544      	cmp	r4, r8
 800b01e:	d952      	bls.n	800b0c6 <__hexnan+0x10e>
 800b020:	2300      	movs	r3, #0
 800b022:	f1a4 0904 	sub.w	r9, r4, #4
 800b026:	f844 3c04 	str.w	r3, [r4, #-4]
 800b02a:	f8cd b008 	str.w	fp, [sp, #8]
 800b02e:	464c      	mov	r4, r9
 800b030:	461d      	mov	r5, r3
 800b032:	9903      	ldr	r1, [sp, #12]
 800b034:	e7d7      	b.n	800afe6 <__hexnan+0x2e>
 800b036:	2a29      	cmp	r2, #41	@ 0x29
 800b038:	d157      	bne.n	800b0ea <__hexnan+0x132>
 800b03a:	3102      	adds	r1, #2
 800b03c:	f8ca 1000 	str.w	r1, [sl]
 800b040:	f1bb 0f00 	cmp.w	fp, #0
 800b044:	d051      	beq.n	800b0ea <__hexnan+0x132>
 800b046:	454c      	cmp	r4, r9
 800b048:	d206      	bcs.n	800b058 <__hexnan+0xa0>
 800b04a:	2d07      	cmp	r5, #7
 800b04c:	dc04      	bgt.n	800b058 <__hexnan+0xa0>
 800b04e:	462a      	mov	r2, r5
 800b050:	4649      	mov	r1, r9
 800b052:	4620      	mov	r0, r4
 800b054:	f7ff ff8a 	bl	800af6c <L_shift>
 800b058:	4544      	cmp	r4, r8
 800b05a:	d936      	bls.n	800b0ca <__hexnan+0x112>
 800b05c:	f1a8 0204 	sub.w	r2, r8, #4
 800b060:	4623      	mov	r3, r4
 800b062:	f853 1b04 	ldr.w	r1, [r3], #4
 800b066:	f842 1f04 	str.w	r1, [r2, #4]!
 800b06a:	429f      	cmp	r7, r3
 800b06c:	d2f9      	bcs.n	800b062 <__hexnan+0xaa>
 800b06e:	1b3b      	subs	r3, r7, r4
 800b070:	f023 0303 	bic.w	r3, r3, #3
 800b074:	3304      	adds	r3, #4
 800b076:	3401      	adds	r4, #1
 800b078:	3e03      	subs	r6, #3
 800b07a:	42b4      	cmp	r4, r6
 800b07c:	bf88      	it	hi
 800b07e:	2304      	movhi	r3, #4
 800b080:	4443      	add	r3, r8
 800b082:	2200      	movs	r2, #0
 800b084:	f843 2b04 	str.w	r2, [r3], #4
 800b088:	429f      	cmp	r7, r3
 800b08a:	d2fb      	bcs.n	800b084 <__hexnan+0xcc>
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	b91b      	cbnz	r3, 800b098 <__hexnan+0xe0>
 800b090:	4547      	cmp	r7, r8
 800b092:	d128      	bne.n	800b0e6 <__hexnan+0x12e>
 800b094:	2301      	movs	r3, #1
 800b096:	603b      	str	r3, [r7, #0]
 800b098:	2005      	movs	r0, #5
 800b09a:	b007      	add	sp, #28
 800b09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a0:	3501      	adds	r5, #1
 800b0a2:	2d08      	cmp	r5, #8
 800b0a4:	f10b 0b01 	add.w	fp, fp, #1
 800b0a8:	dd06      	ble.n	800b0b8 <__hexnan+0x100>
 800b0aa:	4544      	cmp	r4, r8
 800b0ac:	d9c1      	bls.n	800b032 <__hexnan+0x7a>
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b0b4:	2501      	movs	r5, #1
 800b0b6:	3c04      	subs	r4, #4
 800b0b8:	6822      	ldr	r2, [r4, #0]
 800b0ba:	f000 000f 	and.w	r0, r0, #15
 800b0be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b0c2:	6020      	str	r0, [r4, #0]
 800b0c4:	e7b5      	b.n	800b032 <__hexnan+0x7a>
 800b0c6:	2508      	movs	r5, #8
 800b0c8:	e7b3      	b.n	800b032 <__hexnan+0x7a>
 800b0ca:	9b01      	ldr	r3, [sp, #4]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d0dd      	beq.n	800b08c <__hexnan+0xd4>
 800b0d0:	f1c3 0320 	rsb	r3, r3, #32
 800b0d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b0d8:	40da      	lsrs	r2, r3
 800b0da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b0de:	4013      	ands	r3, r2
 800b0e0:	f846 3c04 	str.w	r3, [r6, #-4]
 800b0e4:	e7d2      	b.n	800b08c <__hexnan+0xd4>
 800b0e6:	3f04      	subs	r7, #4
 800b0e8:	e7d0      	b.n	800b08c <__hexnan+0xd4>
 800b0ea:	2004      	movs	r0, #4
 800b0ec:	e7d5      	b.n	800b09a <__hexnan+0xe2>

0800b0ee <__ascii_mbtowc>:
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	b901      	cbnz	r1, 800b0f4 <__ascii_mbtowc+0x6>
 800b0f2:	a901      	add	r1, sp, #4
 800b0f4:	b142      	cbz	r2, 800b108 <__ascii_mbtowc+0x1a>
 800b0f6:	b14b      	cbz	r3, 800b10c <__ascii_mbtowc+0x1e>
 800b0f8:	7813      	ldrb	r3, [r2, #0]
 800b0fa:	600b      	str	r3, [r1, #0]
 800b0fc:	7812      	ldrb	r2, [r2, #0]
 800b0fe:	1e10      	subs	r0, r2, #0
 800b100:	bf18      	it	ne
 800b102:	2001      	movne	r0, #1
 800b104:	b002      	add	sp, #8
 800b106:	4770      	bx	lr
 800b108:	4610      	mov	r0, r2
 800b10a:	e7fb      	b.n	800b104 <__ascii_mbtowc+0x16>
 800b10c:	f06f 0001 	mvn.w	r0, #1
 800b110:	e7f8      	b.n	800b104 <__ascii_mbtowc+0x16>

0800b112 <_realloc_r>:
 800b112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b116:	4607      	mov	r7, r0
 800b118:	4614      	mov	r4, r2
 800b11a:	460d      	mov	r5, r1
 800b11c:	b921      	cbnz	r1, 800b128 <_realloc_r+0x16>
 800b11e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b122:	4611      	mov	r1, r2
 800b124:	f7fd bc90 	b.w	8008a48 <_malloc_r>
 800b128:	b92a      	cbnz	r2, 800b136 <_realloc_r+0x24>
 800b12a:	f7fd fc19 	bl	8008960 <_free_r>
 800b12e:	4625      	mov	r5, r4
 800b130:	4628      	mov	r0, r5
 800b132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b136:	f000 f8c4 	bl	800b2c2 <_malloc_usable_size_r>
 800b13a:	4284      	cmp	r4, r0
 800b13c:	4606      	mov	r6, r0
 800b13e:	d802      	bhi.n	800b146 <_realloc_r+0x34>
 800b140:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b144:	d8f4      	bhi.n	800b130 <_realloc_r+0x1e>
 800b146:	4621      	mov	r1, r4
 800b148:	4638      	mov	r0, r7
 800b14a:	f7fd fc7d 	bl	8008a48 <_malloc_r>
 800b14e:	4680      	mov	r8, r0
 800b150:	b908      	cbnz	r0, 800b156 <_realloc_r+0x44>
 800b152:	4645      	mov	r5, r8
 800b154:	e7ec      	b.n	800b130 <_realloc_r+0x1e>
 800b156:	42b4      	cmp	r4, r6
 800b158:	4622      	mov	r2, r4
 800b15a:	4629      	mov	r1, r5
 800b15c:	bf28      	it	cs
 800b15e:	4632      	movcs	r2, r6
 800b160:	f7ff fc42 	bl	800a9e8 <memcpy>
 800b164:	4629      	mov	r1, r5
 800b166:	4638      	mov	r0, r7
 800b168:	f7fd fbfa 	bl	8008960 <_free_r>
 800b16c:	e7f1      	b.n	800b152 <_realloc_r+0x40>

0800b16e <__ascii_wctomb>:
 800b16e:	4603      	mov	r3, r0
 800b170:	4608      	mov	r0, r1
 800b172:	b141      	cbz	r1, 800b186 <__ascii_wctomb+0x18>
 800b174:	2aff      	cmp	r2, #255	@ 0xff
 800b176:	d904      	bls.n	800b182 <__ascii_wctomb+0x14>
 800b178:	228a      	movs	r2, #138	@ 0x8a
 800b17a:	601a      	str	r2, [r3, #0]
 800b17c:	f04f 30ff 	mov.w	r0, #4294967295
 800b180:	4770      	bx	lr
 800b182:	700a      	strb	r2, [r1, #0]
 800b184:	2001      	movs	r0, #1
 800b186:	4770      	bx	lr

0800b188 <fiprintf>:
 800b188:	b40e      	push	{r1, r2, r3}
 800b18a:	b503      	push	{r0, r1, lr}
 800b18c:	4601      	mov	r1, r0
 800b18e:	ab03      	add	r3, sp, #12
 800b190:	4805      	ldr	r0, [pc, #20]	@ (800b1a8 <fiprintf+0x20>)
 800b192:	f853 2b04 	ldr.w	r2, [r3], #4
 800b196:	6800      	ldr	r0, [r0, #0]
 800b198:	9301      	str	r3, [sp, #4]
 800b19a:	f7ff f991 	bl	800a4c0 <_vfiprintf_r>
 800b19e:	b002      	add	sp, #8
 800b1a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1a4:	b003      	add	sp, #12
 800b1a6:	4770      	bx	lr
 800b1a8:	2000003c 	.word	0x2000003c

0800b1ac <__swhatbuf_r>:
 800b1ac:	b570      	push	{r4, r5, r6, lr}
 800b1ae:	460c      	mov	r4, r1
 800b1b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1b4:	2900      	cmp	r1, #0
 800b1b6:	b096      	sub	sp, #88	@ 0x58
 800b1b8:	4615      	mov	r5, r2
 800b1ba:	461e      	mov	r6, r3
 800b1bc:	da0d      	bge.n	800b1da <__swhatbuf_r+0x2e>
 800b1be:	89a3      	ldrh	r3, [r4, #12]
 800b1c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b1c4:	f04f 0100 	mov.w	r1, #0
 800b1c8:	bf14      	ite	ne
 800b1ca:	2340      	movne	r3, #64	@ 0x40
 800b1cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b1d0:	2000      	movs	r0, #0
 800b1d2:	6031      	str	r1, [r6, #0]
 800b1d4:	602b      	str	r3, [r5, #0]
 800b1d6:	b016      	add	sp, #88	@ 0x58
 800b1d8:	bd70      	pop	{r4, r5, r6, pc}
 800b1da:	466a      	mov	r2, sp
 800b1dc:	f000 f848 	bl	800b270 <_fstat_r>
 800b1e0:	2800      	cmp	r0, #0
 800b1e2:	dbec      	blt.n	800b1be <__swhatbuf_r+0x12>
 800b1e4:	9901      	ldr	r1, [sp, #4]
 800b1e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b1ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b1ee:	4259      	negs	r1, r3
 800b1f0:	4159      	adcs	r1, r3
 800b1f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b1f6:	e7eb      	b.n	800b1d0 <__swhatbuf_r+0x24>

0800b1f8 <__smakebuf_r>:
 800b1f8:	898b      	ldrh	r3, [r1, #12]
 800b1fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1fc:	079d      	lsls	r5, r3, #30
 800b1fe:	4606      	mov	r6, r0
 800b200:	460c      	mov	r4, r1
 800b202:	d507      	bpl.n	800b214 <__smakebuf_r+0x1c>
 800b204:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b208:	6023      	str	r3, [r4, #0]
 800b20a:	6123      	str	r3, [r4, #16]
 800b20c:	2301      	movs	r3, #1
 800b20e:	6163      	str	r3, [r4, #20]
 800b210:	b003      	add	sp, #12
 800b212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b214:	ab01      	add	r3, sp, #4
 800b216:	466a      	mov	r2, sp
 800b218:	f7ff ffc8 	bl	800b1ac <__swhatbuf_r>
 800b21c:	9f00      	ldr	r7, [sp, #0]
 800b21e:	4605      	mov	r5, r0
 800b220:	4639      	mov	r1, r7
 800b222:	4630      	mov	r0, r6
 800b224:	f7fd fc10 	bl	8008a48 <_malloc_r>
 800b228:	b948      	cbnz	r0, 800b23e <__smakebuf_r+0x46>
 800b22a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b22e:	059a      	lsls	r2, r3, #22
 800b230:	d4ee      	bmi.n	800b210 <__smakebuf_r+0x18>
 800b232:	f023 0303 	bic.w	r3, r3, #3
 800b236:	f043 0302 	orr.w	r3, r3, #2
 800b23a:	81a3      	strh	r3, [r4, #12]
 800b23c:	e7e2      	b.n	800b204 <__smakebuf_r+0xc>
 800b23e:	89a3      	ldrh	r3, [r4, #12]
 800b240:	6020      	str	r0, [r4, #0]
 800b242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b246:	81a3      	strh	r3, [r4, #12]
 800b248:	9b01      	ldr	r3, [sp, #4]
 800b24a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b24e:	b15b      	cbz	r3, 800b268 <__smakebuf_r+0x70>
 800b250:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b254:	4630      	mov	r0, r6
 800b256:	f000 f81d 	bl	800b294 <_isatty_r>
 800b25a:	b128      	cbz	r0, 800b268 <__smakebuf_r+0x70>
 800b25c:	89a3      	ldrh	r3, [r4, #12]
 800b25e:	f023 0303 	bic.w	r3, r3, #3
 800b262:	f043 0301 	orr.w	r3, r3, #1
 800b266:	81a3      	strh	r3, [r4, #12]
 800b268:	89a3      	ldrh	r3, [r4, #12]
 800b26a:	431d      	orrs	r5, r3
 800b26c:	81a5      	strh	r5, [r4, #12]
 800b26e:	e7cf      	b.n	800b210 <__smakebuf_r+0x18>

0800b270 <_fstat_r>:
 800b270:	b538      	push	{r3, r4, r5, lr}
 800b272:	4d07      	ldr	r5, [pc, #28]	@ (800b290 <_fstat_r+0x20>)
 800b274:	2300      	movs	r3, #0
 800b276:	4604      	mov	r4, r0
 800b278:	4608      	mov	r0, r1
 800b27a:	4611      	mov	r1, r2
 800b27c:	602b      	str	r3, [r5, #0]
 800b27e:	f7f7 fa49 	bl	8002714 <_fstat>
 800b282:	1c43      	adds	r3, r0, #1
 800b284:	d102      	bne.n	800b28c <_fstat_r+0x1c>
 800b286:	682b      	ldr	r3, [r5, #0]
 800b288:	b103      	cbz	r3, 800b28c <_fstat_r+0x1c>
 800b28a:	6023      	str	r3, [r4, #0]
 800b28c:	bd38      	pop	{r3, r4, r5, pc}
 800b28e:	bf00      	nop
 800b290:	200006e8 	.word	0x200006e8

0800b294 <_isatty_r>:
 800b294:	b538      	push	{r3, r4, r5, lr}
 800b296:	4d06      	ldr	r5, [pc, #24]	@ (800b2b0 <_isatty_r+0x1c>)
 800b298:	2300      	movs	r3, #0
 800b29a:	4604      	mov	r4, r0
 800b29c:	4608      	mov	r0, r1
 800b29e:	602b      	str	r3, [r5, #0]
 800b2a0:	f7f7 fa48 	bl	8002734 <_isatty>
 800b2a4:	1c43      	adds	r3, r0, #1
 800b2a6:	d102      	bne.n	800b2ae <_isatty_r+0x1a>
 800b2a8:	682b      	ldr	r3, [r5, #0]
 800b2aa:	b103      	cbz	r3, 800b2ae <_isatty_r+0x1a>
 800b2ac:	6023      	str	r3, [r4, #0]
 800b2ae:	bd38      	pop	{r3, r4, r5, pc}
 800b2b0:	200006e8 	.word	0x200006e8

0800b2b4 <abort>:
 800b2b4:	b508      	push	{r3, lr}
 800b2b6:	2006      	movs	r0, #6
 800b2b8:	f000 f834 	bl	800b324 <raise>
 800b2bc:	2001      	movs	r0, #1
 800b2be:	f7f7 f9f5 	bl	80026ac <_exit>

0800b2c2 <_malloc_usable_size_r>:
 800b2c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2c6:	1f18      	subs	r0, r3, #4
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	bfbc      	itt	lt
 800b2cc:	580b      	ldrlt	r3, [r1, r0]
 800b2ce:	18c0      	addlt	r0, r0, r3
 800b2d0:	4770      	bx	lr

0800b2d2 <_raise_r>:
 800b2d2:	291f      	cmp	r1, #31
 800b2d4:	b538      	push	{r3, r4, r5, lr}
 800b2d6:	4605      	mov	r5, r0
 800b2d8:	460c      	mov	r4, r1
 800b2da:	d904      	bls.n	800b2e6 <_raise_r+0x14>
 800b2dc:	2316      	movs	r3, #22
 800b2de:	6003      	str	r3, [r0, #0]
 800b2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e4:	bd38      	pop	{r3, r4, r5, pc}
 800b2e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b2e8:	b112      	cbz	r2, 800b2f0 <_raise_r+0x1e>
 800b2ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b2ee:	b94b      	cbnz	r3, 800b304 <_raise_r+0x32>
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	f000 f831 	bl	800b358 <_getpid_r>
 800b2f6:	4622      	mov	r2, r4
 800b2f8:	4601      	mov	r1, r0
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b300:	f000 b818 	b.w	800b334 <_kill_r>
 800b304:	2b01      	cmp	r3, #1
 800b306:	d00a      	beq.n	800b31e <_raise_r+0x4c>
 800b308:	1c59      	adds	r1, r3, #1
 800b30a:	d103      	bne.n	800b314 <_raise_r+0x42>
 800b30c:	2316      	movs	r3, #22
 800b30e:	6003      	str	r3, [r0, #0]
 800b310:	2001      	movs	r0, #1
 800b312:	e7e7      	b.n	800b2e4 <_raise_r+0x12>
 800b314:	2100      	movs	r1, #0
 800b316:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b31a:	4620      	mov	r0, r4
 800b31c:	4798      	blx	r3
 800b31e:	2000      	movs	r0, #0
 800b320:	e7e0      	b.n	800b2e4 <_raise_r+0x12>
	...

0800b324 <raise>:
 800b324:	4b02      	ldr	r3, [pc, #8]	@ (800b330 <raise+0xc>)
 800b326:	4601      	mov	r1, r0
 800b328:	6818      	ldr	r0, [r3, #0]
 800b32a:	f7ff bfd2 	b.w	800b2d2 <_raise_r>
 800b32e:	bf00      	nop
 800b330:	2000003c 	.word	0x2000003c

0800b334 <_kill_r>:
 800b334:	b538      	push	{r3, r4, r5, lr}
 800b336:	4d07      	ldr	r5, [pc, #28]	@ (800b354 <_kill_r+0x20>)
 800b338:	2300      	movs	r3, #0
 800b33a:	4604      	mov	r4, r0
 800b33c:	4608      	mov	r0, r1
 800b33e:	4611      	mov	r1, r2
 800b340:	602b      	str	r3, [r5, #0]
 800b342:	f7f7 f9a3 	bl	800268c <_kill>
 800b346:	1c43      	adds	r3, r0, #1
 800b348:	d102      	bne.n	800b350 <_kill_r+0x1c>
 800b34a:	682b      	ldr	r3, [r5, #0]
 800b34c:	b103      	cbz	r3, 800b350 <_kill_r+0x1c>
 800b34e:	6023      	str	r3, [r4, #0]
 800b350:	bd38      	pop	{r3, r4, r5, pc}
 800b352:	bf00      	nop
 800b354:	200006e8 	.word	0x200006e8

0800b358 <_getpid_r>:
 800b358:	f7f7 b990 	b.w	800267c <_getpid>

0800b35c <_init>:
 800b35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b35e:	bf00      	nop
 800b360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b362:	bc08      	pop	{r3}
 800b364:	469e      	mov	lr, r3
 800b366:	4770      	bx	lr

0800b368 <_fini>:
 800b368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b36a:	bf00      	nop
 800b36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b36e:	bc08      	pop	{r3}
 800b370:	469e      	mov	lr, r3
 800b372:	4770      	bx	lr
