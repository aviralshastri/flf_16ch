
flf_16ch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a57c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0800a720  0800a720  0000b720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abfc  0800abfc  0000c1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800abfc  0800abfc  0000bbfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac04  0800ac04  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac04  0800ac04  0000bc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac08  0800ac08  0000bc08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800ac0c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  200001e0  0800adec  0000c1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005d4  0800adec  0000c5d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fcb4  00000000  00000000  0000c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f4  00000000  00000000  0001bec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  0001e2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc8  00000000  00000000  0001f1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018938  00000000  00000000  0001fd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011132  00000000  00000000  000386c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c643  00000000  00000000  000497f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5e35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005514  00000000  00000000  000e5e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  000eb38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a704 	.word	0x0800a704

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800a704 	.word	0x0800a704

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <setMuxChannel>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void setMuxChannel(uint8_t ch)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
    if(ch >= 16) return;
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	2b0f      	cmp	r3, #15
 800103e:	d806      	bhi.n	800104e <setMuxChannel+0x1e>
        0x04060403,  // ch=13: Reset others, Set S0+S2+S3
        0x04060007,  // ch=14: Reset others, Set S1+S2+S3
        0x04060407   // ch=15: Reset others, Set all
    };

    GPIOB->BSRR = bsrr_lut[ch];
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	4a06      	ldr	r2, [pc, #24]	@ (800105c <setMuxChannel+0x2c>)
 8001044:	4906      	ldr	r1, [pc, #24]	@ (8001060 <setMuxChannel+0x30>)
 8001046:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	e000      	b.n	8001050 <setMuxChannel+0x20>
    if(ch >= 16) return;
 800104e:	bf00      	nop
}
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40020400 	.word	0x40020400
 8001060:	0800a774 	.word	0x0800a774

08001064 <calculate_line_position>:

int16_t calculate_line_position(void) {
 8001064:	b480      	push	{r7}
 8001066:	b087      	sub	sp, #28
 8001068:	af00      	add	r7, sp, #0
    uint32_t weighted_sum = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
    uint32_t total_weight = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
    uint8_t sensors_on_line = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]

    volatile uint16_t *sensor_data = adc_buffer_ptrs[adc_buffer_read_ptr_index];
 8001076:	4b25      	ldr	r3, [pc, #148]	@ (800110c <calculate_line_position+0xa8>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	461a      	mov	r2, r3
 800107e:	4b24      	ldr	r3, [pc, #144]	@ (8001110 <calculate_line_position+0xac>)
 8001080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001084:	607b      	str	r3, [r7, #4]

    for(int i = 0; i < NUM_SENSORS; i++) {
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	e024      	b.n	80010d6 <calculate_line_position+0x72>
        if(sensor_data[i] < sensor_thresholds[i]) {
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	4413      	add	r3, r2
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	b29a      	uxth	r2, r3
 8001098:	491e      	ldr	r1, [pc, #120]	@ (8001114 <calculate_line_position+0xb0>)
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d214      	bcs.n	80010d0 <calculate_line_position+0x6c>
            weighted_sum += (uint32_t)(sensor_weights[i] * 1000);
 80010a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001118 <calculate_line_position+0xb4>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	4413      	add	r3, r2
 80010ac:	f993 3000 	ldrsb.w	r3, [r3]
 80010b0:	461a      	mov	r2, r3
 80010b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b6:	fb02 f303 	mul.w	r3, r2, r3
 80010ba:	461a      	mov	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	4413      	add	r3, r2
 80010c0:	617b      	str	r3, [r7, #20]
            total_weight += 1000;
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80010c8:	613b      	str	r3, [r7, #16]
            sensors_on_line++;
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	3301      	adds	r3, #1
 80010ce:	73fb      	strb	r3, [r7, #15]
    for(int i = 0; i < NUM_SENSORS; i++) {
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	3301      	adds	r3, #1
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	ddd7      	ble.n	800108c <calculate_line_position+0x28>
        }
    }

    if(sensors_on_line > 0) {
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d008      	beq.n	80010f4 <calculate_line_position+0x90>
        line_detected = 1;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <calculate_line_position+0xb8>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
        return (int16_t)(weighted_sum / total_weight);
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	e005      	b.n	8001100 <calculate_line_position+0x9c>
    } else {
        line_detected = 0;
 80010f4:	4b09      	ldr	r3, [pc, #36]	@ (800111c <calculate_line_position+0xb8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
        return current_position;
 80010fa:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <calculate_line_position+0xbc>)
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	b21b      	sxth	r3, r3
    }
}
 8001100:	4618      	mov	r0, r3
 8001102:	371c      	adds	r7, #28
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	20000008 	.word	0x20000008
 8001110:	20000000 	.word	0x20000000
 8001114:	2000045c 	.word	0x2000045c
 8001118:	0800a764 	.word	0x0800a764
 800111c:	20000416 	.word	0x20000416
 8001120:	20000414 	.word	0x20000414

08001124 <set_motor_speeds>:


void set_motor_speeds(int16_t speed1, int16_t speed2) {
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	460a      	mov	r2, r1
 800112e:	80fb      	strh	r3, [r7, #6]
 8001130:	4613      	mov	r3, r2
 8001132:	80bb      	strh	r3, [r7, #4]
    uint16_t pwm1, pwm2;

    if(speed1 >= 0) {
 8001134:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001138:	2b00      	cmp	r3, #0
 800113a:	db13      	blt.n	8001164 <set_motor_speeds+0x40>
        pwm1 = (uint16_t)MIN(speed1, 999);
 800113c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001140:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8001144:	4293      	cmp	r3, r2
 8001146:	dc01      	bgt.n	800114c <set_motor_speeds+0x28>
 8001148:	88fb      	ldrh	r3, [r7, #6]
 800114a:	e001      	b.n	8001150 <set_motor_speeds+0x2c>
 800114c:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001150:	81fb      	strh	r3, [r7, #14]
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm1);
 8001152:	4b27      	ldr	r3, [pc, #156]	@ (80011f0 <set_motor_speeds+0xcc>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	89fa      	ldrh	r2, [r7, #14]
 8001158:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800115a:	4b25      	ldr	r3, [pc, #148]	@ (80011f0 <set_motor_speeds+0xcc>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2200      	movs	r2, #0
 8001160:	639a      	str	r2, [r3, #56]	@ 0x38
 8001162:	e013      	b.n	800118c <set_motor_speeds+0x68>
    } else {
        pwm1 = (uint16_t)MIN(-speed1, 999);
 8001164:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001168:	4a22      	ldr	r2, [pc, #136]	@ (80011f4 <set_motor_speeds+0xd0>)
 800116a:	4293      	cmp	r3, r2
 800116c:	db03      	blt.n	8001176 <set_motor_speeds+0x52>
 800116e:	88fb      	ldrh	r3, [r7, #6]
 8001170:	425b      	negs	r3, r3
 8001172:	b29b      	uxth	r3, r3
 8001174:	e001      	b.n	800117a <set_motor_speeds+0x56>
 8001176:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800117a:	81fb      	strh	r3, [r7, #14]
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800117c:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <set_motor_speeds+0xcc>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2200      	movs	r2, #0
 8001182:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm1);
 8001184:	4b1a      	ldr	r3, [pc, #104]	@ (80011f0 <set_motor_speeds+0xcc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	89fa      	ldrh	r2, [r7, #14]
 800118a:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    if(speed2 >= 0) {
 800118c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	db13      	blt.n	80011bc <set_motor_speeds+0x98>
        pwm2 = (uint16_t)MIN(speed2, 999);
 8001194:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001198:	f240 32e6 	movw	r2, #998	@ 0x3e6
 800119c:	4293      	cmp	r3, r2
 800119e:	dc01      	bgt.n	80011a4 <set_motor_speeds+0x80>
 80011a0:	88bb      	ldrh	r3, [r7, #4]
 80011a2:	e001      	b.n	80011a8 <set_motor_speeds+0x84>
 80011a4:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80011a8:	81bb      	strh	r3, [r7, #12]
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm2);
 80011aa:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <set_motor_speeds+0xcc>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	89ba      	ldrh	r2, [r7, #12]
 80011b0:	63da      	str	r2, [r3, #60]	@ 0x3c
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80011b2:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <set_motor_speeds+0xcc>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2200      	movs	r2, #0
 80011b8:	641a      	str	r2, [r3, #64]	@ 0x40
    } else {
        pwm2 = (uint16_t)MIN(-speed2, 999);
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm2);
    }
}
 80011ba:	e013      	b.n	80011e4 <set_motor_speeds+0xc0>
        pwm2 = (uint16_t)MIN(-speed2, 999);
 80011bc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011c0:	4a0c      	ldr	r2, [pc, #48]	@ (80011f4 <set_motor_speeds+0xd0>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	db03      	blt.n	80011ce <set_motor_speeds+0xaa>
 80011c6:	88bb      	ldrh	r3, [r7, #4]
 80011c8:	425b      	negs	r3, r3
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	e001      	b.n	80011d2 <set_motor_speeds+0xae>
 80011ce:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80011d2:	81bb      	strh	r3, [r7, #12]
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <set_motor_speeds+0xcc>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2200      	movs	r2, #0
 80011da:	63da      	str	r2, [r3, #60]	@ 0x3c
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm2);
 80011dc:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <set_motor_speeds+0xcc>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	89ba      	ldrh	r2, [r7, #12]
 80011e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	200002a4 	.word	0x200002a4
 80011f4:	fffffc1a 	.word	0xfffffc1a

080011f8 <main_pid_loop>:

void main_pid_loop(void) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
	if (is_calibrating || !is_running){
 80011fe:	4b6b      	ldr	r3, [pc, #428]	@ (80013ac <main_pid_loop+0x1b4>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	d104      	bne.n	8001212 <main_pid_loop+0x1a>
 8001208:	4b69      	ldr	r3, [pc, #420]	@ (80013b0 <main_pid_loop+0x1b8>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d104      	bne.n	800121c <main_pid_loop+0x24>
		set_motor_speeds(0,0);
 8001212:	2100      	movs	r1, #0
 8001214:	2000      	movs	r0, #0
 8001216:	f7ff ff85 	bl	8001124 <set_motor_speeds>
		return;
 800121a:	e0c3      	b.n	80013a4 <main_pid_loop+0x1ac>
	}

	int16_t left_speed, right_speed;

    current_position = calculate_line_position();
 800121c:	f7ff ff22 	bl	8001064 <calculate_line_position>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	4b63      	ldr	r3, [pc, #396]	@ (80013b4 <main_pid_loop+0x1bc>)
 8001226:	801a      	strh	r2, [r3, #0]

    float error = (float)current_position;
 8001228:	4b62      	ldr	r3, [pc, #392]	@ (80013b4 <main_pid_loop+0x1bc>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	b21b      	sxth	r3, r3
 800122e:	ee07 3a90 	vmov	s15, r3
 8001232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001236:	edc7 7a04 	vstr	s15, [r7, #16]

    float proportional = KP * error;
 800123a:	edd7 7a04 	vldr	s15, [r7, #16]
 800123e:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80013b8 <main_pid_loop+0x1c0>
 8001242:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001246:	edc7 7a03 	vstr	s15, [r7, #12]

    integral += error * dt;
 800124a:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 80013bc <main_pid_loop+0x1c4>
 800124e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001252:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001256:	4b5a      	ldr	r3, [pc, #360]	@ (80013c0 <main_pid_loop+0x1c8>)
 8001258:	edd3 7a00 	vldr	s15, [r3]
 800125c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001260:	4b57      	ldr	r3, [pc, #348]	@ (80013c0 <main_pid_loop+0x1c8>)
 8001262:	edc3 7a00 	vstr	s15, [r3]

    if(integral > 1000.0f) integral = 1000.0f;
 8001266:	4b56      	ldr	r3, [pc, #344]	@ (80013c0 <main_pid_loop+0x1c8>)
 8001268:	edd3 7a00 	vldr	s15, [r3]
 800126c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80013c4 <main_pid_loop+0x1cc>
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd02      	ble.n	8001280 <main_pid_loop+0x88>
 800127a:	4b51      	ldr	r3, [pc, #324]	@ (80013c0 <main_pid_loop+0x1c8>)
 800127c:	4a52      	ldr	r2, [pc, #328]	@ (80013c8 <main_pid_loop+0x1d0>)
 800127e:	601a      	str	r2, [r3, #0]
    if(integral < -1000.0f) integral = -1000.0f;
 8001280:	4b4f      	ldr	r3, [pc, #316]	@ (80013c0 <main_pid_loop+0x1c8>)
 8001282:	edd3 7a00 	vldr	s15, [r3]
 8001286:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80013cc <main_pid_loop+0x1d4>
 800128a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800128e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001292:	d502      	bpl.n	800129a <main_pid_loop+0xa2>
 8001294:	4b4a      	ldr	r3, [pc, #296]	@ (80013c0 <main_pid_loop+0x1c8>)
 8001296:	4a4e      	ldr	r2, [pc, #312]	@ (80013d0 <main_pid_loop+0x1d8>)
 8001298:	601a      	str	r2, [r3, #0]
    float integral_term = KI * integral;
 800129a:	4b49      	ldr	r3, [pc, #292]	@ (80013c0 <main_pid_loop+0x1c8>)
 800129c:	edd3 7a00 	vldr	s15, [r3]
 80012a0:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80013d4 <main_pid_loop+0x1dc>
 80012a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a8:	edc7 7a02 	vstr	s15, [r7, #8]

    float derivative = KD * (error - last_error) / dt;
 80012ac:	4b4a      	ldr	r3, [pc, #296]	@ (80013d8 <main_pid_loop+0x1e0>)
 80012ae:	edd3 7a00 	vldr	s15, [r3]
 80012b2:	ed97 7a04 	vldr	s14, [r7, #16]
 80012b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ba:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80012be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012c2:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 80013bc <main_pid_loop+0x1c4>
 80012c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ca:	edc7 7a01 	vstr	s15, [r7, #4]
    last_error = error;
 80012ce:	4a42      	ldr	r2, [pc, #264]	@ (80013d8 <main_pid_loop+0x1e0>)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	6013      	str	r3, [r2, #0]

    float pid_output = proportional + integral_term + derivative;
 80012d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80012d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80012dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80012e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012e8:	edc7 7a00 	vstr	s15, [r7]


    if(!line_detected) {
 80012ec:	4b3b      	ldr	r3, [pc, #236]	@ (80013dc <main_pid_loop+0x1e4>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d114      	bne.n	8001320 <main_pid_loop+0x128>
    	integral = 0.0f;
 80012f6:	4b32      	ldr	r3, [pc, #200]	@ (80013c0 <main_pid_loop+0x1c8>)
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
        if(current_position > 0) {
 80012fe:	4b2d      	ldr	r3, [pc, #180]	@ (80013b4 <main_pid_loop+0x1bc>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	b21b      	sxth	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	dd05      	ble.n	8001314 <main_pid_loop+0x11c>
            left_speed = BASE_SPEED / 2;
 8001308:	23fa      	movs	r3, #250	@ 0xfa
 800130a:	82fb      	strh	r3, [r7, #22]
            right_speed = -BASE_SPEED / 2;
 800130c:	f64f 7306 	movw	r3, #65286	@ 0xff06
 8001310:	82bb      	strh	r3, [r7, #20]
 8001312:	e03f      	b.n	8001394 <main_pid_loop+0x19c>
        } else {
            left_speed = -BASE_SPEED / 2;
 8001314:	f64f 7306 	movw	r3, #65286	@ 0xff06
 8001318:	82fb      	strh	r3, [r7, #22]
            right_speed = BASE_SPEED / 2;
 800131a:	23fa      	movs	r3, #250	@ 0xfa
 800131c:	82bb      	strh	r3, [r7, #20]
 800131e:	e039      	b.n	8001394 <main_pid_loop+0x19c>
        }
    } else {
        left_speed = BASE_SPEED - (int16_t)pid_output;
 8001320:	edd7 7a00 	vldr	s15, [r7]
 8001324:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001328:	ee17 3a90 	vmov	r3, s15
 800132c:	b21b      	sxth	r3, r3
 800132e:	b29b      	uxth	r3, r3
 8001330:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8001334:	b29b      	uxth	r3, r3
 8001336:	82fb      	strh	r3, [r7, #22]
        right_speed = BASE_SPEED + (int16_t)pid_output;
 8001338:	edd7 7a00 	vldr	s15, [r7]
 800133c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001340:	ee17 3a90 	vmov	r3, s15
 8001344:	b21b      	sxth	r3, r3
 8001346:	b29b      	uxth	r3, r3
 8001348:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800134c:	b29b      	uxth	r3, r3
 800134e:	82bb      	strh	r3, [r7, #20]
        left_speed = MAX(MIN_SPEED, MIN(left_speed, MAX_SPEED));
 8001350:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001354:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001358:	db08      	blt.n	800136c <main_pid_loop+0x174>
 800135a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800135e:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001362:	bfa8      	it	ge
 8001364:	f44f 7348 	movge.w	r3, #800	@ 0x320
 8001368:	b21b      	sxth	r3, r3
 800136a:	e001      	b.n	8001370 <main_pid_loop+0x178>
 800136c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001370:	82fb      	strh	r3, [r7, #22]
        right_speed = MAX(MIN_SPEED, MIN(right_speed, MAX_SPEED));
 8001372:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001376:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800137a:	db08      	blt.n	800138e <main_pid_loop+0x196>
 800137c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001380:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001384:	bfa8      	it	ge
 8001386:	f44f 7348 	movge.w	r3, #800	@ 0x320
 800138a:	b21b      	sxth	r3, r3
 800138c:	e001      	b.n	8001392 <main_pid_loop+0x19a>
 800138e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001392:	82bb      	strh	r3, [r7, #20]
    }

    set_motor_speeds(left_speed, right_speed);
 8001394:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001398:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fec0 	bl	8001124 <set_motor_speeds>

}
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	2000047c 	.word	0x2000047c
 80013b0:	2000047d 	.word	0x2000047d
 80013b4:	20000414 	.word	0x20000414
 80013b8:	3f99999a 	.word	0x3f99999a
 80013bc:	3b03126f 	.word	0x3b03126f
 80013c0:	2000040c 	.word	0x2000040c
 80013c4:	447a0000 	.word	0x447a0000
 80013c8:	447a0000 	.word	0x447a0000
 80013cc:	c47a0000 	.word	0xc47a0000
 80013d0:	c47a0000 	.word	0xc47a0000
 80013d4:	3d4ccccd 	.word	0x3d4ccccd
 80013d8:	20000410 	.word	0x20000410
 80013dc:	20000416 	.word	0x20000416

080013e0 <send_ir_data>:

void send_ir_data(void){
 80013e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013e2:	b0dd      	sub	sp, #372	@ 0x174
 80013e4:	af10      	add	r7, sp, #64	@ 0x40
    char buffer[256];
    volatile uint16_t *sensor_data = adc_buffer_ptrs[adc_buffer_read_ptr_index];
 80013e6:	4b4d      	ldr	r3, [pc, #308]	@ (800151c <send_ir_data+0x13c>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001520 <send_ir_data+0x140>)
 80013f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    snprintf(buffer, sizeof(buffer),
             "%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n",
             sensor_data[0], sensor_data[1], sensor_data[2], sensor_data[3],
 80013f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	b29b      	uxth	r3, r3
    snprintf(buffer, sizeof(buffer),
 8001400:	469c      	mov	ip, r3
             sensor_data[0], sensor_data[1], sensor_data[2], sensor_data[3],
 8001402:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001406:	3302      	adds	r3, #2
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	b29b      	uxth	r3, r3
    snprintf(buffer, sizeof(buffer),
 800140c:	461c      	mov	r4, r3
             sensor_data[0], sensor_data[1], sensor_data[2], sensor_data[3],
 800140e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001412:	3304      	adds	r3, #4
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	b29b      	uxth	r3, r3
    snprintf(buffer, sizeof(buffer),
 8001418:	461d      	mov	r5, r3
             sensor_data[0], sensor_data[1], sensor_data[2], sensor_data[3],
 800141a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800141e:	3306      	adds	r3, #6
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	b29b      	uxth	r3, r3
    snprintf(buffer, sizeof(buffer),
 8001424:	461e      	mov	r6, r3
             sensor_data[4], sensor_data[5], sensor_data[6], sensor_data[7],
 8001426:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800142a:	3308      	adds	r3, #8
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	b29b      	uxth	r3, r3
    snprintf(buffer, sizeof(buffer),
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
             sensor_data[4], sensor_data[5], sensor_data[6], sensor_data[7],
 8001432:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001436:	330a      	adds	r3, #10
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	b29b      	uxth	r3, r3
    snprintf(buffer, sizeof(buffer),
 800143c:	623b      	str	r3, [r7, #32]
             sensor_data[4], sensor_data[5], sensor_data[6], sensor_data[7],
 800143e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001442:	330c      	adds	r3, #12
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	b29b      	uxth	r3, r3
    snprintf(buffer, sizeof(buffer),
 8001448:	61fb      	str	r3, [r7, #28]
             sensor_data[4], sensor_data[5], sensor_data[6], sensor_data[7],
 800144a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800144e:	330e      	adds	r3, #14
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	b29b      	uxth	r3, r3
    snprintf(buffer, sizeof(buffer),
 8001454:	61bb      	str	r3, [r7, #24]
             sensor_data[8], sensor_data[9], sensor_data[10], sensor_data[11],
 8001456:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800145a:	3310      	adds	r3, #16
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	b29b      	uxth	r3, r3
    snprintf(buffer, sizeof(buffer),
 8001460:	617b      	str	r3, [r7, #20]
             sensor_data[8], sensor_data[9], sensor_data[10], sensor_data[11],
 8001462:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001466:	3312      	adds	r3, #18
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	b29b      	uxth	r3, r3
    snprintf(buffer, sizeof(buffer),
 800146c:	613b      	str	r3, [r7, #16]
             sensor_data[8], sensor_data[9], sensor_data[10], sensor_data[11],
 800146e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001472:	3314      	adds	r3, #20
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	b29b      	uxth	r3, r3
    snprintf(buffer, sizeof(buffer),
 8001478:	60fb      	str	r3, [r7, #12]
             sensor_data[8], sensor_data[9], sensor_data[10], sensor_data[11],
 800147a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800147e:	3316      	adds	r3, #22
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	b29b      	uxth	r3, r3
    snprintf(buffer, sizeof(buffer),
 8001484:	60bb      	str	r3, [r7, #8]
             sensor_data[12], sensor_data[13], sensor_data[14], sensor_data[15]);
 8001486:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800148a:	3318      	adds	r3, #24
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	b29b      	uxth	r3, r3
    snprintf(buffer, sizeof(buffer),
 8001490:	607b      	str	r3, [r7, #4]
             sensor_data[12], sensor_data[13], sensor_data[14], sensor_data[15]);
 8001492:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001496:	331a      	adds	r3, #26
 8001498:	881b      	ldrh	r3, [r3, #0]
 800149a:	b29b      	uxth	r3, r3
    snprintf(buffer, sizeof(buffer),
 800149c:	4619      	mov	r1, r3
             sensor_data[12], sensor_data[13], sensor_data[14], sensor_data[15]);
 800149e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80014a2:	331c      	adds	r3, #28
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29b      	uxth	r3, r3
    snprintf(buffer, sizeof(buffer),
 80014a8:	461a      	mov	r2, r3
             sensor_data[12], sensor_data[13], sensor_data[14], sensor_data[15]);
 80014aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80014ae:	331e      	adds	r3, #30
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	b29b      	uxth	r3, r3
    snprintf(buffer, sizeof(buffer),
 80014b4:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80014b8:	930e      	str	r3, [sp, #56]	@ 0x38
 80014ba:	920d      	str	r2, [sp, #52]	@ 0x34
 80014bc:	910c      	str	r1, [sp, #48]	@ 0x30
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	920a      	str	r2, [sp, #40]	@ 0x28
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	9208      	str	r2, [sp, #32]
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	9207      	str	r2, [sp, #28]
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	9206      	str	r2, [sp, #24]
 80014d6:	69fa      	ldr	r2, [r7, #28]
 80014d8:	9205      	str	r2, [sp, #20]
 80014da:	6a3a      	ldr	r2, [r7, #32]
 80014dc:	9204      	str	r2, [sp, #16]
 80014de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e0:	9303      	str	r3, [sp, #12]
 80014e2:	9602      	str	r6, [sp, #8]
 80014e4:	9501      	str	r5, [sp, #4]
 80014e6:	9400      	str	r4, [sp, #0]
 80014e8:	4663      	mov	r3, ip
 80014ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001524 <send_ir_data+0x144>)
 80014ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014f0:	f005 fc92 	bl	8006e18 <sniprintf>

    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80014f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7fe fec1 	bl	8000280 <strlen>
 80014fe:	4603      	mov	r3, r0
 8001500:	b29a      	uxth	r2, r3
 8001502:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
 800150a:	4807      	ldr	r0, [pc, #28]	@ (8001528 <send_ir_data+0x148>)
 800150c:	f004 f9a2 	bl	8005854 <HAL_UART_Transmit>
}
 8001510:	bf00      	nop
 8001512:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8001516:	46bd      	mov	sp, r7
 8001518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800151a:	bf00      	nop
 800151c:	20000008 	.word	0x20000008
 8001520:	20000000 	.word	0x20000000
 8001524:	0800a720 	.word	0x0800a720
 8001528:	200003c4 	.word	0x200003c4

0800152c <calibrate>:

void calibrate(void){
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
	is_running=0;
 8001532:	4b40      	ldr	r3, [pc, #256]	@ (8001634 <calibrate+0x108>)
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
	if (!is_calibrating)
 8001538:	4b3f      	ldr	r3, [pc, #252]	@ (8001638 <calibrate+0x10c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d073      	beq.n	800162a <calibrate+0xfe>
		return;

	set_motor_speeds(600,-600);
 8001542:	493e      	ldr	r1, [pc, #248]	@ (800163c <calibrate+0x110>)
 8001544:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001548:	f7ff fdec 	bl	8001124 <set_motor_speeds>
	HAL_Delay(100);
 800154c:	2064      	movs	r0, #100	@ 0x64
 800154e:	f001 f93f 	bl	80027d0 <HAL_Delay>

	for (int i=0;i<NUM_SENSORS;i++){
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	e05d      	b.n	8001614 <calibrate+0xe8>
		uint16_t current_min=4095;
 8001558:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800155c:	817b      	strh	r3, [r7, #10]
		uint16_t current_max=0;
 800155e:	2300      	movs	r3, #0
 8001560:	813b      	strh	r3, [r7, #8]
		for (int j=0;j<CALIB_SAMPLES;j++){
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	e041      	b.n	80015ec <calibrate+0xc0>
			current_min=MIN(adc_buffer_ptrs[adc_buffer_read_ptr_index][i],current_min);
 8001568:	4b35      	ldr	r3, [pc, #212]	@ (8001640 <calibrate+0x114>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	461a      	mov	r2, r3
 8001570:	4b34      	ldr	r3, [pc, #208]	@ (8001644 <calibrate+0x118>)
 8001572:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4413      	add	r3, r2
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	b29b      	uxth	r3, r3
 8001580:	897a      	ldrh	r2, [r7, #10]
 8001582:	429a      	cmp	r2, r3
 8001584:	d90c      	bls.n	80015a0 <calibrate+0x74>
 8001586:	4b2e      	ldr	r3, [pc, #184]	@ (8001640 <calibrate+0x114>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	461a      	mov	r2, r3
 800158e:	4b2d      	ldr	r3, [pc, #180]	@ (8001644 <calibrate+0x118>)
 8001590:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4413      	add	r3, r2
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	b29b      	uxth	r3, r3
 800159e:	e000      	b.n	80015a2 <calibrate+0x76>
 80015a0:	897b      	ldrh	r3, [r7, #10]
 80015a2:	817b      	strh	r3, [r7, #10]
			current_max=MAX(adc_buffer_ptrs[adc_buffer_read_ptr_index][i],current_max);
 80015a4:	4b26      	ldr	r3, [pc, #152]	@ (8001640 <calibrate+0x114>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b25      	ldr	r3, [pc, #148]	@ (8001644 <calibrate+0x118>)
 80015ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	893a      	ldrh	r2, [r7, #8]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d20c      	bcs.n	80015dc <calibrate+0xb0>
 80015c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001640 <calibrate+0x114>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001644 <calibrate+0x118>)
 80015cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	e000      	b.n	80015de <calibrate+0xb2>
 80015dc:	893b      	ldrh	r3, [r7, #8]
 80015de:	813b      	strh	r3, [r7, #8]
			HAL_Delay(10);
 80015e0:	200a      	movs	r0, #10
 80015e2:	f001 f8f5 	bl	80027d0 <HAL_Delay>
		for (int j=0;j<CALIB_SAMPLES;j++){
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3301      	adds	r3, #1
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b31      	cmp	r3, #49	@ 0x31
 80015f0:	ddba      	ble.n	8001568 <calibrate+0x3c>
		}
		sensor_thresholds[i]=(current_min+current_max)/2;
 80015f2:	897a      	ldrh	r2, [r7, #10]
 80015f4:	893b      	ldrh	r3, [r7, #8]
 80015f6:	4413      	add	r3, r2
 80015f8:	0fda      	lsrs	r2, r3, #31
 80015fa:	4413      	add	r3, r2
 80015fc:	105b      	asrs	r3, r3, #1
 80015fe:	b299      	uxth	r1, r3
 8001600:	4a11      	ldr	r2, [pc, #68]	@ (8001648 <calibrate+0x11c>)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		HAL_Delay(20);
 8001608:	2014      	movs	r0, #20
 800160a:	f001 f8e1 	bl	80027d0 <HAL_Delay>
	for (int i=0;i<NUM_SENSORS;i++){
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	3301      	adds	r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2b0f      	cmp	r3, #15
 8001618:	dd9e      	ble.n	8001558 <calibrate+0x2c>
	}

	set_motor_speeds(0,0);
 800161a:	2100      	movs	r1, #0
 800161c:	2000      	movs	r0, #0
 800161e:	f7ff fd81 	bl	8001124 <set_motor_speeds>

	is_calibrating=0;
 8001622:	4b05      	ldr	r3, [pc, #20]	@ (8001638 <calibrate+0x10c>)
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
 8001628:	e000      	b.n	800162c <calibrate+0x100>
		return;
 800162a:	bf00      	nop
}
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2000047d 	.word	0x2000047d
 8001638:	2000047c 	.word	0x2000047c
 800163c:	fffffda8 	.word	0xfffffda8
 8001640:	20000008 	.word	0x20000008
 8001644:	20000000 	.word	0x20000000
 8001648:	2000045c 	.word	0x2000045c

0800164c <reset_pid_variables>:

void reset_pid_variables(void) {
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
    integral = 0.0f;
 8001650:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <reset_pid_variables+0x2c>)
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
    last_error = 0.0f;
 8001658:	4b08      	ldr	r3, [pc, #32]	@ (800167c <reset_pid_variables+0x30>)
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
    current_position = 0;
 8001660:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <reset_pid_variables+0x34>)
 8001662:	2200      	movs	r2, #0
 8001664:	801a      	strh	r2, [r3, #0]
    line_detected = 0;
 8001666:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <reset_pid_variables+0x38>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	2000040c 	.word	0x2000040c
 800167c:	20000410 	.word	0x20000410
 8001680:	20000414 	.word	0x20000414
 8001684:	20000416 	.word	0x20000416

08001688 <init_all_variables>:

void init_all_variables(void) {
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
    integral = 0.0f;
 800168e:	4b2a      	ldr	r3, [pc, #168]	@ (8001738 <init_all_variables+0xb0>)
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
    last_error = 0.0f;
 8001696:	4b29      	ldr	r3, [pc, #164]	@ (800173c <init_all_variables+0xb4>)
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
    current_position = 0;
 800169e:	4b28      	ldr	r3, [pc, #160]	@ (8001740 <init_all_variables+0xb8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	801a      	strh	r2, [r3, #0]
    line_detected = 0;
 80016a4:	4b27      	ldr	r3, [pc, #156]	@ (8001744 <init_all_variables+0xbc>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]

    is_calibrating = 0;
 80016aa:	4b27      	ldr	r3, [pc, #156]	@ (8001748 <init_all_variables+0xc0>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
    is_running = 0;
 80016b0:	4b26      	ldr	r3, [pc, #152]	@ (800174c <init_all_variables+0xc4>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]

    adc_buffer_write_ptr_index = 0;
 80016b6:	4b26      	ldr	r3, [pc, #152]	@ (8001750 <init_all_variables+0xc8>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
    adc_buffer_read_ptr_index = 1;
 80016bc:	4b25      	ldr	r3, [pc, #148]	@ (8001754 <init_all_variables+0xcc>)
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
    current_sensor_index = 0;
 80016c2:	4b25      	ldr	r3, [pc, #148]	@ (8001758 <init_all_variables+0xd0>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
    adc_dma_single_value = 0;
 80016c8:	4b24      	ldr	r3, [pc, #144]	@ (800175c <init_all_variables+0xd4>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	801a      	strh	r2, [r3, #0]

    for(int i = 0; i < 2; i++) {
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	e013      	b.n	80016fc <init_all_variables+0x74>
        for(int j = 0; j < NUM_SENSORS; j++) {
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	e00a      	b.n	80016f0 <init_all_variables+0x68>
            adc_buffers[i][j] = 0;
 80016da:	4921      	ldr	r1, [pc, #132]	@ (8001760 <init_all_variables+0xd8>)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	011a      	lsls	r2, r3, #4
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	4413      	add	r3, r2
 80016e4:	2200      	movs	r2, #0
 80016e6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for(int j = 0; j < NUM_SENSORS; j++) {
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	3301      	adds	r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2b0f      	cmp	r3, #15
 80016f4:	ddf1      	ble.n	80016da <init_all_variables+0x52>
    for(int i = 0; i < 2; i++) {
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	3301      	adds	r3, #1
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	dde8      	ble.n	80016d4 <init_all_variables+0x4c>
        }
    }

    for(int i = 0; i < NUM_SENSORS; i++) {
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	e008      	b.n	800171a <init_all_variables+0x92>
        sensor_thresholds[i] = 2500;
 8001708:	4a16      	ldr	r2, [pc, #88]	@ (8001764 <init_all_variables+0xdc>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8001710:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i = 0; i < NUM_SENSORS; i++) {
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3301      	adds	r3, #1
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	ddf3      	ble.n	8001708 <init_all_variables+0x80>
    }

    adc_buffer_ptrs[0] = adc_buffers[0];
 8001720:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <init_all_variables+0xe0>)
 8001722:	4a0f      	ldr	r2, [pc, #60]	@ (8001760 <init_all_variables+0xd8>)
 8001724:	601a      	str	r2, [r3, #0]
    adc_buffer_ptrs[1] = adc_buffers[1];
 8001726:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <init_all_variables+0xe0>)
 8001728:	4a10      	ldr	r2, [pc, #64]	@ (800176c <init_all_variables+0xe4>)
 800172a:	605a      	str	r2, [r3, #4]
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	2000040c 	.word	0x2000040c
 800173c:	20000410 	.word	0x20000410
 8001740:	20000414 	.word	0x20000414
 8001744:	20000416 	.word	0x20000416
 8001748:	2000047c 	.word	0x2000047c
 800174c:	2000047d 	.word	0x2000047d
 8001750:	20000458 	.word	0x20000458
 8001754:	20000008 	.word	0x20000008
 8001758:	20000459 	.word	0x20000459
 800175c:	2000045a 	.word	0x2000045a
 8001760:	20000418 	.word	0x20000418
 8001764:	2000045c 	.word	0x2000045c
 8001768:	20000000 	.word	0x20000000
 800176c:	20000438 	.word	0x20000438

08001770 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM3)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a09      	ldr	r2, [pc, #36]	@ (80017a4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d105      	bne.n	800178e <HAL_TIM_PeriodElapsedCallback+0x1e>
    {
        HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_dma_single_value, 1);
 8001782:	2201      	movs	r2, #1
 8001784:	4908      	ldr	r1, [pc, #32]	@ (80017a8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001786:	4809      	ldr	r0, [pc, #36]	@ (80017ac <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001788:	f001 f99a 	bl	8002ac0 <HAL_ADC_Start_DMA>
    }
    else if(htim->Instance == TIM4)
    {
    	main_pid_loop();
    }
}
 800178c:	e006      	b.n	800179c <HAL_TIM_PeriodElapsedCallback+0x2c>
    else if(htim->Instance == TIM4)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a07      	ldr	r2, [pc, #28]	@ (80017b0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d101      	bne.n	800179c <HAL_TIM_PeriodElapsedCallback+0x2c>
    	main_pid_loop();
 8001798:	f7ff fd2e 	bl	80011f8 <main_pid_loop>
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40000400 	.word	0x40000400
 80017a8:	2000045a 	.word	0x2000045a
 80017ac:	200001fc 	.word	0x200001fc
 80017b0:	40000800 	.word	0x40000800

080017b4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001838 <HAL_ADC_ConvCpltCallback+0x84>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d134      	bne.n	8001830 <HAL_ADC_ConvCpltCallback+0x7c>
    {
        adc_buffer_ptrs[adc_buffer_write_ptr_index][current_sensor_index] = adc_dma_single_value;
 80017c6:	4b1d      	ldr	r3, [pc, #116]	@ (800183c <HAL_ADC_ConvCpltCallback+0x88>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001840 <HAL_ADC_ConvCpltCallback+0x8c>)
 80017d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80017d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001844 <HAL_ADC_ConvCpltCallback+0x90>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4413      	add	r3, r2
 80017de:	4a1a      	ldr	r2, [pc, #104]	@ (8001848 <HAL_ADC_ConvCpltCallback+0x94>)
 80017e0:	8812      	ldrh	r2, [r2, #0]
 80017e2:	b292      	uxth	r2, r2
 80017e4:	801a      	strh	r2, [r3, #0]

        current_sensor_index++;
 80017e6:	4b17      	ldr	r3, [pc, #92]	@ (8001844 <HAL_ADC_ConvCpltCallback+0x90>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	3301      	adds	r3, #1
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	4b14      	ldr	r3, [pc, #80]	@ (8001844 <HAL_ADC_ConvCpltCallback+0x90>)
 80017f2:	701a      	strb	r2, [r3, #0]

        if(current_sensor_index >= NUM_SENSORS)
 80017f4:	4b13      	ldr	r3, [pc, #76]	@ (8001844 <HAL_ADC_ConvCpltCallback+0x90>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b0f      	cmp	r3, #15
 80017fc:	d912      	bls.n	8001824 <HAL_ADC_ConvCpltCallback+0x70>
        {

            current_sensor_index = 0;
 80017fe:	4b11      	ldr	r3, [pc, #68]	@ (8001844 <HAL_ADC_ConvCpltCallback+0x90>)
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]

            adc_buffer_write_ptr_index ^= 1;
 8001804:	4b0d      	ldr	r3, [pc, #52]	@ (800183c <HAL_ADC_ConvCpltCallback+0x88>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	f083 0301 	eor.w	r3, r3, #1
 800180e:	b2da      	uxtb	r2, r3
 8001810:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <HAL_ADC_ConvCpltCallback+0x88>)
 8001812:	701a      	strb	r2, [r3, #0]
            adc_buffer_read_ptr_index ^= 1;
 8001814:	4b0d      	ldr	r3, [pc, #52]	@ (800184c <HAL_ADC_ConvCpltCallback+0x98>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	f083 0301 	eor.w	r3, r3, #1
 800181e:	b2da      	uxtb	r2, r3
 8001820:	4b0a      	ldr	r3, [pc, #40]	@ (800184c <HAL_ADC_ConvCpltCallback+0x98>)
 8001822:	701a      	strb	r2, [r3, #0]
        }

        setMuxChannel(current_sensor_index);
 8001824:	4b07      	ldr	r3, [pc, #28]	@ (8001844 <HAL_ADC_ConvCpltCallback+0x90>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fc00 	bl	8001030 <setMuxChannel>
    }
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40012000 	.word	0x40012000
 800183c:	20000458 	.word	0x20000458
 8001840:	20000000 	.word	0x20000000
 8001844:	20000459 	.word	0x20000459
 8001848:	2000045a 	.word	0x2000045a
 800184c:	20000008 	.word	0x20000008

08001850 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	80fb      	strh	r3, [r7, #6]

    if(GPIO_Pin == BUTTON1_Pin)
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001860:	d110      	bne.n	8001884 <HAL_GPIO_EXTI_Callback+0x34>
    {
    	HAL_Delay(50);
 8001862:	2032      	movs	r0, #50	@ 0x32
 8001864:	f000 ffb4 	bl	80027d0 <HAL_Delay>
    	is_calibrating=0;
 8001868:	4b1f      	ldr	r3, [pc, #124]	@ (80018e8 <HAL_GPIO_EXTI_Callback+0x98>)
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_TogglePin(STBY_GPIO_Port, STBY_Pin);
 800186e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001872:	481e      	ldr	r0, [pc, #120]	@ (80018ec <HAL_GPIO_EXTI_Callback+0x9c>)
 8001874:	f002 fb0f 	bl	8003e96 <HAL_GPIO_TogglePin>
    	reset_pid_variables();
 8001878:	f7ff fee8 	bl	800164c <reset_pid_variables>
    	is_running=1;
 800187c:	4b1c      	ldr	r3, [pc, #112]	@ (80018f0 <HAL_GPIO_EXTI_Callback+0xa0>)
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
    else if(GPIO_Pin == BUTTON3_Pin)
    {
    	HAL_Delay(50);
    	send_ir_data();
    }
}
 8001882:	e02c      	b.n	80018de <HAL_GPIO_EXTI_Callback+0x8e>
    else if(GPIO_Pin == BUTTON2_Pin)
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800188a:	d11f      	bne.n	80018cc <HAL_GPIO_EXTI_Callback+0x7c>
    	HAL_Delay(50);
 800188c:	2032      	movs	r0, #50	@ 0x32
 800188e:	f000 ff9f 	bl	80027d0 <HAL_Delay>
    	set_motor_speeds(0,0);
 8001892:	2100      	movs	r1, #0
 8001894:	2000      	movs	r0, #0
 8001896:	f7ff fc45 	bl	8001124 <set_motor_speeds>
    	is_running=0;
 800189a:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <HAL_GPIO_EXTI_Callback+0xa0>)
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
    	is_calibrating=1;
 80018a0:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <HAL_GPIO_EXTI_Callback+0x98>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin,GPIO_PIN_SET);
 80018a6:	2201      	movs	r2, #1
 80018a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018ac:	480f      	ldr	r0, [pc, #60]	@ (80018ec <HAL_GPIO_EXTI_Callback+0x9c>)
 80018ae:	f002 fad9 	bl	8003e64 <HAL_GPIO_WritePin>
    	calibrate();
 80018b2:	f7ff fe3b 	bl	800152c <calibrate>
    	set_motor_speeds(0,0);
 80018b6:	2100      	movs	r1, #0
 80018b8:	2000      	movs	r0, #0
 80018ba:	f7ff fc33 	bl	8001124 <set_motor_speeds>
    	HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin,GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018c4:	4809      	ldr	r0, [pc, #36]	@ (80018ec <HAL_GPIO_EXTI_Callback+0x9c>)
 80018c6:	f002 facd 	bl	8003e64 <HAL_GPIO_WritePin>
}
 80018ca:	e008      	b.n	80018de <HAL_GPIO_EXTI_Callback+0x8e>
    else if(GPIO_Pin == BUTTON3_Pin)
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80018d2:	d104      	bne.n	80018de <HAL_GPIO_EXTI_Callback+0x8e>
    	HAL_Delay(50);
 80018d4:	2032      	movs	r0, #50	@ 0x32
 80018d6:	f000 ff7b 	bl	80027d0 <HAL_Delay>
    	send_ir_data();
 80018da:	f7ff fd81 	bl	80013e0 <send_ir_data>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	2000047c 	.word	0x2000047c
 80018ec:	40020000 	.word	0x40020000
 80018f0:	2000047d 	.word	0x2000047d

080018f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b0c0      	sub	sp, #256	@ 0x100
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	init_all_variables();
 80018fa:	f7ff fec5 	bl	8001688 <init_all_variables>
	setMuxChannel(0);
 80018fe:	2000      	movs	r0, #0
 8001900:	f7ff fb96 	bl	8001030 <setMuxChannel>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001904:	f000 fef2 	bl	80026ec <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001908:	f000 f84a 	bl	80019a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800190c:	f000 fb0c 	bl	8001f28 <MX_GPIO_Init>
  MX_DMA_Init();
 8001910:	f000 faea 	bl	8001ee8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001914:	f000 f8ac 	bl	8001a70 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001918:	f000 f8fc 	bl	8001b14 <MX_TIM1_Init>
  MX_TIM3_Init();
 800191c:	f000 f9be 	bl	8001c9c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001920:	f000 fab8 	bl	8001e94 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001924:	f000 fa06 	bl	8001d34 <MX_TIM4_Init>
  MX_TIM9_Init();
 8001928:	f000 fa52 	bl	8001dd0 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 800192c:	4817      	ldr	r0, [pc, #92]	@ (800198c <main+0x98>)
 800192e:	f002 ff8d 	bl	800484c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001932:	4817      	ldr	r0, [pc, #92]	@ (8001990 <main+0x9c>)
 8001934:	f002 ff8a 	bl	800484c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001938:	2100      	movs	r1, #0
 800193a:	4816      	ldr	r0, [pc, #88]	@ (8001994 <main+0xa0>)
 800193c:	f003 f842 	bl	80049c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001940:	2104      	movs	r1, #4
 8001942:	4814      	ldr	r0, [pc, #80]	@ (8001994 <main+0xa0>)
 8001944:	f003 f83e 	bl	80049c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001948:	2108      	movs	r1, #8
 800194a:	4812      	ldr	r0, [pc, #72]	@ (8001994 <main+0xa0>)
 800194c:	f003 f83a 	bl	80049c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001950:	210c      	movs	r1, #12
 8001952:	4810      	ldr	r0, [pc, #64]	@ (8001994 <main+0xa0>)
 8001954:	f003 f836 	bl	80049c4 <HAL_TIM_PWM_Start>

  HAL_Delay(5000);
 8001958:	f241 3088 	movw	r0, #5000	@ 0x1388
 800195c:	f000 ff38 	bl	80027d0 <HAL_Delay>

  char buffer1[256];
  snprintf(buffer1, sizeof(buffer1),"test_startup\r\n");
 8001960:	463b      	mov	r3, r7
 8001962:	4a0d      	ldr	r2, [pc, #52]	@ (8001998 <main+0xa4>)
 8001964:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001968:	4618      	mov	r0, r3
 800196a:	f005 fa55 	bl	8006e18 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)buffer1, strlen(buffer1), HAL_MAX_DELAY);
 800196e:	463b      	mov	r3, r7
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fc85 	bl	8000280 <strlen>
 8001976:	4603      	mov	r3, r0
 8001978:	b29a      	uxth	r2, r3
 800197a:	4639      	mov	r1, r7
 800197c:	f04f 33ff 	mov.w	r3, #4294967295
 8001980:	4806      	ldr	r0, [pc, #24]	@ (800199c <main+0xa8>)
 8001982:	f003 ff67 	bl	8005854 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001986:	bf00      	nop
 8001988:	e7fd      	b.n	8001986 <main+0x92>
 800198a:	bf00      	nop
 800198c:	200002ec 	.word	0x200002ec
 8001990:	20000334 	.word	0x20000334
 8001994:	200002a4 	.word	0x200002a4
 8001998:	0800a754 	.word	0x0800a754
 800199c:	200003c4 	.word	0x200003c4

080019a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b094      	sub	sp, #80	@ 0x50
 80019a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a6:	f107 0320 	add.w	r3, r7, #32
 80019aa:	2230      	movs	r2, #48	@ 0x30
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f005 facd 	bl	8006f4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b4:	f107 030c 	add.w	r3, r7, #12
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	4b27      	ldr	r3, [pc, #156]	@ (8001a68 <SystemClock_Config+0xc8>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019cc:	4a26      	ldr	r2, [pc, #152]	@ (8001a68 <SystemClock_Config+0xc8>)
 80019ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80019d4:	4b24      	ldr	r3, [pc, #144]	@ (8001a68 <SystemClock_Config+0xc8>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019e0:	2300      	movs	r3, #0
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	4b21      	ldr	r3, [pc, #132]	@ (8001a6c <SystemClock_Config+0xcc>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a20      	ldr	r2, [pc, #128]	@ (8001a6c <SystemClock_Config+0xcc>)
 80019ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a6c <SystemClock_Config+0xcc>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019fc:	2301      	movs	r3, #1
 80019fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a06:	2302      	movs	r3, #2
 8001a08:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a0a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001a10:	230c      	movs	r3, #12
 8001a12:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001a14:	2360      	movs	r3, #96	@ 0x60
 8001a16:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a1c:	2304      	movs	r3, #4
 8001a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a20:	f107 0320 	add.w	r3, r7, #32
 8001a24:	4618      	mov	r0, r3
 8001a26:	f002 fa69 	bl	8003efc <HAL_RCC_OscConfig>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a30:	f000 fb0a 	bl	8002048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a34:	230f      	movs	r3, #15
 8001a36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a4a:	f107 030c 	add.w	r3, r7, #12
 8001a4e:	2103      	movs	r1, #3
 8001a50:	4618      	mov	r0, r3
 8001a52:	f002 fccb 	bl	80043ec <HAL_RCC_ClockConfig>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a5c:	f000 faf4 	bl	8002048 <Error_Handler>
  }
}
 8001a60:	bf00      	nop
 8001a62:	3750      	adds	r7, #80	@ 0x50
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40007000 	.word	0x40007000

08001a70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a76:	463b      	mov	r3, r7
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a82:	4b21      	ldr	r3, [pc, #132]	@ (8001b08 <MX_ADC1_Init+0x98>)
 8001a84:	4a21      	ldr	r2, [pc, #132]	@ (8001b0c <MX_ADC1_Init+0x9c>)
 8001a86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a88:	4b1f      	ldr	r3, [pc, #124]	@ (8001b08 <MX_ADC1_Init+0x98>)
 8001a8a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a8e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a90:	4b1d      	ldr	r3, [pc, #116]	@ (8001b08 <MX_ADC1_Init+0x98>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a96:	4b1c      	ldr	r3, [pc, #112]	@ (8001b08 <MX_ADC1_Init+0x98>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b08 <MX_ADC1_Init+0x98>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001aa2:	4b19      	ldr	r3, [pc, #100]	@ (8001b08 <MX_ADC1_Init+0x98>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001aaa:	4b17      	ldr	r3, [pc, #92]	@ (8001b08 <MX_ADC1_Init+0x98>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ab0:	4b15      	ldr	r3, [pc, #84]	@ (8001b08 <MX_ADC1_Init+0x98>)
 8001ab2:	4a17      	ldr	r2, [pc, #92]	@ (8001b10 <MX_ADC1_Init+0xa0>)
 8001ab4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ab6:	4b14      	ldr	r3, [pc, #80]	@ (8001b08 <MX_ADC1_Init+0x98>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001abc:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <MX_ADC1_Init+0x98>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ac2:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <MX_ADC1_Init+0x98>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aca:	4b0f      	ldr	r3, [pc, #60]	@ (8001b08 <MX_ADC1_Init+0x98>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ad0:	480d      	ldr	r0, [pc, #52]	@ (8001b08 <MX_ADC1_Init+0x98>)
 8001ad2:	f000 fea1 	bl	8002818 <HAL_ADC_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001adc:	f000 fab4 	bl	8002048 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001ae0:	2307      	movs	r3, #7
 8001ae2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001ae8:	2304      	movs	r3, #4
 8001aea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aec:	463b      	mov	r3, r7
 8001aee:	4619      	mov	r1, r3
 8001af0:	4805      	ldr	r0, [pc, #20]	@ (8001b08 <MX_ADC1_Init+0x98>)
 8001af2:	f001 f8f7 	bl	8002ce4 <HAL_ADC_ConfigChannel>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001afc:	f000 faa4 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b00:	bf00      	nop
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	200001fc 	.word	0x200001fc
 8001b0c:	40012000 	.word	0x40012000
 8001b10:	0f000001 	.word	0x0f000001

08001b14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b096      	sub	sp, #88	@ 0x58
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b1a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]
 8001b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b28:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	611a      	str	r2, [r3, #16]
 8001b42:	615a      	str	r2, [r3, #20]
 8001b44:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	2220      	movs	r2, #32
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f005 f9fe 	bl	8006f4e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b52:	4b50      	ldr	r3, [pc, #320]	@ (8001c94 <MX_TIM1_Init+0x180>)
 8001b54:	4a50      	ldr	r2, [pc, #320]	@ (8001c98 <MX_TIM1_Init+0x184>)
 8001b56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8001b58:	4b4e      	ldr	r3, [pc, #312]	@ (8001c94 <MX_TIM1_Init+0x180>)
 8001b5a:	2263      	movs	r2, #99	@ 0x63
 8001b5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5e:	4b4d      	ldr	r3, [pc, #308]	@ (8001c94 <MX_TIM1_Init+0x180>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001b64:	4b4b      	ldr	r3, [pc, #300]	@ (8001c94 <MX_TIM1_Init+0x180>)
 8001b66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6c:	4b49      	ldr	r3, [pc, #292]	@ (8001c94 <MX_TIM1_Init+0x180>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b72:	4b48      	ldr	r3, [pc, #288]	@ (8001c94 <MX_TIM1_Init+0x180>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b78:	4b46      	ldr	r3, [pc, #280]	@ (8001c94 <MX_TIM1_Init+0x180>)
 8001b7a:	2280      	movs	r2, #128	@ 0x80
 8001b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b7e:	4845      	ldr	r0, [pc, #276]	@ (8001c94 <MX_TIM1_Init+0x180>)
 8001b80:	f002 fe14 	bl	80047ac <HAL_TIM_Base_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001b8a:	f000 fa5d 	bl	8002048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b92:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b94:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b98:	4619      	mov	r1, r3
 8001b9a:	483e      	ldr	r0, [pc, #248]	@ (8001c94 <MX_TIM1_Init+0x180>)
 8001b9c:	f003 f974 	bl	8004e88 <HAL_TIM_ConfigClockSource>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001ba6:	f000 fa4f 	bl	8002048 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001baa:	483a      	ldr	r0, [pc, #232]	@ (8001c94 <MX_TIM1_Init+0x180>)
 8001bac:	f002 feb0 	bl	8004910 <HAL_TIM_PWM_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001bb6:	f000 fa47 	bl	8002048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bc2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4832      	ldr	r0, [pc, #200]	@ (8001c94 <MX_TIM1_Init+0x180>)
 8001bca:	f003 fd1f 	bl	800560c <HAL_TIMEx_MasterConfigSynchronization>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001bd4:	f000 fa38 	bl	8002048 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bd8:	2360      	movs	r3, #96	@ 0x60
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001be4:	2300      	movs	r3, #0
 8001be6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bec:	2300      	movs	r3, #0
 8001bee:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4825      	ldr	r0, [pc, #148]	@ (8001c94 <MX_TIM1_Init+0x180>)
 8001bfe:	f003 f881 	bl	8004d04 <HAL_TIM_PWM_ConfigChannel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001c08:	f000 fa1e 	bl	8002048 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c10:	2204      	movs	r2, #4
 8001c12:	4619      	mov	r1, r3
 8001c14:	481f      	ldr	r0, [pc, #124]	@ (8001c94 <MX_TIM1_Init+0x180>)
 8001c16:	f003 f875 	bl	8004d04 <HAL_TIM_PWM_ConfigChannel>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001c20:	f000 fa12 	bl	8002048 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c28:	2208      	movs	r2, #8
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4819      	ldr	r0, [pc, #100]	@ (8001c94 <MX_TIM1_Init+0x180>)
 8001c2e:	f003 f869 	bl	8004d04 <HAL_TIM_PWM_ConfigChannel>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001c38:	f000 fa06 	bl	8002048 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c40:	220c      	movs	r2, #12
 8001c42:	4619      	mov	r1, r3
 8001c44:	4813      	ldr	r0, [pc, #76]	@ (8001c94 <MX_TIM1_Init+0x180>)
 8001c46:	f003 f85d 	bl	8004d04 <HAL_TIM_PWM_ConfigChannel>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001c50:	f000 f9fa 	bl	8002048 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c6c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	4619      	mov	r1, r3
 8001c76:	4807      	ldr	r0, [pc, #28]	@ (8001c94 <MX_TIM1_Init+0x180>)
 8001c78:	f003 fd36 	bl	80056e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001c82:	f000 f9e1 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c86:	4803      	ldr	r0, [pc, #12]	@ (8001c94 <MX_TIM1_Init+0x180>)
 8001c88:	f000 fafe 	bl	8002288 <HAL_TIM_MspPostInit>

}
 8001c8c:	bf00      	nop
 8001c8e:	3758      	adds	r7, #88	@ 0x58
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	200002a4 	.word	0x200002a4
 8001c98:	40010000 	.word	0x40010000

08001c9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ca2:	f107 0308 	add.w	r3, r7, #8
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	609a      	str	r2, [r3, #8]
 8001cae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d2c <MX_TIM3_Init+0x90>)
 8001cba:	4a1d      	ldr	r2, [pc, #116]	@ (8001d30 <MX_TIM3_Init+0x94>)
 8001cbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d2c <MX_TIM3_Init+0x90>)
 8001cc0:	2263      	movs	r2, #99	@ 0x63
 8001cc2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc4:	4b19      	ldr	r3, [pc, #100]	@ (8001d2c <MX_TIM3_Init+0x90>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001cca:	4b18      	ldr	r3, [pc, #96]	@ (8001d2c <MX_TIM3_Init+0x90>)
 8001ccc:	2263      	movs	r2, #99	@ 0x63
 8001cce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd0:	4b16      	ldr	r3, [pc, #88]	@ (8001d2c <MX_TIM3_Init+0x90>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <MX_TIM3_Init+0x90>)
 8001cd8:	2280      	movs	r2, #128	@ 0x80
 8001cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cdc:	4813      	ldr	r0, [pc, #76]	@ (8001d2c <MX_TIM3_Init+0x90>)
 8001cde:	f002 fd65 	bl	80047ac <HAL_TIM_Base_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001ce8:	f000 f9ae 	bl	8002048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cf0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cf2:	f107 0308 	add.w	r3, r7, #8
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	480c      	ldr	r0, [pc, #48]	@ (8001d2c <MX_TIM3_Init+0x90>)
 8001cfa:	f003 f8c5 	bl	8004e88 <HAL_TIM_ConfigClockSource>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001d04:	f000 f9a0 	bl	8002048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d10:	463b      	mov	r3, r7
 8001d12:	4619      	mov	r1, r3
 8001d14:	4805      	ldr	r0, [pc, #20]	@ (8001d2c <MX_TIM3_Init+0x90>)
 8001d16:	f003 fc79 	bl	800560c <HAL_TIMEx_MasterConfigSynchronization>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001d20:	f000 f992 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d24:	bf00      	nop
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	200002ec 	.word	0x200002ec
 8001d30:	40000400 	.word	0x40000400

08001d34 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d3a:	f107 0308 	add.w	r3, r7, #8
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d48:	463b      	mov	r3, r7
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d50:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc8 <MX_TIM4_Init+0x94>)
 8001d52:	4a1e      	ldr	r2, [pc, #120]	@ (8001dcc <MX_TIM4_Init+0x98>)
 8001d54:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8001d56:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc8 <MX_TIM4_Init+0x94>)
 8001d58:	2263      	movs	r2, #99	@ 0x63
 8001d5a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc8 <MX_TIM4_Init+0x94>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 8001d62:	4b19      	ldr	r3, [pc, #100]	@ (8001dc8 <MX_TIM4_Init+0x94>)
 8001d64:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001d68:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d6a:	4b17      	ldr	r3, [pc, #92]	@ (8001dc8 <MX_TIM4_Init+0x94>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d70:	4b15      	ldr	r3, [pc, #84]	@ (8001dc8 <MX_TIM4_Init+0x94>)
 8001d72:	2280      	movs	r2, #128	@ 0x80
 8001d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d76:	4814      	ldr	r0, [pc, #80]	@ (8001dc8 <MX_TIM4_Init+0x94>)
 8001d78:	f002 fd18 	bl	80047ac <HAL_TIM_Base_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001d82:	f000 f961 	bl	8002048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d8c:	f107 0308 	add.w	r3, r7, #8
 8001d90:	4619      	mov	r1, r3
 8001d92:	480d      	ldr	r0, [pc, #52]	@ (8001dc8 <MX_TIM4_Init+0x94>)
 8001d94:	f003 f878 	bl	8004e88 <HAL_TIM_ConfigClockSource>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001d9e:	f000 f953 	bl	8002048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001daa:	463b      	mov	r3, r7
 8001dac:	4619      	mov	r1, r3
 8001dae:	4806      	ldr	r0, [pc, #24]	@ (8001dc8 <MX_TIM4_Init+0x94>)
 8001db0:	f003 fc2c 	bl	800560c <HAL_TIMEx_MasterConfigSynchronization>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001dba:	f000 f945 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001dbe:	bf00      	nop
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000334 	.word	0x20000334
 8001dcc:	40000800 	.word	0x40000800

08001dd0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08c      	sub	sp, #48	@ 0x30
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dd6:	f107 0320 	add.w	r3, r7, #32
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	60da      	str	r2, [r3, #12]
 8001df0:	611a      	str	r2, [r3, #16]
 8001df2:	615a      	str	r2, [r3, #20]
 8001df4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001df6:	4b25      	ldr	r3, [pc, #148]	@ (8001e8c <MX_TIM9_Init+0xbc>)
 8001df8:	4a25      	ldr	r2, [pc, #148]	@ (8001e90 <MX_TIM9_Init+0xc0>)
 8001dfa:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 100-1;
 8001dfc:	4b23      	ldr	r3, [pc, #140]	@ (8001e8c <MX_TIM9_Init+0xbc>)
 8001dfe:	2263      	movs	r2, #99	@ 0x63
 8001e00:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e02:	4b22      	ldr	r3, [pc, #136]	@ (8001e8c <MX_TIM9_Init+0xbc>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000-1;
 8001e08:	4b20      	ldr	r3, [pc, #128]	@ (8001e8c <MX_TIM9_Init+0xbc>)
 8001e0a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001e0e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e10:	4b1e      	ldr	r3, [pc, #120]	@ (8001e8c <MX_TIM9_Init+0xbc>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e16:	4b1d      	ldr	r3, [pc, #116]	@ (8001e8c <MX_TIM9_Init+0xbc>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001e1c:	481b      	ldr	r0, [pc, #108]	@ (8001e8c <MX_TIM9_Init+0xbc>)
 8001e1e:	f002 fcc5 	bl	80047ac <HAL_TIM_Base_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001e28:	f000 f90e 	bl	8002048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e30:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001e32:	f107 0320 	add.w	r3, r7, #32
 8001e36:	4619      	mov	r1, r3
 8001e38:	4814      	ldr	r0, [pc, #80]	@ (8001e8c <MX_TIM9_Init+0xbc>)
 8001e3a:	f003 f825 	bl	8004e88 <HAL_TIM_ConfigClockSource>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001e44:	f000 f900 	bl	8002048 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001e48:	4810      	ldr	r0, [pc, #64]	@ (8001e8c <MX_TIM9_Init+0xbc>)
 8001e4a:	f002 fd61 	bl	8004910 <HAL_TIM_PWM_Init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001e54:	f000 f8f8 	bl	8002048 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e58:	2360      	movs	r3, #96	@ 0x60
 8001e5a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e68:	1d3b      	adds	r3, r7, #4
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4807      	ldr	r0, [pc, #28]	@ (8001e8c <MX_TIM9_Init+0xbc>)
 8001e70:	f002 ff48 	bl	8004d04 <HAL_TIM_PWM_ConfigChannel>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8001e7a:	f000 f8e5 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001e7e:	4803      	ldr	r0, [pc, #12]	@ (8001e8c <MX_TIM9_Init+0xbc>)
 8001e80:	f000 fa02 	bl	8002288 <HAL_TIM_MspPostInit>

}
 8001e84:	bf00      	nop
 8001e86:	3730      	adds	r7, #48	@ 0x30
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	2000037c 	.word	0x2000037c
 8001e90:	40014000 	.word	0x40014000

08001e94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e98:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <MX_USART1_UART_Init+0x4c>)
 8001e9a:	4a12      	ldr	r2, [pc, #72]	@ (8001ee4 <MX_USART1_UART_Init+0x50>)
 8001e9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ee0 <MX_USART1_UART_Init+0x4c>)
 8001ea0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ea4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <MX_USART1_UART_Init+0x4c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001eac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee0 <MX_USART1_UART_Init+0x4c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <MX_USART1_UART_Init+0x4c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001eb8:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <MX_USART1_UART_Init+0x4c>)
 8001eba:	220c      	movs	r2, #12
 8001ebc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ebe:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <MX_USART1_UART_Init+0x4c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <MX_USART1_UART_Init+0x4c>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eca:	4805      	ldr	r0, [pc, #20]	@ (8001ee0 <MX_USART1_UART_Init+0x4c>)
 8001ecc:	f003 fc72 	bl	80057b4 <HAL_UART_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ed6:	f000 f8b7 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200003c4 	.word	0x200003c4
 8001ee4:	40011000 	.word	0x40011000

08001ee8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f24 <MX_DMA_Init+0x3c>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	4a0b      	ldr	r2, [pc, #44]	@ (8001f24 <MX_DMA_Init+0x3c>)
 8001ef8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efe:	4b09      	ldr	r3, [pc, #36]	@ (8001f24 <MX_DMA_Init+0x3c>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	2038      	movs	r0, #56	@ 0x38
 8001f10:	f001 fa7d 	bl	800340e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f14:	2038      	movs	r0, #56	@ 0x38
 8001f16:	f001 fa96 	bl	8003446 <HAL_NVIC_EnableIRQ>

}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800

08001f28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	@ 0x28
 8001f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	60da      	str	r2, [r3, #12]
 8001f3c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	4b3d      	ldr	r3, [pc, #244]	@ (8002038 <MX_GPIO_Init+0x110>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	4a3c      	ldr	r2, [pc, #240]	@ (8002038 <MX_GPIO_Init+0x110>)
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f4e:	4b3a      	ldr	r3, [pc, #232]	@ (8002038 <MX_GPIO_Init+0x110>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	4b36      	ldr	r3, [pc, #216]	@ (8002038 <MX_GPIO_Init+0x110>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	4a35      	ldr	r2, [pc, #212]	@ (8002038 <MX_GPIO_Init+0x110>)
 8001f64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f6a:	4b33      	ldr	r3, [pc, #204]	@ (8002038 <MX_GPIO_Init+0x110>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	4b2f      	ldr	r3, [pc, #188]	@ (8002038 <MX_GPIO_Init+0x110>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	4a2e      	ldr	r2, [pc, #184]	@ (8002038 <MX_GPIO_Init+0x110>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f86:	4b2c      	ldr	r3, [pc, #176]	@ (8002038 <MX_GPIO_Init+0x110>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	4b28      	ldr	r3, [pc, #160]	@ (8002038 <MX_GPIO_Init+0x110>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	4a27      	ldr	r2, [pc, #156]	@ (8002038 <MX_GPIO_Init+0x110>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa2:	4b25      	ldr	r3, [pc, #148]	@ (8002038 <MX_GPIO_Init+0x110>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S3_Pin|S2_Pin|S1_Pin|S0_Pin, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f240 4107 	movw	r1, #1031	@ 0x407
 8001fb4:	4821      	ldr	r0, [pc, #132]	@ (800203c <MX_GPIO_Init+0x114>)
 8001fb6:	f001 ff55 	bl	8003e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001fc0:	481f      	ldr	r0, [pc, #124]	@ (8002040 <MX_GPIO_Init+0x118>)
 8001fc2:	f001 ff4f 	bl	8003e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8001fc6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001fca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fcc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd6:	f107 0314 	add.w	r3, r7, #20
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4819      	ldr	r0, [pc, #100]	@ (8002044 <MX_GPIO_Init+0x11c>)
 8001fde:	f001 fdbd 	bl	8003b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : S3_Pin S2_Pin S1_Pin S0_Pin */
  GPIO_InitStruct.Pin = S3_Pin|S2_Pin|S1_Pin|S0_Pin;
 8001fe2:	f240 4307 	movw	r3, #1031	@ 0x407
 8001fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4810      	ldr	r0, [pc, #64]	@ (800203c <MX_GPIO_Init+0x114>)
 8001ffc:	f001 fdae 	bl	8003b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : STBY_Pin */
  GPIO_InitStruct.Pin = STBY_Pin;
 8002000:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002006:	2301      	movs	r3, #1
 8002008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200e:	2300      	movs	r3, #0
 8002010:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STBY_GPIO_Port, &GPIO_InitStruct);
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	4619      	mov	r1, r3
 8002018:	4809      	ldr	r0, [pc, #36]	@ (8002040 <MX_GPIO_Init+0x118>)
 800201a:	f001 fd9f 	bl	8003b5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800201e:	2200      	movs	r2, #0
 8002020:	2100      	movs	r1, #0
 8002022:	2028      	movs	r0, #40	@ 0x28
 8002024:	f001 f9f3 	bl	800340e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002028:	2028      	movs	r0, #40	@ 0x28
 800202a:	f001 fa0c 	bl	8003446 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800202e:	bf00      	nop
 8002030:	3728      	adds	r7, #40	@ 0x28
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800
 800203c:	40020400 	.word	0x40020400
 8002040:	40020000 	.word	0x40020000
 8002044:	40020800 	.word	0x40020800

08002048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800204c:	b672      	cpsid	i
}
 800204e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002050:	bf00      	nop
 8002052:	e7fd      	b.n	8002050 <Error_Handler+0x8>

08002054 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	607b      	str	r3, [r7, #4]
 800205e:	4b10      	ldr	r3, [pc, #64]	@ (80020a0 <HAL_MspInit+0x4c>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002062:	4a0f      	ldr	r2, [pc, #60]	@ (80020a0 <HAL_MspInit+0x4c>)
 8002064:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002068:	6453      	str	r3, [r2, #68]	@ 0x44
 800206a:	4b0d      	ldr	r3, [pc, #52]	@ (80020a0 <HAL_MspInit+0x4c>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	603b      	str	r3, [r7, #0]
 800207a:	4b09      	ldr	r3, [pc, #36]	@ (80020a0 <HAL_MspInit+0x4c>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	4a08      	ldr	r2, [pc, #32]	@ (80020a0 <HAL_MspInit+0x4c>)
 8002080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002084:	6413      	str	r3, [r2, #64]	@ 0x40
 8002086:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <HAL_MspInit+0x4c>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800

080020a4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08a      	sub	sp, #40	@ 0x28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a33      	ldr	r2, [pc, #204]	@ (8002190 <HAL_ADC_MspInit+0xec>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d15f      	bne.n	8002186 <HAL_ADC_MspInit+0xe2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	4b32      	ldr	r3, [pc, #200]	@ (8002194 <HAL_ADC_MspInit+0xf0>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ce:	4a31      	ldr	r2, [pc, #196]	@ (8002194 <HAL_ADC_MspInit+0xf0>)
 80020d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002194 <HAL_ADC_MspInit+0xf0>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002194 <HAL_ADC_MspInit+0xf0>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	4a2a      	ldr	r2, [pc, #168]	@ (8002194 <HAL_ADC_MspInit+0xf0>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f2:	4b28      	ldr	r3, [pc, #160]	@ (8002194 <HAL_ADC_MspInit+0xf0>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = OUT_Pin;
 80020fe:	2380      	movs	r3, #128	@ 0x80
 8002100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002102:	2303      	movs	r3, #3
 8002104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OUT_GPIO_Port, &GPIO_InitStruct);
 800210a:	f107 0314 	add.w	r3, r7, #20
 800210e:	4619      	mov	r1, r3
 8002110:	4821      	ldr	r0, [pc, #132]	@ (8002198 <HAL_ADC_MspInit+0xf4>)
 8002112:	f001 fd23 	bl	8003b5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002116:	4b21      	ldr	r3, [pc, #132]	@ (800219c <HAL_ADC_MspInit+0xf8>)
 8002118:	4a21      	ldr	r2, [pc, #132]	@ (80021a0 <HAL_ADC_MspInit+0xfc>)
 800211a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800211c:	4b1f      	ldr	r3, [pc, #124]	@ (800219c <HAL_ADC_MspInit+0xf8>)
 800211e:	2200      	movs	r2, #0
 8002120:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002122:	4b1e      	ldr	r3, [pc, #120]	@ (800219c <HAL_ADC_MspInit+0xf8>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002128:	4b1c      	ldr	r3, [pc, #112]	@ (800219c <HAL_ADC_MspInit+0xf8>)
 800212a:	2200      	movs	r2, #0
 800212c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800212e:	4b1b      	ldr	r3, [pc, #108]	@ (800219c <HAL_ADC_MspInit+0xf8>)
 8002130:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002134:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002136:	4b19      	ldr	r3, [pc, #100]	@ (800219c <HAL_ADC_MspInit+0xf8>)
 8002138:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800213c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800213e:	4b17      	ldr	r3, [pc, #92]	@ (800219c <HAL_ADC_MspInit+0xf8>)
 8002140:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002144:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002146:	4b15      	ldr	r3, [pc, #84]	@ (800219c <HAL_ADC_MspInit+0xf8>)
 8002148:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800214c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800214e:	4b13      	ldr	r3, [pc, #76]	@ (800219c <HAL_ADC_MspInit+0xf8>)
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002154:	4b11      	ldr	r3, [pc, #68]	@ (800219c <HAL_ADC_MspInit+0xf8>)
 8002156:	2200      	movs	r2, #0
 8002158:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800215a:	4810      	ldr	r0, [pc, #64]	@ (800219c <HAL_ADC_MspInit+0xf8>)
 800215c:	f001 f98e 	bl	800347c <HAL_DMA_Init>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002166:	f7ff ff6f 	bl	8002048 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a0b      	ldr	r2, [pc, #44]	@ (800219c <HAL_ADC_MspInit+0xf8>)
 800216e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002170:	4a0a      	ldr	r2, [pc, #40]	@ (800219c <HAL_ADC_MspInit+0xf8>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002176:	2200      	movs	r2, #0
 8002178:	2100      	movs	r1, #0
 800217a:	2012      	movs	r0, #18
 800217c:	f001 f947 	bl	800340e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002180:	2012      	movs	r0, #18
 8002182:	f001 f960 	bl	8003446 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002186:	bf00      	nop
 8002188:	3728      	adds	r7, #40	@ 0x28
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40012000 	.word	0x40012000
 8002194:	40023800 	.word	0x40023800
 8002198:	40020000 	.word	0x40020000
 800219c:	20000244 	.word	0x20000244
 80021a0:	40026410 	.word	0x40026410

080021a4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a30      	ldr	r2, [pc, #192]	@ (8002274 <HAL_TIM_Base_MspInit+0xd0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d10e      	bne.n	80021d4 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002278 <HAL_TIM_Base_MspInit+0xd4>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021be:	4a2e      	ldr	r2, [pc, #184]	@ (8002278 <HAL_TIM_Base_MspInit+0xd4>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002278 <HAL_TIM_Base_MspInit+0xd4>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM9_MspInit 1 */

    /* USER CODE END TIM9_MspInit 1 */
  }

}
 80021d2:	e04a      	b.n	800226a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a28      	ldr	r2, [pc, #160]	@ (800227c <HAL_TIM_Base_MspInit+0xd8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d116      	bne.n	800220c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	4b25      	ldr	r3, [pc, #148]	@ (8002278 <HAL_TIM_Base_MspInit+0xd4>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	4a24      	ldr	r2, [pc, #144]	@ (8002278 <HAL_TIM_Base_MspInit+0xd4>)
 80021e8:	f043 0302 	orr.w	r3, r3, #2
 80021ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ee:	4b22      	ldr	r3, [pc, #136]	@ (8002278 <HAL_TIM_Base_MspInit+0xd4>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2100      	movs	r1, #0
 80021fe:	201d      	movs	r0, #29
 8002200:	f001 f905 	bl	800340e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002204:	201d      	movs	r0, #29
 8002206:	f001 f91e 	bl	8003446 <HAL_NVIC_EnableIRQ>
}
 800220a:	e02e      	b.n	800226a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a1b      	ldr	r2, [pc, #108]	@ (8002280 <HAL_TIM_Base_MspInit+0xdc>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d116      	bne.n	8002244 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	4b17      	ldr	r3, [pc, #92]	@ (8002278 <HAL_TIM_Base_MspInit+0xd4>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221e:	4a16      	ldr	r2, [pc, #88]	@ (8002278 <HAL_TIM_Base_MspInit+0xd4>)
 8002220:	f043 0304 	orr.w	r3, r3, #4
 8002224:	6413      	str	r3, [r2, #64]	@ 0x40
 8002226:	4b14      	ldr	r3, [pc, #80]	@ (8002278 <HAL_TIM_Base_MspInit+0xd4>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002232:	2200      	movs	r2, #0
 8002234:	2100      	movs	r1, #0
 8002236:	201e      	movs	r0, #30
 8002238:	f001 f8e9 	bl	800340e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800223c:	201e      	movs	r0, #30
 800223e:	f001 f902 	bl	8003446 <HAL_NVIC_EnableIRQ>
}
 8002242:	e012      	b.n	800226a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM9)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0e      	ldr	r2, [pc, #56]	@ (8002284 <HAL_TIM_Base_MspInit+0xe0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d10d      	bne.n	800226a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <HAL_TIM_Base_MspInit+0xd4>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002256:	4a08      	ldr	r2, [pc, #32]	@ (8002278 <HAL_TIM_Base_MspInit+0xd4>)
 8002258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800225c:	6453      	str	r3, [r2, #68]	@ 0x44
 800225e:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <HAL_TIM_Base_MspInit+0xd4>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002262:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	68bb      	ldr	r3, [r7, #8]
}
 800226a:	bf00      	nop
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40010000 	.word	0x40010000
 8002278:	40023800 	.word	0x40023800
 800227c:	40000400 	.word	0x40000400
 8002280:	40000800 	.word	0x40000800
 8002284:	40014000 	.word	0x40014000

08002288 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	@ 0x28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a24      	ldr	r2, [pc, #144]	@ (8002338 <HAL_TIM_MspPostInit+0xb0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d11f      	bne.n	80022ea <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	4b23      	ldr	r3, [pc, #140]	@ (800233c <HAL_TIM_MspPostInit+0xb4>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b2:	4a22      	ldr	r2, [pc, #136]	@ (800233c <HAL_TIM_MspPostInit+0xb4>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ba:	4b20      	ldr	r3, [pc, #128]	@ (800233c <HAL_TIM_MspPostInit+0xb4>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = INA1_Pin|INA2_Pin|INB1_Pin|INB2_Pin;
 80022c6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80022ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022cc:	2302      	movs	r3, #2
 80022ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d4:	2300      	movs	r3, #0
 80022d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022d8:	2301      	movs	r3, #1
 80022da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	4619      	mov	r1, r3
 80022e2:	4817      	ldr	r0, [pc, #92]	@ (8002340 <HAL_TIM_MspPostInit+0xb8>)
 80022e4:	f001 fc3a 	bl	8003b5c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM9_MspPostInit 1 */

    /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80022e8:	e022      	b.n	8002330 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a15      	ldr	r2, [pc, #84]	@ (8002344 <HAL_TIM_MspPostInit+0xbc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d11d      	bne.n	8002330 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	4b10      	ldr	r3, [pc, #64]	@ (800233c <HAL_TIM_MspPostInit+0xb4>)
 80022fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fc:	4a0f      	ldr	r2, [pc, #60]	@ (800233c <HAL_TIM_MspPostInit+0xb4>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	6313      	str	r3, [r2, #48]	@ 0x30
 8002304:	4b0d      	ldr	r3, [pc, #52]	@ (800233c <HAL_TIM_MspPostInit+0xb4>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ESC_Pin;
 8002310:	2304      	movs	r3, #4
 8002312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002314:	2302      	movs	r3, #2
 8002316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231c:	2300      	movs	r3, #0
 800231e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002320:	2303      	movs	r3, #3
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ESC_GPIO_Port, &GPIO_InitStruct);
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	4619      	mov	r1, r3
 800232a:	4805      	ldr	r0, [pc, #20]	@ (8002340 <HAL_TIM_MspPostInit+0xb8>)
 800232c:	f001 fc16 	bl	8003b5c <HAL_GPIO_Init>
}
 8002330:	bf00      	nop
 8002332:	3728      	adds	r7, #40	@ 0x28
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40010000 	.word	0x40010000
 800233c:	40023800 	.word	0x40023800
 8002340:	40020000 	.word	0x40020000
 8002344:	40014000 	.word	0x40014000

08002348 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	@ 0x28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a28      	ldr	r2, [pc, #160]	@ (8002408 <HAL_UART_MspInit+0xc0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d14a      	bne.n	8002400 <HAL_UART_MspInit+0xb8>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	4b27      	ldr	r3, [pc, #156]	@ (800240c <HAL_UART_MspInit+0xc4>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002372:	4a26      	ldr	r2, [pc, #152]	@ (800240c <HAL_UART_MspInit+0xc4>)
 8002374:	f043 0310 	orr.w	r3, r3, #16
 8002378:	6453      	str	r3, [r2, #68]	@ 0x44
 800237a:	4b24      	ldr	r3, [pc, #144]	@ (800240c <HAL_UART_MspInit+0xc4>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	4b20      	ldr	r3, [pc, #128]	@ (800240c <HAL_UART_MspInit+0xc4>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	4a1f      	ldr	r2, [pc, #124]	@ (800240c <HAL_UART_MspInit+0xc4>)
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	6313      	str	r3, [r2, #48]	@ 0x30
 8002396:	4b1d      	ldr	r3, [pc, #116]	@ (800240c <HAL_UART_MspInit+0xc4>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	4b19      	ldr	r3, [pc, #100]	@ (800240c <HAL_UART_MspInit+0xc4>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	4a18      	ldr	r2, [pc, #96]	@ (800240c <HAL_UART_MspInit+0xc4>)
 80023ac:	f043 0302 	orr.w	r3, r3, #2
 80023b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023b2:	4b16      	ldr	r3, [pc, #88]	@ (800240c <HAL_UART_MspInit+0xc4>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c4:	2302      	movs	r3, #2
 80023c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023cc:	2303      	movs	r3, #3
 80023ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023d0:	2307      	movs	r3, #7
 80023d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	4619      	mov	r1, r3
 80023da:	480d      	ldr	r0, [pc, #52]	@ (8002410 <HAL_UART_MspInit+0xc8>)
 80023dc:	f001 fbbe 	bl	8003b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80023e0:	2380      	movs	r3, #128	@ 0x80
 80023e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ec:	2303      	movs	r3, #3
 80023ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023f0:	2307      	movs	r3, #7
 80023f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	4619      	mov	r1, r3
 80023fa:	4806      	ldr	r0, [pc, #24]	@ (8002414 <HAL_UART_MspInit+0xcc>)
 80023fc:	f001 fbae 	bl	8003b5c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002400:	bf00      	nop
 8002402:	3728      	adds	r7, #40	@ 0x28
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40011000 	.word	0x40011000
 800240c:	40023800 	.word	0x40023800
 8002410:	40020000 	.word	0x40020000
 8002414:	40020400 	.word	0x40020400

08002418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800241c:	bf00      	nop
 800241e:	e7fd      	b.n	800241c <NMI_Handler+0x4>

08002420 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002424:	bf00      	nop
 8002426:	e7fd      	b.n	8002424 <HardFault_Handler+0x4>

08002428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800242c:	bf00      	nop
 800242e:	e7fd      	b.n	800242c <MemManage_Handler+0x4>

08002430 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002434:	bf00      	nop
 8002436:	e7fd      	b.n	8002434 <BusFault_Handler+0x4>

08002438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800243c:	bf00      	nop
 800243e:	e7fd      	b.n	800243c <UsageFault_Handler+0x4>

08002440 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800246e:	f000 f98f 	bl	8002790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800247c:	4802      	ldr	r0, [pc, #8]	@ (8002488 <ADC_IRQHandler+0x10>)
 800247e:	f000 fa0e 	bl	800289e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	200001fc 	.word	0x200001fc

0800248c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002490:	4802      	ldr	r0, [pc, #8]	@ (800249c <TIM3_IRQHandler+0x10>)
 8002492:	f002 fb47 	bl	8004b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	200002ec 	.word	0x200002ec

080024a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80024a4:	4802      	ldr	r0, [pc, #8]	@ (80024b0 <TIM4_IRQHandler+0x10>)
 80024a6:	f002 fb3d 	bl	8004b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000334 	.word	0x20000334

080024b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 80024b8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80024bc:	f001 fd06 	bl	8003ecc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 80024c0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80024c4:	f001 fd02 	bl	8003ecc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 80024c8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80024cc:	f001 fcfe 	bl	8003ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024d8:	4802      	ldr	r0, [pc, #8]	@ (80024e4 <DMA2_Stream0_IRQHandler+0x10>)
 80024da:	f001 f8d5 	bl	8003688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000244 	.word	0x20000244

080024e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  return 1;
 80024ec:	2301      	movs	r3, #1
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <_kill>:

int _kill(int pid, int sig)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002502:	f004 fd77 	bl	8006ff4 <__errno>
 8002506:	4603      	mov	r3, r0
 8002508:	2216      	movs	r2, #22
 800250a:	601a      	str	r2, [r3, #0]
  return -1;
 800250c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002510:	4618      	mov	r0, r3
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <_exit>:

void _exit (int status)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002520:	f04f 31ff 	mov.w	r1, #4294967295
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ffe7 	bl	80024f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800252a:	bf00      	nop
 800252c:	e7fd      	b.n	800252a <_exit+0x12>

0800252e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b086      	sub	sp, #24
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	e00a      	b.n	8002556 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002540:	f3af 8000 	nop.w
 8002544:	4601      	mov	r1, r0
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	60ba      	str	r2, [r7, #8]
 800254c:	b2ca      	uxtb	r2, r1
 800254e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	3301      	adds	r3, #1
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	429a      	cmp	r2, r3
 800255c:	dbf0      	blt.n	8002540 <_read+0x12>
  }

  return len;
 800255e:	687b      	ldr	r3, [r7, #4]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	e009      	b.n	800258e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	60ba      	str	r2, [r7, #8]
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	3301      	adds	r3, #1
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	429a      	cmp	r2, r3
 8002594:	dbf1      	blt.n	800257a <_write+0x12>
  }
  return len;
 8002596:	687b      	ldr	r3, [r7, #4]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <_close>:

int _close(int file)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025c8:	605a      	str	r2, [r3, #4]
  return 0;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <_isatty>:

int _isatty(int file)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025e0:	2301      	movs	r3, #1
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b085      	sub	sp, #20
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002610:	4a14      	ldr	r2, [pc, #80]	@ (8002664 <_sbrk+0x5c>)
 8002612:	4b15      	ldr	r3, [pc, #84]	@ (8002668 <_sbrk+0x60>)
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800261c:	4b13      	ldr	r3, [pc, #76]	@ (800266c <_sbrk+0x64>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d102      	bne.n	800262a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002624:	4b11      	ldr	r3, [pc, #68]	@ (800266c <_sbrk+0x64>)
 8002626:	4a12      	ldr	r2, [pc, #72]	@ (8002670 <_sbrk+0x68>)
 8002628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800262a:	4b10      	ldr	r3, [pc, #64]	@ (800266c <_sbrk+0x64>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4413      	add	r3, r2
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	429a      	cmp	r2, r3
 8002636:	d207      	bcs.n	8002648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002638:	f004 fcdc 	bl	8006ff4 <__errno>
 800263c:	4603      	mov	r3, r0
 800263e:	220c      	movs	r2, #12
 8002640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002642:	f04f 33ff 	mov.w	r3, #4294967295
 8002646:	e009      	b.n	800265c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002648:	4b08      	ldr	r3, [pc, #32]	@ (800266c <_sbrk+0x64>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800264e:	4b07      	ldr	r3, [pc, #28]	@ (800266c <_sbrk+0x64>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	4a05      	ldr	r2, [pc, #20]	@ (800266c <_sbrk+0x64>)
 8002658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800265a:	68fb      	ldr	r3, [r7, #12]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20020000 	.word	0x20020000
 8002668:	00000400 	.word	0x00000400
 800266c:	20000480 	.word	0x20000480
 8002670:	200005d8 	.word	0x200005d8

08002674 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002678:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <SystemInit+0x20>)
 800267a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800267e:	4a05      	ldr	r2, [pc, #20]	@ (8002694 <SystemInit+0x20>)
 8002680:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002684:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002698:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800269c:	f7ff ffea 	bl	8002674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026a0:	480c      	ldr	r0, [pc, #48]	@ (80026d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026a2:	490d      	ldr	r1, [pc, #52]	@ (80026d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026a4:	4a0d      	ldr	r2, [pc, #52]	@ (80026dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026a8:	e002      	b.n	80026b0 <LoopCopyDataInit>

080026aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ae:	3304      	adds	r3, #4

080026b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026b4:	d3f9      	bcc.n	80026aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026b6:	4a0a      	ldr	r2, [pc, #40]	@ (80026e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026b8:	4c0a      	ldr	r4, [pc, #40]	@ (80026e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026bc:	e001      	b.n	80026c2 <LoopFillZerobss>

080026be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c0:	3204      	adds	r2, #4

080026c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026c4:	d3fb      	bcc.n	80026be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026c6:	f004 fc9b 	bl	8007000 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ca:	f7ff f913 	bl	80018f4 <main>
  bx  lr    
 80026ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026d8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80026dc:	0800ac0c 	.word	0x0800ac0c
  ldr r2, =_sbss
 80026e0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80026e4:	200005d4 	.word	0x200005d4

080026e8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026e8:	e7fe      	b.n	80026e8 <DMA1_Stream0_IRQHandler>
	...

080026ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026f0:	4b0e      	ldr	r3, [pc, #56]	@ (800272c <HAL_Init+0x40>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a0d      	ldr	r2, [pc, #52]	@ (800272c <HAL_Init+0x40>)
 80026f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026fc:	4b0b      	ldr	r3, [pc, #44]	@ (800272c <HAL_Init+0x40>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a0a      	ldr	r2, [pc, #40]	@ (800272c <HAL_Init+0x40>)
 8002702:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002706:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002708:	4b08      	ldr	r3, [pc, #32]	@ (800272c <HAL_Init+0x40>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a07      	ldr	r2, [pc, #28]	@ (800272c <HAL_Init+0x40>)
 800270e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002712:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002714:	2003      	movs	r0, #3
 8002716:	f000 fe6f 	bl	80033f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800271a:	200f      	movs	r0, #15
 800271c:	f000 f808 	bl	8002730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002720:	f7ff fc98 	bl	8002054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40023c00 	.word	0x40023c00

08002730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002738:	4b12      	ldr	r3, [pc, #72]	@ (8002784 <HAL_InitTick+0x54>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4b12      	ldr	r3, [pc, #72]	@ (8002788 <HAL_InitTick+0x58>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	4619      	mov	r1, r3
 8002742:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002746:	fbb3 f3f1 	udiv	r3, r3, r1
 800274a:	fbb2 f3f3 	udiv	r3, r2, r3
 800274e:	4618      	mov	r0, r3
 8002750:	f000 fe87 	bl	8003462 <HAL_SYSTICK_Config>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e00e      	b.n	800277c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b0f      	cmp	r3, #15
 8002762:	d80a      	bhi.n	800277a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002764:	2200      	movs	r2, #0
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	f04f 30ff 	mov.w	r0, #4294967295
 800276c:	f000 fe4f 	bl	800340e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002770:	4a06      	ldr	r2, [pc, #24]	@ (800278c <HAL_InitTick+0x5c>)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	e000      	b.n	800277c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	2000000c 	.word	0x2000000c
 8002788:	20000014 	.word	0x20000014
 800278c:	20000010 	.word	0x20000010

08002790 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002794:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <HAL_IncTick+0x20>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	4b06      	ldr	r3, [pc, #24]	@ (80027b4 <HAL_IncTick+0x24>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4413      	add	r3, r2
 80027a0:	4a04      	ldr	r2, [pc, #16]	@ (80027b4 <HAL_IncTick+0x24>)
 80027a2:	6013      	str	r3, [r2, #0]
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	20000014 	.word	0x20000014
 80027b4:	20000484 	.word	0x20000484

080027b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return uwTick;
 80027bc:	4b03      	ldr	r3, [pc, #12]	@ (80027cc <HAL_GetTick+0x14>)
 80027be:	681b      	ldr	r3, [r3, #0]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	20000484 	.word	0x20000484

080027d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027d8:	f7ff ffee 	bl	80027b8 <HAL_GetTick>
 80027dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e8:	d005      	beq.n	80027f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002814 <HAL_Delay+0x44>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4413      	add	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027f6:	bf00      	nop
 80027f8:	f7ff ffde 	bl	80027b8 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	429a      	cmp	r2, r3
 8002806:	d8f7      	bhi.n	80027f8 <HAL_Delay+0x28>
  {
  }
}
 8002808:	bf00      	nop
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000014 	.word	0x20000014

08002818 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e033      	b.n	8002896 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff fc34 	bl	80020a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b00      	cmp	r3, #0
 8002854:	d118      	bne.n	8002888 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800285e:	f023 0302 	bic.w	r3, r3, #2
 8002862:	f043 0202 	orr.w	r2, r3, #2
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 fb6c 	bl	8002f48 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	f023 0303 	bic.w	r3, r3, #3
 800287e:	f043 0201 	orr.w	r2, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	641a      	str	r2, [r3, #64]	@ 0x40
 8002886:	e001      	b.n	800288c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002894:	7bfb      	ldrb	r3, [r7, #15]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	f003 0320 	and.w	r3, r3, #32
 80028cc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d049      	beq.n	8002968 <HAL_ADC_IRQHandler+0xca>
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d046      	beq.n	8002968 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d105      	bne.n	80028f2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d12b      	bne.n	8002958 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002904:	2b00      	cmp	r3, #0
 8002906:	d127      	bne.n	8002958 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002912:	2b00      	cmp	r3, #0
 8002914:	d006      	beq.n	8002924 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002920:	2b00      	cmp	r3, #0
 8002922:	d119      	bne.n	8002958 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0220 	bic.w	r2, r2, #32
 8002932:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002938:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002944:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d105      	bne.n	8002958 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002950:	f043 0201 	orr.w	r2, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7fe ff2b 	bl	80017b4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f06f 0212 	mvn.w	r2, #18
 8002966:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002976:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d057      	beq.n	8002a2e <HAL_ADC_IRQHandler+0x190>
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d054      	beq.n	8002a2e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002988:	f003 0310 	and.w	r3, r3, #16
 800298c:	2b00      	cmp	r3, #0
 800298e:	d105      	bne.n	800299c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002994:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d139      	bne.n	8002a1e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d006      	beq.n	80029c6 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d12b      	bne.n	8002a1e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d124      	bne.n	8002a1e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d11d      	bne.n	8002a1e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d119      	bne.n	8002a1e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029f8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d105      	bne.n	8002a1e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	f043 0201 	orr.w	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 fc10 	bl	8003244 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 020c 	mvn.w	r2, #12
 8002a2c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a3c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d017      	beq.n	8002a74 <HAL_ADC_IRQHandler+0x1d6>
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d014      	beq.n	8002a74 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d10d      	bne.n	8002a74 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f929 	bl	8002cbc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f06f 0201 	mvn.w	r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a82:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d015      	beq.n	8002ab6 <HAL_ADC_IRQHandler+0x218>
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d012      	beq.n	8002ab6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a94:	f043 0202 	orr.w	r2, r3, #2
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0220 	mvn.w	r2, #32
 8002aa4:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f912 	bl	8002cd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0220 	mvn.w	r2, #32
 8002ab4:	601a      	str	r2, [r3, #0]
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_ADC_Start_DMA+0x22>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e0d0      	b.n	8002c84 <HAL_ADC_Start_DMA+0x1c4>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d018      	beq.n	8002b2a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0201 	orr.w	r2, r2, #1
 8002b06:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b08:	4b60      	ldr	r3, [pc, #384]	@ (8002c8c <HAL_ADC_Start_DMA+0x1cc>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a60      	ldr	r2, [pc, #384]	@ (8002c90 <HAL_ADC_Start_DMA+0x1d0>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	0c9a      	lsrs	r2, r3, #18
 8002b14:	4613      	mov	r3, r2
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	4413      	add	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002b1c:	e002      	b.n	8002b24 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	3b01      	subs	r3, #1
 8002b22:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f9      	bne.n	8002b1e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b38:	d107      	bne.n	8002b4a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b48:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	f040 8088 	bne.w	8002c6a <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002b62:	f023 0301 	bic.w	r3, r3, #1
 8002b66:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d007      	beq.n	8002b8c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b80:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b84:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b98:	d106      	bne.n	8002ba8 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9e:	f023 0206 	bic.w	r2, r3, #6
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ba6:	e002      	b.n	8002bae <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bb6:	4b37      	ldr	r3, [pc, #220]	@ (8002c94 <HAL_ADC_Start_DMA+0x1d4>)
 8002bb8:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bbe:	4a36      	ldr	r2, [pc, #216]	@ (8002c98 <HAL_ADC_Start_DMA+0x1d8>)
 8002bc0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc6:	4a35      	ldr	r2, [pc, #212]	@ (8002c9c <HAL_ADC_Start_DMA+0x1dc>)
 8002bc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bce:	4a34      	ldr	r2, [pc, #208]	@ (8002ca0 <HAL_ADC_Start_DMA+0x1e0>)
 8002bd0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002bda:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002bea:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bfa:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	334c      	adds	r3, #76	@ 0x4c
 8002c06:	4619      	mov	r1, r3
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f000 fce4 	bl	80035d8 <HAL_DMA_Start_IT>
 8002c10:	4603      	mov	r3, r0
 8002c12:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 031f 	and.w	r3, r3, #31
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10f      	bne.n	8002c40 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d129      	bne.n	8002c82 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c3c:	609a      	str	r2, [r3, #8]
 8002c3e:	e020      	b.n	8002c82 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a17      	ldr	r2, [pc, #92]	@ (8002ca4 <HAL_ADC_Start_DMA+0x1e4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d11b      	bne.n	8002c82 <HAL_ADC_Start_DMA+0x1c2>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d114      	bne.n	8002c82 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	e00b      	b.n	8002c82 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	f043 0210 	orr.w	r2, r3, #16
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7a:	f043 0201 	orr.w	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002c82:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3720      	adds	r7, #32
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	2000000c 	.word	0x2000000c
 8002c90:	431bde83 	.word	0x431bde83
 8002c94:	40012300 	.word	0x40012300
 8002c98:	08003141 	.word	0x08003141
 8002c9c:	080031fb 	.word	0x080031fb
 8002ca0:	08003217 	.word	0x08003217
 8002ca4:	40012000 	.word	0x40012000

08002ca8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d101      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x1c>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	e113      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x244>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b09      	cmp	r3, #9
 8002d0e:	d925      	bls.n	8002d5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68d9      	ldr	r1, [r3, #12]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	4613      	mov	r3, r2
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	4413      	add	r3, r2
 8002d24:	3b1e      	subs	r3, #30
 8002d26:	2207      	movs	r2, #7
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43da      	mvns	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	400a      	ands	r2, r1
 8002d34:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68d9      	ldr	r1, [r3, #12]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	4618      	mov	r0, r3
 8002d48:	4603      	mov	r3, r0
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4403      	add	r3, r0
 8002d4e:	3b1e      	subs	r3, #30
 8002d50:	409a      	lsls	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	e022      	b.n	8002da2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6919      	ldr	r1, [r3, #16]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	4413      	add	r3, r2
 8002d70:	2207      	movs	r2, #7
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43da      	mvns	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	400a      	ands	r2, r1
 8002d7e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6919      	ldr	r1, [r3, #16]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	4618      	mov	r0, r3
 8002d92:	4603      	mov	r3, r0
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	4403      	add	r3, r0
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b06      	cmp	r3, #6
 8002da8:	d824      	bhi.n	8002df4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	3b05      	subs	r3, #5
 8002dbc:	221f      	movs	r2, #31
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	400a      	ands	r2, r1
 8002dca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	4618      	mov	r0, r3
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	3b05      	subs	r3, #5
 8002de6:	fa00 f203 	lsl.w	r2, r0, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002df2:	e04c      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b0c      	cmp	r3, #12
 8002dfa:	d824      	bhi.n	8002e46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3b23      	subs	r3, #35	@ 0x23
 8002e0e:	221f      	movs	r2, #31
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43da      	mvns	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	400a      	ands	r2, r1
 8002e1c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	3b23      	subs	r3, #35	@ 0x23
 8002e38:	fa00 f203 	lsl.w	r2, r0, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e44:	e023      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	3b41      	subs	r3, #65	@ 0x41
 8002e58:	221f      	movs	r2, #31
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43da      	mvns	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	400a      	ands	r2, r1
 8002e66:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	4618      	mov	r0, r3
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	3b41      	subs	r3, #65	@ 0x41
 8002e82:	fa00 f203 	lsl.w	r2, r0, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e8e:	4b29      	ldr	r3, [pc, #164]	@ (8002f34 <HAL_ADC_ConfigChannel+0x250>)
 8002e90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a28      	ldr	r2, [pc, #160]	@ (8002f38 <HAL_ADC_ConfigChannel+0x254>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d10f      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x1d8>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b12      	cmp	r3, #18
 8002ea2:	d10b      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f38 <HAL_ADC_ConfigChannel+0x254>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d12b      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x23a>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a1c      	ldr	r2, [pc, #112]	@ (8002f3c <HAL_ADC_ConfigChannel+0x258>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d003      	beq.n	8002ed8 <HAL_ADC_ConfigChannel+0x1f4>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b11      	cmp	r3, #17
 8002ed6:	d122      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a11      	ldr	r2, [pc, #68]	@ (8002f3c <HAL_ADC_ConfigChannel+0x258>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d111      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002efa:	4b11      	ldr	r3, [pc, #68]	@ (8002f40 <HAL_ADC_ConfigChannel+0x25c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a11      	ldr	r2, [pc, #68]	@ (8002f44 <HAL_ADC_ConfigChannel+0x260>)
 8002f00:	fba2 2303 	umull	r2, r3, r2, r3
 8002f04:	0c9a      	lsrs	r2, r3, #18
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002f10:	e002      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f9      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	40012300 	.word	0x40012300
 8002f38:	40012000 	.word	0x40012000
 8002f3c:	10000012 	.word	0x10000012
 8002f40:	2000000c 	.word	0x2000000c
 8002f44:	431bde83 	.word	0x431bde83

08002f48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f50:	4b79      	ldr	r3, [pc, #484]	@ (8003138 <ADC_Init+0x1f0>)
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6859      	ldr	r1, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	021a      	lsls	r2, r3, #8
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002fa0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6859      	ldr	r1, [r3, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6899      	ldr	r1, [r3, #8]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fda:	4a58      	ldr	r2, [pc, #352]	@ (800313c <ADC_Init+0x1f4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d022      	beq.n	8003026 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6899      	ldr	r1, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003010:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6899      	ldr	r1, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	609a      	str	r2, [r3, #8]
 8003024:	e00f      	b.n	8003046 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003034:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003044:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0202 	bic.w	r2, r2, #2
 8003054:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6899      	ldr	r1, [r3, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	7e1b      	ldrb	r3, [r3, #24]
 8003060:	005a      	lsls	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d01b      	beq.n	80030ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003082:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003092:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6859      	ldr	r1, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309e:	3b01      	subs	r3, #1
 80030a0:	035a      	lsls	r2, r3, #13
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	e007      	b.n	80030bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030ba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80030ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	051a      	lsls	r2, r3, #20
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80030f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6899      	ldr	r1, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80030fe:	025a      	lsls	r2, r3, #9
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003116:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6899      	ldr	r1, [r3, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	029a      	lsls	r2, r3, #10
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	609a      	str	r2, [r3, #8]
}
 800312c:	bf00      	nop
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	40012300 	.word	0x40012300
 800313c:	0f000001 	.word	0x0f000001

08003140 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003152:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003156:	2b00      	cmp	r3, #0
 8003158:	d13c      	bne.n	80031d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d12b      	bne.n	80031cc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003178:	2b00      	cmp	r3, #0
 800317a:	d127      	bne.n	80031cc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003182:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003186:	2b00      	cmp	r3, #0
 8003188:	d006      	beq.n	8003198 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003194:	2b00      	cmp	r3, #0
 8003196:	d119      	bne.n	80031cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0220 	bic.w	r2, r2, #32
 80031a6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c4:	f043 0201 	orr.w	r2, r3, #1
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f7fe faf1 	bl	80017b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031d2:	e00e      	b.n	80031f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f7ff fd75 	bl	8002cd0 <HAL_ADC_ErrorCallback>
}
 80031e6:	e004      	b.n	80031f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	4798      	blx	r3
}
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003206:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f7ff fd4d 	bl	8002ca8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800320e:	bf00      	nop
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b084      	sub	sp, #16
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003222:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2240      	movs	r2, #64	@ 0x40
 8003228:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322e:	f043 0204 	orr.w	r2, r3, #4
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f7ff fd4a 	bl	8002cd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800323c:	bf00      	nop
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003268:	4b0c      	ldr	r3, [pc, #48]	@ (800329c <__NVIC_SetPriorityGrouping+0x44>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003274:	4013      	ands	r3, r2
 8003276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003280:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800328a:	4a04      	ldr	r2, [pc, #16]	@ (800329c <__NVIC_SetPriorityGrouping+0x44>)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	60d3      	str	r3, [r2, #12]
}
 8003290:	bf00      	nop
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032a4:	4b04      	ldr	r3, [pc, #16]	@ (80032b8 <__NVIC_GetPriorityGrouping+0x18>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	0a1b      	lsrs	r3, r3, #8
 80032aa:	f003 0307 	and.w	r3, r3, #7
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	e000ed00 	.word	0xe000ed00

080032bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	db0b      	blt.n	80032e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	f003 021f 	and.w	r2, r3, #31
 80032d4:	4907      	ldr	r1, [pc, #28]	@ (80032f4 <__NVIC_EnableIRQ+0x38>)
 80032d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	2001      	movs	r0, #1
 80032de:	fa00 f202 	lsl.w	r2, r0, r2
 80032e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	e000e100 	.word	0xe000e100

080032f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	6039      	str	r1, [r7, #0]
 8003302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003308:	2b00      	cmp	r3, #0
 800330a:	db0a      	blt.n	8003322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	b2da      	uxtb	r2, r3
 8003310:	490c      	ldr	r1, [pc, #48]	@ (8003344 <__NVIC_SetPriority+0x4c>)
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	0112      	lsls	r2, r2, #4
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	440b      	add	r3, r1
 800331c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003320:	e00a      	b.n	8003338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	b2da      	uxtb	r2, r3
 8003326:	4908      	ldr	r1, [pc, #32]	@ (8003348 <__NVIC_SetPriority+0x50>)
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	3b04      	subs	r3, #4
 8003330:	0112      	lsls	r2, r2, #4
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	440b      	add	r3, r1
 8003336:	761a      	strb	r2, [r3, #24]
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	e000e100 	.word	0xe000e100
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800334c:	b480      	push	{r7}
 800334e:	b089      	sub	sp, #36	@ 0x24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f1c3 0307 	rsb	r3, r3, #7
 8003366:	2b04      	cmp	r3, #4
 8003368:	bf28      	it	cs
 800336a:	2304      	movcs	r3, #4
 800336c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	3304      	adds	r3, #4
 8003372:	2b06      	cmp	r3, #6
 8003374:	d902      	bls.n	800337c <NVIC_EncodePriority+0x30>
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3b03      	subs	r3, #3
 800337a:	e000      	b.n	800337e <NVIC_EncodePriority+0x32>
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003380:	f04f 32ff 	mov.w	r2, #4294967295
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43da      	mvns	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	401a      	ands	r2, r3
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003394:	f04f 31ff 	mov.w	r1, #4294967295
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	fa01 f303 	lsl.w	r3, r1, r3
 800339e:	43d9      	mvns	r1, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a4:	4313      	orrs	r3, r2
         );
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3724      	adds	r7, #36	@ 0x24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3b01      	subs	r3, #1
 80033c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033c4:	d301      	bcc.n	80033ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033c6:	2301      	movs	r3, #1
 80033c8:	e00f      	b.n	80033ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ca:	4a0a      	ldr	r2, [pc, #40]	@ (80033f4 <SysTick_Config+0x40>)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033d2:	210f      	movs	r1, #15
 80033d4:	f04f 30ff 	mov.w	r0, #4294967295
 80033d8:	f7ff ff8e 	bl	80032f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033dc:	4b05      	ldr	r3, [pc, #20]	@ (80033f4 <SysTick_Config+0x40>)
 80033de:	2200      	movs	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033e2:	4b04      	ldr	r3, [pc, #16]	@ (80033f4 <SysTick_Config+0x40>)
 80033e4:	2207      	movs	r2, #7
 80033e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	e000e010 	.word	0xe000e010

080033f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff ff29 	bl	8003258 <__NVIC_SetPriorityGrouping>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800340e:	b580      	push	{r7, lr}
 8003410:	b086      	sub	sp, #24
 8003412:	af00      	add	r7, sp, #0
 8003414:	4603      	mov	r3, r0
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003420:	f7ff ff3e 	bl	80032a0 <__NVIC_GetPriorityGrouping>
 8003424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	68b9      	ldr	r1, [r7, #8]
 800342a:	6978      	ldr	r0, [r7, #20]
 800342c:	f7ff ff8e 	bl	800334c <NVIC_EncodePriority>
 8003430:	4602      	mov	r2, r0
 8003432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003436:	4611      	mov	r1, r2
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff ff5d 	bl	80032f8 <__NVIC_SetPriority>
}
 800343e:	bf00      	nop
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	4603      	mov	r3, r0
 800344e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff ff31 	bl	80032bc <__NVIC_EnableIRQ>
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7ff ffa2 	bl	80033b4 <SysTick_Config>
 8003470:	4603      	mov	r3, r0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003488:	f7ff f996 	bl	80027b8 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e099      	b.n	80035cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0201 	bic.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034b8:	e00f      	b.n	80034da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034ba:	f7ff f97d 	bl	80027b8 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b05      	cmp	r3, #5
 80034c6:	d908      	bls.n	80034da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2203      	movs	r2, #3
 80034d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e078      	b.n	80035cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1e8      	bne.n	80034ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	4b38      	ldr	r3, [pc, #224]	@ (80035d4 <HAL_DMA_Init+0x158>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003506:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003512:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800351e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4313      	orrs	r3, r2
 800352a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	2b04      	cmp	r3, #4
 8003532:	d107      	bne.n	8003544 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353c:	4313      	orrs	r3, r2
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	4313      	orrs	r3, r2
 8003542:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f023 0307 	bic.w	r3, r3, #7
 800355a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	4313      	orrs	r3, r2
 8003564:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356a:	2b04      	cmp	r3, #4
 800356c:	d117      	bne.n	800359e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00e      	beq.n	800359e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 fa6f 	bl	8003a64 <DMA_CheckFifoParam>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d008      	beq.n	800359e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2240      	movs	r2, #64	@ 0x40
 8003590:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800359a:	2301      	movs	r3, #1
 800359c:	e016      	b.n	80035cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fa26 	bl	80039f8 <DMA_CalcBaseAndBitshift>
 80035ac:	4603      	mov	r3, r0
 80035ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b4:	223f      	movs	r2, #63	@ 0x3f
 80035b6:	409a      	lsls	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	f010803f 	.word	0xf010803f

080035d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035e6:	2300      	movs	r3, #0
 80035e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d101      	bne.n	80035fe <HAL_DMA_Start_IT+0x26>
 80035fa:	2302      	movs	r3, #2
 80035fc:	e040      	b.n	8003680 <HAL_DMA_Start_IT+0xa8>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b01      	cmp	r3, #1
 8003610:	d12f      	bne.n	8003672 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2202      	movs	r2, #2
 8003616:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	68b9      	ldr	r1, [r7, #8]
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 f9b8 	bl	800399c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003630:	223f      	movs	r2, #63	@ 0x3f
 8003632:	409a      	lsls	r2, r3
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0216 	orr.w	r2, r2, #22
 8003646:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364c:	2b00      	cmp	r3, #0
 800364e:	d007      	beq.n	8003660 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0208 	orr.w	r2, r2, #8
 800365e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	e005      	b.n	800367e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800367a:	2302      	movs	r3, #2
 800367c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800367e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003694:	4b8e      	ldr	r3, [pc, #568]	@ (80038d0 <HAL_DMA_IRQHandler+0x248>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a8e      	ldr	r2, [pc, #568]	@ (80038d4 <HAL_DMA_IRQHandler+0x24c>)
 800369a:	fba2 2303 	umull	r2, r3, r2, r3
 800369e:	0a9b      	lsrs	r3, r3, #10
 80036a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b2:	2208      	movs	r2, #8
 80036b4:	409a      	lsls	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d01a      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d013      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0204 	bic.w	r2, r2, #4
 80036da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e0:	2208      	movs	r2, #8
 80036e2:	409a      	lsls	r2, r3
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ec:	f043 0201 	orr.w	r2, r3, #1
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f8:	2201      	movs	r2, #1
 80036fa:	409a      	lsls	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4013      	ands	r3, r2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d012      	beq.n	800372a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00b      	beq.n	800372a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003716:	2201      	movs	r2, #1
 8003718:	409a      	lsls	r2, r3
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003722:	f043 0202 	orr.w	r2, r3, #2
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800372e:	2204      	movs	r2, #4
 8003730:	409a      	lsls	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4013      	ands	r3, r2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d012      	beq.n	8003760 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00b      	beq.n	8003760 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374c:	2204      	movs	r2, #4
 800374e:	409a      	lsls	r2, r3
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003758:	f043 0204 	orr.w	r2, r3, #4
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003764:	2210      	movs	r2, #16
 8003766:	409a      	lsls	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4013      	ands	r3, r2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d043      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b00      	cmp	r3, #0
 800377c:	d03c      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003782:	2210      	movs	r2, #16
 8003784:	409a      	lsls	r2, r3
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d018      	beq.n	80037ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d108      	bne.n	80037b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d024      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	4798      	blx	r3
 80037b6:	e01f      	b.n	80037f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d01b      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	4798      	blx	r3
 80037c8:	e016      	b.n	80037f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d107      	bne.n	80037e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0208 	bic.w	r2, r2, #8
 80037e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fc:	2220      	movs	r2, #32
 80037fe:	409a      	lsls	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4013      	ands	r3, r2
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 808f 	beq.w	8003928 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0310 	and.w	r3, r3, #16
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 8087 	beq.w	8003928 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800381e:	2220      	movs	r2, #32
 8003820:	409a      	lsls	r2, r3
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b05      	cmp	r3, #5
 8003830:	d136      	bne.n	80038a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0216 	bic.w	r2, r2, #22
 8003840:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695a      	ldr	r2, [r3, #20]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003850:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	d103      	bne.n	8003862 <HAL_DMA_IRQHandler+0x1da>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800385e:	2b00      	cmp	r3, #0
 8003860:	d007      	beq.n	8003872 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0208 	bic.w	r2, r2, #8
 8003870:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003876:	223f      	movs	r2, #63	@ 0x3f
 8003878:	409a      	lsls	r2, r3
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003892:	2b00      	cmp	r3, #0
 8003894:	d07e      	beq.n	8003994 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	4798      	blx	r3
        }
        return;
 800389e:	e079      	b.n	8003994 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d01d      	beq.n	80038ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10d      	bne.n	80038d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d031      	beq.n	8003928 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	4798      	blx	r3
 80038cc:	e02c      	b.n	8003928 <HAL_DMA_IRQHandler+0x2a0>
 80038ce:	bf00      	nop
 80038d0:	2000000c 	.word	0x2000000c
 80038d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d023      	beq.n	8003928 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	4798      	blx	r3
 80038e8:	e01e      	b.n	8003928 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10f      	bne.n	8003918 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0210 	bic.w	r2, r2, #16
 8003906:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800392c:	2b00      	cmp	r3, #0
 800392e:	d032      	beq.n	8003996 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	d022      	beq.n	8003982 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2205      	movs	r2, #5
 8003940:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0201 	bic.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	3301      	adds	r3, #1
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	429a      	cmp	r2, r3
 800395e:	d307      	bcc.n	8003970 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f2      	bne.n	8003954 <HAL_DMA_IRQHandler+0x2cc>
 800396e:	e000      	b.n	8003972 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003970:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003986:	2b00      	cmp	r3, #0
 8003988:	d005      	beq.n	8003996 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	4798      	blx	r3
 8003992:	e000      	b.n	8003996 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003994:	bf00      	nop
    }
  }
}
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80039b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2b40      	cmp	r3, #64	@ 0x40
 80039c8:	d108      	bne.n	80039dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039da:	e007      	b.n	80039ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	60da      	str	r2, [r3, #12]
}
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	3b10      	subs	r3, #16
 8003a08:	4a14      	ldr	r2, [pc, #80]	@ (8003a5c <DMA_CalcBaseAndBitshift+0x64>)
 8003a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0e:	091b      	lsrs	r3, r3, #4
 8003a10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a12:	4a13      	ldr	r2, [pc, #76]	@ (8003a60 <DMA_CalcBaseAndBitshift+0x68>)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4413      	add	r3, r2
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d909      	bls.n	8003a3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003a2e:	f023 0303 	bic.w	r3, r3, #3
 8003a32:	1d1a      	adds	r2, r3, #4
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a38:	e007      	b.n	8003a4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003a42:	f023 0303 	bic.w	r3, r3, #3
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	aaaaaaab 	.word	0xaaaaaaab
 8003a60:	0800a7cc 	.word	0x0800a7cc

08003a64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d11f      	bne.n	8003abe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d856      	bhi.n	8003b32 <DMA_CheckFifoParam+0xce>
 8003a84:	a201      	add	r2, pc, #4	@ (adr r2, 8003a8c <DMA_CheckFifoParam+0x28>)
 8003a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8a:	bf00      	nop
 8003a8c:	08003a9d 	.word	0x08003a9d
 8003a90:	08003aaf 	.word	0x08003aaf
 8003a94:	08003a9d 	.word	0x08003a9d
 8003a98:	08003b33 	.word	0x08003b33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d046      	beq.n	8003b36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aac:	e043      	b.n	8003b36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ab6:	d140      	bne.n	8003b3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003abc:	e03d      	b.n	8003b3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ac6:	d121      	bne.n	8003b0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	d837      	bhi.n	8003b3e <DMA_CheckFifoParam+0xda>
 8003ace:	a201      	add	r2, pc, #4	@ (adr r2, 8003ad4 <DMA_CheckFifoParam+0x70>)
 8003ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad4:	08003ae5 	.word	0x08003ae5
 8003ad8:	08003aeb 	.word	0x08003aeb
 8003adc:	08003ae5 	.word	0x08003ae5
 8003ae0:	08003afd 	.word	0x08003afd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae8:	e030      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d025      	beq.n	8003b42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003afa:	e022      	b.n	8003b42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b00:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b04:	d11f      	bne.n	8003b46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b0a:	e01c      	b.n	8003b46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d903      	bls.n	8003b1a <DMA_CheckFifoParam+0xb6>
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d003      	beq.n	8003b20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b18:	e018      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8003b1e:	e015      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00e      	beq.n	8003b4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b30:	e00b      	b.n	8003b4a <DMA_CheckFifoParam+0xe6>
      break;
 8003b32:	bf00      	nop
 8003b34:	e00a      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      break;
 8003b36:	bf00      	nop
 8003b38:	e008      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      break;
 8003b3a:	bf00      	nop
 8003b3c:	e006      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      break;
 8003b3e:	bf00      	nop
 8003b40:	e004      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      break;
 8003b42:	bf00      	nop
 8003b44:	e002      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      break;   
 8003b46:	bf00      	nop
 8003b48:	e000      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      break;
 8003b4a:	bf00      	nop
    }
  } 
  
  return status; 
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop

08003b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b089      	sub	sp, #36	@ 0x24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b72:	2300      	movs	r3, #0
 8003b74:	61fb      	str	r3, [r7, #28]
 8003b76:	e159      	b.n	8003e2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b78:	2201      	movs	r2, #1
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	f040 8148 	bne.w	8003e26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d005      	beq.n	8003bae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d130      	bne.n	8003c10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	2203      	movs	r2, #3
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003be4:	2201      	movs	r2, #1
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	091b      	lsrs	r3, r3, #4
 8003bfa:	f003 0201 	and.w	r2, r3, #1
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 0303 	and.w	r3, r3, #3
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d017      	beq.n	8003c4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	2203      	movs	r2, #3
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4013      	ands	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f003 0303 	and.w	r3, r3, #3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d123      	bne.n	8003ca0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	08da      	lsrs	r2, r3, #3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3208      	adds	r2, #8
 8003c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	220f      	movs	r2, #15
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	43db      	mvns	r3, r3
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	08da      	lsrs	r2, r3, #3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3208      	adds	r2, #8
 8003c9a:	69b9      	ldr	r1, [r7, #24]
 8003c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	2203      	movs	r2, #3
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 0203 	and.w	r2, r3, #3
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80a2 	beq.w	8003e26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	4b57      	ldr	r3, [pc, #348]	@ (8003e44 <HAL_GPIO_Init+0x2e8>)
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cea:	4a56      	ldr	r2, [pc, #344]	@ (8003e44 <HAL_GPIO_Init+0x2e8>)
 8003cec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cf2:	4b54      	ldr	r3, [pc, #336]	@ (8003e44 <HAL_GPIO_Init+0x2e8>)
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cfe:	4a52      	ldr	r2, [pc, #328]	@ (8003e48 <HAL_GPIO_Init+0x2ec>)
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	089b      	lsrs	r3, r3, #2
 8003d04:	3302      	adds	r3, #2
 8003d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	220f      	movs	r2, #15
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a49      	ldr	r2, [pc, #292]	@ (8003e4c <HAL_GPIO_Init+0x2f0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d019      	beq.n	8003d5e <HAL_GPIO_Init+0x202>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a48      	ldr	r2, [pc, #288]	@ (8003e50 <HAL_GPIO_Init+0x2f4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d013      	beq.n	8003d5a <HAL_GPIO_Init+0x1fe>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a47      	ldr	r2, [pc, #284]	@ (8003e54 <HAL_GPIO_Init+0x2f8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00d      	beq.n	8003d56 <HAL_GPIO_Init+0x1fa>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a46      	ldr	r2, [pc, #280]	@ (8003e58 <HAL_GPIO_Init+0x2fc>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d007      	beq.n	8003d52 <HAL_GPIO_Init+0x1f6>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a45      	ldr	r2, [pc, #276]	@ (8003e5c <HAL_GPIO_Init+0x300>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d101      	bne.n	8003d4e <HAL_GPIO_Init+0x1f2>
 8003d4a:	2304      	movs	r3, #4
 8003d4c:	e008      	b.n	8003d60 <HAL_GPIO_Init+0x204>
 8003d4e:	2307      	movs	r3, #7
 8003d50:	e006      	b.n	8003d60 <HAL_GPIO_Init+0x204>
 8003d52:	2303      	movs	r3, #3
 8003d54:	e004      	b.n	8003d60 <HAL_GPIO_Init+0x204>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e002      	b.n	8003d60 <HAL_GPIO_Init+0x204>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <HAL_GPIO_Init+0x204>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	f002 0203 	and.w	r2, r2, #3
 8003d66:	0092      	lsls	r2, r2, #2
 8003d68:	4093      	lsls	r3, r2
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d70:	4935      	ldr	r1, [pc, #212]	@ (8003e48 <HAL_GPIO_Init+0x2ec>)
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	089b      	lsrs	r3, r3, #2
 8003d76:	3302      	adds	r3, #2
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d7e:	4b38      	ldr	r3, [pc, #224]	@ (8003e60 <HAL_GPIO_Init+0x304>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	43db      	mvns	r3, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003da2:	4a2f      	ldr	r2, [pc, #188]	@ (8003e60 <HAL_GPIO_Init+0x304>)
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003da8:	4b2d      	ldr	r3, [pc, #180]	@ (8003e60 <HAL_GPIO_Init+0x304>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	43db      	mvns	r3, r3
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	4013      	ands	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dcc:	4a24      	ldr	r2, [pc, #144]	@ (8003e60 <HAL_GPIO_Init+0x304>)
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dd2:	4b23      	ldr	r3, [pc, #140]	@ (8003e60 <HAL_GPIO_Init+0x304>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4013      	ands	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003df6:	4a1a      	ldr	r2, [pc, #104]	@ (8003e60 <HAL_GPIO_Init+0x304>)
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dfc:	4b18      	ldr	r3, [pc, #96]	@ (8003e60 <HAL_GPIO_Init+0x304>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	43db      	mvns	r3, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e20:	4a0f      	ldr	r2, [pc, #60]	@ (8003e60 <HAL_GPIO_Init+0x304>)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	61fb      	str	r3, [r7, #28]
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	2b0f      	cmp	r3, #15
 8003e30:	f67f aea2 	bls.w	8003b78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e34:	bf00      	nop
 8003e36:	bf00      	nop
 8003e38:	3724      	adds	r7, #36	@ 0x24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40023800 	.word	0x40023800
 8003e48:	40013800 	.word	0x40013800
 8003e4c:	40020000 	.word	0x40020000
 8003e50:	40020400 	.word	0x40020400
 8003e54:	40020800 	.word	0x40020800
 8003e58:	40020c00 	.word	0x40020c00
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40013c00 	.word	0x40013c00

08003e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	807b      	strh	r3, [r7, #2]
 8003e70:	4613      	mov	r3, r2
 8003e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e74:	787b      	ldrb	r3, [r7, #1]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e7a:	887a      	ldrh	r2, [r7, #2]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e80:	e003      	b.n	8003e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e82:	887b      	ldrh	r3, [r7, #2]
 8003e84:	041a      	lsls	r2, r3, #16
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	619a      	str	r2, [r3, #24]
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b085      	sub	sp, #20
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ea8:	887a      	ldrh	r2, [r7, #2]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4013      	ands	r3, r2
 8003eae:	041a      	lsls	r2, r3, #16
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	43d9      	mvns	r1, r3
 8003eb4:	887b      	ldrh	r3, [r7, #2]
 8003eb6:	400b      	ands	r3, r1
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	619a      	str	r2, [r3, #24]
}
 8003ebe:	bf00      	nop
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
	...

08003ecc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ed6:	4b08      	ldr	r3, [pc, #32]	@ (8003ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ed8:	695a      	ldr	r2, [r3, #20]
 8003eda:	88fb      	ldrh	r3, [r7, #6]
 8003edc:	4013      	ands	r3, r2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d006      	beq.n	8003ef0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ee2:	4a05      	ldr	r2, [pc, #20]	@ (8003ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ee4:	88fb      	ldrh	r3, [r7, #6]
 8003ee6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ee8:	88fb      	ldrh	r3, [r7, #6]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fd fcb0 	bl	8001850 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ef0:	bf00      	nop
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40013c00 	.word	0x40013c00

08003efc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e267      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d075      	beq.n	8004006 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f1a:	4b88      	ldr	r3, [pc, #544]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 030c 	and.w	r3, r3, #12
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d00c      	beq.n	8003f40 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f26:	4b85      	ldr	r3, [pc, #532]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d112      	bne.n	8003f58 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f32:	4b82      	ldr	r3, [pc, #520]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f3e:	d10b      	bne.n	8003f58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f40:	4b7e      	ldr	r3, [pc, #504]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d05b      	beq.n	8004004 <HAL_RCC_OscConfig+0x108>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d157      	bne.n	8004004 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e242      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f60:	d106      	bne.n	8003f70 <HAL_RCC_OscConfig+0x74>
 8003f62:	4b76      	ldr	r3, [pc, #472]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a75      	ldr	r2, [pc, #468]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	e01d      	b.n	8003fac <HAL_RCC_OscConfig+0xb0>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCC_OscConfig+0x98>
 8003f7a:	4b70      	ldr	r3, [pc, #448]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a6f      	ldr	r2, [pc, #444]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	4b6d      	ldr	r3, [pc, #436]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a6c      	ldr	r2, [pc, #432]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	e00b      	b.n	8003fac <HAL_RCC_OscConfig+0xb0>
 8003f94:	4b69      	ldr	r3, [pc, #420]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a68      	ldr	r2, [pc, #416]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	4b66      	ldr	r3, [pc, #408]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a65      	ldr	r2, [pc, #404]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003fa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d013      	beq.n	8003fdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7fe fc00 	bl	80027b8 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fbc:	f7fe fbfc 	bl	80027b8 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b64      	cmp	r3, #100	@ 0x64
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e207      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fce:	4b5b      	ldr	r3, [pc, #364]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0xc0>
 8003fda:	e014      	b.n	8004006 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fdc:	f7fe fbec 	bl	80027b8 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fe4:	f7fe fbe8 	bl	80027b8 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b64      	cmp	r3, #100	@ 0x64
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e1f3      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ff6:	4b51      	ldr	r3, [pc, #324]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0xe8>
 8004002:	e000      	b.n	8004006 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d063      	beq.n	80040da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004012:	4b4a      	ldr	r3, [pc, #296]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00b      	beq.n	8004036 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800401e:	4b47      	ldr	r3, [pc, #284]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004026:	2b08      	cmp	r3, #8
 8004028:	d11c      	bne.n	8004064 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800402a:	4b44      	ldr	r3, [pc, #272]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d116      	bne.n	8004064 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004036:	4b41      	ldr	r3, [pc, #260]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d005      	beq.n	800404e <HAL_RCC_OscConfig+0x152>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d001      	beq.n	800404e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e1c7      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404e:	4b3b      	ldr	r3, [pc, #236]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	4937      	ldr	r1, [pc, #220]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 800405e:	4313      	orrs	r3, r2
 8004060:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004062:	e03a      	b.n	80040da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d020      	beq.n	80040ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800406c:	4b34      	ldr	r3, [pc, #208]	@ (8004140 <HAL_RCC_OscConfig+0x244>)
 800406e:	2201      	movs	r2, #1
 8004070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004072:	f7fe fba1 	bl	80027b8 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800407a:	f7fe fb9d 	bl	80027b8 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e1a8      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408c:	4b2b      	ldr	r3, [pc, #172]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0f0      	beq.n	800407a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004098:	4b28      	ldr	r3, [pc, #160]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4925      	ldr	r1, [pc, #148]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	600b      	str	r3, [r1, #0]
 80040ac:	e015      	b.n	80040da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ae:	4b24      	ldr	r3, [pc, #144]	@ (8004140 <HAL_RCC_OscConfig+0x244>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b4:	f7fe fb80 	bl	80027b8 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040bc:	f7fe fb7c 	bl	80027b8 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e187      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ce:	4b1b      	ldr	r3, [pc, #108]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f0      	bne.n	80040bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d036      	beq.n	8004154 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d016      	beq.n	800411c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ee:	4b15      	ldr	r3, [pc, #84]	@ (8004144 <HAL_RCC_OscConfig+0x248>)
 80040f0:	2201      	movs	r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f4:	f7fe fb60 	bl	80027b8 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040fc:	f7fe fb5c 	bl	80027b8 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e167      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800410e:	4b0b      	ldr	r3, [pc, #44]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8004110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0f0      	beq.n	80040fc <HAL_RCC_OscConfig+0x200>
 800411a:	e01b      	b.n	8004154 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800411c:	4b09      	ldr	r3, [pc, #36]	@ (8004144 <HAL_RCC_OscConfig+0x248>)
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004122:	f7fe fb49 	bl	80027b8 <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004128:	e00e      	b.n	8004148 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800412a:	f7fe fb45 	bl	80027b8 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d907      	bls.n	8004148 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e150      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
 800413c:	40023800 	.word	0x40023800
 8004140:	42470000 	.word	0x42470000
 8004144:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004148:	4b88      	ldr	r3, [pc, #544]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 800414a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1ea      	bne.n	800412a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 8097 	beq.w	8004290 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004162:	2300      	movs	r3, #0
 8004164:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004166:	4b81      	ldr	r3, [pc, #516]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10f      	bne.n	8004192 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004172:	2300      	movs	r3, #0
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	4b7d      	ldr	r3, [pc, #500]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	4a7c      	ldr	r2, [pc, #496]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 800417c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004180:	6413      	str	r3, [r2, #64]	@ 0x40
 8004182:	4b7a      	ldr	r3, [pc, #488]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800418a:	60bb      	str	r3, [r7, #8]
 800418c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800418e:	2301      	movs	r3, #1
 8004190:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004192:	4b77      	ldr	r3, [pc, #476]	@ (8004370 <HAL_RCC_OscConfig+0x474>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800419a:	2b00      	cmp	r3, #0
 800419c:	d118      	bne.n	80041d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800419e:	4b74      	ldr	r3, [pc, #464]	@ (8004370 <HAL_RCC_OscConfig+0x474>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a73      	ldr	r2, [pc, #460]	@ (8004370 <HAL_RCC_OscConfig+0x474>)
 80041a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041aa:	f7fe fb05 	bl	80027b8 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b2:	f7fe fb01 	bl	80027b8 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e10c      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c4:	4b6a      	ldr	r3, [pc, #424]	@ (8004370 <HAL_RCC_OscConfig+0x474>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0f0      	beq.n	80041b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d106      	bne.n	80041e6 <HAL_RCC_OscConfig+0x2ea>
 80041d8:	4b64      	ldr	r3, [pc, #400]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 80041da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041dc:	4a63      	ldr	r2, [pc, #396]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 80041de:	f043 0301 	orr.w	r3, r3, #1
 80041e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80041e4:	e01c      	b.n	8004220 <HAL_RCC_OscConfig+0x324>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	2b05      	cmp	r3, #5
 80041ec:	d10c      	bne.n	8004208 <HAL_RCC_OscConfig+0x30c>
 80041ee:	4b5f      	ldr	r3, [pc, #380]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f2:	4a5e      	ldr	r2, [pc, #376]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 80041f4:	f043 0304 	orr.w	r3, r3, #4
 80041f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80041fa:	4b5c      	ldr	r3, [pc, #368]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 80041fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041fe:	4a5b      	ldr	r2, [pc, #364]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004200:	f043 0301 	orr.w	r3, r3, #1
 8004204:	6713      	str	r3, [r2, #112]	@ 0x70
 8004206:	e00b      	b.n	8004220 <HAL_RCC_OscConfig+0x324>
 8004208:	4b58      	ldr	r3, [pc, #352]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 800420a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800420c:	4a57      	ldr	r2, [pc, #348]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 800420e:	f023 0301 	bic.w	r3, r3, #1
 8004212:	6713      	str	r3, [r2, #112]	@ 0x70
 8004214:	4b55      	ldr	r3, [pc, #340]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004218:	4a54      	ldr	r2, [pc, #336]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 800421a:	f023 0304 	bic.w	r3, r3, #4
 800421e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d015      	beq.n	8004254 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004228:	f7fe fac6 	bl	80027b8 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800422e:	e00a      	b.n	8004246 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004230:	f7fe fac2 	bl	80027b8 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800423e:	4293      	cmp	r3, r2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e0cb      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004246:	4b49      	ldr	r3, [pc, #292]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0ee      	beq.n	8004230 <HAL_RCC_OscConfig+0x334>
 8004252:	e014      	b.n	800427e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004254:	f7fe fab0 	bl	80027b8 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800425a:	e00a      	b.n	8004272 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800425c:	f7fe faac 	bl	80027b8 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800426a:	4293      	cmp	r3, r2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e0b5      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004272:	4b3e      	ldr	r3, [pc, #248]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1ee      	bne.n	800425c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800427e:	7dfb      	ldrb	r3, [r7, #23]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d105      	bne.n	8004290 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004284:	4b39      	ldr	r3, [pc, #228]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004288:	4a38      	ldr	r2, [pc, #224]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 800428a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800428e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 80a1 	beq.w	80043dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800429a:	4b34      	ldr	r3, [pc, #208]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d05c      	beq.n	8004360 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d141      	bne.n	8004332 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ae:	4b31      	ldr	r3, [pc, #196]	@ (8004374 <HAL_RCC_OscConfig+0x478>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b4:	f7fe fa80 	bl	80027b8 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042bc:	f7fe fa7c 	bl	80027b8 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e087      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ce:	4b27      	ldr	r3, [pc, #156]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f0      	bne.n	80042bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69da      	ldr	r2, [r3, #28]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	019b      	lsls	r3, r3, #6
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f0:	085b      	lsrs	r3, r3, #1
 80042f2:	3b01      	subs	r3, #1
 80042f4:	041b      	lsls	r3, r3, #16
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fc:	061b      	lsls	r3, r3, #24
 80042fe:	491b      	ldr	r1, [pc, #108]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004300:	4313      	orrs	r3, r2
 8004302:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004304:	4b1b      	ldr	r3, [pc, #108]	@ (8004374 <HAL_RCC_OscConfig+0x478>)
 8004306:	2201      	movs	r2, #1
 8004308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430a:	f7fe fa55 	bl	80027b8 <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004312:	f7fe fa51 	bl	80027b8 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e05c      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004324:	4b11      	ldr	r3, [pc, #68]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0f0      	beq.n	8004312 <HAL_RCC_OscConfig+0x416>
 8004330:	e054      	b.n	80043dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004332:	4b10      	ldr	r3, [pc, #64]	@ (8004374 <HAL_RCC_OscConfig+0x478>)
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004338:	f7fe fa3e 	bl	80027b8 <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004340:	f7fe fa3a 	bl	80027b8 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e045      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004352:	4b06      	ldr	r3, [pc, #24]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f0      	bne.n	8004340 <HAL_RCC_OscConfig+0x444>
 800435e:	e03d      	b.n	80043dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d107      	bne.n	8004378 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e038      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
 800436c:	40023800 	.word	0x40023800
 8004370:	40007000 	.word	0x40007000
 8004374:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004378:	4b1b      	ldr	r3, [pc, #108]	@ (80043e8 <HAL_RCC_OscConfig+0x4ec>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d028      	beq.n	80043d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004390:	429a      	cmp	r2, r3
 8004392:	d121      	bne.n	80043d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800439e:	429a      	cmp	r2, r3
 80043a0:	d11a      	bne.n	80043d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80043a8:	4013      	ands	r3, r2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80043ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d111      	bne.n	80043d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043be:	085b      	lsrs	r3, r3, #1
 80043c0:	3b01      	subs	r3, #1
 80043c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d107      	bne.n	80043d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d001      	beq.n	80043dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e000      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40023800 	.word	0x40023800

080043ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e0cc      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004400:	4b68      	ldr	r3, [pc, #416]	@ (80045a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d90c      	bls.n	8004428 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800440e:	4b65      	ldr	r3, [pc, #404]	@ (80045a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004416:	4b63      	ldr	r3, [pc, #396]	@ (80045a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	429a      	cmp	r2, r3
 8004422:	d001      	beq.n	8004428 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e0b8      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d020      	beq.n	8004476 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004440:	4b59      	ldr	r3, [pc, #356]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	4a58      	ldr	r2, [pc, #352]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800444a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d005      	beq.n	8004464 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004458:	4b53      	ldr	r3, [pc, #332]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	4a52      	ldr	r2, [pc, #328]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004462:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004464:	4b50      	ldr	r3, [pc, #320]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	494d      	ldr	r1, [pc, #308]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	4313      	orrs	r3, r2
 8004474:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d044      	beq.n	800450c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d107      	bne.n	800449a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448a:	4b47      	ldr	r3, [pc, #284]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d119      	bne.n	80044ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e07f      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d003      	beq.n	80044aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d107      	bne.n	80044ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044aa:	4b3f      	ldr	r3, [pc, #252]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d109      	bne.n	80044ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e06f      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ba:	4b3b      	ldr	r3, [pc, #236]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e067      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ca:	4b37      	ldr	r3, [pc, #220]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f023 0203 	bic.w	r2, r3, #3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	4934      	ldr	r1, [pc, #208]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044dc:	f7fe f96c 	bl	80027b8 <HAL_GetTick>
 80044e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e2:	e00a      	b.n	80044fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e4:	f7fe f968 	bl	80027b8 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e04f      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fa:	4b2b      	ldr	r3, [pc, #172]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 020c 	and.w	r2, r3, #12
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	429a      	cmp	r2, r3
 800450a:	d1eb      	bne.n	80044e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800450c:	4b25      	ldr	r3, [pc, #148]	@ (80045a4 <HAL_RCC_ClockConfig+0x1b8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d20c      	bcs.n	8004534 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451a:	4b22      	ldr	r3, [pc, #136]	@ (80045a4 <HAL_RCC_ClockConfig+0x1b8>)
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004522:	4b20      	ldr	r3, [pc, #128]	@ (80045a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d001      	beq.n	8004534 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e032      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d008      	beq.n	8004552 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004540:	4b19      	ldr	r3, [pc, #100]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	4916      	ldr	r1, [pc, #88]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	4313      	orrs	r3, r2
 8004550:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d009      	beq.n	8004572 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800455e:	4b12      	ldr	r3, [pc, #72]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	490e      	ldr	r1, [pc, #56]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	4313      	orrs	r3, r2
 8004570:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004572:	f000 f821 	bl	80045b8 <HAL_RCC_GetSysClockFreq>
 8004576:	4602      	mov	r2, r0
 8004578:	4b0b      	ldr	r3, [pc, #44]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	091b      	lsrs	r3, r3, #4
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	490a      	ldr	r1, [pc, #40]	@ (80045ac <HAL_RCC_ClockConfig+0x1c0>)
 8004584:	5ccb      	ldrb	r3, [r1, r3]
 8004586:	fa22 f303 	lsr.w	r3, r2, r3
 800458a:	4a09      	ldr	r2, [pc, #36]	@ (80045b0 <HAL_RCC_ClockConfig+0x1c4>)
 800458c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800458e:	4b09      	ldr	r3, [pc, #36]	@ (80045b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f7fe f8cc 	bl	8002730 <HAL_InitTick>

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40023c00 	.word	0x40023c00
 80045a8:	40023800 	.word	0x40023800
 80045ac:	0800a7b4 	.word	0x0800a7b4
 80045b0:	2000000c 	.word	0x2000000c
 80045b4:	20000010 	.word	0x20000010

080045b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045bc:	b090      	sub	sp, #64	@ 0x40
 80045be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045d0:	4b59      	ldr	r3, [pc, #356]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x180>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f003 030c 	and.w	r3, r3, #12
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d00d      	beq.n	80045f8 <HAL_RCC_GetSysClockFreq+0x40>
 80045dc:	2b08      	cmp	r3, #8
 80045de:	f200 80a1 	bhi.w	8004724 <HAL_RCC_GetSysClockFreq+0x16c>
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <HAL_RCC_GetSysClockFreq+0x34>
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d003      	beq.n	80045f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80045ea:	e09b      	b.n	8004724 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045ec:	4b53      	ldr	r3, [pc, #332]	@ (800473c <HAL_RCC_GetSysClockFreq+0x184>)
 80045ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045f0:	e09b      	b.n	800472a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045f2:	4b53      	ldr	r3, [pc, #332]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x188>)
 80045f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045f6:	e098      	b.n	800472a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045f8:	4b4f      	ldr	r3, [pc, #316]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x180>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004600:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004602:	4b4d      	ldr	r3, [pc, #308]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x180>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d028      	beq.n	8004660 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800460e:	4b4a      	ldr	r3, [pc, #296]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x180>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	099b      	lsrs	r3, r3, #6
 8004614:	2200      	movs	r2, #0
 8004616:	623b      	str	r3, [r7, #32]
 8004618:	627a      	str	r2, [r7, #36]	@ 0x24
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004620:	2100      	movs	r1, #0
 8004622:	4b47      	ldr	r3, [pc, #284]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x188>)
 8004624:	fb03 f201 	mul.w	r2, r3, r1
 8004628:	2300      	movs	r3, #0
 800462a:	fb00 f303 	mul.w	r3, r0, r3
 800462e:	4413      	add	r3, r2
 8004630:	4a43      	ldr	r2, [pc, #268]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x188>)
 8004632:	fba0 1202 	umull	r1, r2, r0, r2
 8004636:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004638:	460a      	mov	r2, r1
 800463a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800463c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800463e:	4413      	add	r3, r2
 8004640:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004644:	2200      	movs	r2, #0
 8004646:	61bb      	str	r3, [r7, #24]
 8004648:	61fa      	str	r2, [r7, #28]
 800464a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800464e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004652:	f7fc fb21 	bl	8000c98 <__aeabi_uldivmod>
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	4613      	mov	r3, r2
 800465c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800465e:	e053      	b.n	8004708 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004660:	4b35      	ldr	r3, [pc, #212]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x180>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	099b      	lsrs	r3, r3, #6
 8004666:	2200      	movs	r2, #0
 8004668:	613b      	str	r3, [r7, #16]
 800466a:	617a      	str	r2, [r7, #20]
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004672:	f04f 0b00 	mov.w	fp, #0
 8004676:	4652      	mov	r2, sl
 8004678:	465b      	mov	r3, fp
 800467a:	f04f 0000 	mov.w	r0, #0
 800467e:	f04f 0100 	mov.w	r1, #0
 8004682:	0159      	lsls	r1, r3, #5
 8004684:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004688:	0150      	lsls	r0, r2, #5
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	ebb2 080a 	subs.w	r8, r2, sl
 8004692:	eb63 090b 	sbc.w	r9, r3, fp
 8004696:	f04f 0200 	mov.w	r2, #0
 800469a:	f04f 0300 	mov.w	r3, #0
 800469e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80046a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80046a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80046aa:	ebb2 0408 	subs.w	r4, r2, r8
 80046ae:	eb63 0509 	sbc.w	r5, r3, r9
 80046b2:	f04f 0200 	mov.w	r2, #0
 80046b6:	f04f 0300 	mov.w	r3, #0
 80046ba:	00eb      	lsls	r3, r5, #3
 80046bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046c0:	00e2      	lsls	r2, r4, #3
 80046c2:	4614      	mov	r4, r2
 80046c4:	461d      	mov	r5, r3
 80046c6:	eb14 030a 	adds.w	r3, r4, sl
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	eb45 030b 	adc.w	r3, r5, fp
 80046d0:	607b      	str	r3, [r7, #4]
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046de:	4629      	mov	r1, r5
 80046e0:	028b      	lsls	r3, r1, #10
 80046e2:	4621      	mov	r1, r4
 80046e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046e8:	4621      	mov	r1, r4
 80046ea:	028a      	lsls	r2, r1, #10
 80046ec:	4610      	mov	r0, r2
 80046ee:	4619      	mov	r1, r3
 80046f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046f2:	2200      	movs	r2, #0
 80046f4:	60bb      	str	r3, [r7, #8]
 80046f6:	60fa      	str	r2, [r7, #12]
 80046f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046fc:	f7fc facc 	bl	8000c98 <__aeabi_uldivmod>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	4613      	mov	r3, r2
 8004706:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004708:	4b0b      	ldr	r3, [pc, #44]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x180>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	0c1b      	lsrs	r3, r3, #16
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	3301      	adds	r3, #1
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004718:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800471a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004720:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004722:	e002      	b.n	800472a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004724:	4b05      	ldr	r3, [pc, #20]	@ (800473c <HAL_RCC_GetSysClockFreq+0x184>)
 8004726:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800472a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800472c:	4618      	mov	r0, r3
 800472e:	3740      	adds	r7, #64	@ 0x40
 8004730:	46bd      	mov	sp, r7
 8004732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004736:	bf00      	nop
 8004738:	40023800 	.word	0x40023800
 800473c:	00f42400 	.word	0x00f42400
 8004740:	017d7840 	.word	0x017d7840

08004744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004748:	4b03      	ldr	r3, [pc, #12]	@ (8004758 <HAL_RCC_GetHCLKFreq+0x14>)
 800474a:	681b      	ldr	r3, [r3, #0]
}
 800474c:	4618      	mov	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	2000000c 	.word	0x2000000c

0800475c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004760:	f7ff fff0 	bl	8004744 <HAL_RCC_GetHCLKFreq>
 8004764:	4602      	mov	r2, r0
 8004766:	4b05      	ldr	r3, [pc, #20]	@ (800477c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	0a9b      	lsrs	r3, r3, #10
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	4903      	ldr	r1, [pc, #12]	@ (8004780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004772:	5ccb      	ldrb	r3, [r1, r3]
 8004774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004778:	4618      	mov	r0, r3
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40023800 	.word	0x40023800
 8004780:	0800a7c4 	.word	0x0800a7c4

08004784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004788:	f7ff ffdc 	bl	8004744 <HAL_RCC_GetHCLKFreq>
 800478c:	4602      	mov	r2, r0
 800478e:	4b05      	ldr	r3, [pc, #20]	@ (80047a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	0b5b      	lsrs	r3, r3, #13
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	4903      	ldr	r1, [pc, #12]	@ (80047a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800479a:	5ccb      	ldrb	r3, [r1, r3]
 800479c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	40023800 	.word	0x40023800
 80047a8:	0800a7c4 	.word	0x0800a7c4

080047ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e041      	b.n	8004842 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7fd fce6 	bl	80021a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3304      	adds	r3, #4
 80047e8:	4619      	mov	r1, r3
 80047ea:	4610      	mov	r0, r2
 80047ec:	f000 fc3c 	bl	8005068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	d001      	beq.n	8004864 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e044      	b.n	80048ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0201 	orr.w	r2, r2, #1
 800487a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a1e      	ldr	r2, [pc, #120]	@ (80048fc <HAL_TIM_Base_Start_IT+0xb0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d018      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x6c>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800488e:	d013      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x6c>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a1a      	ldr	r2, [pc, #104]	@ (8004900 <HAL_TIM_Base_Start_IT+0xb4>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00e      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x6c>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a19      	ldr	r2, [pc, #100]	@ (8004904 <HAL_TIM_Base_Start_IT+0xb8>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d009      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x6c>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a17      	ldr	r2, [pc, #92]	@ (8004908 <HAL_TIM_Base_Start_IT+0xbc>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d004      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x6c>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a16      	ldr	r2, [pc, #88]	@ (800490c <HAL_TIM_Base_Start_IT+0xc0>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d111      	bne.n	80048dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b06      	cmp	r3, #6
 80048c8:	d010      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 0201 	orr.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048da:	e007      	b.n	80048ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40010000 	.word	0x40010000
 8004900:	40000400 	.word	0x40000400
 8004904:	40000800 	.word	0x40000800
 8004908:	40000c00 	.word	0x40000c00
 800490c:	40014000 	.word	0x40014000

08004910 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e041      	b.n	80049a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d106      	bne.n	800493c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f839 	bl	80049ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3304      	adds	r3, #4
 800494c:	4619      	mov	r1, r3
 800494e:	4610      	mov	r0, r2
 8004950:	f000 fb8a 	bl	8005068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d109      	bne.n	80049e8 <HAL_TIM_PWM_Start+0x24>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b01      	cmp	r3, #1
 80049de:	bf14      	ite	ne
 80049e0:	2301      	movne	r3, #1
 80049e2:	2300      	moveq	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	e022      	b.n	8004a2e <HAL_TIM_PWM_Start+0x6a>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d109      	bne.n	8004a02 <HAL_TIM_PWM_Start+0x3e>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	bf14      	ite	ne
 80049fa:	2301      	movne	r3, #1
 80049fc:	2300      	moveq	r3, #0
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	e015      	b.n	8004a2e <HAL_TIM_PWM_Start+0x6a>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d109      	bne.n	8004a1c <HAL_TIM_PWM_Start+0x58>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	bf14      	ite	ne
 8004a14:	2301      	movne	r3, #1
 8004a16:	2300      	moveq	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	e008      	b.n	8004a2e <HAL_TIM_PWM_Start+0x6a>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	bf14      	ite	ne
 8004a28:	2301      	movne	r3, #1
 8004a2a:	2300      	moveq	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e068      	b.n	8004b08 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d104      	bne.n	8004a46 <HAL_TIM_PWM_Start+0x82>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a44:	e013      	b.n	8004a6e <HAL_TIM_PWM_Start+0xaa>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d104      	bne.n	8004a56 <HAL_TIM_PWM_Start+0x92>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a54:	e00b      	b.n	8004a6e <HAL_TIM_PWM_Start+0xaa>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d104      	bne.n	8004a66 <HAL_TIM_PWM_Start+0xa2>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a64:	e003      	b.n	8004a6e <HAL_TIM_PWM_Start+0xaa>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2201      	movs	r2, #1
 8004a74:	6839      	ldr	r1, [r7, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fda2 	bl	80055c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a23      	ldr	r2, [pc, #140]	@ (8004b10 <HAL_TIM_PWM_Start+0x14c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d107      	bne.n	8004a96 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8004b10 <HAL_TIM_PWM_Start+0x14c>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d018      	beq.n	8004ad2 <HAL_TIM_PWM_Start+0x10e>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aa8:	d013      	beq.n	8004ad2 <HAL_TIM_PWM_Start+0x10e>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a19      	ldr	r2, [pc, #100]	@ (8004b14 <HAL_TIM_PWM_Start+0x150>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d00e      	beq.n	8004ad2 <HAL_TIM_PWM_Start+0x10e>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a17      	ldr	r2, [pc, #92]	@ (8004b18 <HAL_TIM_PWM_Start+0x154>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d009      	beq.n	8004ad2 <HAL_TIM_PWM_Start+0x10e>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a16      	ldr	r2, [pc, #88]	@ (8004b1c <HAL_TIM_PWM_Start+0x158>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d004      	beq.n	8004ad2 <HAL_TIM_PWM_Start+0x10e>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a14      	ldr	r2, [pc, #80]	@ (8004b20 <HAL_TIM_PWM_Start+0x15c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d111      	bne.n	8004af6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b06      	cmp	r3, #6
 8004ae2:	d010      	beq.n	8004b06 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0201 	orr.w	r2, r2, #1
 8004af2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af4:	e007      	b.n	8004b06 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f042 0201 	orr.w	r2, r2, #1
 8004b04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40010000 	.word	0x40010000
 8004b14:	40000400 	.word	0x40000400
 8004b18:	40000800 	.word	0x40000800
 8004b1c:	40000c00 	.word	0x40000c00
 8004b20:	40014000 	.word	0x40014000

08004b24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d020      	beq.n	8004b88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01b      	beq.n	8004b88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f06f 0202 	mvn.w	r2, #2
 8004b58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fa5b 	bl	800502a <HAL_TIM_IC_CaptureCallback>
 8004b74:	e005      	b.n	8004b82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fa4d 	bl	8005016 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fa5e 	bl	800503e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d020      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d01b      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0204 	mvn.w	r2, #4
 8004ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2202      	movs	r2, #2
 8004baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fa35 	bl	800502a <HAL_TIM_IC_CaptureCallback>
 8004bc0:	e005      	b.n	8004bce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fa27 	bl	8005016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 fa38 	bl	800503e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f003 0308 	and.w	r3, r3, #8
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d020      	beq.n	8004c20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d01b      	beq.n	8004c20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0208 	mvn.w	r2, #8
 8004bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2204      	movs	r2, #4
 8004bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fa0f 	bl	800502a <HAL_TIM_IC_CaptureCallback>
 8004c0c:	e005      	b.n	8004c1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 fa01 	bl	8005016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fa12 	bl	800503e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f003 0310 	and.w	r3, r3, #16
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d020      	beq.n	8004c6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f003 0310 	and.w	r3, r3, #16
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01b      	beq.n	8004c6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f06f 0210 	mvn.w	r2, #16
 8004c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2208      	movs	r2, #8
 8004c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f9e9 	bl	800502a <HAL_TIM_IC_CaptureCallback>
 8004c58:	e005      	b.n	8004c66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f9db 	bl	8005016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f9ec 	bl	800503e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00c      	beq.n	8004c90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d007      	beq.n	8004c90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f06f 0201 	mvn.w	r2, #1
 8004c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7fc fd70 	bl	8001770 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00c      	beq.n	8004cb4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d007      	beq.n	8004cb4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fd76 	bl	80057a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00c      	beq.n	8004cd8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d007      	beq.n	8004cd8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f9bd 	bl	8005052 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00c      	beq.n	8004cfc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f003 0320 	and.w	r3, r3, #32
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d007      	beq.n	8004cfc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f06f 0220 	mvn.w	r2, #32
 8004cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fd48 	bl	800578c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cfc:	bf00      	nop
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d10:	2300      	movs	r3, #0
 8004d12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d1e:	2302      	movs	r3, #2
 8004d20:	e0ae      	b.n	8004e80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b0c      	cmp	r3, #12
 8004d2e:	f200 809f 	bhi.w	8004e70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d32:	a201      	add	r2, pc, #4	@ (adr r2, 8004d38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d38:	08004d6d 	.word	0x08004d6d
 8004d3c:	08004e71 	.word	0x08004e71
 8004d40:	08004e71 	.word	0x08004e71
 8004d44:	08004e71 	.word	0x08004e71
 8004d48:	08004dad 	.word	0x08004dad
 8004d4c:	08004e71 	.word	0x08004e71
 8004d50:	08004e71 	.word	0x08004e71
 8004d54:	08004e71 	.word	0x08004e71
 8004d58:	08004def 	.word	0x08004def
 8004d5c:	08004e71 	.word	0x08004e71
 8004d60:	08004e71 	.word	0x08004e71
 8004d64:	08004e71 	.word	0x08004e71
 8004d68:	08004e2f 	.word	0x08004e2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 f9fe 	bl	8005174 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699a      	ldr	r2, [r3, #24]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0208 	orr.w	r2, r2, #8
 8004d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699a      	ldr	r2, [r3, #24]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0204 	bic.w	r2, r2, #4
 8004d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6999      	ldr	r1, [r3, #24]
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	619a      	str	r2, [r3, #24]
      break;
 8004daa:	e064      	b.n	8004e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68b9      	ldr	r1, [r7, #8]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fa44 	bl	8005240 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699a      	ldr	r2, [r3, #24]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699a      	ldr	r2, [r3, #24]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6999      	ldr	r1, [r3, #24]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	021a      	lsls	r2, r3, #8
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	619a      	str	r2, [r3, #24]
      break;
 8004dec:	e043      	b.n	8004e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 fa8f 	bl	8005318 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69da      	ldr	r2, [r3, #28]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 0208 	orr.w	r2, r2, #8
 8004e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	69da      	ldr	r2, [r3, #28]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0204 	bic.w	r2, r2, #4
 8004e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69d9      	ldr	r1, [r3, #28]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	61da      	str	r2, [r3, #28]
      break;
 8004e2c:	e023      	b.n	8004e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68b9      	ldr	r1, [r7, #8]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 fad9 	bl	80053ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	69da      	ldr	r2, [r3, #28]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69da      	ldr	r2, [r3, #28]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69d9      	ldr	r1, [r3, #28]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	021a      	lsls	r2, r3, #8
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	61da      	str	r2, [r3, #28]
      break;
 8004e6e:	e002      	b.n	8004e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	75fb      	strb	r3, [r7, #23]
      break;
 8004e74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3718      	adds	r7, #24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e0b4      	b.n	800500e <HAL_TIM_ConfigClockSource+0x186>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ec2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004eca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004edc:	d03e      	beq.n	8004f5c <HAL_TIM_ConfigClockSource+0xd4>
 8004ede:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ee2:	f200 8087 	bhi.w	8004ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eea:	f000 8086 	beq.w	8004ffa <HAL_TIM_ConfigClockSource+0x172>
 8004eee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ef2:	d87f      	bhi.n	8004ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef4:	2b70      	cmp	r3, #112	@ 0x70
 8004ef6:	d01a      	beq.n	8004f2e <HAL_TIM_ConfigClockSource+0xa6>
 8004ef8:	2b70      	cmp	r3, #112	@ 0x70
 8004efa:	d87b      	bhi.n	8004ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8004efc:	2b60      	cmp	r3, #96	@ 0x60
 8004efe:	d050      	beq.n	8004fa2 <HAL_TIM_ConfigClockSource+0x11a>
 8004f00:	2b60      	cmp	r3, #96	@ 0x60
 8004f02:	d877      	bhi.n	8004ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8004f04:	2b50      	cmp	r3, #80	@ 0x50
 8004f06:	d03c      	beq.n	8004f82 <HAL_TIM_ConfigClockSource+0xfa>
 8004f08:	2b50      	cmp	r3, #80	@ 0x50
 8004f0a:	d873      	bhi.n	8004ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8004f0c:	2b40      	cmp	r3, #64	@ 0x40
 8004f0e:	d058      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0x13a>
 8004f10:	2b40      	cmp	r3, #64	@ 0x40
 8004f12:	d86f      	bhi.n	8004ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8004f14:	2b30      	cmp	r3, #48	@ 0x30
 8004f16:	d064      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8004f18:	2b30      	cmp	r3, #48	@ 0x30
 8004f1a:	d86b      	bhi.n	8004ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8004f1c:	2b20      	cmp	r3, #32
 8004f1e:	d060      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8004f20:	2b20      	cmp	r3, #32
 8004f22:	d867      	bhi.n	8004ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d05c      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8004f28:	2b10      	cmp	r3, #16
 8004f2a:	d05a      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8004f2c:	e062      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f3e:	f000 fb1f 	bl	8005580 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	609a      	str	r2, [r3, #8]
      break;
 8004f5a:	e04f      	b.n	8004ffc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f6c:	f000 fb08 	bl	8005580 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689a      	ldr	r2, [r3, #8]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f7e:	609a      	str	r2, [r3, #8]
      break;
 8004f80:	e03c      	b.n	8004ffc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f000 fa7c 	bl	800548c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2150      	movs	r1, #80	@ 0x50
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 fad5 	bl	800554a <TIM_ITRx_SetConfig>
      break;
 8004fa0:	e02c      	b.n	8004ffc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f000 fa9b 	bl	80054ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2160      	movs	r1, #96	@ 0x60
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fac5 	bl	800554a <TIM_ITRx_SetConfig>
      break;
 8004fc0:	e01c      	b.n	8004ffc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fce:	461a      	mov	r2, r3
 8004fd0:	f000 fa5c 	bl	800548c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2140      	movs	r1, #64	@ 0x40
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 fab5 	bl	800554a <TIM_ITRx_SetConfig>
      break;
 8004fe0:	e00c      	b.n	8004ffc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4619      	mov	r1, r3
 8004fec:	4610      	mov	r0, r2
 8004fee:	f000 faac 	bl	800554a <TIM_ITRx_SetConfig>
      break;
 8004ff2:	e003      	b.n	8004ffc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff8:	e000      	b.n	8004ffc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ffa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800500c:	7bfb      	ldrb	r3, [r7, #15]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800503e:	b480      	push	{r7}
 8005040:	b083      	sub	sp, #12
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005046:	bf00      	nop
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
	...

08005068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a37      	ldr	r2, [pc, #220]	@ (8005158 <TIM_Base_SetConfig+0xf0>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00f      	beq.n	80050a0 <TIM_Base_SetConfig+0x38>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005086:	d00b      	beq.n	80050a0 <TIM_Base_SetConfig+0x38>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a34      	ldr	r2, [pc, #208]	@ (800515c <TIM_Base_SetConfig+0xf4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d007      	beq.n	80050a0 <TIM_Base_SetConfig+0x38>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a33      	ldr	r2, [pc, #204]	@ (8005160 <TIM_Base_SetConfig+0xf8>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d003      	beq.n	80050a0 <TIM_Base_SetConfig+0x38>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a32      	ldr	r2, [pc, #200]	@ (8005164 <TIM_Base_SetConfig+0xfc>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d108      	bne.n	80050b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a28      	ldr	r2, [pc, #160]	@ (8005158 <TIM_Base_SetConfig+0xf0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d01b      	beq.n	80050f2 <TIM_Base_SetConfig+0x8a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050c0:	d017      	beq.n	80050f2 <TIM_Base_SetConfig+0x8a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a25      	ldr	r2, [pc, #148]	@ (800515c <TIM_Base_SetConfig+0xf4>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d013      	beq.n	80050f2 <TIM_Base_SetConfig+0x8a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a24      	ldr	r2, [pc, #144]	@ (8005160 <TIM_Base_SetConfig+0xf8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d00f      	beq.n	80050f2 <TIM_Base_SetConfig+0x8a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a23      	ldr	r2, [pc, #140]	@ (8005164 <TIM_Base_SetConfig+0xfc>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00b      	beq.n	80050f2 <TIM_Base_SetConfig+0x8a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a22      	ldr	r2, [pc, #136]	@ (8005168 <TIM_Base_SetConfig+0x100>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d007      	beq.n	80050f2 <TIM_Base_SetConfig+0x8a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a21      	ldr	r2, [pc, #132]	@ (800516c <TIM_Base_SetConfig+0x104>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d003      	beq.n	80050f2 <TIM_Base_SetConfig+0x8a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a20      	ldr	r2, [pc, #128]	@ (8005170 <TIM_Base_SetConfig+0x108>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d108      	bne.n	8005104 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	4313      	orrs	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	689a      	ldr	r2, [r3, #8]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a0c      	ldr	r2, [pc, #48]	@ (8005158 <TIM_Base_SetConfig+0xf0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d103      	bne.n	8005132 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	691a      	ldr	r2, [r3, #16]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f043 0204 	orr.w	r2, r3, #4
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	601a      	str	r2, [r3, #0]
}
 800514a:	bf00      	nop
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40010000 	.word	0x40010000
 800515c:	40000400 	.word	0x40000400
 8005160:	40000800 	.word	0x40000800
 8005164:	40000c00 	.word	0x40000c00
 8005168:	40014000 	.word	0x40014000
 800516c:	40014400 	.word	0x40014400
 8005170:	40014800 	.word	0x40014800

08005174 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	f023 0201 	bic.w	r2, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0303 	bic.w	r3, r3, #3
 80051aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f023 0302 	bic.w	r3, r3, #2
 80051bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a1c      	ldr	r2, [pc, #112]	@ (800523c <TIM_OC1_SetConfig+0xc8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d10c      	bne.n	80051ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f023 0308 	bic.w	r3, r3, #8
 80051d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f023 0304 	bic.w	r3, r3, #4
 80051e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a13      	ldr	r2, [pc, #76]	@ (800523c <TIM_OC1_SetConfig+0xc8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d111      	bne.n	8005216 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	4313      	orrs	r3, r2
 800520a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	4313      	orrs	r3, r2
 8005214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	621a      	str	r2, [r3, #32]
}
 8005230:	bf00      	nop
 8005232:	371c      	adds	r7, #28
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	40010000 	.word	0x40010000

08005240 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	f023 0210 	bic.w	r2, r3, #16
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800526e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	021b      	lsls	r3, r3, #8
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	4313      	orrs	r3, r2
 8005282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f023 0320 	bic.w	r3, r3, #32
 800528a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	011b      	lsls	r3, r3, #4
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	4313      	orrs	r3, r2
 8005296:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a1e      	ldr	r2, [pc, #120]	@ (8005314 <TIM_OC2_SetConfig+0xd4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d10d      	bne.n	80052bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a15      	ldr	r2, [pc, #84]	@ (8005314 <TIM_OC2_SetConfig+0xd4>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d113      	bne.n	80052ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	4313      	orrs	r3, r2
 80052de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	621a      	str	r2, [r3, #32]
}
 8005306:	bf00      	nop
 8005308:	371c      	adds	r7, #28
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40010000 	.word	0x40010000

08005318 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 0303 	bic.w	r3, r3, #3
 800534e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	021b      	lsls	r3, r3, #8
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a1d      	ldr	r2, [pc, #116]	@ (80053e8 <TIM_OC3_SetConfig+0xd0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d10d      	bne.n	8005392 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800537c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	021b      	lsls	r3, r3, #8
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	4313      	orrs	r3, r2
 8005388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a14      	ldr	r2, [pc, #80]	@ (80053e8 <TIM_OC3_SetConfig+0xd0>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d113      	bne.n	80053c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4313      	orrs	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	621a      	str	r2, [r3, #32]
}
 80053dc:	bf00      	nop
 80053de:	371c      	adds	r7, #28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	40010000 	.word	0x40010000

080053ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800541a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	021b      	lsls	r3, r3, #8
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005436:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	031b      	lsls	r3, r3, #12
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4313      	orrs	r3, r2
 8005442:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a10      	ldr	r2, [pc, #64]	@ (8005488 <TIM_OC4_SetConfig+0x9c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d109      	bne.n	8005460 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005452:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	019b      	lsls	r3, r3, #6
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	621a      	str	r2, [r3, #32]
}
 800547a:	bf00      	nop
 800547c:	371c      	adds	r7, #28
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	40010000 	.word	0x40010000

0800548c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800548c:	b480      	push	{r7}
 800548e:	b087      	sub	sp, #28
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	f023 0201 	bic.w	r2, r3, #1
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f023 030a 	bic.w	r3, r3, #10
 80054c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	621a      	str	r2, [r3, #32]
}
 80054de:	bf00      	nop
 80054e0:	371c      	adds	r7, #28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b087      	sub	sp, #28
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	60f8      	str	r0, [r7, #12]
 80054f2:	60b9      	str	r1, [r7, #8]
 80054f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	f023 0210 	bic.w	r2, r3, #16
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005514:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	031b      	lsls	r3, r3, #12
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	4313      	orrs	r3, r2
 800551e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005526:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	621a      	str	r2, [r3, #32]
}
 800553e:	bf00      	nop
 8005540:	371c      	adds	r7, #28
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800554a:	b480      	push	{r7}
 800554c:	b085      	sub	sp, #20
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005560:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	f043 0307 	orr.w	r3, r3, #7
 800556c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	609a      	str	r2, [r3, #8]
}
 8005574:	bf00      	nop
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
 800558c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800559a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	021a      	lsls	r2, r3, #8
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	609a      	str	r2, [r3, #8]
}
 80055b4:	bf00      	nop
 80055b6:	371c      	adds	r7, #28
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f003 031f 	and.w	r3, r3, #31
 80055d2:	2201      	movs	r2, #1
 80055d4:	fa02 f303 	lsl.w	r3, r2, r3
 80055d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6a1a      	ldr	r2, [r3, #32]
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	43db      	mvns	r3, r3
 80055e2:	401a      	ands	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6a1a      	ldr	r2, [r3, #32]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f003 031f 	and.w	r3, r3, #31
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	fa01 f303 	lsl.w	r3, r1, r3
 80055f8:	431a      	orrs	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	621a      	str	r2, [r3, #32]
}
 80055fe:	bf00      	nop
 8005600:	371c      	adds	r7, #28
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
	...

0800560c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005620:	2302      	movs	r3, #2
 8005622:	e050      	b.n	80056c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800564a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a1c      	ldr	r2, [pc, #112]	@ (80056d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d018      	beq.n	800569a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005670:	d013      	beq.n	800569a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a18      	ldr	r2, [pc, #96]	@ (80056d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00e      	beq.n	800569a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a16      	ldr	r2, [pc, #88]	@ (80056dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d009      	beq.n	800569a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a15      	ldr	r2, [pc, #84]	@ (80056e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d004      	beq.n	800569a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a13      	ldr	r2, [pc, #76]	@ (80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d10c      	bne.n	80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	40010000 	.word	0x40010000
 80056d8:	40000400 	.word	0x40000400
 80056dc:	40000800 	.word	0x40000800
 80056e0:	40000c00 	.word	0x40000c00
 80056e4:	40014000 	.word	0x40014000

080056e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005700:	2302      	movs	r3, #2
 8005702:	e03d      	b.n	8005780 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	4313      	orrs	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4313      	orrs	r3, r2
 8005742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	4313      	orrs	r3, r2
 800575e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	4313      	orrs	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e042      	b.n	800584c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d106      	bne.n	80057e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7fc fdb4 	bl	8002348 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2224      	movs	r2, #36	@ 0x24
 80057e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f973 	bl	8005ae4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	691a      	ldr	r2, [r3, #16]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800580c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	695a      	ldr	r2, [r3, #20]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800581c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68da      	ldr	r2, [r3, #12]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800582c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2220      	movs	r2, #32
 8005838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2220      	movs	r2, #32
 8005840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b08a      	sub	sp, #40	@ 0x28
 8005858:	af02      	add	r7, sp, #8
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	603b      	str	r3, [r7, #0]
 8005860:	4613      	mov	r3, r2
 8005862:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005864:	2300      	movs	r3, #0
 8005866:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b20      	cmp	r3, #32
 8005872:	d175      	bne.n	8005960 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <HAL_UART_Transmit+0x2c>
 800587a:	88fb      	ldrh	r3, [r7, #6]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d101      	bne.n	8005884 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e06e      	b.n	8005962 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2221      	movs	r2, #33	@ 0x21
 800588e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005892:	f7fc ff91 	bl	80027b8 <HAL_GetTick>
 8005896:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	88fa      	ldrh	r2, [r7, #6]
 800589c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	88fa      	ldrh	r2, [r7, #6]
 80058a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ac:	d108      	bne.n	80058c0 <HAL_UART_Transmit+0x6c>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d104      	bne.n	80058c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80058b6:	2300      	movs	r3, #0
 80058b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	61bb      	str	r3, [r7, #24]
 80058be:	e003      	b.n	80058c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058c4:	2300      	movs	r3, #0
 80058c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058c8:	e02e      	b.n	8005928 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2200      	movs	r2, #0
 80058d2:	2180      	movs	r1, #128	@ 0x80
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 f848 	bl	800596a <UART_WaitOnFlagUntilTimeout>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d005      	beq.n	80058ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e03a      	b.n	8005962 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10b      	bne.n	800590a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005900:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	3302      	adds	r3, #2
 8005906:	61bb      	str	r3, [r7, #24]
 8005908:	e007      	b.n	800591a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	781a      	ldrb	r2, [r3, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	3301      	adds	r3, #1
 8005918:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800591e:	b29b      	uxth	r3, r3
 8005920:	3b01      	subs	r3, #1
 8005922:	b29a      	uxth	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800592c:	b29b      	uxth	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1cb      	bne.n	80058ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2200      	movs	r2, #0
 800593a:	2140      	movs	r1, #64	@ 0x40
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 f814 	bl	800596a <UART_WaitOnFlagUntilTimeout>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d005      	beq.n	8005954 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2220      	movs	r2, #32
 800594c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e006      	b.n	8005962 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2220      	movs	r2, #32
 8005958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	e000      	b.n	8005962 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005960:	2302      	movs	r3, #2
  }
}
 8005962:	4618      	mov	r0, r3
 8005964:	3720      	adds	r7, #32
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b086      	sub	sp, #24
 800596e:	af00      	add	r7, sp, #0
 8005970:	60f8      	str	r0, [r7, #12]
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	603b      	str	r3, [r7, #0]
 8005976:	4613      	mov	r3, r2
 8005978:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800597a:	e03b      	b.n	80059f4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005982:	d037      	beq.n	80059f4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005984:	f7fc ff18 	bl	80027b8 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	6a3a      	ldr	r2, [r7, #32]
 8005990:	429a      	cmp	r2, r3
 8005992:	d302      	bcc.n	800599a <UART_WaitOnFlagUntilTimeout+0x30>
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e03a      	b.n	8005a14 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d023      	beq.n	80059f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2b80      	cmp	r3, #128	@ 0x80
 80059b0:	d020      	beq.n	80059f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b40      	cmp	r3, #64	@ 0x40
 80059b6:	d01d      	beq.n	80059f4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0308 	and.w	r3, r3, #8
 80059c2:	2b08      	cmp	r3, #8
 80059c4:	d116      	bne.n	80059f4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80059c6:	2300      	movs	r3, #0
 80059c8:	617b      	str	r3, [r7, #20]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	617b      	str	r3, [r7, #20]
 80059da:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 f81d 	bl	8005a1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2208      	movs	r2, #8
 80059e6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e00f      	b.n	8005a14 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	4013      	ands	r3, r2
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	bf0c      	ite	eq
 8005a04:	2301      	moveq	r3, #1
 8005a06:	2300      	movne	r3, #0
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	79fb      	ldrb	r3, [r7, #7]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d0b4      	beq.n	800597c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3718      	adds	r7, #24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b095      	sub	sp, #84	@ 0x54
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	330c      	adds	r3, #12
 8005a2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a2e:	e853 3f00 	ldrex	r3, [r3]
 8005a32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	330c      	adds	r3, #12
 8005a42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a44:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a4c:	e841 2300 	strex	r3, r2, [r1]
 8005a50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1e5      	bne.n	8005a24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3314      	adds	r3, #20
 8005a5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	e853 3f00 	ldrex	r3, [r3]
 8005a66:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	f023 0301 	bic.w	r3, r3, #1
 8005a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3314      	adds	r3, #20
 8005a76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a80:	e841 2300 	strex	r3, r2, [r1]
 8005a84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1e5      	bne.n	8005a58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d119      	bne.n	8005ac8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	330c      	adds	r3, #12
 8005a9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	e853 3f00 	ldrex	r3, [r3]
 8005aa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f023 0310 	bic.w	r3, r3, #16
 8005aaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	330c      	adds	r3, #12
 8005ab2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ab4:	61ba      	str	r2, [r7, #24]
 8005ab6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab8:	6979      	ldr	r1, [r7, #20]
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	e841 2300 	strex	r3, r2, [r1]
 8005ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1e5      	bne.n	8005a94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005ad6:	bf00      	nop
 8005ad8:	3754      	adds	r7, #84	@ 0x54
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
	...

08005ae4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ae8:	b0c0      	sub	sp, #256	@ 0x100
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b00:	68d9      	ldr	r1, [r3, #12]
 8005b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	ea40 0301 	orr.w	r3, r0, r1
 8005b0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	431a      	orrs	r2, r3
 8005b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005b3c:	f021 010c 	bic.w	r1, r1, #12
 8005b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b4a:	430b      	orrs	r3, r1
 8005b4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b5e:	6999      	ldr	r1, [r3, #24]
 8005b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	ea40 0301 	orr.w	r3, r0, r1
 8005b6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	4b8f      	ldr	r3, [pc, #572]	@ (8005db0 <UART_SetConfig+0x2cc>)
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d005      	beq.n	8005b84 <UART_SetConfig+0xa0>
 8005b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	4b8d      	ldr	r3, [pc, #564]	@ (8005db4 <UART_SetConfig+0x2d0>)
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d104      	bne.n	8005b8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b84:	f7fe fdfe 	bl	8004784 <HAL_RCC_GetPCLK2Freq>
 8005b88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b8c:	e003      	b.n	8005b96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b8e:	f7fe fde5 	bl	800475c <HAL_RCC_GetPCLK1Freq>
 8005b92:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b9a:	69db      	ldr	r3, [r3, #28]
 8005b9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ba0:	f040 810c 	bne.w	8005dbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ba4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005bae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005bb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005bb6:	4622      	mov	r2, r4
 8005bb8:	462b      	mov	r3, r5
 8005bba:	1891      	adds	r1, r2, r2
 8005bbc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005bbe:	415b      	adcs	r3, r3
 8005bc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	eb12 0801 	adds.w	r8, r2, r1
 8005bcc:	4629      	mov	r1, r5
 8005bce:	eb43 0901 	adc.w	r9, r3, r1
 8005bd2:	f04f 0200 	mov.w	r2, #0
 8005bd6:	f04f 0300 	mov.w	r3, #0
 8005bda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005be2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005be6:	4690      	mov	r8, r2
 8005be8:	4699      	mov	r9, r3
 8005bea:	4623      	mov	r3, r4
 8005bec:	eb18 0303 	adds.w	r3, r8, r3
 8005bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005bf4:	462b      	mov	r3, r5
 8005bf6:	eb49 0303 	adc.w	r3, r9, r3
 8005bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c0a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005c0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c12:	460b      	mov	r3, r1
 8005c14:	18db      	adds	r3, r3, r3
 8005c16:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c18:	4613      	mov	r3, r2
 8005c1a:	eb42 0303 	adc.w	r3, r2, r3
 8005c1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005c24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005c28:	f7fb f836 	bl	8000c98 <__aeabi_uldivmod>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4b61      	ldr	r3, [pc, #388]	@ (8005db8 <UART_SetConfig+0x2d4>)
 8005c32:	fba3 2302 	umull	r2, r3, r3, r2
 8005c36:	095b      	lsrs	r3, r3, #5
 8005c38:	011c      	lsls	r4, r3, #4
 8005c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c44:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005c48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005c4c:	4642      	mov	r2, r8
 8005c4e:	464b      	mov	r3, r9
 8005c50:	1891      	adds	r1, r2, r2
 8005c52:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005c54:	415b      	adcs	r3, r3
 8005c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005c5c:	4641      	mov	r1, r8
 8005c5e:	eb12 0a01 	adds.w	sl, r2, r1
 8005c62:	4649      	mov	r1, r9
 8005c64:	eb43 0b01 	adc.w	fp, r3, r1
 8005c68:	f04f 0200 	mov.w	r2, #0
 8005c6c:	f04f 0300 	mov.w	r3, #0
 8005c70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c7c:	4692      	mov	sl, r2
 8005c7e:	469b      	mov	fp, r3
 8005c80:	4643      	mov	r3, r8
 8005c82:	eb1a 0303 	adds.w	r3, sl, r3
 8005c86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c8a:	464b      	mov	r3, r9
 8005c8c:	eb4b 0303 	adc.w	r3, fp, r3
 8005c90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ca0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ca4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ca8:	460b      	mov	r3, r1
 8005caa:	18db      	adds	r3, r3, r3
 8005cac:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cae:	4613      	mov	r3, r2
 8005cb0:	eb42 0303 	adc.w	r3, r2, r3
 8005cb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005cba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005cbe:	f7fa ffeb 	bl	8000c98 <__aeabi_uldivmod>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	4b3b      	ldr	r3, [pc, #236]	@ (8005db8 <UART_SetConfig+0x2d4>)
 8005cca:	fba3 2301 	umull	r2, r3, r3, r1
 8005cce:	095b      	lsrs	r3, r3, #5
 8005cd0:	2264      	movs	r2, #100	@ 0x64
 8005cd2:	fb02 f303 	mul.w	r3, r2, r3
 8005cd6:	1acb      	subs	r3, r1, r3
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005cde:	4b36      	ldr	r3, [pc, #216]	@ (8005db8 <UART_SetConfig+0x2d4>)
 8005ce0:	fba3 2302 	umull	r2, r3, r3, r2
 8005ce4:	095b      	lsrs	r3, r3, #5
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005cec:	441c      	add	r4, r3
 8005cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cf8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005cfc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005d00:	4642      	mov	r2, r8
 8005d02:	464b      	mov	r3, r9
 8005d04:	1891      	adds	r1, r2, r2
 8005d06:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005d08:	415b      	adcs	r3, r3
 8005d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005d10:	4641      	mov	r1, r8
 8005d12:	1851      	adds	r1, r2, r1
 8005d14:	6339      	str	r1, [r7, #48]	@ 0x30
 8005d16:	4649      	mov	r1, r9
 8005d18:	414b      	adcs	r3, r1
 8005d1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d1c:	f04f 0200 	mov.w	r2, #0
 8005d20:	f04f 0300 	mov.w	r3, #0
 8005d24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005d28:	4659      	mov	r1, fp
 8005d2a:	00cb      	lsls	r3, r1, #3
 8005d2c:	4651      	mov	r1, sl
 8005d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d32:	4651      	mov	r1, sl
 8005d34:	00ca      	lsls	r2, r1, #3
 8005d36:	4610      	mov	r0, r2
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	4642      	mov	r2, r8
 8005d3e:	189b      	adds	r3, r3, r2
 8005d40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d44:	464b      	mov	r3, r9
 8005d46:	460a      	mov	r2, r1
 8005d48:	eb42 0303 	adc.w	r3, r2, r3
 8005d4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d5c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005d60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d64:	460b      	mov	r3, r1
 8005d66:	18db      	adds	r3, r3, r3
 8005d68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	eb42 0303 	adc.w	r3, r2, r3
 8005d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005d7a:	f7fa ff8d 	bl	8000c98 <__aeabi_uldivmod>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	4b0d      	ldr	r3, [pc, #52]	@ (8005db8 <UART_SetConfig+0x2d4>)
 8005d84:	fba3 1302 	umull	r1, r3, r3, r2
 8005d88:	095b      	lsrs	r3, r3, #5
 8005d8a:	2164      	movs	r1, #100	@ 0x64
 8005d8c:	fb01 f303 	mul.w	r3, r1, r3
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	3332      	adds	r3, #50	@ 0x32
 8005d96:	4a08      	ldr	r2, [pc, #32]	@ (8005db8 <UART_SetConfig+0x2d4>)
 8005d98:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9c:	095b      	lsrs	r3, r3, #5
 8005d9e:	f003 0207 	and.w	r2, r3, #7
 8005da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4422      	add	r2, r4
 8005daa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005dac:	e106      	b.n	8005fbc <UART_SetConfig+0x4d8>
 8005dae:	bf00      	nop
 8005db0:	40011000 	.word	0x40011000
 8005db4:	40011400 	.word	0x40011400
 8005db8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005dc6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005dca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005dce:	4642      	mov	r2, r8
 8005dd0:	464b      	mov	r3, r9
 8005dd2:	1891      	adds	r1, r2, r2
 8005dd4:	6239      	str	r1, [r7, #32]
 8005dd6:	415b      	adcs	r3, r3
 8005dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005dde:	4641      	mov	r1, r8
 8005de0:	1854      	adds	r4, r2, r1
 8005de2:	4649      	mov	r1, r9
 8005de4:	eb43 0501 	adc.w	r5, r3, r1
 8005de8:	f04f 0200 	mov.w	r2, #0
 8005dec:	f04f 0300 	mov.w	r3, #0
 8005df0:	00eb      	lsls	r3, r5, #3
 8005df2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005df6:	00e2      	lsls	r2, r4, #3
 8005df8:	4614      	mov	r4, r2
 8005dfa:	461d      	mov	r5, r3
 8005dfc:	4643      	mov	r3, r8
 8005dfe:	18e3      	adds	r3, r4, r3
 8005e00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e04:	464b      	mov	r3, r9
 8005e06:	eb45 0303 	adc.w	r3, r5, r3
 8005e0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e1e:	f04f 0200 	mov.w	r2, #0
 8005e22:	f04f 0300 	mov.w	r3, #0
 8005e26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005e2a:	4629      	mov	r1, r5
 8005e2c:	008b      	lsls	r3, r1, #2
 8005e2e:	4621      	mov	r1, r4
 8005e30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e34:	4621      	mov	r1, r4
 8005e36:	008a      	lsls	r2, r1, #2
 8005e38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005e3c:	f7fa ff2c 	bl	8000c98 <__aeabi_uldivmod>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	4b60      	ldr	r3, [pc, #384]	@ (8005fc8 <UART_SetConfig+0x4e4>)
 8005e46:	fba3 2302 	umull	r2, r3, r3, r2
 8005e4a:	095b      	lsrs	r3, r3, #5
 8005e4c:	011c      	lsls	r4, r3, #4
 8005e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e52:	2200      	movs	r2, #0
 8005e54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005e5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005e60:	4642      	mov	r2, r8
 8005e62:	464b      	mov	r3, r9
 8005e64:	1891      	adds	r1, r2, r2
 8005e66:	61b9      	str	r1, [r7, #24]
 8005e68:	415b      	adcs	r3, r3
 8005e6a:	61fb      	str	r3, [r7, #28]
 8005e6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e70:	4641      	mov	r1, r8
 8005e72:	1851      	adds	r1, r2, r1
 8005e74:	6139      	str	r1, [r7, #16]
 8005e76:	4649      	mov	r1, r9
 8005e78:	414b      	adcs	r3, r1
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	f04f 0200 	mov.w	r2, #0
 8005e80:	f04f 0300 	mov.w	r3, #0
 8005e84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e88:	4659      	mov	r1, fp
 8005e8a:	00cb      	lsls	r3, r1, #3
 8005e8c:	4651      	mov	r1, sl
 8005e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e92:	4651      	mov	r1, sl
 8005e94:	00ca      	lsls	r2, r1, #3
 8005e96:	4610      	mov	r0, r2
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	4642      	mov	r2, r8
 8005e9e:	189b      	adds	r3, r3, r2
 8005ea0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ea4:	464b      	mov	r3, r9
 8005ea6:	460a      	mov	r2, r1
 8005ea8:	eb42 0303 	adc.w	r3, r2, r3
 8005eac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005eba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005ebc:	f04f 0200 	mov.w	r2, #0
 8005ec0:	f04f 0300 	mov.w	r3, #0
 8005ec4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ec8:	4649      	mov	r1, r9
 8005eca:	008b      	lsls	r3, r1, #2
 8005ecc:	4641      	mov	r1, r8
 8005ece:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ed2:	4641      	mov	r1, r8
 8005ed4:	008a      	lsls	r2, r1, #2
 8005ed6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005eda:	f7fa fedd 	bl	8000c98 <__aeabi_uldivmod>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	4b38      	ldr	r3, [pc, #224]	@ (8005fc8 <UART_SetConfig+0x4e4>)
 8005ee6:	fba3 2301 	umull	r2, r3, r3, r1
 8005eea:	095b      	lsrs	r3, r3, #5
 8005eec:	2264      	movs	r2, #100	@ 0x64
 8005eee:	fb02 f303 	mul.w	r3, r2, r3
 8005ef2:	1acb      	subs	r3, r1, r3
 8005ef4:	011b      	lsls	r3, r3, #4
 8005ef6:	3332      	adds	r3, #50	@ 0x32
 8005ef8:	4a33      	ldr	r2, [pc, #204]	@ (8005fc8 <UART_SetConfig+0x4e4>)
 8005efa:	fba2 2303 	umull	r2, r3, r2, r3
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f04:	441c      	add	r4, r3
 8005f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005f10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005f14:	4642      	mov	r2, r8
 8005f16:	464b      	mov	r3, r9
 8005f18:	1891      	adds	r1, r2, r2
 8005f1a:	60b9      	str	r1, [r7, #8]
 8005f1c:	415b      	adcs	r3, r3
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f24:	4641      	mov	r1, r8
 8005f26:	1851      	adds	r1, r2, r1
 8005f28:	6039      	str	r1, [r7, #0]
 8005f2a:	4649      	mov	r1, r9
 8005f2c:	414b      	adcs	r3, r1
 8005f2e:	607b      	str	r3, [r7, #4]
 8005f30:	f04f 0200 	mov.w	r2, #0
 8005f34:	f04f 0300 	mov.w	r3, #0
 8005f38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f3c:	4659      	mov	r1, fp
 8005f3e:	00cb      	lsls	r3, r1, #3
 8005f40:	4651      	mov	r1, sl
 8005f42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f46:	4651      	mov	r1, sl
 8005f48:	00ca      	lsls	r2, r1, #3
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4603      	mov	r3, r0
 8005f50:	4642      	mov	r2, r8
 8005f52:	189b      	adds	r3, r3, r2
 8005f54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f56:	464b      	mov	r3, r9
 8005f58:	460a      	mov	r2, r1
 8005f5a:	eb42 0303 	adc.w	r3, r2, r3
 8005f5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f6a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005f78:	4649      	mov	r1, r9
 8005f7a:	008b      	lsls	r3, r1, #2
 8005f7c:	4641      	mov	r1, r8
 8005f7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f82:	4641      	mov	r1, r8
 8005f84:	008a      	lsls	r2, r1, #2
 8005f86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005f8a:	f7fa fe85 	bl	8000c98 <__aeabi_uldivmod>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc8 <UART_SetConfig+0x4e4>)
 8005f94:	fba3 1302 	umull	r1, r3, r3, r2
 8005f98:	095b      	lsrs	r3, r3, #5
 8005f9a:	2164      	movs	r1, #100	@ 0x64
 8005f9c:	fb01 f303 	mul.w	r3, r1, r3
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	011b      	lsls	r3, r3, #4
 8005fa4:	3332      	adds	r3, #50	@ 0x32
 8005fa6:	4a08      	ldr	r2, [pc, #32]	@ (8005fc8 <UART_SetConfig+0x4e4>)
 8005fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fac:	095b      	lsrs	r3, r3, #5
 8005fae:	f003 020f 	and.w	r2, r3, #15
 8005fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4422      	add	r2, r4
 8005fba:	609a      	str	r2, [r3, #8]
}
 8005fbc:	bf00      	nop
 8005fbe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fc8:	51eb851f 	.word	0x51eb851f

08005fcc <__cvt>:
 8005fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd0:	ec57 6b10 	vmov	r6, r7, d0
 8005fd4:	2f00      	cmp	r7, #0
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	4619      	mov	r1, r3
 8005fda:	463b      	mov	r3, r7
 8005fdc:	bfbb      	ittet	lt
 8005fde:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005fe2:	461f      	movlt	r7, r3
 8005fe4:	2300      	movge	r3, #0
 8005fe6:	232d      	movlt	r3, #45	@ 0x2d
 8005fe8:	700b      	strb	r3, [r1, #0]
 8005fea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005ff0:	4691      	mov	r9, r2
 8005ff2:	f023 0820 	bic.w	r8, r3, #32
 8005ff6:	bfbc      	itt	lt
 8005ff8:	4632      	movlt	r2, r6
 8005ffa:	4616      	movlt	r6, r2
 8005ffc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006000:	d005      	beq.n	800600e <__cvt+0x42>
 8006002:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006006:	d100      	bne.n	800600a <__cvt+0x3e>
 8006008:	3401      	adds	r4, #1
 800600a:	2102      	movs	r1, #2
 800600c:	e000      	b.n	8006010 <__cvt+0x44>
 800600e:	2103      	movs	r1, #3
 8006010:	ab03      	add	r3, sp, #12
 8006012:	9301      	str	r3, [sp, #4]
 8006014:	ab02      	add	r3, sp, #8
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	ec47 6b10 	vmov	d0, r6, r7
 800601c:	4653      	mov	r3, sl
 800601e:	4622      	mov	r2, r4
 8006020:	f001 f8a6 	bl	8007170 <_dtoa_r>
 8006024:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006028:	4605      	mov	r5, r0
 800602a:	d119      	bne.n	8006060 <__cvt+0x94>
 800602c:	f019 0f01 	tst.w	r9, #1
 8006030:	d00e      	beq.n	8006050 <__cvt+0x84>
 8006032:	eb00 0904 	add.w	r9, r0, r4
 8006036:	2200      	movs	r2, #0
 8006038:	2300      	movs	r3, #0
 800603a:	4630      	mov	r0, r6
 800603c:	4639      	mov	r1, r7
 800603e:	f7fa fd4b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006042:	b108      	cbz	r0, 8006048 <__cvt+0x7c>
 8006044:	f8cd 900c 	str.w	r9, [sp, #12]
 8006048:	2230      	movs	r2, #48	@ 0x30
 800604a:	9b03      	ldr	r3, [sp, #12]
 800604c:	454b      	cmp	r3, r9
 800604e:	d31e      	bcc.n	800608e <__cvt+0xc2>
 8006050:	9b03      	ldr	r3, [sp, #12]
 8006052:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006054:	1b5b      	subs	r3, r3, r5
 8006056:	4628      	mov	r0, r5
 8006058:	6013      	str	r3, [r2, #0]
 800605a:	b004      	add	sp, #16
 800605c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006060:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006064:	eb00 0904 	add.w	r9, r0, r4
 8006068:	d1e5      	bne.n	8006036 <__cvt+0x6a>
 800606a:	7803      	ldrb	r3, [r0, #0]
 800606c:	2b30      	cmp	r3, #48	@ 0x30
 800606e:	d10a      	bne.n	8006086 <__cvt+0xba>
 8006070:	2200      	movs	r2, #0
 8006072:	2300      	movs	r3, #0
 8006074:	4630      	mov	r0, r6
 8006076:	4639      	mov	r1, r7
 8006078:	f7fa fd2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800607c:	b918      	cbnz	r0, 8006086 <__cvt+0xba>
 800607e:	f1c4 0401 	rsb	r4, r4, #1
 8006082:	f8ca 4000 	str.w	r4, [sl]
 8006086:	f8da 3000 	ldr.w	r3, [sl]
 800608a:	4499      	add	r9, r3
 800608c:	e7d3      	b.n	8006036 <__cvt+0x6a>
 800608e:	1c59      	adds	r1, r3, #1
 8006090:	9103      	str	r1, [sp, #12]
 8006092:	701a      	strb	r2, [r3, #0]
 8006094:	e7d9      	b.n	800604a <__cvt+0x7e>

08006096 <__exponent>:
 8006096:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006098:	2900      	cmp	r1, #0
 800609a:	bfba      	itte	lt
 800609c:	4249      	neglt	r1, r1
 800609e:	232d      	movlt	r3, #45	@ 0x2d
 80060a0:	232b      	movge	r3, #43	@ 0x2b
 80060a2:	2909      	cmp	r1, #9
 80060a4:	7002      	strb	r2, [r0, #0]
 80060a6:	7043      	strb	r3, [r0, #1]
 80060a8:	dd29      	ble.n	80060fe <__exponent+0x68>
 80060aa:	f10d 0307 	add.w	r3, sp, #7
 80060ae:	461d      	mov	r5, r3
 80060b0:	270a      	movs	r7, #10
 80060b2:	461a      	mov	r2, r3
 80060b4:	fbb1 f6f7 	udiv	r6, r1, r7
 80060b8:	fb07 1416 	mls	r4, r7, r6, r1
 80060bc:	3430      	adds	r4, #48	@ 0x30
 80060be:	f802 4c01 	strb.w	r4, [r2, #-1]
 80060c2:	460c      	mov	r4, r1
 80060c4:	2c63      	cmp	r4, #99	@ 0x63
 80060c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80060ca:	4631      	mov	r1, r6
 80060cc:	dcf1      	bgt.n	80060b2 <__exponent+0x1c>
 80060ce:	3130      	adds	r1, #48	@ 0x30
 80060d0:	1e94      	subs	r4, r2, #2
 80060d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80060d6:	1c41      	adds	r1, r0, #1
 80060d8:	4623      	mov	r3, r4
 80060da:	42ab      	cmp	r3, r5
 80060dc:	d30a      	bcc.n	80060f4 <__exponent+0x5e>
 80060de:	f10d 0309 	add.w	r3, sp, #9
 80060e2:	1a9b      	subs	r3, r3, r2
 80060e4:	42ac      	cmp	r4, r5
 80060e6:	bf88      	it	hi
 80060e8:	2300      	movhi	r3, #0
 80060ea:	3302      	adds	r3, #2
 80060ec:	4403      	add	r3, r0
 80060ee:	1a18      	subs	r0, r3, r0
 80060f0:	b003      	add	sp, #12
 80060f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060f4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80060f8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80060fc:	e7ed      	b.n	80060da <__exponent+0x44>
 80060fe:	2330      	movs	r3, #48	@ 0x30
 8006100:	3130      	adds	r1, #48	@ 0x30
 8006102:	7083      	strb	r3, [r0, #2]
 8006104:	70c1      	strb	r1, [r0, #3]
 8006106:	1d03      	adds	r3, r0, #4
 8006108:	e7f1      	b.n	80060ee <__exponent+0x58>
	...

0800610c <_printf_float>:
 800610c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006110:	b08d      	sub	sp, #52	@ 0x34
 8006112:	460c      	mov	r4, r1
 8006114:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006118:	4616      	mov	r6, r2
 800611a:	461f      	mov	r7, r3
 800611c:	4605      	mov	r5, r0
 800611e:	f000 ff1f 	bl	8006f60 <_localeconv_r>
 8006122:	6803      	ldr	r3, [r0, #0]
 8006124:	9304      	str	r3, [sp, #16]
 8006126:	4618      	mov	r0, r3
 8006128:	f7fa f8aa 	bl	8000280 <strlen>
 800612c:	2300      	movs	r3, #0
 800612e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006130:	f8d8 3000 	ldr.w	r3, [r8]
 8006134:	9005      	str	r0, [sp, #20]
 8006136:	3307      	adds	r3, #7
 8006138:	f023 0307 	bic.w	r3, r3, #7
 800613c:	f103 0208 	add.w	r2, r3, #8
 8006140:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006144:	f8d4 b000 	ldr.w	fp, [r4]
 8006148:	f8c8 2000 	str.w	r2, [r8]
 800614c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006150:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006154:	9307      	str	r3, [sp, #28]
 8006156:	f8cd 8018 	str.w	r8, [sp, #24]
 800615a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800615e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006162:	4b9c      	ldr	r3, [pc, #624]	@ (80063d4 <_printf_float+0x2c8>)
 8006164:	f04f 32ff 	mov.w	r2, #4294967295
 8006168:	f7fa fce8 	bl	8000b3c <__aeabi_dcmpun>
 800616c:	bb70      	cbnz	r0, 80061cc <_printf_float+0xc0>
 800616e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006172:	4b98      	ldr	r3, [pc, #608]	@ (80063d4 <_printf_float+0x2c8>)
 8006174:	f04f 32ff 	mov.w	r2, #4294967295
 8006178:	f7fa fcc2 	bl	8000b00 <__aeabi_dcmple>
 800617c:	bb30      	cbnz	r0, 80061cc <_printf_float+0xc0>
 800617e:	2200      	movs	r2, #0
 8006180:	2300      	movs	r3, #0
 8006182:	4640      	mov	r0, r8
 8006184:	4649      	mov	r1, r9
 8006186:	f7fa fcb1 	bl	8000aec <__aeabi_dcmplt>
 800618a:	b110      	cbz	r0, 8006192 <_printf_float+0x86>
 800618c:	232d      	movs	r3, #45	@ 0x2d
 800618e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006192:	4a91      	ldr	r2, [pc, #580]	@ (80063d8 <_printf_float+0x2cc>)
 8006194:	4b91      	ldr	r3, [pc, #580]	@ (80063dc <_printf_float+0x2d0>)
 8006196:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800619a:	bf8c      	ite	hi
 800619c:	4690      	movhi	r8, r2
 800619e:	4698      	movls	r8, r3
 80061a0:	2303      	movs	r3, #3
 80061a2:	6123      	str	r3, [r4, #16]
 80061a4:	f02b 0304 	bic.w	r3, fp, #4
 80061a8:	6023      	str	r3, [r4, #0]
 80061aa:	f04f 0900 	mov.w	r9, #0
 80061ae:	9700      	str	r7, [sp, #0]
 80061b0:	4633      	mov	r3, r6
 80061b2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80061b4:	4621      	mov	r1, r4
 80061b6:	4628      	mov	r0, r5
 80061b8:	f000 f9d2 	bl	8006560 <_printf_common>
 80061bc:	3001      	adds	r0, #1
 80061be:	f040 808d 	bne.w	80062dc <_printf_float+0x1d0>
 80061c2:	f04f 30ff 	mov.w	r0, #4294967295
 80061c6:	b00d      	add	sp, #52	@ 0x34
 80061c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061cc:	4642      	mov	r2, r8
 80061ce:	464b      	mov	r3, r9
 80061d0:	4640      	mov	r0, r8
 80061d2:	4649      	mov	r1, r9
 80061d4:	f7fa fcb2 	bl	8000b3c <__aeabi_dcmpun>
 80061d8:	b140      	cbz	r0, 80061ec <_printf_float+0xe0>
 80061da:	464b      	mov	r3, r9
 80061dc:	2b00      	cmp	r3, #0
 80061de:	bfbc      	itt	lt
 80061e0:	232d      	movlt	r3, #45	@ 0x2d
 80061e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80061e6:	4a7e      	ldr	r2, [pc, #504]	@ (80063e0 <_printf_float+0x2d4>)
 80061e8:	4b7e      	ldr	r3, [pc, #504]	@ (80063e4 <_printf_float+0x2d8>)
 80061ea:	e7d4      	b.n	8006196 <_printf_float+0x8a>
 80061ec:	6863      	ldr	r3, [r4, #4]
 80061ee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80061f2:	9206      	str	r2, [sp, #24]
 80061f4:	1c5a      	adds	r2, r3, #1
 80061f6:	d13b      	bne.n	8006270 <_printf_float+0x164>
 80061f8:	2306      	movs	r3, #6
 80061fa:	6063      	str	r3, [r4, #4]
 80061fc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006200:	2300      	movs	r3, #0
 8006202:	6022      	str	r2, [r4, #0]
 8006204:	9303      	str	r3, [sp, #12]
 8006206:	ab0a      	add	r3, sp, #40	@ 0x28
 8006208:	e9cd a301 	strd	sl, r3, [sp, #4]
 800620c:	ab09      	add	r3, sp, #36	@ 0x24
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	6861      	ldr	r1, [r4, #4]
 8006212:	ec49 8b10 	vmov	d0, r8, r9
 8006216:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800621a:	4628      	mov	r0, r5
 800621c:	f7ff fed6 	bl	8005fcc <__cvt>
 8006220:	9b06      	ldr	r3, [sp, #24]
 8006222:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006224:	2b47      	cmp	r3, #71	@ 0x47
 8006226:	4680      	mov	r8, r0
 8006228:	d129      	bne.n	800627e <_printf_float+0x172>
 800622a:	1cc8      	adds	r0, r1, #3
 800622c:	db02      	blt.n	8006234 <_printf_float+0x128>
 800622e:	6863      	ldr	r3, [r4, #4]
 8006230:	4299      	cmp	r1, r3
 8006232:	dd41      	ble.n	80062b8 <_printf_float+0x1ac>
 8006234:	f1aa 0a02 	sub.w	sl, sl, #2
 8006238:	fa5f fa8a 	uxtb.w	sl, sl
 800623c:	3901      	subs	r1, #1
 800623e:	4652      	mov	r2, sl
 8006240:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006244:	9109      	str	r1, [sp, #36]	@ 0x24
 8006246:	f7ff ff26 	bl	8006096 <__exponent>
 800624a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800624c:	1813      	adds	r3, r2, r0
 800624e:	2a01      	cmp	r2, #1
 8006250:	4681      	mov	r9, r0
 8006252:	6123      	str	r3, [r4, #16]
 8006254:	dc02      	bgt.n	800625c <_printf_float+0x150>
 8006256:	6822      	ldr	r2, [r4, #0]
 8006258:	07d2      	lsls	r2, r2, #31
 800625a:	d501      	bpl.n	8006260 <_printf_float+0x154>
 800625c:	3301      	adds	r3, #1
 800625e:	6123      	str	r3, [r4, #16]
 8006260:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006264:	2b00      	cmp	r3, #0
 8006266:	d0a2      	beq.n	80061ae <_printf_float+0xa2>
 8006268:	232d      	movs	r3, #45	@ 0x2d
 800626a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800626e:	e79e      	b.n	80061ae <_printf_float+0xa2>
 8006270:	9a06      	ldr	r2, [sp, #24]
 8006272:	2a47      	cmp	r2, #71	@ 0x47
 8006274:	d1c2      	bne.n	80061fc <_printf_float+0xf0>
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1c0      	bne.n	80061fc <_printf_float+0xf0>
 800627a:	2301      	movs	r3, #1
 800627c:	e7bd      	b.n	80061fa <_printf_float+0xee>
 800627e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006282:	d9db      	bls.n	800623c <_printf_float+0x130>
 8006284:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006288:	d118      	bne.n	80062bc <_printf_float+0x1b0>
 800628a:	2900      	cmp	r1, #0
 800628c:	6863      	ldr	r3, [r4, #4]
 800628e:	dd0b      	ble.n	80062a8 <_printf_float+0x19c>
 8006290:	6121      	str	r1, [r4, #16]
 8006292:	b913      	cbnz	r3, 800629a <_printf_float+0x18e>
 8006294:	6822      	ldr	r2, [r4, #0]
 8006296:	07d0      	lsls	r0, r2, #31
 8006298:	d502      	bpl.n	80062a0 <_printf_float+0x194>
 800629a:	3301      	adds	r3, #1
 800629c:	440b      	add	r3, r1
 800629e:	6123      	str	r3, [r4, #16]
 80062a0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80062a2:	f04f 0900 	mov.w	r9, #0
 80062a6:	e7db      	b.n	8006260 <_printf_float+0x154>
 80062a8:	b913      	cbnz	r3, 80062b0 <_printf_float+0x1a4>
 80062aa:	6822      	ldr	r2, [r4, #0]
 80062ac:	07d2      	lsls	r2, r2, #31
 80062ae:	d501      	bpl.n	80062b4 <_printf_float+0x1a8>
 80062b0:	3302      	adds	r3, #2
 80062b2:	e7f4      	b.n	800629e <_printf_float+0x192>
 80062b4:	2301      	movs	r3, #1
 80062b6:	e7f2      	b.n	800629e <_printf_float+0x192>
 80062b8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80062bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062be:	4299      	cmp	r1, r3
 80062c0:	db05      	blt.n	80062ce <_printf_float+0x1c2>
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	6121      	str	r1, [r4, #16]
 80062c6:	07d8      	lsls	r0, r3, #31
 80062c8:	d5ea      	bpl.n	80062a0 <_printf_float+0x194>
 80062ca:	1c4b      	adds	r3, r1, #1
 80062cc:	e7e7      	b.n	800629e <_printf_float+0x192>
 80062ce:	2900      	cmp	r1, #0
 80062d0:	bfd4      	ite	le
 80062d2:	f1c1 0202 	rsble	r2, r1, #2
 80062d6:	2201      	movgt	r2, #1
 80062d8:	4413      	add	r3, r2
 80062da:	e7e0      	b.n	800629e <_printf_float+0x192>
 80062dc:	6823      	ldr	r3, [r4, #0]
 80062de:	055a      	lsls	r2, r3, #21
 80062e0:	d407      	bmi.n	80062f2 <_printf_float+0x1e6>
 80062e2:	6923      	ldr	r3, [r4, #16]
 80062e4:	4642      	mov	r2, r8
 80062e6:	4631      	mov	r1, r6
 80062e8:	4628      	mov	r0, r5
 80062ea:	47b8      	blx	r7
 80062ec:	3001      	adds	r0, #1
 80062ee:	d12b      	bne.n	8006348 <_printf_float+0x23c>
 80062f0:	e767      	b.n	80061c2 <_printf_float+0xb6>
 80062f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80062f6:	f240 80dd 	bls.w	80064b4 <_printf_float+0x3a8>
 80062fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80062fe:	2200      	movs	r2, #0
 8006300:	2300      	movs	r3, #0
 8006302:	f7fa fbe9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006306:	2800      	cmp	r0, #0
 8006308:	d033      	beq.n	8006372 <_printf_float+0x266>
 800630a:	4a37      	ldr	r2, [pc, #220]	@ (80063e8 <_printf_float+0x2dc>)
 800630c:	2301      	movs	r3, #1
 800630e:	4631      	mov	r1, r6
 8006310:	4628      	mov	r0, r5
 8006312:	47b8      	blx	r7
 8006314:	3001      	adds	r0, #1
 8006316:	f43f af54 	beq.w	80061c2 <_printf_float+0xb6>
 800631a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800631e:	4543      	cmp	r3, r8
 8006320:	db02      	blt.n	8006328 <_printf_float+0x21c>
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	07d8      	lsls	r0, r3, #31
 8006326:	d50f      	bpl.n	8006348 <_printf_float+0x23c>
 8006328:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800632c:	4631      	mov	r1, r6
 800632e:	4628      	mov	r0, r5
 8006330:	47b8      	blx	r7
 8006332:	3001      	adds	r0, #1
 8006334:	f43f af45 	beq.w	80061c2 <_printf_float+0xb6>
 8006338:	f04f 0900 	mov.w	r9, #0
 800633c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006340:	f104 0a1a 	add.w	sl, r4, #26
 8006344:	45c8      	cmp	r8, r9
 8006346:	dc09      	bgt.n	800635c <_printf_float+0x250>
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	079b      	lsls	r3, r3, #30
 800634c:	f100 8103 	bmi.w	8006556 <_printf_float+0x44a>
 8006350:	68e0      	ldr	r0, [r4, #12]
 8006352:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006354:	4298      	cmp	r0, r3
 8006356:	bfb8      	it	lt
 8006358:	4618      	movlt	r0, r3
 800635a:	e734      	b.n	80061c6 <_printf_float+0xba>
 800635c:	2301      	movs	r3, #1
 800635e:	4652      	mov	r2, sl
 8006360:	4631      	mov	r1, r6
 8006362:	4628      	mov	r0, r5
 8006364:	47b8      	blx	r7
 8006366:	3001      	adds	r0, #1
 8006368:	f43f af2b 	beq.w	80061c2 <_printf_float+0xb6>
 800636c:	f109 0901 	add.w	r9, r9, #1
 8006370:	e7e8      	b.n	8006344 <_printf_float+0x238>
 8006372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006374:	2b00      	cmp	r3, #0
 8006376:	dc39      	bgt.n	80063ec <_printf_float+0x2e0>
 8006378:	4a1b      	ldr	r2, [pc, #108]	@ (80063e8 <_printf_float+0x2dc>)
 800637a:	2301      	movs	r3, #1
 800637c:	4631      	mov	r1, r6
 800637e:	4628      	mov	r0, r5
 8006380:	47b8      	blx	r7
 8006382:	3001      	adds	r0, #1
 8006384:	f43f af1d 	beq.w	80061c2 <_printf_float+0xb6>
 8006388:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800638c:	ea59 0303 	orrs.w	r3, r9, r3
 8006390:	d102      	bne.n	8006398 <_printf_float+0x28c>
 8006392:	6823      	ldr	r3, [r4, #0]
 8006394:	07d9      	lsls	r1, r3, #31
 8006396:	d5d7      	bpl.n	8006348 <_printf_float+0x23c>
 8006398:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800639c:	4631      	mov	r1, r6
 800639e:	4628      	mov	r0, r5
 80063a0:	47b8      	blx	r7
 80063a2:	3001      	adds	r0, #1
 80063a4:	f43f af0d 	beq.w	80061c2 <_printf_float+0xb6>
 80063a8:	f04f 0a00 	mov.w	sl, #0
 80063ac:	f104 0b1a 	add.w	fp, r4, #26
 80063b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063b2:	425b      	negs	r3, r3
 80063b4:	4553      	cmp	r3, sl
 80063b6:	dc01      	bgt.n	80063bc <_printf_float+0x2b0>
 80063b8:	464b      	mov	r3, r9
 80063ba:	e793      	b.n	80062e4 <_printf_float+0x1d8>
 80063bc:	2301      	movs	r3, #1
 80063be:	465a      	mov	r2, fp
 80063c0:	4631      	mov	r1, r6
 80063c2:	4628      	mov	r0, r5
 80063c4:	47b8      	blx	r7
 80063c6:	3001      	adds	r0, #1
 80063c8:	f43f aefb 	beq.w	80061c2 <_printf_float+0xb6>
 80063cc:	f10a 0a01 	add.w	sl, sl, #1
 80063d0:	e7ee      	b.n	80063b0 <_printf_float+0x2a4>
 80063d2:	bf00      	nop
 80063d4:	7fefffff 	.word	0x7fefffff
 80063d8:	0800a7d8 	.word	0x0800a7d8
 80063dc:	0800a7d4 	.word	0x0800a7d4
 80063e0:	0800a7e0 	.word	0x0800a7e0
 80063e4:	0800a7dc 	.word	0x0800a7dc
 80063e8:	0800a7e4 	.word	0x0800a7e4
 80063ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80063f2:	4553      	cmp	r3, sl
 80063f4:	bfa8      	it	ge
 80063f6:	4653      	movge	r3, sl
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	4699      	mov	r9, r3
 80063fc:	dc36      	bgt.n	800646c <_printf_float+0x360>
 80063fe:	f04f 0b00 	mov.w	fp, #0
 8006402:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006406:	f104 021a 	add.w	r2, r4, #26
 800640a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800640c:	9306      	str	r3, [sp, #24]
 800640e:	eba3 0309 	sub.w	r3, r3, r9
 8006412:	455b      	cmp	r3, fp
 8006414:	dc31      	bgt.n	800647a <_printf_float+0x36e>
 8006416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006418:	459a      	cmp	sl, r3
 800641a:	dc3a      	bgt.n	8006492 <_printf_float+0x386>
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	07da      	lsls	r2, r3, #31
 8006420:	d437      	bmi.n	8006492 <_printf_float+0x386>
 8006422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006424:	ebaa 0903 	sub.w	r9, sl, r3
 8006428:	9b06      	ldr	r3, [sp, #24]
 800642a:	ebaa 0303 	sub.w	r3, sl, r3
 800642e:	4599      	cmp	r9, r3
 8006430:	bfa8      	it	ge
 8006432:	4699      	movge	r9, r3
 8006434:	f1b9 0f00 	cmp.w	r9, #0
 8006438:	dc33      	bgt.n	80064a2 <_printf_float+0x396>
 800643a:	f04f 0800 	mov.w	r8, #0
 800643e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006442:	f104 0b1a 	add.w	fp, r4, #26
 8006446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006448:	ebaa 0303 	sub.w	r3, sl, r3
 800644c:	eba3 0309 	sub.w	r3, r3, r9
 8006450:	4543      	cmp	r3, r8
 8006452:	f77f af79 	ble.w	8006348 <_printf_float+0x23c>
 8006456:	2301      	movs	r3, #1
 8006458:	465a      	mov	r2, fp
 800645a:	4631      	mov	r1, r6
 800645c:	4628      	mov	r0, r5
 800645e:	47b8      	blx	r7
 8006460:	3001      	adds	r0, #1
 8006462:	f43f aeae 	beq.w	80061c2 <_printf_float+0xb6>
 8006466:	f108 0801 	add.w	r8, r8, #1
 800646a:	e7ec      	b.n	8006446 <_printf_float+0x33a>
 800646c:	4642      	mov	r2, r8
 800646e:	4631      	mov	r1, r6
 8006470:	4628      	mov	r0, r5
 8006472:	47b8      	blx	r7
 8006474:	3001      	adds	r0, #1
 8006476:	d1c2      	bne.n	80063fe <_printf_float+0x2f2>
 8006478:	e6a3      	b.n	80061c2 <_printf_float+0xb6>
 800647a:	2301      	movs	r3, #1
 800647c:	4631      	mov	r1, r6
 800647e:	4628      	mov	r0, r5
 8006480:	9206      	str	r2, [sp, #24]
 8006482:	47b8      	blx	r7
 8006484:	3001      	adds	r0, #1
 8006486:	f43f ae9c 	beq.w	80061c2 <_printf_float+0xb6>
 800648a:	9a06      	ldr	r2, [sp, #24]
 800648c:	f10b 0b01 	add.w	fp, fp, #1
 8006490:	e7bb      	b.n	800640a <_printf_float+0x2fe>
 8006492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006496:	4631      	mov	r1, r6
 8006498:	4628      	mov	r0, r5
 800649a:	47b8      	blx	r7
 800649c:	3001      	adds	r0, #1
 800649e:	d1c0      	bne.n	8006422 <_printf_float+0x316>
 80064a0:	e68f      	b.n	80061c2 <_printf_float+0xb6>
 80064a2:	9a06      	ldr	r2, [sp, #24]
 80064a4:	464b      	mov	r3, r9
 80064a6:	4442      	add	r2, r8
 80064a8:	4631      	mov	r1, r6
 80064aa:	4628      	mov	r0, r5
 80064ac:	47b8      	blx	r7
 80064ae:	3001      	adds	r0, #1
 80064b0:	d1c3      	bne.n	800643a <_printf_float+0x32e>
 80064b2:	e686      	b.n	80061c2 <_printf_float+0xb6>
 80064b4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80064b8:	f1ba 0f01 	cmp.w	sl, #1
 80064bc:	dc01      	bgt.n	80064c2 <_printf_float+0x3b6>
 80064be:	07db      	lsls	r3, r3, #31
 80064c0:	d536      	bpl.n	8006530 <_printf_float+0x424>
 80064c2:	2301      	movs	r3, #1
 80064c4:	4642      	mov	r2, r8
 80064c6:	4631      	mov	r1, r6
 80064c8:	4628      	mov	r0, r5
 80064ca:	47b8      	blx	r7
 80064cc:	3001      	adds	r0, #1
 80064ce:	f43f ae78 	beq.w	80061c2 <_printf_float+0xb6>
 80064d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064d6:	4631      	mov	r1, r6
 80064d8:	4628      	mov	r0, r5
 80064da:	47b8      	blx	r7
 80064dc:	3001      	adds	r0, #1
 80064de:	f43f ae70 	beq.w	80061c2 <_printf_float+0xb6>
 80064e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80064e6:	2200      	movs	r2, #0
 80064e8:	2300      	movs	r3, #0
 80064ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064ee:	f7fa faf3 	bl	8000ad8 <__aeabi_dcmpeq>
 80064f2:	b9c0      	cbnz	r0, 8006526 <_printf_float+0x41a>
 80064f4:	4653      	mov	r3, sl
 80064f6:	f108 0201 	add.w	r2, r8, #1
 80064fa:	4631      	mov	r1, r6
 80064fc:	4628      	mov	r0, r5
 80064fe:	47b8      	blx	r7
 8006500:	3001      	adds	r0, #1
 8006502:	d10c      	bne.n	800651e <_printf_float+0x412>
 8006504:	e65d      	b.n	80061c2 <_printf_float+0xb6>
 8006506:	2301      	movs	r3, #1
 8006508:	465a      	mov	r2, fp
 800650a:	4631      	mov	r1, r6
 800650c:	4628      	mov	r0, r5
 800650e:	47b8      	blx	r7
 8006510:	3001      	adds	r0, #1
 8006512:	f43f ae56 	beq.w	80061c2 <_printf_float+0xb6>
 8006516:	f108 0801 	add.w	r8, r8, #1
 800651a:	45d0      	cmp	r8, sl
 800651c:	dbf3      	blt.n	8006506 <_printf_float+0x3fa>
 800651e:	464b      	mov	r3, r9
 8006520:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006524:	e6df      	b.n	80062e6 <_printf_float+0x1da>
 8006526:	f04f 0800 	mov.w	r8, #0
 800652a:	f104 0b1a 	add.w	fp, r4, #26
 800652e:	e7f4      	b.n	800651a <_printf_float+0x40e>
 8006530:	2301      	movs	r3, #1
 8006532:	4642      	mov	r2, r8
 8006534:	e7e1      	b.n	80064fa <_printf_float+0x3ee>
 8006536:	2301      	movs	r3, #1
 8006538:	464a      	mov	r2, r9
 800653a:	4631      	mov	r1, r6
 800653c:	4628      	mov	r0, r5
 800653e:	47b8      	blx	r7
 8006540:	3001      	adds	r0, #1
 8006542:	f43f ae3e 	beq.w	80061c2 <_printf_float+0xb6>
 8006546:	f108 0801 	add.w	r8, r8, #1
 800654a:	68e3      	ldr	r3, [r4, #12]
 800654c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800654e:	1a5b      	subs	r3, r3, r1
 8006550:	4543      	cmp	r3, r8
 8006552:	dcf0      	bgt.n	8006536 <_printf_float+0x42a>
 8006554:	e6fc      	b.n	8006350 <_printf_float+0x244>
 8006556:	f04f 0800 	mov.w	r8, #0
 800655a:	f104 0919 	add.w	r9, r4, #25
 800655e:	e7f4      	b.n	800654a <_printf_float+0x43e>

08006560 <_printf_common>:
 8006560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006564:	4616      	mov	r6, r2
 8006566:	4698      	mov	r8, r3
 8006568:	688a      	ldr	r2, [r1, #8]
 800656a:	690b      	ldr	r3, [r1, #16]
 800656c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006570:	4293      	cmp	r3, r2
 8006572:	bfb8      	it	lt
 8006574:	4613      	movlt	r3, r2
 8006576:	6033      	str	r3, [r6, #0]
 8006578:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800657c:	4607      	mov	r7, r0
 800657e:	460c      	mov	r4, r1
 8006580:	b10a      	cbz	r2, 8006586 <_printf_common+0x26>
 8006582:	3301      	adds	r3, #1
 8006584:	6033      	str	r3, [r6, #0]
 8006586:	6823      	ldr	r3, [r4, #0]
 8006588:	0699      	lsls	r1, r3, #26
 800658a:	bf42      	ittt	mi
 800658c:	6833      	ldrmi	r3, [r6, #0]
 800658e:	3302      	addmi	r3, #2
 8006590:	6033      	strmi	r3, [r6, #0]
 8006592:	6825      	ldr	r5, [r4, #0]
 8006594:	f015 0506 	ands.w	r5, r5, #6
 8006598:	d106      	bne.n	80065a8 <_printf_common+0x48>
 800659a:	f104 0a19 	add.w	sl, r4, #25
 800659e:	68e3      	ldr	r3, [r4, #12]
 80065a0:	6832      	ldr	r2, [r6, #0]
 80065a2:	1a9b      	subs	r3, r3, r2
 80065a4:	42ab      	cmp	r3, r5
 80065a6:	dc26      	bgt.n	80065f6 <_printf_common+0x96>
 80065a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80065ac:	6822      	ldr	r2, [r4, #0]
 80065ae:	3b00      	subs	r3, #0
 80065b0:	bf18      	it	ne
 80065b2:	2301      	movne	r3, #1
 80065b4:	0692      	lsls	r2, r2, #26
 80065b6:	d42b      	bmi.n	8006610 <_printf_common+0xb0>
 80065b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80065bc:	4641      	mov	r1, r8
 80065be:	4638      	mov	r0, r7
 80065c0:	47c8      	blx	r9
 80065c2:	3001      	adds	r0, #1
 80065c4:	d01e      	beq.n	8006604 <_printf_common+0xa4>
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	6922      	ldr	r2, [r4, #16]
 80065ca:	f003 0306 	and.w	r3, r3, #6
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	bf02      	ittt	eq
 80065d2:	68e5      	ldreq	r5, [r4, #12]
 80065d4:	6833      	ldreq	r3, [r6, #0]
 80065d6:	1aed      	subeq	r5, r5, r3
 80065d8:	68a3      	ldr	r3, [r4, #8]
 80065da:	bf0c      	ite	eq
 80065dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065e0:	2500      	movne	r5, #0
 80065e2:	4293      	cmp	r3, r2
 80065e4:	bfc4      	itt	gt
 80065e6:	1a9b      	subgt	r3, r3, r2
 80065e8:	18ed      	addgt	r5, r5, r3
 80065ea:	2600      	movs	r6, #0
 80065ec:	341a      	adds	r4, #26
 80065ee:	42b5      	cmp	r5, r6
 80065f0:	d11a      	bne.n	8006628 <_printf_common+0xc8>
 80065f2:	2000      	movs	r0, #0
 80065f4:	e008      	b.n	8006608 <_printf_common+0xa8>
 80065f6:	2301      	movs	r3, #1
 80065f8:	4652      	mov	r2, sl
 80065fa:	4641      	mov	r1, r8
 80065fc:	4638      	mov	r0, r7
 80065fe:	47c8      	blx	r9
 8006600:	3001      	adds	r0, #1
 8006602:	d103      	bne.n	800660c <_printf_common+0xac>
 8006604:	f04f 30ff 	mov.w	r0, #4294967295
 8006608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800660c:	3501      	adds	r5, #1
 800660e:	e7c6      	b.n	800659e <_printf_common+0x3e>
 8006610:	18e1      	adds	r1, r4, r3
 8006612:	1c5a      	adds	r2, r3, #1
 8006614:	2030      	movs	r0, #48	@ 0x30
 8006616:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800661a:	4422      	add	r2, r4
 800661c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006620:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006624:	3302      	adds	r3, #2
 8006626:	e7c7      	b.n	80065b8 <_printf_common+0x58>
 8006628:	2301      	movs	r3, #1
 800662a:	4622      	mov	r2, r4
 800662c:	4641      	mov	r1, r8
 800662e:	4638      	mov	r0, r7
 8006630:	47c8      	blx	r9
 8006632:	3001      	adds	r0, #1
 8006634:	d0e6      	beq.n	8006604 <_printf_common+0xa4>
 8006636:	3601      	adds	r6, #1
 8006638:	e7d9      	b.n	80065ee <_printf_common+0x8e>
	...

0800663c <_printf_i>:
 800663c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006640:	7e0f      	ldrb	r7, [r1, #24]
 8006642:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006644:	2f78      	cmp	r7, #120	@ 0x78
 8006646:	4691      	mov	r9, r2
 8006648:	4680      	mov	r8, r0
 800664a:	460c      	mov	r4, r1
 800664c:	469a      	mov	sl, r3
 800664e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006652:	d807      	bhi.n	8006664 <_printf_i+0x28>
 8006654:	2f62      	cmp	r7, #98	@ 0x62
 8006656:	d80a      	bhi.n	800666e <_printf_i+0x32>
 8006658:	2f00      	cmp	r7, #0
 800665a:	f000 80d1 	beq.w	8006800 <_printf_i+0x1c4>
 800665e:	2f58      	cmp	r7, #88	@ 0x58
 8006660:	f000 80b8 	beq.w	80067d4 <_printf_i+0x198>
 8006664:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006668:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800666c:	e03a      	b.n	80066e4 <_printf_i+0xa8>
 800666e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006672:	2b15      	cmp	r3, #21
 8006674:	d8f6      	bhi.n	8006664 <_printf_i+0x28>
 8006676:	a101      	add	r1, pc, #4	@ (adr r1, 800667c <_printf_i+0x40>)
 8006678:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800667c:	080066d5 	.word	0x080066d5
 8006680:	080066e9 	.word	0x080066e9
 8006684:	08006665 	.word	0x08006665
 8006688:	08006665 	.word	0x08006665
 800668c:	08006665 	.word	0x08006665
 8006690:	08006665 	.word	0x08006665
 8006694:	080066e9 	.word	0x080066e9
 8006698:	08006665 	.word	0x08006665
 800669c:	08006665 	.word	0x08006665
 80066a0:	08006665 	.word	0x08006665
 80066a4:	08006665 	.word	0x08006665
 80066a8:	080067e7 	.word	0x080067e7
 80066ac:	08006713 	.word	0x08006713
 80066b0:	080067a1 	.word	0x080067a1
 80066b4:	08006665 	.word	0x08006665
 80066b8:	08006665 	.word	0x08006665
 80066bc:	08006809 	.word	0x08006809
 80066c0:	08006665 	.word	0x08006665
 80066c4:	08006713 	.word	0x08006713
 80066c8:	08006665 	.word	0x08006665
 80066cc:	08006665 	.word	0x08006665
 80066d0:	080067a9 	.word	0x080067a9
 80066d4:	6833      	ldr	r3, [r6, #0]
 80066d6:	1d1a      	adds	r2, r3, #4
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6032      	str	r2, [r6, #0]
 80066dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066e4:	2301      	movs	r3, #1
 80066e6:	e09c      	b.n	8006822 <_printf_i+0x1e6>
 80066e8:	6833      	ldr	r3, [r6, #0]
 80066ea:	6820      	ldr	r0, [r4, #0]
 80066ec:	1d19      	adds	r1, r3, #4
 80066ee:	6031      	str	r1, [r6, #0]
 80066f0:	0606      	lsls	r6, r0, #24
 80066f2:	d501      	bpl.n	80066f8 <_printf_i+0xbc>
 80066f4:	681d      	ldr	r5, [r3, #0]
 80066f6:	e003      	b.n	8006700 <_printf_i+0xc4>
 80066f8:	0645      	lsls	r5, r0, #25
 80066fa:	d5fb      	bpl.n	80066f4 <_printf_i+0xb8>
 80066fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006700:	2d00      	cmp	r5, #0
 8006702:	da03      	bge.n	800670c <_printf_i+0xd0>
 8006704:	232d      	movs	r3, #45	@ 0x2d
 8006706:	426d      	negs	r5, r5
 8006708:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800670c:	4858      	ldr	r0, [pc, #352]	@ (8006870 <_printf_i+0x234>)
 800670e:	230a      	movs	r3, #10
 8006710:	e011      	b.n	8006736 <_printf_i+0xfa>
 8006712:	6821      	ldr	r1, [r4, #0]
 8006714:	6833      	ldr	r3, [r6, #0]
 8006716:	0608      	lsls	r0, r1, #24
 8006718:	f853 5b04 	ldr.w	r5, [r3], #4
 800671c:	d402      	bmi.n	8006724 <_printf_i+0xe8>
 800671e:	0649      	lsls	r1, r1, #25
 8006720:	bf48      	it	mi
 8006722:	b2ad      	uxthmi	r5, r5
 8006724:	2f6f      	cmp	r7, #111	@ 0x6f
 8006726:	4852      	ldr	r0, [pc, #328]	@ (8006870 <_printf_i+0x234>)
 8006728:	6033      	str	r3, [r6, #0]
 800672a:	bf14      	ite	ne
 800672c:	230a      	movne	r3, #10
 800672e:	2308      	moveq	r3, #8
 8006730:	2100      	movs	r1, #0
 8006732:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006736:	6866      	ldr	r6, [r4, #4]
 8006738:	60a6      	str	r6, [r4, #8]
 800673a:	2e00      	cmp	r6, #0
 800673c:	db05      	blt.n	800674a <_printf_i+0x10e>
 800673e:	6821      	ldr	r1, [r4, #0]
 8006740:	432e      	orrs	r6, r5
 8006742:	f021 0104 	bic.w	r1, r1, #4
 8006746:	6021      	str	r1, [r4, #0]
 8006748:	d04b      	beq.n	80067e2 <_printf_i+0x1a6>
 800674a:	4616      	mov	r6, r2
 800674c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006750:	fb03 5711 	mls	r7, r3, r1, r5
 8006754:	5dc7      	ldrb	r7, [r0, r7]
 8006756:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800675a:	462f      	mov	r7, r5
 800675c:	42bb      	cmp	r3, r7
 800675e:	460d      	mov	r5, r1
 8006760:	d9f4      	bls.n	800674c <_printf_i+0x110>
 8006762:	2b08      	cmp	r3, #8
 8006764:	d10b      	bne.n	800677e <_printf_i+0x142>
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	07df      	lsls	r7, r3, #31
 800676a:	d508      	bpl.n	800677e <_printf_i+0x142>
 800676c:	6923      	ldr	r3, [r4, #16]
 800676e:	6861      	ldr	r1, [r4, #4]
 8006770:	4299      	cmp	r1, r3
 8006772:	bfde      	ittt	le
 8006774:	2330      	movle	r3, #48	@ 0x30
 8006776:	f806 3c01 	strble.w	r3, [r6, #-1]
 800677a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800677e:	1b92      	subs	r2, r2, r6
 8006780:	6122      	str	r2, [r4, #16]
 8006782:	f8cd a000 	str.w	sl, [sp]
 8006786:	464b      	mov	r3, r9
 8006788:	aa03      	add	r2, sp, #12
 800678a:	4621      	mov	r1, r4
 800678c:	4640      	mov	r0, r8
 800678e:	f7ff fee7 	bl	8006560 <_printf_common>
 8006792:	3001      	adds	r0, #1
 8006794:	d14a      	bne.n	800682c <_printf_i+0x1f0>
 8006796:	f04f 30ff 	mov.w	r0, #4294967295
 800679a:	b004      	add	sp, #16
 800679c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	f043 0320 	orr.w	r3, r3, #32
 80067a6:	6023      	str	r3, [r4, #0]
 80067a8:	4832      	ldr	r0, [pc, #200]	@ (8006874 <_printf_i+0x238>)
 80067aa:	2778      	movs	r7, #120	@ 0x78
 80067ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80067b0:	6823      	ldr	r3, [r4, #0]
 80067b2:	6831      	ldr	r1, [r6, #0]
 80067b4:	061f      	lsls	r7, r3, #24
 80067b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80067ba:	d402      	bmi.n	80067c2 <_printf_i+0x186>
 80067bc:	065f      	lsls	r7, r3, #25
 80067be:	bf48      	it	mi
 80067c0:	b2ad      	uxthmi	r5, r5
 80067c2:	6031      	str	r1, [r6, #0]
 80067c4:	07d9      	lsls	r1, r3, #31
 80067c6:	bf44      	itt	mi
 80067c8:	f043 0320 	orrmi.w	r3, r3, #32
 80067cc:	6023      	strmi	r3, [r4, #0]
 80067ce:	b11d      	cbz	r5, 80067d8 <_printf_i+0x19c>
 80067d0:	2310      	movs	r3, #16
 80067d2:	e7ad      	b.n	8006730 <_printf_i+0xf4>
 80067d4:	4826      	ldr	r0, [pc, #152]	@ (8006870 <_printf_i+0x234>)
 80067d6:	e7e9      	b.n	80067ac <_printf_i+0x170>
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	f023 0320 	bic.w	r3, r3, #32
 80067de:	6023      	str	r3, [r4, #0]
 80067e0:	e7f6      	b.n	80067d0 <_printf_i+0x194>
 80067e2:	4616      	mov	r6, r2
 80067e4:	e7bd      	b.n	8006762 <_printf_i+0x126>
 80067e6:	6833      	ldr	r3, [r6, #0]
 80067e8:	6825      	ldr	r5, [r4, #0]
 80067ea:	6961      	ldr	r1, [r4, #20]
 80067ec:	1d18      	adds	r0, r3, #4
 80067ee:	6030      	str	r0, [r6, #0]
 80067f0:	062e      	lsls	r6, r5, #24
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	d501      	bpl.n	80067fa <_printf_i+0x1be>
 80067f6:	6019      	str	r1, [r3, #0]
 80067f8:	e002      	b.n	8006800 <_printf_i+0x1c4>
 80067fa:	0668      	lsls	r0, r5, #25
 80067fc:	d5fb      	bpl.n	80067f6 <_printf_i+0x1ba>
 80067fe:	8019      	strh	r1, [r3, #0]
 8006800:	2300      	movs	r3, #0
 8006802:	6123      	str	r3, [r4, #16]
 8006804:	4616      	mov	r6, r2
 8006806:	e7bc      	b.n	8006782 <_printf_i+0x146>
 8006808:	6833      	ldr	r3, [r6, #0]
 800680a:	1d1a      	adds	r2, r3, #4
 800680c:	6032      	str	r2, [r6, #0]
 800680e:	681e      	ldr	r6, [r3, #0]
 8006810:	6862      	ldr	r2, [r4, #4]
 8006812:	2100      	movs	r1, #0
 8006814:	4630      	mov	r0, r6
 8006816:	f7f9 fce3 	bl	80001e0 <memchr>
 800681a:	b108      	cbz	r0, 8006820 <_printf_i+0x1e4>
 800681c:	1b80      	subs	r0, r0, r6
 800681e:	6060      	str	r0, [r4, #4]
 8006820:	6863      	ldr	r3, [r4, #4]
 8006822:	6123      	str	r3, [r4, #16]
 8006824:	2300      	movs	r3, #0
 8006826:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800682a:	e7aa      	b.n	8006782 <_printf_i+0x146>
 800682c:	6923      	ldr	r3, [r4, #16]
 800682e:	4632      	mov	r2, r6
 8006830:	4649      	mov	r1, r9
 8006832:	4640      	mov	r0, r8
 8006834:	47d0      	blx	sl
 8006836:	3001      	adds	r0, #1
 8006838:	d0ad      	beq.n	8006796 <_printf_i+0x15a>
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	079b      	lsls	r3, r3, #30
 800683e:	d413      	bmi.n	8006868 <_printf_i+0x22c>
 8006840:	68e0      	ldr	r0, [r4, #12]
 8006842:	9b03      	ldr	r3, [sp, #12]
 8006844:	4298      	cmp	r0, r3
 8006846:	bfb8      	it	lt
 8006848:	4618      	movlt	r0, r3
 800684a:	e7a6      	b.n	800679a <_printf_i+0x15e>
 800684c:	2301      	movs	r3, #1
 800684e:	4632      	mov	r2, r6
 8006850:	4649      	mov	r1, r9
 8006852:	4640      	mov	r0, r8
 8006854:	47d0      	blx	sl
 8006856:	3001      	adds	r0, #1
 8006858:	d09d      	beq.n	8006796 <_printf_i+0x15a>
 800685a:	3501      	adds	r5, #1
 800685c:	68e3      	ldr	r3, [r4, #12]
 800685e:	9903      	ldr	r1, [sp, #12]
 8006860:	1a5b      	subs	r3, r3, r1
 8006862:	42ab      	cmp	r3, r5
 8006864:	dcf2      	bgt.n	800684c <_printf_i+0x210>
 8006866:	e7eb      	b.n	8006840 <_printf_i+0x204>
 8006868:	2500      	movs	r5, #0
 800686a:	f104 0619 	add.w	r6, r4, #25
 800686e:	e7f5      	b.n	800685c <_printf_i+0x220>
 8006870:	0800a7e6 	.word	0x0800a7e6
 8006874:	0800a7f7 	.word	0x0800a7f7

08006878 <_scanf_float>:
 8006878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687c:	b087      	sub	sp, #28
 800687e:	4691      	mov	r9, r2
 8006880:	9303      	str	r3, [sp, #12]
 8006882:	688b      	ldr	r3, [r1, #8]
 8006884:	1e5a      	subs	r2, r3, #1
 8006886:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800688a:	bf81      	itttt	hi
 800688c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006890:	eb03 0b05 	addhi.w	fp, r3, r5
 8006894:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006898:	608b      	strhi	r3, [r1, #8]
 800689a:	680b      	ldr	r3, [r1, #0]
 800689c:	460a      	mov	r2, r1
 800689e:	f04f 0500 	mov.w	r5, #0
 80068a2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80068a6:	f842 3b1c 	str.w	r3, [r2], #28
 80068aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80068ae:	4680      	mov	r8, r0
 80068b0:	460c      	mov	r4, r1
 80068b2:	bf98      	it	ls
 80068b4:	f04f 0b00 	movls.w	fp, #0
 80068b8:	9201      	str	r2, [sp, #4]
 80068ba:	4616      	mov	r6, r2
 80068bc:	46aa      	mov	sl, r5
 80068be:	462f      	mov	r7, r5
 80068c0:	9502      	str	r5, [sp, #8]
 80068c2:	68a2      	ldr	r2, [r4, #8]
 80068c4:	b15a      	cbz	r2, 80068de <_scanf_float+0x66>
 80068c6:	f8d9 3000 	ldr.w	r3, [r9]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	2b4e      	cmp	r3, #78	@ 0x4e
 80068ce:	d863      	bhi.n	8006998 <_scanf_float+0x120>
 80068d0:	2b40      	cmp	r3, #64	@ 0x40
 80068d2:	d83b      	bhi.n	800694c <_scanf_float+0xd4>
 80068d4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80068d8:	b2c8      	uxtb	r0, r1
 80068da:	280e      	cmp	r0, #14
 80068dc:	d939      	bls.n	8006952 <_scanf_float+0xda>
 80068de:	b11f      	cbz	r7, 80068e8 <_scanf_float+0x70>
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068e6:	6023      	str	r3, [r4, #0]
 80068e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068ec:	f1ba 0f01 	cmp.w	sl, #1
 80068f0:	f200 8114 	bhi.w	8006b1c <_scanf_float+0x2a4>
 80068f4:	9b01      	ldr	r3, [sp, #4]
 80068f6:	429e      	cmp	r6, r3
 80068f8:	f200 8105 	bhi.w	8006b06 <_scanf_float+0x28e>
 80068fc:	2001      	movs	r0, #1
 80068fe:	b007      	add	sp, #28
 8006900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006904:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006908:	2a0d      	cmp	r2, #13
 800690a:	d8e8      	bhi.n	80068de <_scanf_float+0x66>
 800690c:	a101      	add	r1, pc, #4	@ (adr r1, 8006914 <_scanf_float+0x9c>)
 800690e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006912:	bf00      	nop
 8006914:	08006a5d 	.word	0x08006a5d
 8006918:	080068df 	.word	0x080068df
 800691c:	080068df 	.word	0x080068df
 8006920:	080068df 	.word	0x080068df
 8006924:	08006ab9 	.word	0x08006ab9
 8006928:	08006a93 	.word	0x08006a93
 800692c:	080068df 	.word	0x080068df
 8006930:	080068df 	.word	0x080068df
 8006934:	08006a6b 	.word	0x08006a6b
 8006938:	080068df 	.word	0x080068df
 800693c:	080068df 	.word	0x080068df
 8006940:	080068df 	.word	0x080068df
 8006944:	080068df 	.word	0x080068df
 8006948:	08006a27 	.word	0x08006a27
 800694c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006950:	e7da      	b.n	8006908 <_scanf_float+0x90>
 8006952:	290e      	cmp	r1, #14
 8006954:	d8c3      	bhi.n	80068de <_scanf_float+0x66>
 8006956:	a001      	add	r0, pc, #4	@ (adr r0, 800695c <_scanf_float+0xe4>)
 8006958:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800695c:	08006a17 	.word	0x08006a17
 8006960:	080068df 	.word	0x080068df
 8006964:	08006a17 	.word	0x08006a17
 8006968:	08006aa7 	.word	0x08006aa7
 800696c:	080068df 	.word	0x080068df
 8006970:	080069b9 	.word	0x080069b9
 8006974:	080069fd 	.word	0x080069fd
 8006978:	080069fd 	.word	0x080069fd
 800697c:	080069fd 	.word	0x080069fd
 8006980:	080069fd 	.word	0x080069fd
 8006984:	080069fd 	.word	0x080069fd
 8006988:	080069fd 	.word	0x080069fd
 800698c:	080069fd 	.word	0x080069fd
 8006990:	080069fd 	.word	0x080069fd
 8006994:	080069fd 	.word	0x080069fd
 8006998:	2b6e      	cmp	r3, #110	@ 0x6e
 800699a:	d809      	bhi.n	80069b0 <_scanf_float+0x138>
 800699c:	2b60      	cmp	r3, #96	@ 0x60
 800699e:	d8b1      	bhi.n	8006904 <_scanf_float+0x8c>
 80069a0:	2b54      	cmp	r3, #84	@ 0x54
 80069a2:	d07b      	beq.n	8006a9c <_scanf_float+0x224>
 80069a4:	2b59      	cmp	r3, #89	@ 0x59
 80069a6:	d19a      	bne.n	80068de <_scanf_float+0x66>
 80069a8:	2d07      	cmp	r5, #7
 80069aa:	d198      	bne.n	80068de <_scanf_float+0x66>
 80069ac:	2508      	movs	r5, #8
 80069ae:	e02f      	b.n	8006a10 <_scanf_float+0x198>
 80069b0:	2b74      	cmp	r3, #116	@ 0x74
 80069b2:	d073      	beq.n	8006a9c <_scanf_float+0x224>
 80069b4:	2b79      	cmp	r3, #121	@ 0x79
 80069b6:	e7f6      	b.n	80069a6 <_scanf_float+0x12e>
 80069b8:	6821      	ldr	r1, [r4, #0]
 80069ba:	05c8      	lsls	r0, r1, #23
 80069bc:	d51e      	bpl.n	80069fc <_scanf_float+0x184>
 80069be:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80069c2:	6021      	str	r1, [r4, #0]
 80069c4:	3701      	adds	r7, #1
 80069c6:	f1bb 0f00 	cmp.w	fp, #0
 80069ca:	d003      	beq.n	80069d4 <_scanf_float+0x15c>
 80069cc:	3201      	adds	r2, #1
 80069ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 80069d2:	60a2      	str	r2, [r4, #8]
 80069d4:	68a3      	ldr	r3, [r4, #8]
 80069d6:	3b01      	subs	r3, #1
 80069d8:	60a3      	str	r3, [r4, #8]
 80069da:	6923      	ldr	r3, [r4, #16]
 80069dc:	3301      	adds	r3, #1
 80069de:	6123      	str	r3, [r4, #16]
 80069e0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80069e4:	3b01      	subs	r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f8c9 3004 	str.w	r3, [r9, #4]
 80069ec:	f340 8082 	ble.w	8006af4 <_scanf_float+0x27c>
 80069f0:	f8d9 3000 	ldr.w	r3, [r9]
 80069f4:	3301      	adds	r3, #1
 80069f6:	f8c9 3000 	str.w	r3, [r9]
 80069fa:	e762      	b.n	80068c2 <_scanf_float+0x4a>
 80069fc:	eb1a 0105 	adds.w	r1, sl, r5
 8006a00:	f47f af6d 	bne.w	80068de <_scanf_float+0x66>
 8006a04:	6822      	ldr	r2, [r4, #0]
 8006a06:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006a0a:	6022      	str	r2, [r4, #0]
 8006a0c:	460d      	mov	r5, r1
 8006a0e:	468a      	mov	sl, r1
 8006a10:	f806 3b01 	strb.w	r3, [r6], #1
 8006a14:	e7de      	b.n	80069d4 <_scanf_float+0x15c>
 8006a16:	6822      	ldr	r2, [r4, #0]
 8006a18:	0610      	lsls	r0, r2, #24
 8006a1a:	f57f af60 	bpl.w	80068de <_scanf_float+0x66>
 8006a1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a22:	6022      	str	r2, [r4, #0]
 8006a24:	e7f4      	b.n	8006a10 <_scanf_float+0x198>
 8006a26:	f1ba 0f00 	cmp.w	sl, #0
 8006a2a:	d10c      	bne.n	8006a46 <_scanf_float+0x1ce>
 8006a2c:	b977      	cbnz	r7, 8006a4c <_scanf_float+0x1d4>
 8006a2e:	6822      	ldr	r2, [r4, #0]
 8006a30:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006a34:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006a38:	d108      	bne.n	8006a4c <_scanf_float+0x1d4>
 8006a3a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006a3e:	6022      	str	r2, [r4, #0]
 8006a40:	f04f 0a01 	mov.w	sl, #1
 8006a44:	e7e4      	b.n	8006a10 <_scanf_float+0x198>
 8006a46:	f1ba 0f02 	cmp.w	sl, #2
 8006a4a:	d050      	beq.n	8006aee <_scanf_float+0x276>
 8006a4c:	2d01      	cmp	r5, #1
 8006a4e:	d002      	beq.n	8006a56 <_scanf_float+0x1de>
 8006a50:	2d04      	cmp	r5, #4
 8006a52:	f47f af44 	bne.w	80068de <_scanf_float+0x66>
 8006a56:	3501      	adds	r5, #1
 8006a58:	b2ed      	uxtb	r5, r5
 8006a5a:	e7d9      	b.n	8006a10 <_scanf_float+0x198>
 8006a5c:	f1ba 0f01 	cmp.w	sl, #1
 8006a60:	f47f af3d 	bne.w	80068de <_scanf_float+0x66>
 8006a64:	f04f 0a02 	mov.w	sl, #2
 8006a68:	e7d2      	b.n	8006a10 <_scanf_float+0x198>
 8006a6a:	b975      	cbnz	r5, 8006a8a <_scanf_float+0x212>
 8006a6c:	2f00      	cmp	r7, #0
 8006a6e:	f47f af37 	bne.w	80068e0 <_scanf_float+0x68>
 8006a72:	6822      	ldr	r2, [r4, #0]
 8006a74:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006a78:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006a7c:	f040 8103 	bne.w	8006c86 <_scanf_float+0x40e>
 8006a80:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006a84:	6022      	str	r2, [r4, #0]
 8006a86:	2501      	movs	r5, #1
 8006a88:	e7c2      	b.n	8006a10 <_scanf_float+0x198>
 8006a8a:	2d03      	cmp	r5, #3
 8006a8c:	d0e3      	beq.n	8006a56 <_scanf_float+0x1de>
 8006a8e:	2d05      	cmp	r5, #5
 8006a90:	e7df      	b.n	8006a52 <_scanf_float+0x1da>
 8006a92:	2d02      	cmp	r5, #2
 8006a94:	f47f af23 	bne.w	80068de <_scanf_float+0x66>
 8006a98:	2503      	movs	r5, #3
 8006a9a:	e7b9      	b.n	8006a10 <_scanf_float+0x198>
 8006a9c:	2d06      	cmp	r5, #6
 8006a9e:	f47f af1e 	bne.w	80068de <_scanf_float+0x66>
 8006aa2:	2507      	movs	r5, #7
 8006aa4:	e7b4      	b.n	8006a10 <_scanf_float+0x198>
 8006aa6:	6822      	ldr	r2, [r4, #0]
 8006aa8:	0591      	lsls	r1, r2, #22
 8006aaa:	f57f af18 	bpl.w	80068de <_scanf_float+0x66>
 8006aae:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006ab2:	6022      	str	r2, [r4, #0]
 8006ab4:	9702      	str	r7, [sp, #8]
 8006ab6:	e7ab      	b.n	8006a10 <_scanf_float+0x198>
 8006ab8:	6822      	ldr	r2, [r4, #0]
 8006aba:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006abe:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006ac2:	d005      	beq.n	8006ad0 <_scanf_float+0x258>
 8006ac4:	0550      	lsls	r0, r2, #21
 8006ac6:	f57f af0a 	bpl.w	80068de <_scanf_float+0x66>
 8006aca:	2f00      	cmp	r7, #0
 8006acc:	f000 80db 	beq.w	8006c86 <_scanf_float+0x40e>
 8006ad0:	0591      	lsls	r1, r2, #22
 8006ad2:	bf58      	it	pl
 8006ad4:	9902      	ldrpl	r1, [sp, #8]
 8006ad6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006ada:	bf58      	it	pl
 8006adc:	1a79      	subpl	r1, r7, r1
 8006ade:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006ae2:	bf58      	it	pl
 8006ae4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006ae8:	6022      	str	r2, [r4, #0]
 8006aea:	2700      	movs	r7, #0
 8006aec:	e790      	b.n	8006a10 <_scanf_float+0x198>
 8006aee:	f04f 0a03 	mov.w	sl, #3
 8006af2:	e78d      	b.n	8006a10 <_scanf_float+0x198>
 8006af4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006af8:	4649      	mov	r1, r9
 8006afa:	4640      	mov	r0, r8
 8006afc:	4798      	blx	r3
 8006afe:	2800      	cmp	r0, #0
 8006b00:	f43f aedf 	beq.w	80068c2 <_scanf_float+0x4a>
 8006b04:	e6eb      	b.n	80068de <_scanf_float+0x66>
 8006b06:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b0e:	464a      	mov	r2, r9
 8006b10:	4640      	mov	r0, r8
 8006b12:	4798      	blx	r3
 8006b14:	6923      	ldr	r3, [r4, #16]
 8006b16:	3b01      	subs	r3, #1
 8006b18:	6123      	str	r3, [r4, #16]
 8006b1a:	e6eb      	b.n	80068f4 <_scanf_float+0x7c>
 8006b1c:	1e6b      	subs	r3, r5, #1
 8006b1e:	2b06      	cmp	r3, #6
 8006b20:	d824      	bhi.n	8006b6c <_scanf_float+0x2f4>
 8006b22:	2d02      	cmp	r5, #2
 8006b24:	d836      	bhi.n	8006b94 <_scanf_float+0x31c>
 8006b26:	9b01      	ldr	r3, [sp, #4]
 8006b28:	429e      	cmp	r6, r3
 8006b2a:	f67f aee7 	bls.w	80068fc <_scanf_float+0x84>
 8006b2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b36:	464a      	mov	r2, r9
 8006b38:	4640      	mov	r0, r8
 8006b3a:	4798      	blx	r3
 8006b3c:	6923      	ldr	r3, [r4, #16]
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	6123      	str	r3, [r4, #16]
 8006b42:	e7f0      	b.n	8006b26 <_scanf_float+0x2ae>
 8006b44:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b48:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006b4c:	464a      	mov	r2, r9
 8006b4e:	4640      	mov	r0, r8
 8006b50:	4798      	blx	r3
 8006b52:	6923      	ldr	r3, [r4, #16]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	6123      	str	r3, [r4, #16]
 8006b58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b5c:	fa5f fa8a 	uxtb.w	sl, sl
 8006b60:	f1ba 0f02 	cmp.w	sl, #2
 8006b64:	d1ee      	bne.n	8006b44 <_scanf_float+0x2cc>
 8006b66:	3d03      	subs	r5, #3
 8006b68:	b2ed      	uxtb	r5, r5
 8006b6a:	1b76      	subs	r6, r6, r5
 8006b6c:	6823      	ldr	r3, [r4, #0]
 8006b6e:	05da      	lsls	r2, r3, #23
 8006b70:	d530      	bpl.n	8006bd4 <_scanf_float+0x35c>
 8006b72:	055b      	lsls	r3, r3, #21
 8006b74:	d511      	bpl.n	8006b9a <_scanf_float+0x322>
 8006b76:	9b01      	ldr	r3, [sp, #4]
 8006b78:	429e      	cmp	r6, r3
 8006b7a:	f67f aebf 	bls.w	80068fc <_scanf_float+0x84>
 8006b7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b86:	464a      	mov	r2, r9
 8006b88:	4640      	mov	r0, r8
 8006b8a:	4798      	blx	r3
 8006b8c:	6923      	ldr	r3, [r4, #16]
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	6123      	str	r3, [r4, #16]
 8006b92:	e7f0      	b.n	8006b76 <_scanf_float+0x2fe>
 8006b94:	46aa      	mov	sl, r5
 8006b96:	46b3      	mov	fp, r6
 8006b98:	e7de      	b.n	8006b58 <_scanf_float+0x2e0>
 8006b9a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006b9e:	6923      	ldr	r3, [r4, #16]
 8006ba0:	2965      	cmp	r1, #101	@ 0x65
 8006ba2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ba6:	f106 35ff 	add.w	r5, r6, #4294967295
 8006baa:	6123      	str	r3, [r4, #16]
 8006bac:	d00c      	beq.n	8006bc8 <_scanf_float+0x350>
 8006bae:	2945      	cmp	r1, #69	@ 0x45
 8006bb0:	d00a      	beq.n	8006bc8 <_scanf_float+0x350>
 8006bb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006bb6:	464a      	mov	r2, r9
 8006bb8:	4640      	mov	r0, r8
 8006bba:	4798      	blx	r3
 8006bbc:	6923      	ldr	r3, [r4, #16]
 8006bbe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	1eb5      	subs	r5, r6, #2
 8006bc6:	6123      	str	r3, [r4, #16]
 8006bc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006bcc:	464a      	mov	r2, r9
 8006bce:	4640      	mov	r0, r8
 8006bd0:	4798      	blx	r3
 8006bd2:	462e      	mov	r6, r5
 8006bd4:	6822      	ldr	r2, [r4, #0]
 8006bd6:	f012 0210 	ands.w	r2, r2, #16
 8006bda:	d001      	beq.n	8006be0 <_scanf_float+0x368>
 8006bdc:	2000      	movs	r0, #0
 8006bde:	e68e      	b.n	80068fe <_scanf_float+0x86>
 8006be0:	7032      	strb	r2, [r6, #0]
 8006be2:	6823      	ldr	r3, [r4, #0]
 8006be4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006be8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bec:	d125      	bne.n	8006c3a <_scanf_float+0x3c2>
 8006bee:	9b02      	ldr	r3, [sp, #8]
 8006bf0:	429f      	cmp	r7, r3
 8006bf2:	d00a      	beq.n	8006c0a <_scanf_float+0x392>
 8006bf4:	1bda      	subs	r2, r3, r7
 8006bf6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006bfa:	429e      	cmp	r6, r3
 8006bfc:	bf28      	it	cs
 8006bfe:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006c02:	4922      	ldr	r1, [pc, #136]	@ (8006c8c <_scanf_float+0x414>)
 8006c04:	4630      	mov	r0, r6
 8006c06:	f000 f93d 	bl	8006e84 <siprintf>
 8006c0a:	9901      	ldr	r1, [sp, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	4640      	mov	r0, r8
 8006c10:	f002 fc2a 	bl	8009468 <_strtod_r>
 8006c14:	9b03      	ldr	r3, [sp, #12]
 8006c16:	6821      	ldr	r1, [r4, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f011 0f02 	tst.w	r1, #2
 8006c1e:	ec57 6b10 	vmov	r6, r7, d0
 8006c22:	f103 0204 	add.w	r2, r3, #4
 8006c26:	d015      	beq.n	8006c54 <_scanf_float+0x3dc>
 8006c28:	9903      	ldr	r1, [sp, #12]
 8006c2a:	600a      	str	r2, [r1, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	e9c3 6700 	strd	r6, r7, [r3]
 8006c32:	68e3      	ldr	r3, [r4, #12]
 8006c34:	3301      	adds	r3, #1
 8006c36:	60e3      	str	r3, [r4, #12]
 8006c38:	e7d0      	b.n	8006bdc <_scanf_float+0x364>
 8006c3a:	9b04      	ldr	r3, [sp, #16]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d0e4      	beq.n	8006c0a <_scanf_float+0x392>
 8006c40:	9905      	ldr	r1, [sp, #20]
 8006c42:	230a      	movs	r3, #10
 8006c44:	3101      	adds	r1, #1
 8006c46:	4640      	mov	r0, r8
 8006c48:	f002 fc8e 	bl	8009568 <_strtol_r>
 8006c4c:	9b04      	ldr	r3, [sp, #16]
 8006c4e:	9e05      	ldr	r6, [sp, #20]
 8006c50:	1ac2      	subs	r2, r0, r3
 8006c52:	e7d0      	b.n	8006bf6 <_scanf_float+0x37e>
 8006c54:	f011 0f04 	tst.w	r1, #4
 8006c58:	9903      	ldr	r1, [sp, #12]
 8006c5a:	600a      	str	r2, [r1, #0]
 8006c5c:	d1e6      	bne.n	8006c2c <_scanf_float+0x3b4>
 8006c5e:	681d      	ldr	r5, [r3, #0]
 8006c60:	4632      	mov	r2, r6
 8006c62:	463b      	mov	r3, r7
 8006c64:	4630      	mov	r0, r6
 8006c66:	4639      	mov	r1, r7
 8006c68:	f7f9 ff68 	bl	8000b3c <__aeabi_dcmpun>
 8006c6c:	b128      	cbz	r0, 8006c7a <_scanf_float+0x402>
 8006c6e:	4808      	ldr	r0, [pc, #32]	@ (8006c90 <_scanf_float+0x418>)
 8006c70:	f000 f9ee 	bl	8007050 <nanf>
 8006c74:	ed85 0a00 	vstr	s0, [r5]
 8006c78:	e7db      	b.n	8006c32 <_scanf_float+0x3ba>
 8006c7a:	4630      	mov	r0, r6
 8006c7c:	4639      	mov	r1, r7
 8006c7e:	f7f9 ffbb 	bl	8000bf8 <__aeabi_d2f>
 8006c82:	6028      	str	r0, [r5, #0]
 8006c84:	e7d5      	b.n	8006c32 <_scanf_float+0x3ba>
 8006c86:	2700      	movs	r7, #0
 8006c88:	e62e      	b.n	80068e8 <_scanf_float+0x70>
 8006c8a:	bf00      	nop
 8006c8c:	0800a808 	.word	0x0800a808
 8006c90:	0800a949 	.word	0x0800a949

08006c94 <std>:
 8006c94:	2300      	movs	r3, #0
 8006c96:	b510      	push	{r4, lr}
 8006c98:	4604      	mov	r4, r0
 8006c9a:	e9c0 3300 	strd	r3, r3, [r0]
 8006c9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ca2:	6083      	str	r3, [r0, #8]
 8006ca4:	8181      	strh	r1, [r0, #12]
 8006ca6:	6643      	str	r3, [r0, #100]	@ 0x64
 8006ca8:	81c2      	strh	r2, [r0, #14]
 8006caa:	6183      	str	r3, [r0, #24]
 8006cac:	4619      	mov	r1, r3
 8006cae:	2208      	movs	r2, #8
 8006cb0:	305c      	adds	r0, #92	@ 0x5c
 8006cb2:	f000 f94c 	bl	8006f4e <memset>
 8006cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8006cec <std+0x58>)
 8006cb8:	6263      	str	r3, [r4, #36]	@ 0x24
 8006cba:	4b0d      	ldr	r3, [pc, #52]	@ (8006cf0 <std+0x5c>)
 8006cbc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006cf4 <std+0x60>)
 8006cc0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006cf8 <std+0x64>)
 8006cc4:	6323      	str	r3, [r4, #48]	@ 0x30
 8006cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006cfc <std+0x68>)
 8006cc8:	6224      	str	r4, [r4, #32]
 8006cca:	429c      	cmp	r4, r3
 8006ccc:	d006      	beq.n	8006cdc <std+0x48>
 8006cce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006cd2:	4294      	cmp	r4, r2
 8006cd4:	d002      	beq.n	8006cdc <std+0x48>
 8006cd6:	33d0      	adds	r3, #208	@ 0xd0
 8006cd8:	429c      	cmp	r4, r3
 8006cda:	d105      	bne.n	8006ce8 <std+0x54>
 8006cdc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ce4:	f000 b9b0 	b.w	8007048 <__retarget_lock_init_recursive>
 8006ce8:	bd10      	pop	{r4, pc}
 8006cea:	bf00      	nop
 8006cec:	08006ec9 	.word	0x08006ec9
 8006cf0:	08006eeb 	.word	0x08006eeb
 8006cf4:	08006f23 	.word	0x08006f23
 8006cf8:	08006f47 	.word	0x08006f47
 8006cfc:	20000488 	.word	0x20000488

08006d00 <stdio_exit_handler>:
 8006d00:	4a02      	ldr	r2, [pc, #8]	@ (8006d0c <stdio_exit_handler+0xc>)
 8006d02:	4903      	ldr	r1, [pc, #12]	@ (8006d10 <stdio_exit_handler+0x10>)
 8006d04:	4803      	ldr	r0, [pc, #12]	@ (8006d14 <stdio_exit_handler+0x14>)
 8006d06:	f000 b869 	b.w	8006ddc <_fwalk_sglue>
 8006d0a:	bf00      	nop
 8006d0c:	20000018 	.word	0x20000018
 8006d10:	08009925 	.word	0x08009925
 8006d14:	20000028 	.word	0x20000028

08006d18 <cleanup_stdio>:
 8006d18:	6841      	ldr	r1, [r0, #4]
 8006d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8006d4c <cleanup_stdio+0x34>)
 8006d1c:	4299      	cmp	r1, r3
 8006d1e:	b510      	push	{r4, lr}
 8006d20:	4604      	mov	r4, r0
 8006d22:	d001      	beq.n	8006d28 <cleanup_stdio+0x10>
 8006d24:	f002 fdfe 	bl	8009924 <_fflush_r>
 8006d28:	68a1      	ldr	r1, [r4, #8]
 8006d2a:	4b09      	ldr	r3, [pc, #36]	@ (8006d50 <cleanup_stdio+0x38>)
 8006d2c:	4299      	cmp	r1, r3
 8006d2e:	d002      	beq.n	8006d36 <cleanup_stdio+0x1e>
 8006d30:	4620      	mov	r0, r4
 8006d32:	f002 fdf7 	bl	8009924 <_fflush_r>
 8006d36:	68e1      	ldr	r1, [r4, #12]
 8006d38:	4b06      	ldr	r3, [pc, #24]	@ (8006d54 <cleanup_stdio+0x3c>)
 8006d3a:	4299      	cmp	r1, r3
 8006d3c:	d004      	beq.n	8006d48 <cleanup_stdio+0x30>
 8006d3e:	4620      	mov	r0, r4
 8006d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d44:	f002 bdee 	b.w	8009924 <_fflush_r>
 8006d48:	bd10      	pop	{r4, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20000488 	.word	0x20000488
 8006d50:	200004f0 	.word	0x200004f0
 8006d54:	20000558 	.word	0x20000558

08006d58 <global_stdio_init.part.0>:
 8006d58:	b510      	push	{r4, lr}
 8006d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d88 <global_stdio_init.part.0+0x30>)
 8006d5c:	4c0b      	ldr	r4, [pc, #44]	@ (8006d8c <global_stdio_init.part.0+0x34>)
 8006d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8006d90 <global_stdio_init.part.0+0x38>)
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	4620      	mov	r0, r4
 8006d64:	2200      	movs	r2, #0
 8006d66:	2104      	movs	r1, #4
 8006d68:	f7ff ff94 	bl	8006c94 <std>
 8006d6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d70:	2201      	movs	r2, #1
 8006d72:	2109      	movs	r1, #9
 8006d74:	f7ff ff8e 	bl	8006c94 <std>
 8006d78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d82:	2112      	movs	r1, #18
 8006d84:	f7ff bf86 	b.w	8006c94 <std>
 8006d88:	200005c0 	.word	0x200005c0
 8006d8c:	20000488 	.word	0x20000488
 8006d90:	08006d01 	.word	0x08006d01

08006d94 <__sfp_lock_acquire>:
 8006d94:	4801      	ldr	r0, [pc, #4]	@ (8006d9c <__sfp_lock_acquire+0x8>)
 8006d96:	f000 b958 	b.w	800704a <__retarget_lock_acquire_recursive>
 8006d9a:	bf00      	nop
 8006d9c:	200005c9 	.word	0x200005c9

08006da0 <__sfp_lock_release>:
 8006da0:	4801      	ldr	r0, [pc, #4]	@ (8006da8 <__sfp_lock_release+0x8>)
 8006da2:	f000 b953 	b.w	800704c <__retarget_lock_release_recursive>
 8006da6:	bf00      	nop
 8006da8:	200005c9 	.word	0x200005c9

08006dac <__sinit>:
 8006dac:	b510      	push	{r4, lr}
 8006dae:	4604      	mov	r4, r0
 8006db0:	f7ff fff0 	bl	8006d94 <__sfp_lock_acquire>
 8006db4:	6a23      	ldr	r3, [r4, #32]
 8006db6:	b11b      	cbz	r3, 8006dc0 <__sinit+0x14>
 8006db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dbc:	f7ff bff0 	b.w	8006da0 <__sfp_lock_release>
 8006dc0:	4b04      	ldr	r3, [pc, #16]	@ (8006dd4 <__sinit+0x28>)
 8006dc2:	6223      	str	r3, [r4, #32]
 8006dc4:	4b04      	ldr	r3, [pc, #16]	@ (8006dd8 <__sinit+0x2c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1f5      	bne.n	8006db8 <__sinit+0xc>
 8006dcc:	f7ff ffc4 	bl	8006d58 <global_stdio_init.part.0>
 8006dd0:	e7f2      	b.n	8006db8 <__sinit+0xc>
 8006dd2:	bf00      	nop
 8006dd4:	08006d19 	.word	0x08006d19
 8006dd8:	200005c0 	.word	0x200005c0

08006ddc <_fwalk_sglue>:
 8006ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006de0:	4607      	mov	r7, r0
 8006de2:	4688      	mov	r8, r1
 8006de4:	4614      	mov	r4, r2
 8006de6:	2600      	movs	r6, #0
 8006de8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dec:	f1b9 0901 	subs.w	r9, r9, #1
 8006df0:	d505      	bpl.n	8006dfe <_fwalk_sglue+0x22>
 8006df2:	6824      	ldr	r4, [r4, #0]
 8006df4:	2c00      	cmp	r4, #0
 8006df6:	d1f7      	bne.n	8006de8 <_fwalk_sglue+0xc>
 8006df8:	4630      	mov	r0, r6
 8006dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dfe:	89ab      	ldrh	r3, [r5, #12]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d907      	bls.n	8006e14 <_fwalk_sglue+0x38>
 8006e04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	d003      	beq.n	8006e14 <_fwalk_sglue+0x38>
 8006e0c:	4629      	mov	r1, r5
 8006e0e:	4638      	mov	r0, r7
 8006e10:	47c0      	blx	r8
 8006e12:	4306      	orrs	r6, r0
 8006e14:	3568      	adds	r5, #104	@ 0x68
 8006e16:	e7e9      	b.n	8006dec <_fwalk_sglue+0x10>

08006e18 <sniprintf>:
 8006e18:	b40c      	push	{r2, r3}
 8006e1a:	b530      	push	{r4, r5, lr}
 8006e1c:	4b18      	ldr	r3, [pc, #96]	@ (8006e80 <sniprintf+0x68>)
 8006e1e:	1e0c      	subs	r4, r1, #0
 8006e20:	681d      	ldr	r5, [r3, #0]
 8006e22:	b09d      	sub	sp, #116	@ 0x74
 8006e24:	da08      	bge.n	8006e38 <sniprintf+0x20>
 8006e26:	238b      	movs	r3, #139	@ 0x8b
 8006e28:	602b      	str	r3, [r5, #0]
 8006e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e2e:	b01d      	add	sp, #116	@ 0x74
 8006e30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e34:	b002      	add	sp, #8
 8006e36:	4770      	bx	lr
 8006e38:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006e3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006e40:	f04f 0300 	mov.w	r3, #0
 8006e44:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006e46:	bf14      	ite	ne
 8006e48:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006e4c:	4623      	moveq	r3, r4
 8006e4e:	9304      	str	r3, [sp, #16]
 8006e50:	9307      	str	r3, [sp, #28]
 8006e52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006e56:	9002      	str	r0, [sp, #8]
 8006e58:	9006      	str	r0, [sp, #24]
 8006e5a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006e5e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006e60:	ab21      	add	r3, sp, #132	@ 0x84
 8006e62:	a902      	add	r1, sp, #8
 8006e64:	4628      	mov	r0, r5
 8006e66:	9301      	str	r3, [sp, #4]
 8006e68:	f002 fbdc 	bl	8009624 <_svfiprintf_r>
 8006e6c:	1c43      	adds	r3, r0, #1
 8006e6e:	bfbc      	itt	lt
 8006e70:	238b      	movlt	r3, #139	@ 0x8b
 8006e72:	602b      	strlt	r3, [r5, #0]
 8006e74:	2c00      	cmp	r4, #0
 8006e76:	d0da      	beq.n	8006e2e <sniprintf+0x16>
 8006e78:	9b02      	ldr	r3, [sp, #8]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	701a      	strb	r2, [r3, #0]
 8006e7e:	e7d6      	b.n	8006e2e <sniprintf+0x16>
 8006e80:	20000024 	.word	0x20000024

08006e84 <siprintf>:
 8006e84:	b40e      	push	{r1, r2, r3}
 8006e86:	b510      	push	{r4, lr}
 8006e88:	b09d      	sub	sp, #116	@ 0x74
 8006e8a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006e8c:	9002      	str	r0, [sp, #8]
 8006e8e:	9006      	str	r0, [sp, #24]
 8006e90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006e94:	480a      	ldr	r0, [pc, #40]	@ (8006ec0 <siprintf+0x3c>)
 8006e96:	9107      	str	r1, [sp, #28]
 8006e98:	9104      	str	r1, [sp, #16]
 8006e9a:	490a      	ldr	r1, [pc, #40]	@ (8006ec4 <siprintf+0x40>)
 8006e9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ea0:	9105      	str	r1, [sp, #20]
 8006ea2:	2400      	movs	r4, #0
 8006ea4:	a902      	add	r1, sp, #8
 8006ea6:	6800      	ldr	r0, [r0, #0]
 8006ea8:	9301      	str	r3, [sp, #4]
 8006eaa:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006eac:	f002 fbba 	bl	8009624 <_svfiprintf_r>
 8006eb0:	9b02      	ldr	r3, [sp, #8]
 8006eb2:	701c      	strb	r4, [r3, #0]
 8006eb4:	b01d      	add	sp, #116	@ 0x74
 8006eb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eba:	b003      	add	sp, #12
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	20000024 	.word	0x20000024
 8006ec4:	ffff0208 	.word	0xffff0208

08006ec8 <__sread>:
 8006ec8:	b510      	push	{r4, lr}
 8006eca:	460c      	mov	r4, r1
 8006ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed0:	f000 f86c 	bl	8006fac <_read_r>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	bfab      	itete	ge
 8006ed8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006eda:	89a3      	ldrhlt	r3, [r4, #12]
 8006edc:	181b      	addge	r3, r3, r0
 8006ede:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006ee2:	bfac      	ite	ge
 8006ee4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006ee6:	81a3      	strhlt	r3, [r4, #12]
 8006ee8:	bd10      	pop	{r4, pc}

08006eea <__swrite>:
 8006eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eee:	461f      	mov	r7, r3
 8006ef0:	898b      	ldrh	r3, [r1, #12]
 8006ef2:	05db      	lsls	r3, r3, #23
 8006ef4:	4605      	mov	r5, r0
 8006ef6:	460c      	mov	r4, r1
 8006ef8:	4616      	mov	r6, r2
 8006efa:	d505      	bpl.n	8006f08 <__swrite+0x1e>
 8006efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f00:	2302      	movs	r3, #2
 8006f02:	2200      	movs	r2, #0
 8006f04:	f000 f840 	bl	8006f88 <_lseek_r>
 8006f08:	89a3      	ldrh	r3, [r4, #12]
 8006f0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f12:	81a3      	strh	r3, [r4, #12]
 8006f14:	4632      	mov	r2, r6
 8006f16:	463b      	mov	r3, r7
 8006f18:	4628      	mov	r0, r5
 8006f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f1e:	f000 b857 	b.w	8006fd0 <_write_r>

08006f22 <__sseek>:
 8006f22:	b510      	push	{r4, lr}
 8006f24:	460c      	mov	r4, r1
 8006f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f2a:	f000 f82d 	bl	8006f88 <_lseek_r>
 8006f2e:	1c43      	adds	r3, r0, #1
 8006f30:	89a3      	ldrh	r3, [r4, #12]
 8006f32:	bf15      	itete	ne
 8006f34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f3e:	81a3      	strheq	r3, [r4, #12]
 8006f40:	bf18      	it	ne
 8006f42:	81a3      	strhne	r3, [r4, #12]
 8006f44:	bd10      	pop	{r4, pc}

08006f46 <__sclose>:
 8006f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f4a:	f000 b80d 	b.w	8006f68 <_close_r>

08006f4e <memset>:
 8006f4e:	4402      	add	r2, r0
 8006f50:	4603      	mov	r3, r0
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d100      	bne.n	8006f58 <memset+0xa>
 8006f56:	4770      	bx	lr
 8006f58:	f803 1b01 	strb.w	r1, [r3], #1
 8006f5c:	e7f9      	b.n	8006f52 <memset+0x4>
	...

08006f60 <_localeconv_r>:
 8006f60:	4800      	ldr	r0, [pc, #0]	@ (8006f64 <_localeconv_r+0x4>)
 8006f62:	4770      	bx	lr
 8006f64:	20000164 	.word	0x20000164

08006f68 <_close_r>:
 8006f68:	b538      	push	{r3, r4, r5, lr}
 8006f6a:	4d06      	ldr	r5, [pc, #24]	@ (8006f84 <_close_r+0x1c>)
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	4604      	mov	r4, r0
 8006f70:	4608      	mov	r0, r1
 8006f72:	602b      	str	r3, [r5, #0]
 8006f74:	f7fb fb14 	bl	80025a0 <_close>
 8006f78:	1c43      	adds	r3, r0, #1
 8006f7a:	d102      	bne.n	8006f82 <_close_r+0x1a>
 8006f7c:	682b      	ldr	r3, [r5, #0]
 8006f7e:	b103      	cbz	r3, 8006f82 <_close_r+0x1a>
 8006f80:	6023      	str	r3, [r4, #0]
 8006f82:	bd38      	pop	{r3, r4, r5, pc}
 8006f84:	200005c4 	.word	0x200005c4

08006f88 <_lseek_r>:
 8006f88:	b538      	push	{r3, r4, r5, lr}
 8006f8a:	4d07      	ldr	r5, [pc, #28]	@ (8006fa8 <_lseek_r+0x20>)
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	4608      	mov	r0, r1
 8006f90:	4611      	mov	r1, r2
 8006f92:	2200      	movs	r2, #0
 8006f94:	602a      	str	r2, [r5, #0]
 8006f96:	461a      	mov	r2, r3
 8006f98:	f7fb fb29 	bl	80025ee <_lseek>
 8006f9c:	1c43      	adds	r3, r0, #1
 8006f9e:	d102      	bne.n	8006fa6 <_lseek_r+0x1e>
 8006fa0:	682b      	ldr	r3, [r5, #0]
 8006fa2:	b103      	cbz	r3, 8006fa6 <_lseek_r+0x1e>
 8006fa4:	6023      	str	r3, [r4, #0]
 8006fa6:	bd38      	pop	{r3, r4, r5, pc}
 8006fa8:	200005c4 	.word	0x200005c4

08006fac <_read_r>:
 8006fac:	b538      	push	{r3, r4, r5, lr}
 8006fae:	4d07      	ldr	r5, [pc, #28]	@ (8006fcc <_read_r+0x20>)
 8006fb0:	4604      	mov	r4, r0
 8006fb2:	4608      	mov	r0, r1
 8006fb4:	4611      	mov	r1, r2
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	602a      	str	r2, [r5, #0]
 8006fba:	461a      	mov	r2, r3
 8006fbc:	f7fb fab7 	bl	800252e <_read>
 8006fc0:	1c43      	adds	r3, r0, #1
 8006fc2:	d102      	bne.n	8006fca <_read_r+0x1e>
 8006fc4:	682b      	ldr	r3, [r5, #0]
 8006fc6:	b103      	cbz	r3, 8006fca <_read_r+0x1e>
 8006fc8:	6023      	str	r3, [r4, #0]
 8006fca:	bd38      	pop	{r3, r4, r5, pc}
 8006fcc:	200005c4 	.word	0x200005c4

08006fd0 <_write_r>:
 8006fd0:	b538      	push	{r3, r4, r5, lr}
 8006fd2:	4d07      	ldr	r5, [pc, #28]	@ (8006ff0 <_write_r+0x20>)
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	4608      	mov	r0, r1
 8006fd8:	4611      	mov	r1, r2
 8006fda:	2200      	movs	r2, #0
 8006fdc:	602a      	str	r2, [r5, #0]
 8006fde:	461a      	mov	r2, r3
 8006fe0:	f7fb fac2 	bl	8002568 <_write>
 8006fe4:	1c43      	adds	r3, r0, #1
 8006fe6:	d102      	bne.n	8006fee <_write_r+0x1e>
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	b103      	cbz	r3, 8006fee <_write_r+0x1e>
 8006fec:	6023      	str	r3, [r4, #0]
 8006fee:	bd38      	pop	{r3, r4, r5, pc}
 8006ff0:	200005c4 	.word	0x200005c4

08006ff4 <__errno>:
 8006ff4:	4b01      	ldr	r3, [pc, #4]	@ (8006ffc <__errno+0x8>)
 8006ff6:	6818      	ldr	r0, [r3, #0]
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	20000024 	.word	0x20000024

08007000 <__libc_init_array>:
 8007000:	b570      	push	{r4, r5, r6, lr}
 8007002:	4d0d      	ldr	r5, [pc, #52]	@ (8007038 <__libc_init_array+0x38>)
 8007004:	4c0d      	ldr	r4, [pc, #52]	@ (800703c <__libc_init_array+0x3c>)
 8007006:	1b64      	subs	r4, r4, r5
 8007008:	10a4      	asrs	r4, r4, #2
 800700a:	2600      	movs	r6, #0
 800700c:	42a6      	cmp	r6, r4
 800700e:	d109      	bne.n	8007024 <__libc_init_array+0x24>
 8007010:	4d0b      	ldr	r5, [pc, #44]	@ (8007040 <__libc_init_array+0x40>)
 8007012:	4c0c      	ldr	r4, [pc, #48]	@ (8007044 <__libc_init_array+0x44>)
 8007014:	f003 fb76 	bl	800a704 <_init>
 8007018:	1b64      	subs	r4, r4, r5
 800701a:	10a4      	asrs	r4, r4, #2
 800701c:	2600      	movs	r6, #0
 800701e:	42a6      	cmp	r6, r4
 8007020:	d105      	bne.n	800702e <__libc_init_array+0x2e>
 8007022:	bd70      	pop	{r4, r5, r6, pc}
 8007024:	f855 3b04 	ldr.w	r3, [r5], #4
 8007028:	4798      	blx	r3
 800702a:	3601      	adds	r6, #1
 800702c:	e7ee      	b.n	800700c <__libc_init_array+0xc>
 800702e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007032:	4798      	blx	r3
 8007034:	3601      	adds	r6, #1
 8007036:	e7f2      	b.n	800701e <__libc_init_array+0x1e>
 8007038:	0800ac04 	.word	0x0800ac04
 800703c:	0800ac04 	.word	0x0800ac04
 8007040:	0800ac04 	.word	0x0800ac04
 8007044:	0800ac08 	.word	0x0800ac08

08007048 <__retarget_lock_init_recursive>:
 8007048:	4770      	bx	lr

0800704a <__retarget_lock_acquire_recursive>:
 800704a:	4770      	bx	lr

0800704c <__retarget_lock_release_recursive>:
 800704c:	4770      	bx	lr
	...

08007050 <nanf>:
 8007050:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007058 <nanf+0x8>
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	7fc00000 	.word	0x7fc00000

0800705c <quorem>:
 800705c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007060:	6903      	ldr	r3, [r0, #16]
 8007062:	690c      	ldr	r4, [r1, #16]
 8007064:	42a3      	cmp	r3, r4
 8007066:	4607      	mov	r7, r0
 8007068:	db7e      	blt.n	8007168 <quorem+0x10c>
 800706a:	3c01      	subs	r4, #1
 800706c:	f101 0814 	add.w	r8, r1, #20
 8007070:	00a3      	lsls	r3, r4, #2
 8007072:	f100 0514 	add.w	r5, r0, #20
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800707c:	9301      	str	r3, [sp, #4]
 800707e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007082:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007086:	3301      	adds	r3, #1
 8007088:	429a      	cmp	r2, r3
 800708a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800708e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007092:	d32e      	bcc.n	80070f2 <quorem+0x96>
 8007094:	f04f 0a00 	mov.w	sl, #0
 8007098:	46c4      	mov	ip, r8
 800709a:	46ae      	mov	lr, r5
 800709c:	46d3      	mov	fp, sl
 800709e:	f85c 3b04 	ldr.w	r3, [ip], #4
 80070a2:	b298      	uxth	r0, r3
 80070a4:	fb06 a000 	mla	r0, r6, r0, sl
 80070a8:	0c02      	lsrs	r2, r0, #16
 80070aa:	0c1b      	lsrs	r3, r3, #16
 80070ac:	fb06 2303 	mla	r3, r6, r3, r2
 80070b0:	f8de 2000 	ldr.w	r2, [lr]
 80070b4:	b280      	uxth	r0, r0
 80070b6:	b292      	uxth	r2, r2
 80070b8:	1a12      	subs	r2, r2, r0
 80070ba:	445a      	add	r2, fp
 80070bc:	f8de 0000 	ldr.w	r0, [lr]
 80070c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80070ca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80070ce:	b292      	uxth	r2, r2
 80070d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80070d4:	45e1      	cmp	r9, ip
 80070d6:	f84e 2b04 	str.w	r2, [lr], #4
 80070da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80070de:	d2de      	bcs.n	800709e <quorem+0x42>
 80070e0:	9b00      	ldr	r3, [sp, #0]
 80070e2:	58eb      	ldr	r3, [r5, r3]
 80070e4:	b92b      	cbnz	r3, 80070f2 <quorem+0x96>
 80070e6:	9b01      	ldr	r3, [sp, #4]
 80070e8:	3b04      	subs	r3, #4
 80070ea:	429d      	cmp	r5, r3
 80070ec:	461a      	mov	r2, r3
 80070ee:	d32f      	bcc.n	8007150 <quorem+0xf4>
 80070f0:	613c      	str	r4, [r7, #16]
 80070f2:	4638      	mov	r0, r7
 80070f4:	f001 f9c8 	bl	8008488 <__mcmp>
 80070f8:	2800      	cmp	r0, #0
 80070fa:	db25      	blt.n	8007148 <quorem+0xec>
 80070fc:	4629      	mov	r1, r5
 80070fe:	2000      	movs	r0, #0
 8007100:	f858 2b04 	ldr.w	r2, [r8], #4
 8007104:	f8d1 c000 	ldr.w	ip, [r1]
 8007108:	fa1f fe82 	uxth.w	lr, r2
 800710c:	fa1f f38c 	uxth.w	r3, ip
 8007110:	eba3 030e 	sub.w	r3, r3, lr
 8007114:	4403      	add	r3, r0
 8007116:	0c12      	lsrs	r2, r2, #16
 8007118:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800711c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007120:	b29b      	uxth	r3, r3
 8007122:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007126:	45c1      	cmp	r9, r8
 8007128:	f841 3b04 	str.w	r3, [r1], #4
 800712c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007130:	d2e6      	bcs.n	8007100 <quorem+0xa4>
 8007132:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007136:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800713a:	b922      	cbnz	r2, 8007146 <quorem+0xea>
 800713c:	3b04      	subs	r3, #4
 800713e:	429d      	cmp	r5, r3
 8007140:	461a      	mov	r2, r3
 8007142:	d30b      	bcc.n	800715c <quorem+0x100>
 8007144:	613c      	str	r4, [r7, #16]
 8007146:	3601      	adds	r6, #1
 8007148:	4630      	mov	r0, r6
 800714a:	b003      	add	sp, #12
 800714c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007150:	6812      	ldr	r2, [r2, #0]
 8007152:	3b04      	subs	r3, #4
 8007154:	2a00      	cmp	r2, #0
 8007156:	d1cb      	bne.n	80070f0 <quorem+0x94>
 8007158:	3c01      	subs	r4, #1
 800715a:	e7c6      	b.n	80070ea <quorem+0x8e>
 800715c:	6812      	ldr	r2, [r2, #0]
 800715e:	3b04      	subs	r3, #4
 8007160:	2a00      	cmp	r2, #0
 8007162:	d1ef      	bne.n	8007144 <quorem+0xe8>
 8007164:	3c01      	subs	r4, #1
 8007166:	e7ea      	b.n	800713e <quorem+0xe2>
 8007168:	2000      	movs	r0, #0
 800716a:	e7ee      	b.n	800714a <quorem+0xee>
 800716c:	0000      	movs	r0, r0
	...

08007170 <_dtoa_r>:
 8007170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007174:	69c7      	ldr	r7, [r0, #28]
 8007176:	b097      	sub	sp, #92	@ 0x5c
 8007178:	ed8d 0b04 	vstr	d0, [sp, #16]
 800717c:	ec55 4b10 	vmov	r4, r5, d0
 8007180:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007182:	9107      	str	r1, [sp, #28]
 8007184:	4681      	mov	r9, r0
 8007186:	920c      	str	r2, [sp, #48]	@ 0x30
 8007188:	9311      	str	r3, [sp, #68]	@ 0x44
 800718a:	b97f      	cbnz	r7, 80071ac <_dtoa_r+0x3c>
 800718c:	2010      	movs	r0, #16
 800718e:	f000 fe09 	bl	8007da4 <malloc>
 8007192:	4602      	mov	r2, r0
 8007194:	f8c9 001c 	str.w	r0, [r9, #28]
 8007198:	b920      	cbnz	r0, 80071a4 <_dtoa_r+0x34>
 800719a:	4ba9      	ldr	r3, [pc, #676]	@ (8007440 <_dtoa_r+0x2d0>)
 800719c:	21ef      	movs	r1, #239	@ 0xef
 800719e:	48a9      	ldr	r0, [pc, #676]	@ (8007444 <_dtoa_r+0x2d4>)
 80071a0:	f002 fc3a 	bl	8009a18 <__assert_func>
 80071a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80071a8:	6007      	str	r7, [r0, #0]
 80071aa:	60c7      	str	r7, [r0, #12]
 80071ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80071b0:	6819      	ldr	r1, [r3, #0]
 80071b2:	b159      	cbz	r1, 80071cc <_dtoa_r+0x5c>
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	604a      	str	r2, [r1, #4]
 80071b8:	2301      	movs	r3, #1
 80071ba:	4093      	lsls	r3, r2
 80071bc:	608b      	str	r3, [r1, #8]
 80071be:	4648      	mov	r0, r9
 80071c0:	f000 fee6 	bl	8007f90 <_Bfree>
 80071c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80071c8:	2200      	movs	r2, #0
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	1e2b      	subs	r3, r5, #0
 80071ce:	bfb9      	ittee	lt
 80071d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80071d4:	9305      	strlt	r3, [sp, #20]
 80071d6:	2300      	movge	r3, #0
 80071d8:	6033      	strge	r3, [r6, #0]
 80071da:	9f05      	ldr	r7, [sp, #20]
 80071dc:	4b9a      	ldr	r3, [pc, #616]	@ (8007448 <_dtoa_r+0x2d8>)
 80071de:	bfbc      	itt	lt
 80071e0:	2201      	movlt	r2, #1
 80071e2:	6032      	strlt	r2, [r6, #0]
 80071e4:	43bb      	bics	r3, r7
 80071e6:	d112      	bne.n	800720e <_dtoa_r+0x9e>
 80071e8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80071ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80071ee:	6013      	str	r3, [r2, #0]
 80071f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80071f4:	4323      	orrs	r3, r4
 80071f6:	f000 855a 	beq.w	8007cae <_dtoa_r+0xb3e>
 80071fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80071fc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800745c <_dtoa_r+0x2ec>
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 855c 	beq.w	8007cbe <_dtoa_r+0xb4e>
 8007206:	f10a 0303 	add.w	r3, sl, #3
 800720a:	f000 bd56 	b.w	8007cba <_dtoa_r+0xb4a>
 800720e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007212:	2200      	movs	r2, #0
 8007214:	ec51 0b17 	vmov	r0, r1, d7
 8007218:	2300      	movs	r3, #0
 800721a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800721e:	f7f9 fc5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007222:	4680      	mov	r8, r0
 8007224:	b158      	cbz	r0, 800723e <_dtoa_r+0xce>
 8007226:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007228:	2301      	movs	r3, #1
 800722a:	6013      	str	r3, [r2, #0]
 800722c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800722e:	b113      	cbz	r3, 8007236 <_dtoa_r+0xc6>
 8007230:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007232:	4b86      	ldr	r3, [pc, #536]	@ (800744c <_dtoa_r+0x2dc>)
 8007234:	6013      	str	r3, [r2, #0]
 8007236:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007460 <_dtoa_r+0x2f0>
 800723a:	f000 bd40 	b.w	8007cbe <_dtoa_r+0xb4e>
 800723e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007242:	aa14      	add	r2, sp, #80	@ 0x50
 8007244:	a915      	add	r1, sp, #84	@ 0x54
 8007246:	4648      	mov	r0, r9
 8007248:	f001 fa3e 	bl	80086c8 <__d2b>
 800724c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007250:	9002      	str	r0, [sp, #8]
 8007252:	2e00      	cmp	r6, #0
 8007254:	d078      	beq.n	8007348 <_dtoa_r+0x1d8>
 8007256:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007258:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800725c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007260:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007264:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007268:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800726c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007270:	4619      	mov	r1, r3
 8007272:	2200      	movs	r2, #0
 8007274:	4b76      	ldr	r3, [pc, #472]	@ (8007450 <_dtoa_r+0x2e0>)
 8007276:	f7f9 f80f 	bl	8000298 <__aeabi_dsub>
 800727a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007428 <_dtoa_r+0x2b8>)
 800727c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007280:	f7f9 f9c2 	bl	8000608 <__aeabi_dmul>
 8007284:	a36a      	add	r3, pc, #424	@ (adr r3, 8007430 <_dtoa_r+0x2c0>)
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	f7f9 f807 	bl	800029c <__adddf3>
 800728e:	4604      	mov	r4, r0
 8007290:	4630      	mov	r0, r6
 8007292:	460d      	mov	r5, r1
 8007294:	f7f9 f94e 	bl	8000534 <__aeabi_i2d>
 8007298:	a367      	add	r3, pc, #412	@ (adr r3, 8007438 <_dtoa_r+0x2c8>)
 800729a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729e:	f7f9 f9b3 	bl	8000608 <__aeabi_dmul>
 80072a2:	4602      	mov	r2, r0
 80072a4:	460b      	mov	r3, r1
 80072a6:	4620      	mov	r0, r4
 80072a8:	4629      	mov	r1, r5
 80072aa:	f7f8 fff7 	bl	800029c <__adddf3>
 80072ae:	4604      	mov	r4, r0
 80072b0:	460d      	mov	r5, r1
 80072b2:	f7f9 fc59 	bl	8000b68 <__aeabi_d2iz>
 80072b6:	2200      	movs	r2, #0
 80072b8:	4607      	mov	r7, r0
 80072ba:	2300      	movs	r3, #0
 80072bc:	4620      	mov	r0, r4
 80072be:	4629      	mov	r1, r5
 80072c0:	f7f9 fc14 	bl	8000aec <__aeabi_dcmplt>
 80072c4:	b140      	cbz	r0, 80072d8 <_dtoa_r+0x168>
 80072c6:	4638      	mov	r0, r7
 80072c8:	f7f9 f934 	bl	8000534 <__aeabi_i2d>
 80072cc:	4622      	mov	r2, r4
 80072ce:	462b      	mov	r3, r5
 80072d0:	f7f9 fc02 	bl	8000ad8 <__aeabi_dcmpeq>
 80072d4:	b900      	cbnz	r0, 80072d8 <_dtoa_r+0x168>
 80072d6:	3f01      	subs	r7, #1
 80072d8:	2f16      	cmp	r7, #22
 80072da:	d852      	bhi.n	8007382 <_dtoa_r+0x212>
 80072dc:	4b5d      	ldr	r3, [pc, #372]	@ (8007454 <_dtoa_r+0x2e4>)
 80072de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80072e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80072ea:	f7f9 fbff 	bl	8000aec <__aeabi_dcmplt>
 80072ee:	2800      	cmp	r0, #0
 80072f0:	d049      	beq.n	8007386 <_dtoa_r+0x216>
 80072f2:	3f01      	subs	r7, #1
 80072f4:	2300      	movs	r3, #0
 80072f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80072f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80072fa:	1b9b      	subs	r3, r3, r6
 80072fc:	1e5a      	subs	r2, r3, #1
 80072fe:	bf45      	ittet	mi
 8007300:	f1c3 0301 	rsbmi	r3, r3, #1
 8007304:	9300      	strmi	r3, [sp, #0]
 8007306:	2300      	movpl	r3, #0
 8007308:	2300      	movmi	r3, #0
 800730a:	9206      	str	r2, [sp, #24]
 800730c:	bf54      	ite	pl
 800730e:	9300      	strpl	r3, [sp, #0]
 8007310:	9306      	strmi	r3, [sp, #24]
 8007312:	2f00      	cmp	r7, #0
 8007314:	db39      	blt.n	800738a <_dtoa_r+0x21a>
 8007316:	9b06      	ldr	r3, [sp, #24]
 8007318:	970d      	str	r7, [sp, #52]	@ 0x34
 800731a:	443b      	add	r3, r7
 800731c:	9306      	str	r3, [sp, #24]
 800731e:	2300      	movs	r3, #0
 8007320:	9308      	str	r3, [sp, #32]
 8007322:	9b07      	ldr	r3, [sp, #28]
 8007324:	2b09      	cmp	r3, #9
 8007326:	d863      	bhi.n	80073f0 <_dtoa_r+0x280>
 8007328:	2b05      	cmp	r3, #5
 800732a:	bfc4      	itt	gt
 800732c:	3b04      	subgt	r3, #4
 800732e:	9307      	strgt	r3, [sp, #28]
 8007330:	9b07      	ldr	r3, [sp, #28]
 8007332:	f1a3 0302 	sub.w	r3, r3, #2
 8007336:	bfcc      	ite	gt
 8007338:	2400      	movgt	r4, #0
 800733a:	2401      	movle	r4, #1
 800733c:	2b03      	cmp	r3, #3
 800733e:	d863      	bhi.n	8007408 <_dtoa_r+0x298>
 8007340:	e8df f003 	tbb	[pc, r3]
 8007344:	2b375452 	.word	0x2b375452
 8007348:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800734c:	441e      	add	r6, r3
 800734e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007352:	2b20      	cmp	r3, #32
 8007354:	bfc1      	itttt	gt
 8007356:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800735a:	409f      	lslgt	r7, r3
 800735c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007360:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007364:	bfd6      	itet	le
 8007366:	f1c3 0320 	rsble	r3, r3, #32
 800736a:	ea47 0003 	orrgt.w	r0, r7, r3
 800736e:	fa04 f003 	lslle.w	r0, r4, r3
 8007372:	f7f9 f8cf 	bl	8000514 <__aeabi_ui2d>
 8007376:	2201      	movs	r2, #1
 8007378:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800737c:	3e01      	subs	r6, #1
 800737e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007380:	e776      	b.n	8007270 <_dtoa_r+0x100>
 8007382:	2301      	movs	r3, #1
 8007384:	e7b7      	b.n	80072f6 <_dtoa_r+0x186>
 8007386:	9010      	str	r0, [sp, #64]	@ 0x40
 8007388:	e7b6      	b.n	80072f8 <_dtoa_r+0x188>
 800738a:	9b00      	ldr	r3, [sp, #0]
 800738c:	1bdb      	subs	r3, r3, r7
 800738e:	9300      	str	r3, [sp, #0]
 8007390:	427b      	negs	r3, r7
 8007392:	9308      	str	r3, [sp, #32]
 8007394:	2300      	movs	r3, #0
 8007396:	930d      	str	r3, [sp, #52]	@ 0x34
 8007398:	e7c3      	b.n	8007322 <_dtoa_r+0x1b2>
 800739a:	2301      	movs	r3, #1
 800739c:	9309      	str	r3, [sp, #36]	@ 0x24
 800739e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80073a0:	eb07 0b03 	add.w	fp, r7, r3
 80073a4:	f10b 0301 	add.w	r3, fp, #1
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	9303      	str	r3, [sp, #12]
 80073ac:	bfb8      	it	lt
 80073ae:	2301      	movlt	r3, #1
 80073b0:	e006      	b.n	80073c0 <_dtoa_r+0x250>
 80073b2:	2301      	movs	r3, #1
 80073b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	dd28      	ble.n	800740e <_dtoa_r+0x29e>
 80073bc:	469b      	mov	fp, r3
 80073be:	9303      	str	r3, [sp, #12]
 80073c0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80073c4:	2100      	movs	r1, #0
 80073c6:	2204      	movs	r2, #4
 80073c8:	f102 0514 	add.w	r5, r2, #20
 80073cc:	429d      	cmp	r5, r3
 80073ce:	d926      	bls.n	800741e <_dtoa_r+0x2ae>
 80073d0:	6041      	str	r1, [r0, #4]
 80073d2:	4648      	mov	r0, r9
 80073d4:	f000 fd9c 	bl	8007f10 <_Balloc>
 80073d8:	4682      	mov	sl, r0
 80073da:	2800      	cmp	r0, #0
 80073dc:	d142      	bne.n	8007464 <_dtoa_r+0x2f4>
 80073de:	4b1e      	ldr	r3, [pc, #120]	@ (8007458 <_dtoa_r+0x2e8>)
 80073e0:	4602      	mov	r2, r0
 80073e2:	f240 11af 	movw	r1, #431	@ 0x1af
 80073e6:	e6da      	b.n	800719e <_dtoa_r+0x2e>
 80073e8:	2300      	movs	r3, #0
 80073ea:	e7e3      	b.n	80073b4 <_dtoa_r+0x244>
 80073ec:	2300      	movs	r3, #0
 80073ee:	e7d5      	b.n	800739c <_dtoa_r+0x22c>
 80073f0:	2401      	movs	r4, #1
 80073f2:	2300      	movs	r3, #0
 80073f4:	9307      	str	r3, [sp, #28]
 80073f6:	9409      	str	r4, [sp, #36]	@ 0x24
 80073f8:	f04f 3bff 	mov.w	fp, #4294967295
 80073fc:	2200      	movs	r2, #0
 80073fe:	f8cd b00c 	str.w	fp, [sp, #12]
 8007402:	2312      	movs	r3, #18
 8007404:	920c      	str	r2, [sp, #48]	@ 0x30
 8007406:	e7db      	b.n	80073c0 <_dtoa_r+0x250>
 8007408:	2301      	movs	r3, #1
 800740a:	9309      	str	r3, [sp, #36]	@ 0x24
 800740c:	e7f4      	b.n	80073f8 <_dtoa_r+0x288>
 800740e:	f04f 0b01 	mov.w	fp, #1
 8007412:	f8cd b00c 	str.w	fp, [sp, #12]
 8007416:	465b      	mov	r3, fp
 8007418:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800741c:	e7d0      	b.n	80073c0 <_dtoa_r+0x250>
 800741e:	3101      	adds	r1, #1
 8007420:	0052      	lsls	r2, r2, #1
 8007422:	e7d1      	b.n	80073c8 <_dtoa_r+0x258>
 8007424:	f3af 8000 	nop.w
 8007428:	636f4361 	.word	0x636f4361
 800742c:	3fd287a7 	.word	0x3fd287a7
 8007430:	8b60c8b3 	.word	0x8b60c8b3
 8007434:	3fc68a28 	.word	0x3fc68a28
 8007438:	509f79fb 	.word	0x509f79fb
 800743c:	3fd34413 	.word	0x3fd34413
 8007440:	0800a81a 	.word	0x0800a81a
 8007444:	0800a831 	.word	0x0800a831
 8007448:	7ff00000 	.word	0x7ff00000
 800744c:	0800a7e5 	.word	0x0800a7e5
 8007450:	3ff80000 	.word	0x3ff80000
 8007454:	0800a9e0 	.word	0x0800a9e0
 8007458:	0800a889 	.word	0x0800a889
 800745c:	0800a816 	.word	0x0800a816
 8007460:	0800a7e4 	.word	0x0800a7e4
 8007464:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007468:	6018      	str	r0, [r3, #0]
 800746a:	9b03      	ldr	r3, [sp, #12]
 800746c:	2b0e      	cmp	r3, #14
 800746e:	f200 80a1 	bhi.w	80075b4 <_dtoa_r+0x444>
 8007472:	2c00      	cmp	r4, #0
 8007474:	f000 809e 	beq.w	80075b4 <_dtoa_r+0x444>
 8007478:	2f00      	cmp	r7, #0
 800747a:	dd33      	ble.n	80074e4 <_dtoa_r+0x374>
 800747c:	4b9c      	ldr	r3, [pc, #624]	@ (80076f0 <_dtoa_r+0x580>)
 800747e:	f007 020f 	and.w	r2, r7, #15
 8007482:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007486:	ed93 7b00 	vldr	d7, [r3]
 800748a:	05f8      	lsls	r0, r7, #23
 800748c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007490:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007494:	d516      	bpl.n	80074c4 <_dtoa_r+0x354>
 8007496:	4b97      	ldr	r3, [pc, #604]	@ (80076f4 <_dtoa_r+0x584>)
 8007498:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800749c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074a0:	f7f9 f9dc 	bl	800085c <__aeabi_ddiv>
 80074a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074a8:	f004 040f 	and.w	r4, r4, #15
 80074ac:	2603      	movs	r6, #3
 80074ae:	4d91      	ldr	r5, [pc, #580]	@ (80076f4 <_dtoa_r+0x584>)
 80074b0:	b954      	cbnz	r4, 80074c8 <_dtoa_r+0x358>
 80074b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80074b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074ba:	f7f9 f9cf 	bl	800085c <__aeabi_ddiv>
 80074be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074c2:	e028      	b.n	8007516 <_dtoa_r+0x3a6>
 80074c4:	2602      	movs	r6, #2
 80074c6:	e7f2      	b.n	80074ae <_dtoa_r+0x33e>
 80074c8:	07e1      	lsls	r1, r4, #31
 80074ca:	d508      	bpl.n	80074de <_dtoa_r+0x36e>
 80074cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80074d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80074d4:	f7f9 f898 	bl	8000608 <__aeabi_dmul>
 80074d8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80074dc:	3601      	adds	r6, #1
 80074de:	1064      	asrs	r4, r4, #1
 80074e0:	3508      	adds	r5, #8
 80074e2:	e7e5      	b.n	80074b0 <_dtoa_r+0x340>
 80074e4:	f000 80af 	beq.w	8007646 <_dtoa_r+0x4d6>
 80074e8:	427c      	negs	r4, r7
 80074ea:	4b81      	ldr	r3, [pc, #516]	@ (80076f0 <_dtoa_r+0x580>)
 80074ec:	4d81      	ldr	r5, [pc, #516]	@ (80076f4 <_dtoa_r+0x584>)
 80074ee:	f004 020f 	and.w	r2, r4, #15
 80074f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80074fe:	f7f9 f883 	bl	8000608 <__aeabi_dmul>
 8007502:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007506:	1124      	asrs	r4, r4, #4
 8007508:	2300      	movs	r3, #0
 800750a:	2602      	movs	r6, #2
 800750c:	2c00      	cmp	r4, #0
 800750e:	f040 808f 	bne.w	8007630 <_dtoa_r+0x4c0>
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1d3      	bne.n	80074be <_dtoa_r+0x34e>
 8007516:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007518:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800751c:	2b00      	cmp	r3, #0
 800751e:	f000 8094 	beq.w	800764a <_dtoa_r+0x4da>
 8007522:	4b75      	ldr	r3, [pc, #468]	@ (80076f8 <_dtoa_r+0x588>)
 8007524:	2200      	movs	r2, #0
 8007526:	4620      	mov	r0, r4
 8007528:	4629      	mov	r1, r5
 800752a:	f7f9 fadf 	bl	8000aec <__aeabi_dcmplt>
 800752e:	2800      	cmp	r0, #0
 8007530:	f000 808b 	beq.w	800764a <_dtoa_r+0x4da>
 8007534:	9b03      	ldr	r3, [sp, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	f000 8087 	beq.w	800764a <_dtoa_r+0x4da>
 800753c:	f1bb 0f00 	cmp.w	fp, #0
 8007540:	dd34      	ble.n	80075ac <_dtoa_r+0x43c>
 8007542:	4620      	mov	r0, r4
 8007544:	4b6d      	ldr	r3, [pc, #436]	@ (80076fc <_dtoa_r+0x58c>)
 8007546:	2200      	movs	r2, #0
 8007548:	4629      	mov	r1, r5
 800754a:	f7f9 f85d 	bl	8000608 <__aeabi_dmul>
 800754e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007552:	f107 38ff 	add.w	r8, r7, #4294967295
 8007556:	3601      	adds	r6, #1
 8007558:	465c      	mov	r4, fp
 800755a:	4630      	mov	r0, r6
 800755c:	f7f8 ffea 	bl	8000534 <__aeabi_i2d>
 8007560:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007564:	f7f9 f850 	bl	8000608 <__aeabi_dmul>
 8007568:	4b65      	ldr	r3, [pc, #404]	@ (8007700 <_dtoa_r+0x590>)
 800756a:	2200      	movs	r2, #0
 800756c:	f7f8 fe96 	bl	800029c <__adddf3>
 8007570:	4605      	mov	r5, r0
 8007572:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007576:	2c00      	cmp	r4, #0
 8007578:	d16a      	bne.n	8007650 <_dtoa_r+0x4e0>
 800757a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800757e:	4b61      	ldr	r3, [pc, #388]	@ (8007704 <_dtoa_r+0x594>)
 8007580:	2200      	movs	r2, #0
 8007582:	f7f8 fe89 	bl	8000298 <__aeabi_dsub>
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800758e:	462a      	mov	r2, r5
 8007590:	4633      	mov	r3, r6
 8007592:	f7f9 fac9 	bl	8000b28 <__aeabi_dcmpgt>
 8007596:	2800      	cmp	r0, #0
 8007598:	f040 8298 	bne.w	8007acc <_dtoa_r+0x95c>
 800759c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075a0:	462a      	mov	r2, r5
 80075a2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80075a6:	f7f9 faa1 	bl	8000aec <__aeabi_dcmplt>
 80075aa:	bb38      	cbnz	r0, 80075fc <_dtoa_r+0x48c>
 80075ac:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80075b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80075b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f2c0 8157 	blt.w	800786a <_dtoa_r+0x6fa>
 80075bc:	2f0e      	cmp	r7, #14
 80075be:	f300 8154 	bgt.w	800786a <_dtoa_r+0x6fa>
 80075c2:	4b4b      	ldr	r3, [pc, #300]	@ (80076f0 <_dtoa_r+0x580>)
 80075c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80075c8:	ed93 7b00 	vldr	d7, [r3]
 80075cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	ed8d 7b00 	vstr	d7, [sp]
 80075d4:	f280 80e5 	bge.w	80077a2 <_dtoa_r+0x632>
 80075d8:	9b03      	ldr	r3, [sp, #12]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	f300 80e1 	bgt.w	80077a2 <_dtoa_r+0x632>
 80075e0:	d10c      	bne.n	80075fc <_dtoa_r+0x48c>
 80075e2:	4b48      	ldr	r3, [pc, #288]	@ (8007704 <_dtoa_r+0x594>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	ec51 0b17 	vmov	r0, r1, d7
 80075ea:	f7f9 f80d 	bl	8000608 <__aeabi_dmul>
 80075ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075f2:	f7f9 fa8f 	bl	8000b14 <__aeabi_dcmpge>
 80075f6:	2800      	cmp	r0, #0
 80075f8:	f000 8266 	beq.w	8007ac8 <_dtoa_r+0x958>
 80075fc:	2400      	movs	r4, #0
 80075fe:	4625      	mov	r5, r4
 8007600:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007602:	4656      	mov	r6, sl
 8007604:	ea6f 0803 	mvn.w	r8, r3
 8007608:	2700      	movs	r7, #0
 800760a:	4621      	mov	r1, r4
 800760c:	4648      	mov	r0, r9
 800760e:	f000 fcbf 	bl	8007f90 <_Bfree>
 8007612:	2d00      	cmp	r5, #0
 8007614:	f000 80bd 	beq.w	8007792 <_dtoa_r+0x622>
 8007618:	b12f      	cbz	r7, 8007626 <_dtoa_r+0x4b6>
 800761a:	42af      	cmp	r7, r5
 800761c:	d003      	beq.n	8007626 <_dtoa_r+0x4b6>
 800761e:	4639      	mov	r1, r7
 8007620:	4648      	mov	r0, r9
 8007622:	f000 fcb5 	bl	8007f90 <_Bfree>
 8007626:	4629      	mov	r1, r5
 8007628:	4648      	mov	r0, r9
 800762a:	f000 fcb1 	bl	8007f90 <_Bfree>
 800762e:	e0b0      	b.n	8007792 <_dtoa_r+0x622>
 8007630:	07e2      	lsls	r2, r4, #31
 8007632:	d505      	bpl.n	8007640 <_dtoa_r+0x4d0>
 8007634:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007638:	f7f8 ffe6 	bl	8000608 <__aeabi_dmul>
 800763c:	3601      	adds	r6, #1
 800763e:	2301      	movs	r3, #1
 8007640:	1064      	asrs	r4, r4, #1
 8007642:	3508      	adds	r5, #8
 8007644:	e762      	b.n	800750c <_dtoa_r+0x39c>
 8007646:	2602      	movs	r6, #2
 8007648:	e765      	b.n	8007516 <_dtoa_r+0x3a6>
 800764a:	9c03      	ldr	r4, [sp, #12]
 800764c:	46b8      	mov	r8, r7
 800764e:	e784      	b.n	800755a <_dtoa_r+0x3ea>
 8007650:	4b27      	ldr	r3, [pc, #156]	@ (80076f0 <_dtoa_r+0x580>)
 8007652:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007654:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007658:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800765c:	4454      	add	r4, sl
 800765e:	2900      	cmp	r1, #0
 8007660:	d054      	beq.n	800770c <_dtoa_r+0x59c>
 8007662:	4929      	ldr	r1, [pc, #164]	@ (8007708 <_dtoa_r+0x598>)
 8007664:	2000      	movs	r0, #0
 8007666:	f7f9 f8f9 	bl	800085c <__aeabi_ddiv>
 800766a:	4633      	mov	r3, r6
 800766c:	462a      	mov	r2, r5
 800766e:	f7f8 fe13 	bl	8000298 <__aeabi_dsub>
 8007672:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007676:	4656      	mov	r6, sl
 8007678:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800767c:	f7f9 fa74 	bl	8000b68 <__aeabi_d2iz>
 8007680:	4605      	mov	r5, r0
 8007682:	f7f8 ff57 	bl	8000534 <__aeabi_i2d>
 8007686:	4602      	mov	r2, r0
 8007688:	460b      	mov	r3, r1
 800768a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800768e:	f7f8 fe03 	bl	8000298 <__aeabi_dsub>
 8007692:	3530      	adds	r5, #48	@ 0x30
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800769c:	f806 5b01 	strb.w	r5, [r6], #1
 80076a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80076a4:	f7f9 fa22 	bl	8000aec <__aeabi_dcmplt>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	d172      	bne.n	8007792 <_dtoa_r+0x622>
 80076ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076b0:	4911      	ldr	r1, [pc, #68]	@ (80076f8 <_dtoa_r+0x588>)
 80076b2:	2000      	movs	r0, #0
 80076b4:	f7f8 fdf0 	bl	8000298 <__aeabi_dsub>
 80076b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80076bc:	f7f9 fa16 	bl	8000aec <__aeabi_dcmplt>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	f040 80b4 	bne.w	800782e <_dtoa_r+0x6be>
 80076c6:	42a6      	cmp	r6, r4
 80076c8:	f43f af70 	beq.w	80075ac <_dtoa_r+0x43c>
 80076cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80076d0:	4b0a      	ldr	r3, [pc, #40]	@ (80076fc <_dtoa_r+0x58c>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	f7f8 ff98 	bl	8000608 <__aeabi_dmul>
 80076d8:	4b08      	ldr	r3, [pc, #32]	@ (80076fc <_dtoa_r+0x58c>)
 80076da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80076de:	2200      	movs	r2, #0
 80076e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076e4:	f7f8 ff90 	bl	8000608 <__aeabi_dmul>
 80076e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076ec:	e7c4      	b.n	8007678 <_dtoa_r+0x508>
 80076ee:	bf00      	nop
 80076f0:	0800a9e0 	.word	0x0800a9e0
 80076f4:	0800a9b8 	.word	0x0800a9b8
 80076f8:	3ff00000 	.word	0x3ff00000
 80076fc:	40240000 	.word	0x40240000
 8007700:	401c0000 	.word	0x401c0000
 8007704:	40140000 	.word	0x40140000
 8007708:	3fe00000 	.word	0x3fe00000
 800770c:	4631      	mov	r1, r6
 800770e:	4628      	mov	r0, r5
 8007710:	f7f8 ff7a 	bl	8000608 <__aeabi_dmul>
 8007714:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007718:	9413      	str	r4, [sp, #76]	@ 0x4c
 800771a:	4656      	mov	r6, sl
 800771c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007720:	f7f9 fa22 	bl	8000b68 <__aeabi_d2iz>
 8007724:	4605      	mov	r5, r0
 8007726:	f7f8 ff05 	bl	8000534 <__aeabi_i2d>
 800772a:	4602      	mov	r2, r0
 800772c:	460b      	mov	r3, r1
 800772e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007732:	f7f8 fdb1 	bl	8000298 <__aeabi_dsub>
 8007736:	3530      	adds	r5, #48	@ 0x30
 8007738:	f806 5b01 	strb.w	r5, [r6], #1
 800773c:	4602      	mov	r2, r0
 800773e:	460b      	mov	r3, r1
 8007740:	42a6      	cmp	r6, r4
 8007742:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007746:	f04f 0200 	mov.w	r2, #0
 800774a:	d124      	bne.n	8007796 <_dtoa_r+0x626>
 800774c:	4baf      	ldr	r3, [pc, #700]	@ (8007a0c <_dtoa_r+0x89c>)
 800774e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007752:	f7f8 fda3 	bl	800029c <__adddf3>
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800775e:	f7f9 f9e3 	bl	8000b28 <__aeabi_dcmpgt>
 8007762:	2800      	cmp	r0, #0
 8007764:	d163      	bne.n	800782e <_dtoa_r+0x6be>
 8007766:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800776a:	49a8      	ldr	r1, [pc, #672]	@ (8007a0c <_dtoa_r+0x89c>)
 800776c:	2000      	movs	r0, #0
 800776e:	f7f8 fd93 	bl	8000298 <__aeabi_dsub>
 8007772:	4602      	mov	r2, r0
 8007774:	460b      	mov	r3, r1
 8007776:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800777a:	f7f9 f9b7 	bl	8000aec <__aeabi_dcmplt>
 800777e:	2800      	cmp	r0, #0
 8007780:	f43f af14 	beq.w	80075ac <_dtoa_r+0x43c>
 8007784:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007786:	1e73      	subs	r3, r6, #1
 8007788:	9313      	str	r3, [sp, #76]	@ 0x4c
 800778a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800778e:	2b30      	cmp	r3, #48	@ 0x30
 8007790:	d0f8      	beq.n	8007784 <_dtoa_r+0x614>
 8007792:	4647      	mov	r7, r8
 8007794:	e03b      	b.n	800780e <_dtoa_r+0x69e>
 8007796:	4b9e      	ldr	r3, [pc, #632]	@ (8007a10 <_dtoa_r+0x8a0>)
 8007798:	f7f8 ff36 	bl	8000608 <__aeabi_dmul>
 800779c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077a0:	e7bc      	b.n	800771c <_dtoa_r+0x5ac>
 80077a2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80077a6:	4656      	mov	r6, sl
 80077a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077ac:	4620      	mov	r0, r4
 80077ae:	4629      	mov	r1, r5
 80077b0:	f7f9 f854 	bl	800085c <__aeabi_ddiv>
 80077b4:	f7f9 f9d8 	bl	8000b68 <__aeabi_d2iz>
 80077b8:	4680      	mov	r8, r0
 80077ba:	f7f8 febb 	bl	8000534 <__aeabi_i2d>
 80077be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077c2:	f7f8 ff21 	bl	8000608 <__aeabi_dmul>
 80077c6:	4602      	mov	r2, r0
 80077c8:	460b      	mov	r3, r1
 80077ca:	4620      	mov	r0, r4
 80077cc:	4629      	mov	r1, r5
 80077ce:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80077d2:	f7f8 fd61 	bl	8000298 <__aeabi_dsub>
 80077d6:	f806 4b01 	strb.w	r4, [r6], #1
 80077da:	9d03      	ldr	r5, [sp, #12]
 80077dc:	eba6 040a 	sub.w	r4, r6, sl
 80077e0:	42a5      	cmp	r5, r4
 80077e2:	4602      	mov	r2, r0
 80077e4:	460b      	mov	r3, r1
 80077e6:	d133      	bne.n	8007850 <_dtoa_r+0x6e0>
 80077e8:	f7f8 fd58 	bl	800029c <__adddf3>
 80077ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077f0:	4604      	mov	r4, r0
 80077f2:	460d      	mov	r5, r1
 80077f4:	f7f9 f998 	bl	8000b28 <__aeabi_dcmpgt>
 80077f8:	b9c0      	cbnz	r0, 800782c <_dtoa_r+0x6bc>
 80077fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077fe:	4620      	mov	r0, r4
 8007800:	4629      	mov	r1, r5
 8007802:	f7f9 f969 	bl	8000ad8 <__aeabi_dcmpeq>
 8007806:	b110      	cbz	r0, 800780e <_dtoa_r+0x69e>
 8007808:	f018 0f01 	tst.w	r8, #1
 800780c:	d10e      	bne.n	800782c <_dtoa_r+0x6bc>
 800780e:	9902      	ldr	r1, [sp, #8]
 8007810:	4648      	mov	r0, r9
 8007812:	f000 fbbd 	bl	8007f90 <_Bfree>
 8007816:	2300      	movs	r3, #0
 8007818:	7033      	strb	r3, [r6, #0]
 800781a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800781c:	3701      	adds	r7, #1
 800781e:	601f      	str	r7, [r3, #0]
 8007820:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007822:	2b00      	cmp	r3, #0
 8007824:	f000 824b 	beq.w	8007cbe <_dtoa_r+0xb4e>
 8007828:	601e      	str	r6, [r3, #0]
 800782a:	e248      	b.n	8007cbe <_dtoa_r+0xb4e>
 800782c:	46b8      	mov	r8, r7
 800782e:	4633      	mov	r3, r6
 8007830:	461e      	mov	r6, r3
 8007832:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007836:	2a39      	cmp	r2, #57	@ 0x39
 8007838:	d106      	bne.n	8007848 <_dtoa_r+0x6d8>
 800783a:	459a      	cmp	sl, r3
 800783c:	d1f8      	bne.n	8007830 <_dtoa_r+0x6c0>
 800783e:	2230      	movs	r2, #48	@ 0x30
 8007840:	f108 0801 	add.w	r8, r8, #1
 8007844:	f88a 2000 	strb.w	r2, [sl]
 8007848:	781a      	ldrb	r2, [r3, #0]
 800784a:	3201      	adds	r2, #1
 800784c:	701a      	strb	r2, [r3, #0]
 800784e:	e7a0      	b.n	8007792 <_dtoa_r+0x622>
 8007850:	4b6f      	ldr	r3, [pc, #444]	@ (8007a10 <_dtoa_r+0x8a0>)
 8007852:	2200      	movs	r2, #0
 8007854:	f7f8 fed8 	bl	8000608 <__aeabi_dmul>
 8007858:	2200      	movs	r2, #0
 800785a:	2300      	movs	r3, #0
 800785c:	4604      	mov	r4, r0
 800785e:	460d      	mov	r5, r1
 8007860:	f7f9 f93a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007864:	2800      	cmp	r0, #0
 8007866:	d09f      	beq.n	80077a8 <_dtoa_r+0x638>
 8007868:	e7d1      	b.n	800780e <_dtoa_r+0x69e>
 800786a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800786c:	2a00      	cmp	r2, #0
 800786e:	f000 80ea 	beq.w	8007a46 <_dtoa_r+0x8d6>
 8007872:	9a07      	ldr	r2, [sp, #28]
 8007874:	2a01      	cmp	r2, #1
 8007876:	f300 80cd 	bgt.w	8007a14 <_dtoa_r+0x8a4>
 800787a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800787c:	2a00      	cmp	r2, #0
 800787e:	f000 80c1 	beq.w	8007a04 <_dtoa_r+0x894>
 8007882:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007886:	9c08      	ldr	r4, [sp, #32]
 8007888:	9e00      	ldr	r6, [sp, #0]
 800788a:	9a00      	ldr	r2, [sp, #0]
 800788c:	441a      	add	r2, r3
 800788e:	9200      	str	r2, [sp, #0]
 8007890:	9a06      	ldr	r2, [sp, #24]
 8007892:	2101      	movs	r1, #1
 8007894:	441a      	add	r2, r3
 8007896:	4648      	mov	r0, r9
 8007898:	9206      	str	r2, [sp, #24]
 800789a:	f000 fc77 	bl	800818c <__i2b>
 800789e:	4605      	mov	r5, r0
 80078a0:	b166      	cbz	r6, 80078bc <_dtoa_r+0x74c>
 80078a2:	9b06      	ldr	r3, [sp, #24]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	dd09      	ble.n	80078bc <_dtoa_r+0x74c>
 80078a8:	42b3      	cmp	r3, r6
 80078aa:	9a00      	ldr	r2, [sp, #0]
 80078ac:	bfa8      	it	ge
 80078ae:	4633      	movge	r3, r6
 80078b0:	1ad2      	subs	r2, r2, r3
 80078b2:	9200      	str	r2, [sp, #0]
 80078b4:	9a06      	ldr	r2, [sp, #24]
 80078b6:	1af6      	subs	r6, r6, r3
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	9306      	str	r3, [sp, #24]
 80078bc:	9b08      	ldr	r3, [sp, #32]
 80078be:	b30b      	cbz	r3, 8007904 <_dtoa_r+0x794>
 80078c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f000 80c6 	beq.w	8007a54 <_dtoa_r+0x8e4>
 80078c8:	2c00      	cmp	r4, #0
 80078ca:	f000 80c0 	beq.w	8007a4e <_dtoa_r+0x8de>
 80078ce:	4629      	mov	r1, r5
 80078d0:	4622      	mov	r2, r4
 80078d2:	4648      	mov	r0, r9
 80078d4:	f000 fd12 	bl	80082fc <__pow5mult>
 80078d8:	9a02      	ldr	r2, [sp, #8]
 80078da:	4601      	mov	r1, r0
 80078dc:	4605      	mov	r5, r0
 80078de:	4648      	mov	r0, r9
 80078e0:	f000 fc6a 	bl	80081b8 <__multiply>
 80078e4:	9902      	ldr	r1, [sp, #8]
 80078e6:	4680      	mov	r8, r0
 80078e8:	4648      	mov	r0, r9
 80078ea:	f000 fb51 	bl	8007f90 <_Bfree>
 80078ee:	9b08      	ldr	r3, [sp, #32]
 80078f0:	1b1b      	subs	r3, r3, r4
 80078f2:	9308      	str	r3, [sp, #32]
 80078f4:	f000 80b1 	beq.w	8007a5a <_dtoa_r+0x8ea>
 80078f8:	9a08      	ldr	r2, [sp, #32]
 80078fa:	4641      	mov	r1, r8
 80078fc:	4648      	mov	r0, r9
 80078fe:	f000 fcfd 	bl	80082fc <__pow5mult>
 8007902:	9002      	str	r0, [sp, #8]
 8007904:	2101      	movs	r1, #1
 8007906:	4648      	mov	r0, r9
 8007908:	f000 fc40 	bl	800818c <__i2b>
 800790c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800790e:	4604      	mov	r4, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 81d8 	beq.w	8007cc6 <_dtoa_r+0xb56>
 8007916:	461a      	mov	r2, r3
 8007918:	4601      	mov	r1, r0
 800791a:	4648      	mov	r0, r9
 800791c:	f000 fcee 	bl	80082fc <__pow5mult>
 8007920:	9b07      	ldr	r3, [sp, #28]
 8007922:	2b01      	cmp	r3, #1
 8007924:	4604      	mov	r4, r0
 8007926:	f300 809f 	bgt.w	8007a68 <_dtoa_r+0x8f8>
 800792a:	9b04      	ldr	r3, [sp, #16]
 800792c:	2b00      	cmp	r3, #0
 800792e:	f040 8097 	bne.w	8007a60 <_dtoa_r+0x8f0>
 8007932:	9b05      	ldr	r3, [sp, #20]
 8007934:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007938:	2b00      	cmp	r3, #0
 800793a:	f040 8093 	bne.w	8007a64 <_dtoa_r+0x8f4>
 800793e:	9b05      	ldr	r3, [sp, #20]
 8007940:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007944:	0d1b      	lsrs	r3, r3, #20
 8007946:	051b      	lsls	r3, r3, #20
 8007948:	b133      	cbz	r3, 8007958 <_dtoa_r+0x7e8>
 800794a:	9b00      	ldr	r3, [sp, #0]
 800794c:	3301      	adds	r3, #1
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	9b06      	ldr	r3, [sp, #24]
 8007952:	3301      	adds	r3, #1
 8007954:	9306      	str	r3, [sp, #24]
 8007956:	2301      	movs	r3, #1
 8007958:	9308      	str	r3, [sp, #32]
 800795a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 81b8 	beq.w	8007cd2 <_dtoa_r+0xb62>
 8007962:	6923      	ldr	r3, [r4, #16]
 8007964:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007968:	6918      	ldr	r0, [r3, #16]
 800796a:	f000 fbc3 	bl	80080f4 <__hi0bits>
 800796e:	f1c0 0020 	rsb	r0, r0, #32
 8007972:	9b06      	ldr	r3, [sp, #24]
 8007974:	4418      	add	r0, r3
 8007976:	f010 001f 	ands.w	r0, r0, #31
 800797a:	f000 8082 	beq.w	8007a82 <_dtoa_r+0x912>
 800797e:	f1c0 0320 	rsb	r3, r0, #32
 8007982:	2b04      	cmp	r3, #4
 8007984:	dd73      	ble.n	8007a6e <_dtoa_r+0x8fe>
 8007986:	9b00      	ldr	r3, [sp, #0]
 8007988:	f1c0 001c 	rsb	r0, r0, #28
 800798c:	4403      	add	r3, r0
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	9b06      	ldr	r3, [sp, #24]
 8007992:	4403      	add	r3, r0
 8007994:	4406      	add	r6, r0
 8007996:	9306      	str	r3, [sp, #24]
 8007998:	9b00      	ldr	r3, [sp, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	dd05      	ble.n	80079aa <_dtoa_r+0x83a>
 800799e:	9902      	ldr	r1, [sp, #8]
 80079a0:	461a      	mov	r2, r3
 80079a2:	4648      	mov	r0, r9
 80079a4:	f000 fd04 	bl	80083b0 <__lshift>
 80079a8:	9002      	str	r0, [sp, #8]
 80079aa:	9b06      	ldr	r3, [sp, #24]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	dd05      	ble.n	80079bc <_dtoa_r+0x84c>
 80079b0:	4621      	mov	r1, r4
 80079b2:	461a      	mov	r2, r3
 80079b4:	4648      	mov	r0, r9
 80079b6:	f000 fcfb 	bl	80083b0 <__lshift>
 80079ba:	4604      	mov	r4, r0
 80079bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d061      	beq.n	8007a86 <_dtoa_r+0x916>
 80079c2:	9802      	ldr	r0, [sp, #8]
 80079c4:	4621      	mov	r1, r4
 80079c6:	f000 fd5f 	bl	8008488 <__mcmp>
 80079ca:	2800      	cmp	r0, #0
 80079cc:	da5b      	bge.n	8007a86 <_dtoa_r+0x916>
 80079ce:	2300      	movs	r3, #0
 80079d0:	9902      	ldr	r1, [sp, #8]
 80079d2:	220a      	movs	r2, #10
 80079d4:	4648      	mov	r0, r9
 80079d6:	f000 fafd 	bl	8007fd4 <__multadd>
 80079da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079dc:	9002      	str	r0, [sp, #8]
 80079de:	f107 38ff 	add.w	r8, r7, #4294967295
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f000 8177 	beq.w	8007cd6 <_dtoa_r+0xb66>
 80079e8:	4629      	mov	r1, r5
 80079ea:	2300      	movs	r3, #0
 80079ec:	220a      	movs	r2, #10
 80079ee:	4648      	mov	r0, r9
 80079f0:	f000 faf0 	bl	8007fd4 <__multadd>
 80079f4:	f1bb 0f00 	cmp.w	fp, #0
 80079f8:	4605      	mov	r5, r0
 80079fa:	dc6f      	bgt.n	8007adc <_dtoa_r+0x96c>
 80079fc:	9b07      	ldr	r3, [sp, #28]
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	dc49      	bgt.n	8007a96 <_dtoa_r+0x926>
 8007a02:	e06b      	b.n	8007adc <_dtoa_r+0x96c>
 8007a04:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007a06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007a0a:	e73c      	b.n	8007886 <_dtoa_r+0x716>
 8007a0c:	3fe00000 	.word	0x3fe00000
 8007a10:	40240000 	.word	0x40240000
 8007a14:	9b03      	ldr	r3, [sp, #12]
 8007a16:	1e5c      	subs	r4, r3, #1
 8007a18:	9b08      	ldr	r3, [sp, #32]
 8007a1a:	42a3      	cmp	r3, r4
 8007a1c:	db09      	blt.n	8007a32 <_dtoa_r+0x8c2>
 8007a1e:	1b1c      	subs	r4, r3, r4
 8007a20:	9b03      	ldr	r3, [sp, #12]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f6bf af30 	bge.w	8007888 <_dtoa_r+0x718>
 8007a28:	9b00      	ldr	r3, [sp, #0]
 8007a2a:	9a03      	ldr	r2, [sp, #12]
 8007a2c:	1a9e      	subs	r6, r3, r2
 8007a2e:	2300      	movs	r3, #0
 8007a30:	e72b      	b.n	800788a <_dtoa_r+0x71a>
 8007a32:	9b08      	ldr	r3, [sp, #32]
 8007a34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007a36:	9408      	str	r4, [sp, #32]
 8007a38:	1ae3      	subs	r3, r4, r3
 8007a3a:	441a      	add	r2, r3
 8007a3c:	9e00      	ldr	r6, [sp, #0]
 8007a3e:	9b03      	ldr	r3, [sp, #12]
 8007a40:	920d      	str	r2, [sp, #52]	@ 0x34
 8007a42:	2400      	movs	r4, #0
 8007a44:	e721      	b.n	800788a <_dtoa_r+0x71a>
 8007a46:	9c08      	ldr	r4, [sp, #32]
 8007a48:	9e00      	ldr	r6, [sp, #0]
 8007a4a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007a4c:	e728      	b.n	80078a0 <_dtoa_r+0x730>
 8007a4e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007a52:	e751      	b.n	80078f8 <_dtoa_r+0x788>
 8007a54:	9a08      	ldr	r2, [sp, #32]
 8007a56:	9902      	ldr	r1, [sp, #8]
 8007a58:	e750      	b.n	80078fc <_dtoa_r+0x78c>
 8007a5a:	f8cd 8008 	str.w	r8, [sp, #8]
 8007a5e:	e751      	b.n	8007904 <_dtoa_r+0x794>
 8007a60:	2300      	movs	r3, #0
 8007a62:	e779      	b.n	8007958 <_dtoa_r+0x7e8>
 8007a64:	9b04      	ldr	r3, [sp, #16]
 8007a66:	e777      	b.n	8007958 <_dtoa_r+0x7e8>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	9308      	str	r3, [sp, #32]
 8007a6c:	e779      	b.n	8007962 <_dtoa_r+0x7f2>
 8007a6e:	d093      	beq.n	8007998 <_dtoa_r+0x828>
 8007a70:	9a00      	ldr	r2, [sp, #0]
 8007a72:	331c      	adds	r3, #28
 8007a74:	441a      	add	r2, r3
 8007a76:	9200      	str	r2, [sp, #0]
 8007a78:	9a06      	ldr	r2, [sp, #24]
 8007a7a:	441a      	add	r2, r3
 8007a7c:	441e      	add	r6, r3
 8007a7e:	9206      	str	r2, [sp, #24]
 8007a80:	e78a      	b.n	8007998 <_dtoa_r+0x828>
 8007a82:	4603      	mov	r3, r0
 8007a84:	e7f4      	b.n	8007a70 <_dtoa_r+0x900>
 8007a86:	9b03      	ldr	r3, [sp, #12]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	46b8      	mov	r8, r7
 8007a8c:	dc20      	bgt.n	8007ad0 <_dtoa_r+0x960>
 8007a8e:	469b      	mov	fp, r3
 8007a90:	9b07      	ldr	r3, [sp, #28]
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	dd1e      	ble.n	8007ad4 <_dtoa_r+0x964>
 8007a96:	f1bb 0f00 	cmp.w	fp, #0
 8007a9a:	f47f adb1 	bne.w	8007600 <_dtoa_r+0x490>
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	465b      	mov	r3, fp
 8007aa2:	2205      	movs	r2, #5
 8007aa4:	4648      	mov	r0, r9
 8007aa6:	f000 fa95 	bl	8007fd4 <__multadd>
 8007aaa:	4601      	mov	r1, r0
 8007aac:	4604      	mov	r4, r0
 8007aae:	9802      	ldr	r0, [sp, #8]
 8007ab0:	f000 fcea 	bl	8008488 <__mcmp>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	f77f ada3 	ble.w	8007600 <_dtoa_r+0x490>
 8007aba:	4656      	mov	r6, sl
 8007abc:	2331      	movs	r3, #49	@ 0x31
 8007abe:	f806 3b01 	strb.w	r3, [r6], #1
 8007ac2:	f108 0801 	add.w	r8, r8, #1
 8007ac6:	e59f      	b.n	8007608 <_dtoa_r+0x498>
 8007ac8:	9c03      	ldr	r4, [sp, #12]
 8007aca:	46b8      	mov	r8, r7
 8007acc:	4625      	mov	r5, r4
 8007ace:	e7f4      	b.n	8007aba <_dtoa_r+0x94a>
 8007ad0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007ad4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f000 8101 	beq.w	8007cde <_dtoa_r+0xb6e>
 8007adc:	2e00      	cmp	r6, #0
 8007ade:	dd05      	ble.n	8007aec <_dtoa_r+0x97c>
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	4632      	mov	r2, r6
 8007ae4:	4648      	mov	r0, r9
 8007ae6:	f000 fc63 	bl	80083b0 <__lshift>
 8007aea:	4605      	mov	r5, r0
 8007aec:	9b08      	ldr	r3, [sp, #32]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d05c      	beq.n	8007bac <_dtoa_r+0xa3c>
 8007af2:	6869      	ldr	r1, [r5, #4]
 8007af4:	4648      	mov	r0, r9
 8007af6:	f000 fa0b 	bl	8007f10 <_Balloc>
 8007afa:	4606      	mov	r6, r0
 8007afc:	b928      	cbnz	r0, 8007b0a <_dtoa_r+0x99a>
 8007afe:	4b82      	ldr	r3, [pc, #520]	@ (8007d08 <_dtoa_r+0xb98>)
 8007b00:	4602      	mov	r2, r0
 8007b02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007b06:	f7ff bb4a 	b.w	800719e <_dtoa_r+0x2e>
 8007b0a:	692a      	ldr	r2, [r5, #16]
 8007b0c:	3202      	adds	r2, #2
 8007b0e:	0092      	lsls	r2, r2, #2
 8007b10:	f105 010c 	add.w	r1, r5, #12
 8007b14:	300c      	adds	r0, #12
 8007b16:	f001 ff69 	bl	80099ec <memcpy>
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	4631      	mov	r1, r6
 8007b1e:	4648      	mov	r0, r9
 8007b20:	f000 fc46 	bl	80083b0 <__lshift>
 8007b24:	f10a 0301 	add.w	r3, sl, #1
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	eb0a 030b 	add.w	r3, sl, fp
 8007b2e:	9308      	str	r3, [sp, #32]
 8007b30:	9b04      	ldr	r3, [sp, #16]
 8007b32:	f003 0301 	and.w	r3, r3, #1
 8007b36:	462f      	mov	r7, r5
 8007b38:	9306      	str	r3, [sp, #24]
 8007b3a:	4605      	mov	r5, r0
 8007b3c:	9b00      	ldr	r3, [sp, #0]
 8007b3e:	9802      	ldr	r0, [sp, #8]
 8007b40:	4621      	mov	r1, r4
 8007b42:	f103 3bff 	add.w	fp, r3, #4294967295
 8007b46:	f7ff fa89 	bl	800705c <quorem>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	3330      	adds	r3, #48	@ 0x30
 8007b4e:	9003      	str	r0, [sp, #12]
 8007b50:	4639      	mov	r1, r7
 8007b52:	9802      	ldr	r0, [sp, #8]
 8007b54:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b56:	f000 fc97 	bl	8008488 <__mcmp>
 8007b5a:	462a      	mov	r2, r5
 8007b5c:	9004      	str	r0, [sp, #16]
 8007b5e:	4621      	mov	r1, r4
 8007b60:	4648      	mov	r0, r9
 8007b62:	f000 fcad 	bl	80084c0 <__mdiff>
 8007b66:	68c2      	ldr	r2, [r0, #12]
 8007b68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b6a:	4606      	mov	r6, r0
 8007b6c:	bb02      	cbnz	r2, 8007bb0 <_dtoa_r+0xa40>
 8007b6e:	4601      	mov	r1, r0
 8007b70:	9802      	ldr	r0, [sp, #8]
 8007b72:	f000 fc89 	bl	8008488 <__mcmp>
 8007b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b78:	4602      	mov	r2, r0
 8007b7a:	4631      	mov	r1, r6
 8007b7c:	4648      	mov	r0, r9
 8007b7e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007b80:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b82:	f000 fa05 	bl	8007f90 <_Bfree>
 8007b86:	9b07      	ldr	r3, [sp, #28]
 8007b88:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007b8a:	9e00      	ldr	r6, [sp, #0]
 8007b8c:	ea42 0103 	orr.w	r1, r2, r3
 8007b90:	9b06      	ldr	r3, [sp, #24]
 8007b92:	4319      	orrs	r1, r3
 8007b94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b96:	d10d      	bne.n	8007bb4 <_dtoa_r+0xa44>
 8007b98:	2b39      	cmp	r3, #57	@ 0x39
 8007b9a:	d027      	beq.n	8007bec <_dtoa_r+0xa7c>
 8007b9c:	9a04      	ldr	r2, [sp, #16]
 8007b9e:	2a00      	cmp	r2, #0
 8007ba0:	dd01      	ble.n	8007ba6 <_dtoa_r+0xa36>
 8007ba2:	9b03      	ldr	r3, [sp, #12]
 8007ba4:	3331      	adds	r3, #49	@ 0x31
 8007ba6:	f88b 3000 	strb.w	r3, [fp]
 8007baa:	e52e      	b.n	800760a <_dtoa_r+0x49a>
 8007bac:	4628      	mov	r0, r5
 8007bae:	e7b9      	b.n	8007b24 <_dtoa_r+0x9b4>
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	e7e2      	b.n	8007b7a <_dtoa_r+0xa0a>
 8007bb4:	9904      	ldr	r1, [sp, #16]
 8007bb6:	2900      	cmp	r1, #0
 8007bb8:	db04      	blt.n	8007bc4 <_dtoa_r+0xa54>
 8007bba:	9807      	ldr	r0, [sp, #28]
 8007bbc:	4301      	orrs	r1, r0
 8007bbe:	9806      	ldr	r0, [sp, #24]
 8007bc0:	4301      	orrs	r1, r0
 8007bc2:	d120      	bne.n	8007c06 <_dtoa_r+0xa96>
 8007bc4:	2a00      	cmp	r2, #0
 8007bc6:	ddee      	ble.n	8007ba6 <_dtoa_r+0xa36>
 8007bc8:	9902      	ldr	r1, [sp, #8]
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	4648      	mov	r0, r9
 8007bd0:	f000 fbee 	bl	80083b0 <__lshift>
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	9002      	str	r0, [sp, #8]
 8007bd8:	f000 fc56 	bl	8008488 <__mcmp>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	9b00      	ldr	r3, [sp, #0]
 8007be0:	dc02      	bgt.n	8007be8 <_dtoa_r+0xa78>
 8007be2:	d1e0      	bne.n	8007ba6 <_dtoa_r+0xa36>
 8007be4:	07da      	lsls	r2, r3, #31
 8007be6:	d5de      	bpl.n	8007ba6 <_dtoa_r+0xa36>
 8007be8:	2b39      	cmp	r3, #57	@ 0x39
 8007bea:	d1da      	bne.n	8007ba2 <_dtoa_r+0xa32>
 8007bec:	2339      	movs	r3, #57	@ 0x39
 8007bee:	f88b 3000 	strb.w	r3, [fp]
 8007bf2:	4633      	mov	r3, r6
 8007bf4:	461e      	mov	r6, r3
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007bfc:	2a39      	cmp	r2, #57	@ 0x39
 8007bfe:	d04e      	beq.n	8007c9e <_dtoa_r+0xb2e>
 8007c00:	3201      	adds	r2, #1
 8007c02:	701a      	strb	r2, [r3, #0]
 8007c04:	e501      	b.n	800760a <_dtoa_r+0x49a>
 8007c06:	2a00      	cmp	r2, #0
 8007c08:	dd03      	ble.n	8007c12 <_dtoa_r+0xaa2>
 8007c0a:	2b39      	cmp	r3, #57	@ 0x39
 8007c0c:	d0ee      	beq.n	8007bec <_dtoa_r+0xa7c>
 8007c0e:	3301      	adds	r3, #1
 8007c10:	e7c9      	b.n	8007ba6 <_dtoa_r+0xa36>
 8007c12:	9a00      	ldr	r2, [sp, #0]
 8007c14:	9908      	ldr	r1, [sp, #32]
 8007c16:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007c1a:	428a      	cmp	r2, r1
 8007c1c:	d028      	beq.n	8007c70 <_dtoa_r+0xb00>
 8007c1e:	9902      	ldr	r1, [sp, #8]
 8007c20:	2300      	movs	r3, #0
 8007c22:	220a      	movs	r2, #10
 8007c24:	4648      	mov	r0, r9
 8007c26:	f000 f9d5 	bl	8007fd4 <__multadd>
 8007c2a:	42af      	cmp	r7, r5
 8007c2c:	9002      	str	r0, [sp, #8]
 8007c2e:	f04f 0300 	mov.w	r3, #0
 8007c32:	f04f 020a 	mov.w	r2, #10
 8007c36:	4639      	mov	r1, r7
 8007c38:	4648      	mov	r0, r9
 8007c3a:	d107      	bne.n	8007c4c <_dtoa_r+0xadc>
 8007c3c:	f000 f9ca 	bl	8007fd4 <__multadd>
 8007c40:	4607      	mov	r7, r0
 8007c42:	4605      	mov	r5, r0
 8007c44:	9b00      	ldr	r3, [sp, #0]
 8007c46:	3301      	adds	r3, #1
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	e777      	b.n	8007b3c <_dtoa_r+0x9cc>
 8007c4c:	f000 f9c2 	bl	8007fd4 <__multadd>
 8007c50:	4629      	mov	r1, r5
 8007c52:	4607      	mov	r7, r0
 8007c54:	2300      	movs	r3, #0
 8007c56:	220a      	movs	r2, #10
 8007c58:	4648      	mov	r0, r9
 8007c5a:	f000 f9bb 	bl	8007fd4 <__multadd>
 8007c5e:	4605      	mov	r5, r0
 8007c60:	e7f0      	b.n	8007c44 <_dtoa_r+0xad4>
 8007c62:	f1bb 0f00 	cmp.w	fp, #0
 8007c66:	bfcc      	ite	gt
 8007c68:	465e      	movgt	r6, fp
 8007c6a:	2601      	movle	r6, #1
 8007c6c:	4456      	add	r6, sl
 8007c6e:	2700      	movs	r7, #0
 8007c70:	9902      	ldr	r1, [sp, #8]
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	2201      	movs	r2, #1
 8007c76:	4648      	mov	r0, r9
 8007c78:	f000 fb9a 	bl	80083b0 <__lshift>
 8007c7c:	4621      	mov	r1, r4
 8007c7e:	9002      	str	r0, [sp, #8]
 8007c80:	f000 fc02 	bl	8008488 <__mcmp>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	dcb4      	bgt.n	8007bf2 <_dtoa_r+0xa82>
 8007c88:	d102      	bne.n	8007c90 <_dtoa_r+0xb20>
 8007c8a:	9b00      	ldr	r3, [sp, #0]
 8007c8c:	07db      	lsls	r3, r3, #31
 8007c8e:	d4b0      	bmi.n	8007bf2 <_dtoa_r+0xa82>
 8007c90:	4633      	mov	r3, r6
 8007c92:	461e      	mov	r6, r3
 8007c94:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c98:	2a30      	cmp	r2, #48	@ 0x30
 8007c9a:	d0fa      	beq.n	8007c92 <_dtoa_r+0xb22>
 8007c9c:	e4b5      	b.n	800760a <_dtoa_r+0x49a>
 8007c9e:	459a      	cmp	sl, r3
 8007ca0:	d1a8      	bne.n	8007bf4 <_dtoa_r+0xa84>
 8007ca2:	2331      	movs	r3, #49	@ 0x31
 8007ca4:	f108 0801 	add.w	r8, r8, #1
 8007ca8:	f88a 3000 	strb.w	r3, [sl]
 8007cac:	e4ad      	b.n	800760a <_dtoa_r+0x49a>
 8007cae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007cb0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007d0c <_dtoa_r+0xb9c>
 8007cb4:	b11b      	cbz	r3, 8007cbe <_dtoa_r+0xb4e>
 8007cb6:	f10a 0308 	add.w	r3, sl, #8
 8007cba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007cbc:	6013      	str	r3, [r2, #0]
 8007cbe:	4650      	mov	r0, sl
 8007cc0:	b017      	add	sp, #92	@ 0x5c
 8007cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc6:	9b07      	ldr	r3, [sp, #28]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	f77f ae2e 	ble.w	800792a <_dtoa_r+0x7ba>
 8007cce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007cd0:	9308      	str	r3, [sp, #32]
 8007cd2:	2001      	movs	r0, #1
 8007cd4:	e64d      	b.n	8007972 <_dtoa_r+0x802>
 8007cd6:	f1bb 0f00 	cmp.w	fp, #0
 8007cda:	f77f aed9 	ble.w	8007a90 <_dtoa_r+0x920>
 8007cde:	4656      	mov	r6, sl
 8007ce0:	9802      	ldr	r0, [sp, #8]
 8007ce2:	4621      	mov	r1, r4
 8007ce4:	f7ff f9ba 	bl	800705c <quorem>
 8007ce8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007cec:	f806 3b01 	strb.w	r3, [r6], #1
 8007cf0:	eba6 020a 	sub.w	r2, r6, sl
 8007cf4:	4593      	cmp	fp, r2
 8007cf6:	ddb4      	ble.n	8007c62 <_dtoa_r+0xaf2>
 8007cf8:	9902      	ldr	r1, [sp, #8]
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	220a      	movs	r2, #10
 8007cfe:	4648      	mov	r0, r9
 8007d00:	f000 f968 	bl	8007fd4 <__multadd>
 8007d04:	9002      	str	r0, [sp, #8]
 8007d06:	e7eb      	b.n	8007ce0 <_dtoa_r+0xb70>
 8007d08:	0800a889 	.word	0x0800a889
 8007d0c:	0800a80d 	.word	0x0800a80d

08007d10 <_free_r>:
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	4605      	mov	r5, r0
 8007d14:	2900      	cmp	r1, #0
 8007d16:	d041      	beq.n	8007d9c <_free_r+0x8c>
 8007d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d1c:	1f0c      	subs	r4, r1, #4
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	bfb8      	it	lt
 8007d22:	18e4      	addlt	r4, r4, r3
 8007d24:	f000 f8e8 	bl	8007ef8 <__malloc_lock>
 8007d28:	4a1d      	ldr	r2, [pc, #116]	@ (8007da0 <_free_r+0x90>)
 8007d2a:	6813      	ldr	r3, [r2, #0]
 8007d2c:	b933      	cbnz	r3, 8007d3c <_free_r+0x2c>
 8007d2e:	6063      	str	r3, [r4, #4]
 8007d30:	6014      	str	r4, [r2, #0]
 8007d32:	4628      	mov	r0, r5
 8007d34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d38:	f000 b8e4 	b.w	8007f04 <__malloc_unlock>
 8007d3c:	42a3      	cmp	r3, r4
 8007d3e:	d908      	bls.n	8007d52 <_free_r+0x42>
 8007d40:	6820      	ldr	r0, [r4, #0]
 8007d42:	1821      	adds	r1, r4, r0
 8007d44:	428b      	cmp	r3, r1
 8007d46:	bf01      	itttt	eq
 8007d48:	6819      	ldreq	r1, [r3, #0]
 8007d4a:	685b      	ldreq	r3, [r3, #4]
 8007d4c:	1809      	addeq	r1, r1, r0
 8007d4e:	6021      	streq	r1, [r4, #0]
 8007d50:	e7ed      	b.n	8007d2e <_free_r+0x1e>
 8007d52:	461a      	mov	r2, r3
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	b10b      	cbz	r3, 8007d5c <_free_r+0x4c>
 8007d58:	42a3      	cmp	r3, r4
 8007d5a:	d9fa      	bls.n	8007d52 <_free_r+0x42>
 8007d5c:	6811      	ldr	r1, [r2, #0]
 8007d5e:	1850      	adds	r0, r2, r1
 8007d60:	42a0      	cmp	r0, r4
 8007d62:	d10b      	bne.n	8007d7c <_free_r+0x6c>
 8007d64:	6820      	ldr	r0, [r4, #0]
 8007d66:	4401      	add	r1, r0
 8007d68:	1850      	adds	r0, r2, r1
 8007d6a:	4283      	cmp	r3, r0
 8007d6c:	6011      	str	r1, [r2, #0]
 8007d6e:	d1e0      	bne.n	8007d32 <_free_r+0x22>
 8007d70:	6818      	ldr	r0, [r3, #0]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	6053      	str	r3, [r2, #4]
 8007d76:	4408      	add	r0, r1
 8007d78:	6010      	str	r0, [r2, #0]
 8007d7a:	e7da      	b.n	8007d32 <_free_r+0x22>
 8007d7c:	d902      	bls.n	8007d84 <_free_r+0x74>
 8007d7e:	230c      	movs	r3, #12
 8007d80:	602b      	str	r3, [r5, #0]
 8007d82:	e7d6      	b.n	8007d32 <_free_r+0x22>
 8007d84:	6820      	ldr	r0, [r4, #0]
 8007d86:	1821      	adds	r1, r4, r0
 8007d88:	428b      	cmp	r3, r1
 8007d8a:	bf04      	itt	eq
 8007d8c:	6819      	ldreq	r1, [r3, #0]
 8007d8e:	685b      	ldreq	r3, [r3, #4]
 8007d90:	6063      	str	r3, [r4, #4]
 8007d92:	bf04      	itt	eq
 8007d94:	1809      	addeq	r1, r1, r0
 8007d96:	6021      	streq	r1, [r4, #0]
 8007d98:	6054      	str	r4, [r2, #4]
 8007d9a:	e7ca      	b.n	8007d32 <_free_r+0x22>
 8007d9c:	bd38      	pop	{r3, r4, r5, pc}
 8007d9e:	bf00      	nop
 8007da0:	200005d0 	.word	0x200005d0

08007da4 <malloc>:
 8007da4:	4b02      	ldr	r3, [pc, #8]	@ (8007db0 <malloc+0xc>)
 8007da6:	4601      	mov	r1, r0
 8007da8:	6818      	ldr	r0, [r3, #0]
 8007daa:	f000 b825 	b.w	8007df8 <_malloc_r>
 8007dae:	bf00      	nop
 8007db0:	20000024 	.word	0x20000024

08007db4 <sbrk_aligned>:
 8007db4:	b570      	push	{r4, r5, r6, lr}
 8007db6:	4e0f      	ldr	r6, [pc, #60]	@ (8007df4 <sbrk_aligned+0x40>)
 8007db8:	460c      	mov	r4, r1
 8007dba:	6831      	ldr	r1, [r6, #0]
 8007dbc:	4605      	mov	r5, r0
 8007dbe:	b911      	cbnz	r1, 8007dc6 <sbrk_aligned+0x12>
 8007dc0:	f001 fe04 	bl	80099cc <_sbrk_r>
 8007dc4:	6030      	str	r0, [r6, #0]
 8007dc6:	4621      	mov	r1, r4
 8007dc8:	4628      	mov	r0, r5
 8007dca:	f001 fdff 	bl	80099cc <_sbrk_r>
 8007dce:	1c43      	adds	r3, r0, #1
 8007dd0:	d103      	bne.n	8007dda <sbrk_aligned+0x26>
 8007dd2:	f04f 34ff 	mov.w	r4, #4294967295
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	bd70      	pop	{r4, r5, r6, pc}
 8007dda:	1cc4      	adds	r4, r0, #3
 8007ddc:	f024 0403 	bic.w	r4, r4, #3
 8007de0:	42a0      	cmp	r0, r4
 8007de2:	d0f8      	beq.n	8007dd6 <sbrk_aligned+0x22>
 8007de4:	1a21      	subs	r1, r4, r0
 8007de6:	4628      	mov	r0, r5
 8007de8:	f001 fdf0 	bl	80099cc <_sbrk_r>
 8007dec:	3001      	adds	r0, #1
 8007dee:	d1f2      	bne.n	8007dd6 <sbrk_aligned+0x22>
 8007df0:	e7ef      	b.n	8007dd2 <sbrk_aligned+0x1e>
 8007df2:	bf00      	nop
 8007df4:	200005cc 	.word	0x200005cc

08007df8 <_malloc_r>:
 8007df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dfc:	1ccd      	adds	r5, r1, #3
 8007dfe:	f025 0503 	bic.w	r5, r5, #3
 8007e02:	3508      	adds	r5, #8
 8007e04:	2d0c      	cmp	r5, #12
 8007e06:	bf38      	it	cc
 8007e08:	250c      	movcc	r5, #12
 8007e0a:	2d00      	cmp	r5, #0
 8007e0c:	4606      	mov	r6, r0
 8007e0e:	db01      	blt.n	8007e14 <_malloc_r+0x1c>
 8007e10:	42a9      	cmp	r1, r5
 8007e12:	d904      	bls.n	8007e1e <_malloc_r+0x26>
 8007e14:	230c      	movs	r3, #12
 8007e16:	6033      	str	r3, [r6, #0]
 8007e18:	2000      	movs	r0, #0
 8007e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ef4 <_malloc_r+0xfc>
 8007e22:	f000 f869 	bl	8007ef8 <__malloc_lock>
 8007e26:	f8d8 3000 	ldr.w	r3, [r8]
 8007e2a:	461c      	mov	r4, r3
 8007e2c:	bb44      	cbnz	r4, 8007e80 <_malloc_r+0x88>
 8007e2e:	4629      	mov	r1, r5
 8007e30:	4630      	mov	r0, r6
 8007e32:	f7ff ffbf 	bl	8007db4 <sbrk_aligned>
 8007e36:	1c43      	adds	r3, r0, #1
 8007e38:	4604      	mov	r4, r0
 8007e3a:	d158      	bne.n	8007eee <_malloc_r+0xf6>
 8007e3c:	f8d8 4000 	ldr.w	r4, [r8]
 8007e40:	4627      	mov	r7, r4
 8007e42:	2f00      	cmp	r7, #0
 8007e44:	d143      	bne.n	8007ece <_malloc_r+0xd6>
 8007e46:	2c00      	cmp	r4, #0
 8007e48:	d04b      	beq.n	8007ee2 <_malloc_r+0xea>
 8007e4a:	6823      	ldr	r3, [r4, #0]
 8007e4c:	4639      	mov	r1, r7
 8007e4e:	4630      	mov	r0, r6
 8007e50:	eb04 0903 	add.w	r9, r4, r3
 8007e54:	f001 fdba 	bl	80099cc <_sbrk_r>
 8007e58:	4581      	cmp	r9, r0
 8007e5a:	d142      	bne.n	8007ee2 <_malloc_r+0xea>
 8007e5c:	6821      	ldr	r1, [r4, #0]
 8007e5e:	1a6d      	subs	r5, r5, r1
 8007e60:	4629      	mov	r1, r5
 8007e62:	4630      	mov	r0, r6
 8007e64:	f7ff ffa6 	bl	8007db4 <sbrk_aligned>
 8007e68:	3001      	adds	r0, #1
 8007e6a:	d03a      	beq.n	8007ee2 <_malloc_r+0xea>
 8007e6c:	6823      	ldr	r3, [r4, #0]
 8007e6e:	442b      	add	r3, r5
 8007e70:	6023      	str	r3, [r4, #0]
 8007e72:	f8d8 3000 	ldr.w	r3, [r8]
 8007e76:	685a      	ldr	r2, [r3, #4]
 8007e78:	bb62      	cbnz	r2, 8007ed4 <_malloc_r+0xdc>
 8007e7a:	f8c8 7000 	str.w	r7, [r8]
 8007e7e:	e00f      	b.n	8007ea0 <_malloc_r+0xa8>
 8007e80:	6822      	ldr	r2, [r4, #0]
 8007e82:	1b52      	subs	r2, r2, r5
 8007e84:	d420      	bmi.n	8007ec8 <_malloc_r+0xd0>
 8007e86:	2a0b      	cmp	r2, #11
 8007e88:	d917      	bls.n	8007eba <_malloc_r+0xc2>
 8007e8a:	1961      	adds	r1, r4, r5
 8007e8c:	42a3      	cmp	r3, r4
 8007e8e:	6025      	str	r5, [r4, #0]
 8007e90:	bf18      	it	ne
 8007e92:	6059      	strne	r1, [r3, #4]
 8007e94:	6863      	ldr	r3, [r4, #4]
 8007e96:	bf08      	it	eq
 8007e98:	f8c8 1000 	streq.w	r1, [r8]
 8007e9c:	5162      	str	r2, [r4, r5]
 8007e9e:	604b      	str	r3, [r1, #4]
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	f000 f82f 	bl	8007f04 <__malloc_unlock>
 8007ea6:	f104 000b 	add.w	r0, r4, #11
 8007eaa:	1d23      	adds	r3, r4, #4
 8007eac:	f020 0007 	bic.w	r0, r0, #7
 8007eb0:	1ac2      	subs	r2, r0, r3
 8007eb2:	bf1c      	itt	ne
 8007eb4:	1a1b      	subne	r3, r3, r0
 8007eb6:	50a3      	strne	r3, [r4, r2]
 8007eb8:	e7af      	b.n	8007e1a <_malloc_r+0x22>
 8007eba:	6862      	ldr	r2, [r4, #4]
 8007ebc:	42a3      	cmp	r3, r4
 8007ebe:	bf0c      	ite	eq
 8007ec0:	f8c8 2000 	streq.w	r2, [r8]
 8007ec4:	605a      	strne	r2, [r3, #4]
 8007ec6:	e7eb      	b.n	8007ea0 <_malloc_r+0xa8>
 8007ec8:	4623      	mov	r3, r4
 8007eca:	6864      	ldr	r4, [r4, #4]
 8007ecc:	e7ae      	b.n	8007e2c <_malloc_r+0x34>
 8007ece:	463c      	mov	r4, r7
 8007ed0:	687f      	ldr	r7, [r7, #4]
 8007ed2:	e7b6      	b.n	8007e42 <_malloc_r+0x4a>
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	42a3      	cmp	r3, r4
 8007eda:	d1fb      	bne.n	8007ed4 <_malloc_r+0xdc>
 8007edc:	2300      	movs	r3, #0
 8007ede:	6053      	str	r3, [r2, #4]
 8007ee0:	e7de      	b.n	8007ea0 <_malloc_r+0xa8>
 8007ee2:	230c      	movs	r3, #12
 8007ee4:	6033      	str	r3, [r6, #0]
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	f000 f80c 	bl	8007f04 <__malloc_unlock>
 8007eec:	e794      	b.n	8007e18 <_malloc_r+0x20>
 8007eee:	6005      	str	r5, [r0, #0]
 8007ef0:	e7d6      	b.n	8007ea0 <_malloc_r+0xa8>
 8007ef2:	bf00      	nop
 8007ef4:	200005d0 	.word	0x200005d0

08007ef8 <__malloc_lock>:
 8007ef8:	4801      	ldr	r0, [pc, #4]	@ (8007f00 <__malloc_lock+0x8>)
 8007efa:	f7ff b8a6 	b.w	800704a <__retarget_lock_acquire_recursive>
 8007efe:	bf00      	nop
 8007f00:	200005c8 	.word	0x200005c8

08007f04 <__malloc_unlock>:
 8007f04:	4801      	ldr	r0, [pc, #4]	@ (8007f0c <__malloc_unlock+0x8>)
 8007f06:	f7ff b8a1 	b.w	800704c <__retarget_lock_release_recursive>
 8007f0a:	bf00      	nop
 8007f0c:	200005c8 	.word	0x200005c8

08007f10 <_Balloc>:
 8007f10:	b570      	push	{r4, r5, r6, lr}
 8007f12:	69c6      	ldr	r6, [r0, #28]
 8007f14:	4604      	mov	r4, r0
 8007f16:	460d      	mov	r5, r1
 8007f18:	b976      	cbnz	r6, 8007f38 <_Balloc+0x28>
 8007f1a:	2010      	movs	r0, #16
 8007f1c:	f7ff ff42 	bl	8007da4 <malloc>
 8007f20:	4602      	mov	r2, r0
 8007f22:	61e0      	str	r0, [r4, #28]
 8007f24:	b920      	cbnz	r0, 8007f30 <_Balloc+0x20>
 8007f26:	4b18      	ldr	r3, [pc, #96]	@ (8007f88 <_Balloc+0x78>)
 8007f28:	4818      	ldr	r0, [pc, #96]	@ (8007f8c <_Balloc+0x7c>)
 8007f2a:	216b      	movs	r1, #107	@ 0x6b
 8007f2c:	f001 fd74 	bl	8009a18 <__assert_func>
 8007f30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f34:	6006      	str	r6, [r0, #0]
 8007f36:	60c6      	str	r6, [r0, #12]
 8007f38:	69e6      	ldr	r6, [r4, #28]
 8007f3a:	68f3      	ldr	r3, [r6, #12]
 8007f3c:	b183      	cbz	r3, 8007f60 <_Balloc+0x50>
 8007f3e:	69e3      	ldr	r3, [r4, #28]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f46:	b9b8      	cbnz	r0, 8007f78 <_Balloc+0x68>
 8007f48:	2101      	movs	r1, #1
 8007f4a:	fa01 f605 	lsl.w	r6, r1, r5
 8007f4e:	1d72      	adds	r2, r6, #5
 8007f50:	0092      	lsls	r2, r2, #2
 8007f52:	4620      	mov	r0, r4
 8007f54:	f001 fd7e 	bl	8009a54 <_calloc_r>
 8007f58:	b160      	cbz	r0, 8007f74 <_Balloc+0x64>
 8007f5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f5e:	e00e      	b.n	8007f7e <_Balloc+0x6e>
 8007f60:	2221      	movs	r2, #33	@ 0x21
 8007f62:	2104      	movs	r1, #4
 8007f64:	4620      	mov	r0, r4
 8007f66:	f001 fd75 	bl	8009a54 <_calloc_r>
 8007f6a:	69e3      	ldr	r3, [r4, #28]
 8007f6c:	60f0      	str	r0, [r6, #12]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1e4      	bne.n	8007f3e <_Balloc+0x2e>
 8007f74:	2000      	movs	r0, #0
 8007f76:	bd70      	pop	{r4, r5, r6, pc}
 8007f78:	6802      	ldr	r2, [r0, #0]
 8007f7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f7e:	2300      	movs	r3, #0
 8007f80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f84:	e7f7      	b.n	8007f76 <_Balloc+0x66>
 8007f86:	bf00      	nop
 8007f88:	0800a81a 	.word	0x0800a81a
 8007f8c:	0800a89a 	.word	0x0800a89a

08007f90 <_Bfree>:
 8007f90:	b570      	push	{r4, r5, r6, lr}
 8007f92:	69c6      	ldr	r6, [r0, #28]
 8007f94:	4605      	mov	r5, r0
 8007f96:	460c      	mov	r4, r1
 8007f98:	b976      	cbnz	r6, 8007fb8 <_Bfree+0x28>
 8007f9a:	2010      	movs	r0, #16
 8007f9c:	f7ff ff02 	bl	8007da4 <malloc>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	61e8      	str	r0, [r5, #28]
 8007fa4:	b920      	cbnz	r0, 8007fb0 <_Bfree+0x20>
 8007fa6:	4b09      	ldr	r3, [pc, #36]	@ (8007fcc <_Bfree+0x3c>)
 8007fa8:	4809      	ldr	r0, [pc, #36]	@ (8007fd0 <_Bfree+0x40>)
 8007faa:	218f      	movs	r1, #143	@ 0x8f
 8007fac:	f001 fd34 	bl	8009a18 <__assert_func>
 8007fb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fb4:	6006      	str	r6, [r0, #0]
 8007fb6:	60c6      	str	r6, [r0, #12]
 8007fb8:	b13c      	cbz	r4, 8007fca <_Bfree+0x3a>
 8007fba:	69eb      	ldr	r3, [r5, #28]
 8007fbc:	6862      	ldr	r2, [r4, #4]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fc4:	6021      	str	r1, [r4, #0]
 8007fc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007fca:	bd70      	pop	{r4, r5, r6, pc}
 8007fcc:	0800a81a 	.word	0x0800a81a
 8007fd0:	0800a89a 	.word	0x0800a89a

08007fd4 <__multadd>:
 8007fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd8:	690d      	ldr	r5, [r1, #16]
 8007fda:	4607      	mov	r7, r0
 8007fdc:	460c      	mov	r4, r1
 8007fde:	461e      	mov	r6, r3
 8007fe0:	f101 0c14 	add.w	ip, r1, #20
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	f8dc 3000 	ldr.w	r3, [ip]
 8007fea:	b299      	uxth	r1, r3
 8007fec:	fb02 6101 	mla	r1, r2, r1, r6
 8007ff0:	0c1e      	lsrs	r6, r3, #16
 8007ff2:	0c0b      	lsrs	r3, r1, #16
 8007ff4:	fb02 3306 	mla	r3, r2, r6, r3
 8007ff8:	b289      	uxth	r1, r1
 8007ffa:	3001      	adds	r0, #1
 8007ffc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008000:	4285      	cmp	r5, r0
 8008002:	f84c 1b04 	str.w	r1, [ip], #4
 8008006:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800800a:	dcec      	bgt.n	8007fe6 <__multadd+0x12>
 800800c:	b30e      	cbz	r6, 8008052 <__multadd+0x7e>
 800800e:	68a3      	ldr	r3, [r4, #8]
 8008010:	42ab      	cmp	r3, r5
 8008012:	dc19      	bgt.n	8008048 <__multadd+0x74>
 8008014:	6861      	ldr	r1, [r4, #4]
 8008016:	4638      	mov	r0, r7
 8008018:	3101      	adds	r1, #1
 800801a:	f7ff ff79 	bl	8007f10 <_Balloc>
 800801e:	4680      	mov	r8, r0
 8008020:	b928      	cbnz	r0, 800802e <__multadd+0x5a>
 8008022:	4602      	mov	r2, r0
 8008024:	4b0c      	ldr	r3, [pc, #48]	@ (8008058 <__multadd+0x84>)
 8008026:	480d      	ldr	r0, [pc, #52]	@ (800805c <__multadd+0x88>)
 8008028:	21ba      	movs	r1, #186	@ 0xba
 800802a:	f001 fcf5 	bl	8009a18 <__assert_func>
 800802e:	6922      	ldr	r2, [r4, #16]
 8008030:	3202      	adds	r2, #2
 8008032:	f104 010c 	add.w	r1, r4, #12
 8008036:	0092      	lsls	r2, r2, #2
 8008038:	300c      	adds	r0, #12
 800803a:	f001 fcd7 	bl	80099ec <memcpy>
 800803e:	4621      	mov	r1, r4
 8008040:	4638      	mov	r0, r7
 8008042:	f7ff ffa5 	bl	8007f90 <_Bfree>
 8008046:	4644      	mov	r4, r8
 8008048:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800804c:	3501      	adds	r5, #1
 800804e:	615e      	str	r6, [r3, #20]
 8008050:	6125      	str	r5, [r4, #16]
 8008052:	4620      	mov	r0, r4
 8008054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008058:	0800a889 	.word	0x0800a889
 800805c:	0800a89a 	.word	0x0800a89a

08008060 <__s2b>:
 8008060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008064:	460c      	mov	r4, r1
 8008066:	4615      	mov	r5, r2
 8008068:	461f      	mov	r7, r3
 800806a:	2209      	movs	r2, #9
 800806c:	3308      	adds	r3, #8
 800806e:	4606      	mov	r6, r0
 8008070:	fb93 f3f2 	sdiv	r3, r3, r2
 8008074:	2100      	movs	r1, #0
 8008076:	2201      	movs	r2, #1
 8008078:	429a      	cmp	r2, r3
 800807a:	db09      	blt.n	8008090 <__s2b+0x30>
 800807c:	4630      	mov	r0, r6
 800807e:	f7ff ff47 	bl	8007f10 <_Balloc>
 8008082:	b940      	cbnz	r0, 8008096 <__s2b+0x36>
 8008084:	4602      	mov	r2, r0
 8008086:	4b19      	ldr	r3, [pc, #100]	@ (80080ec <__s2b+0x8c>)
 8008088:	4819      	ldr	r0, [pc, #100]	@ (80080f0 <__s2b+0x90>)
 800808a:	21d3      	movs	r1, #211	@ 0xd3
 800808c:	f001 fcc4 	bl	8009a18 <__assert_func>
 8008090:	0052      	lsls	r2, r2, #1
 8008092:	3101      	adds	r1, #1
 8008094:	e7f0      	b.n	8008078 <__s2b+0x18>
 8008096:	9b08      	ldr	r3, [sp, #32]
 8008098:	6143      	str	r3, [r0, #20]
 800809a:	2d09      	cmp	r5, #9
 800809c:	f04f 0301 	mov.w	r3, #1
 80080a0:	6103      	str	r3, [r0, #16]
 80080a2:	dd16      	ble.n	80080d2 <__s2b+0x72>
 80080a4:	f104 0909 	add.w	r9, r4, #9
 80080a8:	46c8      	mov	r8, r9
 80080aa:	442c      	add	r4, r5
 80080ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 80080b0:	4601      	mov	r1, r0
 80080b2:	3b30      	subs	r3, #48	@ 0x30
 80080b4:	220a      	movs	r2, #10
 80080b6:	4630      	mov	r0, r6
 80080b8:	f7ff ff8c 	bl	8007fd4 <__multadd>
 80080bc:	45a0      	cmp	r8, r4
 80080be:	d1f5      	bne.n	80080ac <__s2b+0x4c>
 80080c0:	f1a5 0408 	sub.w	r4, r5, #8
 80080c4:	444c      	add	r4, r9
 80080c6:	1b2d      	subs	r5, r5, r4
 80080c8:	1963      	adds	r3, r4, r5
 80080ca:	42bb      	cmp	r3, r7
 80080cc:	db04      	blt.n	80080d8 <__s2b+0x78>
 80080ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080d2:	340a      	adds	r4, #10
 80080d4:	2509      	movs	r5, #9
 80080d6:	e7f6      	b.n	80080c6 <__s2b+0x66>
 80080d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80080dc:	4601      	mov	r1, r0
 80080de:	3b30      	subs	r3, #48	@ 0x30
 80080e0:	220a      	movs	r2, #10
 80080e2:	4630      	mov	r0, r6
 80080e4:	f7ff ff76 	bl	8007fd4 <__multadd>
 80080e8:	e7ee      	b.n	80080c8 <__s2b+0x68>
 80080ea:	bf00      	nop
 80080ec:	0800a889 	.word	0x0800a889
 80080f0:	0800a89a 	.word	0x0800a89a

080080f4 <__hi0bits>:
 80080f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80080f8:	4603      	mov	r3, r0
 80080fa:	bf36      	itet	cc
 80080fc:	0403      	lslcc	r3, r0, #16
 80080fe:	2000      	movcs	r0, #0
 8008100:	2010      	movcc	r0, #16
 8008102:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008106:	bf3c      	itt	cc
 8008108:	021b      	lslcc	r3, r3, #8
 800810a:	3008      	addcc	r0, #8
 800810c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008110:	bf3c      	itt	cc
 8008112:	011b      	lslcc	r3, r3, #4
 8008114:	3004      	addcc	r0, #4
 8008116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800811a:	bf3c      	itt	cc
 800811c:	009b      	lslcc	r3, r3, #2
 800811e:	3002      	addcc	r0, #2
 8008120:	2b00      	cmp	r3, #0
 8008122:	db05      	blt.n	8008130 <__hi0bits+0x3c>
 8008124:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008128:	f100 0001 	add.w	r0, r0, #1
 800812c:	bf08      	it	eq
 800812e:	2020      	moveq	r0, #32
 8008130:	4770      	bx	lr

08008132 <__lo0bits>:
 8008132:	6803      	ldr	r3, [r0, #0]
 8008134:	4602      	mov	r2, r0
 8008136:	f013 0007 	ands.w	r0, r3, #7
 800813a:	d00b      	beq.n	8008154 <__lo0bits+0x22>
 800813c:	07d9      	lsls	r1, r3, #31
 800813e:	d421      	bmi.n	8008184 <__lo0bits+0x52>
 8008140:	0798      	lsls	r0, r3, #30
 8008142:	bf49      	itett	mi
 8008144:	085b      	lsrmi	r3, r3, #1
 8008146:	089b      	lsrpl	r3, r3, #2
 8008148:	2001      	movmi	r0, #1
 800814a:	6013      	strmi	r3, [r2, #0]
 800814c:	bf5c      	itt	pl
 800814e:	6013      	strpl	r3, [r2, #0]
 8008150:	2002      	movpl	r0, #2
 8008152:	4770      	bx	lr
 8008154:	b299      	uxth	r1, r3
 8008156:	b909      	cbnz	r1, 800815c <__lo0bits+0x2a>
 8008158:	0c1b      	lsrs	r3, r3, #16
 800815a:	2010      	movs	r0, #16
 800815c:	b2d9      	uxtb	r1, r3
 800815e:	b909      	cbnz	r1, 8008164 <__lo0bits+0x32>
 8008160:	3008      	adds	r0, #8
 8008162:	0a1b      	lsrs	r3, r3, #8
 8008164:	0719      	lsls	r1, r3, #28
 8008166:	bf04      	itt	eq
 8008168:	091b      	lsreq	r3, r3, #4
 800816a:	3004      	addeq	r0, #4
 800816c:	0799      	lsls	r1, r3, #30
 800816e:	bf04      	itt	eq
 8008170:	089b      	lsreq	r3, r3, #2
 8008172:	3002      	addeq	r0, #2
 8008174:	07d9      	lsls	r1, r3, #31
 8008176:	d403      	bmi.n	8008180 <__lo0bits+0x4e>
 8008178:	085b      	lsrs	r3, r3, #1
 800817a:	f100 0001 	add.w	r0, r0, #1
 800817e:	d003      	beq.n	8008188 <__lo0bits+0x56>
 8008180:	6013      	str	r3, [r2, #0]
 8008182:	4770      	bx	lr
 8008184:	2000      	movs	r0, #0
 8008186:	4770      	bx	lr
 8008188:	2020      	movs	r0, #32
 800818a:	4770      	bx	lr

0800818c <__i2b>:
 800818c:	b510      	push	{r4, lr}
 800818e:	460c      	mov	r4, r1
 8008190:	2101      	movs	r1, #1
 8008192:	f7ff febd 	bl	8007f10 <_Balloc>
 8008196:	4602      	mov	r2, r0
 8008198:	b928      	cbnz	r0, 80081a6 <__i2b+0x1a>
 800819a:	4b05      	ldr	r3, [pc, #20]	@ (80081b0 <__i2b+0x24>)
 800819c:	4805      	ldr	r0, [pc, #20]	@ (80081b4 <__i2b+0x28>)
 800819e:	f240 1145 	movw	r1, #325	@ 0x145
 80081a2:	f001 fc39 	bl	8009a18 <__assert_func>
 80081a6:	2301      	movs	r3, #1
 80081a8:	6144      	str	r4, [r0, #20]
 80081aa:	6103      	str	r3, [r0, #16]
 80081ac:	bd10      	pop	{r4, pc}
 80081ae:	bf00      	nop
 80081b0:	0800a889 	.word	0x0800a889
 80081b4:	0800a89a 	.word	0x0800a89a

080081b8 <__multiply>:
 80081b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081bc:	4617      	mov	r7, r2
 80081be:	690a      	ldr	r2, [r1, #16]
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	bfa8      	it	ge
 80081c6:	463b      	movge	r3, r7
 80081c8:	4689      	mov	r9, r1
 80081ca:	bfa4      	itt	ge
 80081cc:	460f      	movge	r7, r1
 80081ce:	4699      	movge	r9, r3
 80081d0:	693d      	ldr	r5, [r7, #16]
 80081d2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	6879      	ldr	r1, [r7, #4]
 80081da:	eb05 060a 	add.w	r6, r5, sl
 80081de:	42b3      	cmp	r3, r6
 80081e0:	b085      	sub	sp, #20
 80081e2:	bfb8      	it	lt
 80081e4:	3101      	addlt	r1, #1
 80081e6:	f7ff fe93 	bl	8007f10 <_Balloc>
 80081ea:	b930      	cbnz	r0, 80081fa <__multiply+0x42>
 80081ec:	4602      	mov	r2, r0
 80081ee:	4b41      	ldr	r3, [pc, #260]	@ (80082f4 <__multiply+0x13c>)
 80081f0:	4841      	ldr	r0, [pc, #260]	@ (80082f8 <__multiply+0x140>)
 80081f2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80081f6:	f001 fc0f 	bl	8009a18 <__assert_func>
 80081fa:	f100 0414 	add.w	r4, r0, #20
 80081fe:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008202:	4623      	mov	r3, r4
 8008204:	2200      	movs	r2, #0
 8008206:	4573      	cmp	r3, lr
 8008208:	d320      	bcc.n	800824c <__multiply+0x94>
 800820a:	f107 0814 	add.w	r8, r7, #20
 800820e:	f109 0114 	add.w	r1, r9, #20
 8008212:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008216:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800821a:	9302      	str	r3, [sp, #8]
 800821c:	1beb      	subs	r3, r5, r7
 800821e:	3b15      	subs	r3, #21
 8008220:	f023 0303 	bic.w	r3, r3, #3
 8008224:	3304      	adds	r3, #4
 8008226:	3715      	adds	r7, #21
 8008228:	42bd      	cmp	r5, r7
 800822a:	bf38      	it	cc
 800822c:	2304      	movcc	r3, #4
 800822e:	9301      	str	r3, [sp, #4]
 8008230:	9b02      	ldr	r3, [sp, #8]
 8008232:	9103      	str	r1, [sp, #12]
 8008234:	428b      	cmp	r3, r1
 8008236:	d80c      	bhi.n	8008252 <__multiply+0x9a>
 8008238:	2e00      	cmp	r6, #0
 800823a:	dd03      	ble.n	8008244 <__multiply+0x8c>
 800823c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008240:	2b00      	cmp	r3, #0
 8008242:	d055      	beq.n	80082f0 <__multiply+0x138>
 8008244:	6106      	str	r6, [r0, #16]
 8008246:	b005      	add	sp, #20
 8008248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800824c:	f843 2b04 	str.w	r2, [r3], #4
 8008250:	e7d9      	b.n	8008206 <__multiply+0x4e>
 8008252:	f8b1 a000 	ldrh.w	sl, [r1]
 8008256:	f1ba 0f00 	cmp.w	sl, #0
 800825a:	d01f      	beq.n	800829c <__multiply+0xe4>
 800825c:	46c4      	mov	ip, r8
 800825e:	46a1      	mov	r9, r4
 8008260:	2700      	movs	r7, #0
 8008262:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008266:	f8d9 3000 	ldr.w	r3, [r9]
 800826a:	fa1f fb82 	uxth.w	fp, r2
 800826e:	b29b      	uxth	r3, r3
 8008270:	fb0a 330b 	mla	r3, sl, fp, r3
 8008274:	443b      	add	r3, r7
 8008276:	f8d9 7000 	ldr.w	r7, [r9]
 800827a:	0c12      	lsrs	r2, r2, #16
 800827c:	0c3f      	lsrs	r7, r7, #16
 800827e:	fb0a 7202 	mla	r2, sl, r2, r7
 8008282:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008286:	b29b      	uxth	r3, r3
 8008288:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800828c:	4565      	cmp	r5, ip
 800828e:	f849 3b04 	str.w	r3, [r9], #4
 8008292:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008296:	d8e4      	bhi.n	8008262 <__multiply+0xaa>
 8008298:	9b01      	ldr	r3, [sp, #4]
 800829a:	50e7      	str	r7, [r4, r3]
 800829c:	9b03      	ldr	r3, [sp, #12]
 800829e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80082a2:	3104      	adds	r1, #4
 80082a4:	f1b9 0f00 	cmp.w	r9, #0
 80082a8:	d020      	beq.n	80082ec <__multiply+0x134>
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	4647      	mov	r7, r8
 80082ae:	46a4      	mov	ip, r4
 80082b0:	f04f 0a00 	mov.w	sl, #0
 80082b4:	f8b7 b000 	ldrh.w	fp, [r7]
 80082b8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80082bc:	fb09 220b 	mla	r2, r9, fp, r2
 80082c0:	4452      	add	r2, sl
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082c8:	f84c 3b04 	str.w	r3, [ip], #4
 80082cc:	f857 3b04 	ldr.w	r3, [r7], #4
 80082d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082d4:	f8bc 3000 	ldrh.w	r3, [ip]
 80082d8:	fb09 330a 	mla	r3, r9, sl, r3
 80082dc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80082e0:	42bd      	cmp	r5, r7
 80082e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082e6:	d8e5      	bhi.n	80082b4 <__multiply+0xfc>
 80082e8:	9a01      	ldr	r2, [sp, #4]
 80082ea:	50a3      	str	r3, [r4, r2]
 80082ec:	3404      	adds	r4, #4
 80082ee:	e79f      	b.n	8008230 <__multiply+0x78>
 80082f0:	3e01      	subs	r6, #1
 80082f2:	e7a1      	b.n	8008238 <__multiply+0x80>
 80082f4:	0800a889 	.word	0x0800a889
 80082f8:	0800a89a 	.word	0x0800a89a

080082fc <__pow5mult>:
 80082fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008300:	4615      	mov	r5, r2
 8008302:	f012 0203 	ands.w	r2, r2, #3
 8008306:	4607      	mov	r7, r0
 8008308:	460e      	mov	r6, r1
 800830a:	d007      	beq.n	800831c <__pow5mult+0x20>
 800830c:	4c25      	ldr	r4, [pc, #148]	@ (80083a4 <__pow5mult+0xa8>)
 800830e:	3a01      	subs	r2, #1
 8008310:	2300      	movs	r3, #0
 8008312:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008316:	f7ff fe5d 	bl	8007fd4 <__multadd>
 800831a:	4606      	mov	r6, r0
 800831c:	10ad      	asrs	r5, r5, #2
 800831e:	d03d      	beq.n	800839c <__pow5mult+0xa0>
 8008320:	69fc      	ldr	r4, [r7, #28]
 8008322:	b97c      	cbnz	r4, 8008344 <__pow5mult+0x48>
 8008324:	2010      	movs	r0, #16
 8008326:	f7ff fd3d 	bl	8007da4 <malloc>
 800832a:	4602      	mov	r2, r0
 800832c:	61f8      	str	r0, [r7, #28]
 800832e:	b928      	cbnz	r0, 800833c <__pow5mult+0x40>
 8008330:	4b1d      	ldr	r3, [pc, #116]	@ (80083a8 <__pow5mult+0xac>)
 8008332:	481e      	ldr	r0, [pc, #120]	@ (80083ac <__pow5mult+0xb0>)
 8008334:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008338:	f001 fb6e 	bl	8009a18 <__assert_func>
 800833c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008340:	6004      	str	r4, [r0, #0]
 8008342:	60c4      	str	r4, [r0, #12]
 8008344:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008348:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800834c:	b94c      	cbnz	r4, 8008362 <__pow5mult+0x66>
 800834e:	f240 2171 	movw	r1, #625	@ 0x271
 8008352:	4638      	mov	r0, r7
 8008354:	f7ff ff1a 	bl	800818c <__i2b>
 8008358:	2300      	movs	r3, #0
 800835a:	f8c8 0008 	str.w	r0, [r8, #8]
 800835e:	4604      	mov	r4, r0
 8008360:	6003      	str	r3, [r0, #0]
 8008362:	f04f 0900 	mov.w	r9, #0
 8008366:	07eb      	lsls	r3, r5, #31
 8008368:	d50a      	bpl.n	8008380 <__pow5mult+0x84>
 800836a:	4631      	mov	r1, r6
 800836c:	4622      	mov	r2, r4
 800836e:	4638      	mov	r0, r7
 8008370:	f7ff ff22 	bl	80081b8 <__multiply>
 8008374:	4631      	mov	r1, r6
 8008376:	4680      	mov	r8, r0
 8008378:	4638      	mov	r0, r7
 800837a:	f7ff fe09 	bl	8007f90 <_Bfree>
 800837e:	4646      	mov	r6, r8
 8008380:	106d      	asrs	r5, r5, #1
 8008382:	d00b      	beq.n	800839c <__pow5mult+0xa0>
 8008384:	6820      	ldr	r0, [r4, #0]
 8008386:	b938      	cbnz	r0, 8008398 <__pow5mult+0x9c>
 8008388:	4622      	mov	r2, r4
 800838a:	4621      	mov	r1, r4
 800838c:	4638      	mov	r0, r7
 800838e:	f7ff ff13 	bl	80081b8 <__multiply>
 8008392:	6020      	str	r0, [r4, #0]
 8008394:	f8c0 9000 	str.w	r9, [r0]
 8008398:	4604      	mov	r4, r0
 800839a:	e7e4      	b.n	8008366 <__pow5mult+0x6a>
 800839c:	4630      	mov	r0, r6
 800839e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083a2:	bf00      	nop
 80083a4:	0800a9ac 	.word	0x0800a9ac
 80083a8:	0800a81a 	.word	0x0800a81a
 80083ac:	0800a89a 	.word	0x0800a89a

080083b0 <__lshift>:
 80083b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083b4:	460c      	mov	r4, r1
 80083b6:	6849      	ldr	r1, [r1, #4]
 80083b8:	6923      	ldr	r3, [r4, #16]
 80083ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083be:	68a3      	ldr	r3, [r4, #8]
 80083c0:	4607      	mov	r7, r0
 80083c2:	4691      	mov	r9, r2
 80083c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083c8:	f108 0601 	add.w	r6, r8, #1
 80083cc:	42b3      	cmp	r3, r6
 80083ce:	db0b      	blt.n	80083e8 <__lshift+0x38>
 80083d0:	4638      	mov	r0, r7
 80083d2:	f7ff fd9d 	bl	8007f10 <_Balloc>
 80083d6:	4605      	mov	r5, r0
 80083d8:	b948      	cbnz	r0, 80083ee <__lshift+0x3e>
 80083da:	4602      	mov	r2, r0
 80083dc:	4b28      	ldr	r3, [pc, #160]	@ (8008480 <__lshift+0xd0>)
 80083de:	4829      	ldr	r0, [pc, #164]	@ (8008484 <__lshift+0xd4>)
 80083e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80083e4:	f001 fb18 	bl	8009a18 <__assert_func>
 80083e8:	3101      	adds	r1, #1
 80083ea:	005b      	lsls	r3, r3, #1
 80083ec:	e7ee      	b.n	80083cc <__lshift+0x1c>
 80083ee:	2300      	movs	r3, #0
 80083f0:	f100 0114 	add.w	r1, r0, #20
 80083f4:	f100 0210 	add.w	r2, r0, #16
 80083f8:	4618      	mov	r0, r3
 80083fa:	4553      	cmp	r3, sl
 80083fc:	db33      	blt.n	8008466 <__lshift+0xb6>
 80083fe:	6920      	ldr	r0, [r4, #16]
 8008400:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008404:	f104 0314 	add.w	r3, r4, #20
 8008408:	f019 091f 	ands.w	r9, r9, #31
 800840c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008410:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008414:	d02b      	beq.n	800846e <__lshift+0xbe>
 8008416:	f1c9 0e20 	rsb	lr, r9, #32
 800841a:	468a      	mov	sl, r1
 800841c:	2200      	movs	r2, #0
 800841e:	6818      	ldr	r0, [r3, #0]
 8008420:	fa00 f009 	lsl.w	r0, r0, r9
 8008424:	4310      	orrs	r0, r2
 8008426:	f84a 0b04 	str.w	r0, [sl], #4
 800842a:	f853 2b04 	ldr.w	r2, [r3], #4
 800842e:	459c      	cmp	ip, r3
 8008430:	fa22 f20e 	lsr.w	r2, r2, lr
 8008434:	d8f3      	bhi.n	800841e <__lshift+0x6e>
 8008436:	ebac 0304 	sub.w	r3, ip, r4
 800843a:	3b15      	subs	r3, #21
 800843c:	f023 0303 	bic.w	r3, r3, #3
 8008440:	3304      	adds	r3, #4
 8008442:	f104 0015 	add.w	r0, r4, #21
 8008446:	4560      	cmp	r0, ip
 8008448:	bf88      	it	hi
 800844a:	2304      	movhi	r3, #4
 800844c:	50ca      	str	r2, [r1, r3]
 800844e:	b10a      	cbz	r2, 8008454 <__lshift+0xa4>
 8008450:	f108 0602 	add.w	r6, r8, #2
 8008454:	3e01      	subs	r6, #1
 8008456:	4638      	mov	r0, r7
 8008458:	612e      	str	r6, [r5, #16]
 800845a:	4621      	mov	r1, r4
 800845c:	f7ff fd98 	bl	8007f90 <_Bfree>
 8008460:	4628      	mov	r0, r5
 8008462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008466:	f842 0f04 	str.w	r0, [r2, #4]!
 800846a:	3301      	adds	r3, #1
 800846c:	e7c5      	b.n	80083fa <__lshift+0x4a>
 800846e:	3904      	subs	r1, #4
 8008470:	f853 2b04 	ldr.w	r2, [r3], #4
 8008474:	f841 2f04 	str.w	r2, [r1, #4]!
 8008478:	459c      	cmp	ip, r3
 800847a:	d8f9      	bhi.n	8008470 <__lshift+0xc0>
 800847c:	e7ea      	b.n	8008454 <__lshift+0xa4>
 800847e:	bf00      	nop
 8008480:	0800a889 	.word	0x0800a889
 8008484:	0800a89a 	.word	0x0800a89a

08008488 <__mcmp>:
 8008488:	690a      	ldr	r2, [r1, #16]
 800848a:	4603      	mov	r3, r0
 800848c:	6900      	ldr	r0, [r0, #16]
 800848e:	1a80      	subs	r0, r0, r2
 8008490:	b530      	push	{r4, r5, lr}
 8008492:	d10e      	bne.n	80084b2 <__mcmp+0x2a>
 8008494:	3314      	adds	r3, #20
 8008496:	3114      	adds	r1, #20
 8008498:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800849c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80084a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80084a8:	4295      	cmp	r5, r2
 80084aa:	d003      	beq.n	80084b4 <__mcmp+0x2c>
 80084ac:	d205      	bcs.n	80084ba <__mcmp+0x32>
 80084ae:	f04f 30ff 	mov.w	r0, #4294967295
 80084b2:	bd30      	pop	{r4, r5, pc}
 80084b4:	42a3      	cmp	r3, r4
 80084b6:	d3f3      	bcc.n	80084a0 <__mcmp+0x18>
 80084b8:	e7fb      	b.n	80084b2 <__mcmp+0x2a>
 80084ba:	2001      	movs	r0, #1
 80084bc:	e7f9      	b.n	80084b2 <__mcmp+0x2a>
	...

080084c0 <__mdiff>:
 80084c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c4:	4689      	mov	r9, r1
 80084c6:	4606      	mov	r6, r0
 80084c8:	4611      	mov	r1, r2
 80084ca:	4648      	mov	r0, r9
 80084cc:	4614      	mov	r4, r2
 80084ce:	f7ff ffdb 	bl	8008488 <__mcmp>
 80084d2:	1e05      	subs	r5, r0, #0
 80084d4:	d112      	bne.n	80084fc <__mdiff+0x3c>
 80084d6:	4629      	mov	r1, r5
 80084d8:	4630      	mov	r0, r6
 80084da:	f7ff fd19 	bl	8007f10 <_Balloc>
 80084de:	4602      	mov	r2, r0
 80084e0:	b928      	cbnz	r0, 80084ee <__mdiff+0x2e>
 80084e2:	4b3f      	ldr	r3, [pc, #252]	@ (80085e0 <__mdiff+0x120>)
 80084e4:	f240 2137 	movw	r1, #567	@ 0x237
 80084e8:	483e      	ldr	r0, [pc, #248]	@ (80085e4 <__mdiff+0x124>)
 80084ea:	f001 fa95 	bl	8009a18 <__assert_func>
 80084ee:	2301      	movs	r3, #1
 80084f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084f4:	4610      	mov	r0, r2
 80084f6:	b003      	add	sp, #12
 80084f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084fc:	bfbc      	itt	lt
 80084fe:	464b      	movlt	r3, r9
 8008500:	46a1      	movlt	r9, r4
 8008502:	4630      	mov	r0, r6
 8008504:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008508:	bfba      	itte	lt
 800850a:	461c      	movlt	r4, r3
 800850c:	2501      	movlt	r5, #1
 800850e:	2500      	movge	r5, #0
 8008510:	f7ff fcfe 	bl	8007f10 <_Balloc>
 8008514:	4602      	mov	r2, r0
 8008516:	b918      	cbnz	r0, 8008520 <__mdiff+0x60>
 8008518:	4b31      	ldr	r3, [pc, #196]	@ (80085e0 <__mdiff+0x120>)
 800851a:	f240 2145 	movw	r1, #581	@ 0x245
 800851e:	e7e3      	b.n	80084e8 <__mdiff+0x28>
 8008520:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008524:	6926      	ldr	r6, [r4, #16]
 8008526:	60c5      	str	r5, [r0, #12]
 8008528:	f109 0310 	add.w	r3, r9, #16
 800852c:	f109 0514 	add.w	r5, r9, #20
 8008530:	f104 0e14 	add.w	lr, r4, #20
 8008534:	f100 0b14 	add.w	fp, r0, #20
 8008538:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800853c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008540:	9301      	str	r3, [sp, #4]
 8008542:	46d9      	mov	r9, fp
 8008544:	f04f 0c00 	mov.w	ip, #0
 8008548:	9b01      	ldr	r3, [sp, #4]
 800854a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800854e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008552:	9301      	str	r3, [sp, #4]
 8008554:	fa1f f38a 	uxth.w	r3, sl
 8008558:	4619      	mov	r1, r3
 800855a:	b283      	uxth	r3, r0
 800855c:	1acb      	subs	r3, r1, r3
 800855e:	0c00      	lsrs	r0, r0, #16
 8008560:	4463      	add	r3, ip
 8008562:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008566:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800856a:	b29b      	uxth	r3, r3
 800856c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008570:	4576      	cmp	r6, lr
 8008572:	f849 3b04 	str.w	r3, [r9], #4
 8008576:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800857a:	d8e5      	bhi.n	8008548 <__mdiff+0x88>
 800857c:	1b33      	subs	r3, r6, r4
 800857e:	3b15      	subs	r3, #21
 8008580:	f023 0303 	bic.w	r3, r3, #3
 8008584:	3415      	adds	r4, #21
 8008586:	3304      	adds	r3, #4
 8008588:	42a6      	cmp	r6, r4
 800858a:	bf38      	it	cc
 800858c:	2304      	movcc	r3, #4
 800858e:	441d      	add	r5, r3
 8008590:	445b      	add	r3, fp
 8008592:	461e      	mov	r6, r3
 8008594:	462c      	mov	r4, r5
 8008596:	4544      	cmp	r4, r8
 8008598:	d30e      	bcc.n	80085b8 <__mdiff+0xf8>
 800859a:	f108 0103 	add.w	r1, r8, #3
 800859e:	1b49      	subs	r1, r1, r5
 80085a0:	f021 0103 	bic.w	r1, r1, #3
 80085a4:	3d03      	subs	r5, #3
 80085a6:	45a8      	cmp	r8, r5
 80085a8:	bf38      	it	cc
 80085aa:	2100      	movcc	r1, #0
 80085ac:	440b      	add	r3, r1
 80085ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085b2:	b191      	cbz	r1, 80085da <__mdiff+0x11a>
 80085b4:	6117      	str	r7, [r2, #16]
 80085b6:	e79d      	b.n	80084f4 <__mdiff+0x34>
 80085b8:	f854 1b04 	ldr.w	r1, [r4], #4
 80085bc:	46e6      	mov	lr, ip
 80085be:	0c08      	lsrs	r0, r1, #16
 80085c0:	fa1c fc81 	uxtah	ip, ip, r1
 80085c4:	4471      	add	r1, lr
 80085c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80085ca:	b289      	uxth	r1, r1
 80085cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80085d0:	f846 1b04 	str.w	r1, [r6], #4
 80085d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085d8:	e7dd      	b.n	8008596 <__mdiff+0xd6>
 80085da:	3f01      	subs	r7, #1
 80085dc:	e7e7      	b.n	80085ae <__mdiff+0xee>
 80085de:	bf00      	nop
 80085e0:	0800a889 	.word	0x0800a889
 80085e4:	0800a89a 	.word	0x0800a89a

080085e8 <__ulp>:
 80085e8:	b082      	sub	sp, #8
 80085ea:	ed8d 0b00 	vstr	d0, [sp]
 80085ee:	9a01      	ldr	r2, [sp, #4]
 80085f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008630 <__ulp+0x48>)
 80085f2:	4013      	ands	r3, r2
 80085f4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	dc08      	bgt.n	800860e <__ulp+0x26>
 80085fc:	425b      	negs	r3, r3
 80085fe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008602:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008606:	da04      	bge.n	8008612 <__ulp+0x2a>
 8008608:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800860c:	4113      	asrs	r3, r2
 800860e:	2200      	movs	r2, #0
 8008610:	e008      	b.n	8008624 <__ulp+0x3c>
 8008612:	f1a2 0314 	sub.w	r3, r2, #20
 8008616:	2b1e      	cmp	r3, #30
 8008618:	bfda      	itte	le
 800861a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800861e:	40da      	lsrle	r2, r3
 8008620:	2201      	movgt	r2, #1
 8008622:	2300      	movs	r3, #0
 8008624:	4619      	mov	r1, r3
 8008626:	4610      	mov	r0, r2
 8008628:	ec41 0b10 	vmov	d0, r0, r1
 800862c:	b002      	add	sp, #8
 800862e:	4770      	bx	lr
 8008630:	7ff00000 	.word	0x7ff00000

08008634 <__b2d>:
 8008634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008638:	6906      	ldr	r6, [r0, #16]
 800863a:	f100 0814 	add.w	r8, r0, #20
 800863e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008642:	1f37      	subs	r7, r6, #4
 8008644:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008648:	4610      	mov	r0, r2
 800864a:	f7ff fd53 	bl	80080f4 <__hi0bits>
 800864e:	f1c0 0320 	rsb	r3, r0, #32
 8008652:	280a      	cmp	r0, #10
 8008654:	600b      	str	r3, [r1, #0]
 8008656:	491b      	ldr	r1, [pc, #108]	@ (80086c4 <__b2d+0x90>)
 8008658:	dc15      	bgt.n	8008686 <__b2d+0x52>
 800865a:	f1c0 0c0b 	rsb	ip, r0, #11
 800865e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008662:	45b8      	cmp	r8, r7
 8008664:	ea43 0501 	orr.w	r5, r3, r1
 8008668:	bf34      	ite	cc
 800866a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800866e:	2300      	movcs	r3, #0
 8008670:	3015      	adds	r0, #21
 8008672:	fa02 f000 	lsl.w	r0, r2, r0
 8008676:	fa23 f30c 	lsr.w	r3, r3, ip
 800867a:	4303      	orrs	r3, r0
 800867c:	461c      	mov	r4, r3
 800867e:	ec45 4b10 	vmov	d0, r4, r5
 8008682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008686:	45b8      	cmp	r8, r7
 8008688:	bf3a      	itte	cc
 800868a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800868e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008692:	2300      	movcs	r3, #0
 8008694:	380b      	subs	r0, #11
 8008696:	d012      	beq.n	80086be <__b2d+0x8a>
 8008698:	f1c0 0120 	rsb	r1, r0, #32
 800869c:	fa23 f401 	lsr.w	r4, r3, r1
 80086a0:	4082      	lsls	r2, r0
 80086a2:	4322      	orrs	r2, r4
 80086a4:	4547      	cmp	r7, r8
 80086a6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80086aa:	bf8c      	ite	hi
 80086ac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80086b0:	2200      	movls	r2, #0
 80086b2:	4083      	lsls	r3, r0
 80086b4:	40ca      	lsrs	r2, r1
 80086b6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80086ba:	4313      	orrs	r3, r2
 80086bc:	e7de      	b.n	800867c <__b2d+0x48>
 80086be:	ea42 0501 	orr.w	r5, r2, r1
 80086c2:	e7db      	b.n	800867c <__b2d+0x48>
 80086c4:	3ff00000 	.word	0x3ff00000

080086c8 <__d2b>:
 80086c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086cc:	460f      	mov	r7, r1
 80086ce:	2101      	movs	r1, #1
 80086d0:	ec59 8b10 	vmov	r8, r9, d0
 80086d4:	4616      	mov	r6, r2
 80086d6:	f7ff fc1b 	bl	8007f10 <_Balloc>
 80086da:	4604      	mov	r4, r0
 80086dc:	b930      	cbnz	r0, 80086ec <__d2b+0x24>
 80086de:	4602      	mov	r2, r0
 80086e0:	4b23      	ldr	r3, [pc, #140]	@ (8008770 <__d2b+0xa8>)
 80086e2:	4824      	ldr	r0, [pc, #144]	@ (8008774 <__d2b+0xac>)
 80086e4:	f240 310f 	movw	r1, #783	@ 0x30f
 80086e8:	f001 f996 	bl	8009a18 <__assert_func>
 80086ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80086f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086f4:	b10d      	cbz	r5, 80086fa <__d2b+0x32>
 80086f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086fa:	9301      	str	r3, [sp, #4]
 80086fc:	f1b8 0300 	subs.w	r3, r8, #0
 8008700:	d023      	beq.n	800874a <__d2b+0x82>
 8008702:	4668      	mov	r0, sp
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	f7ff fd14 	bl	8008132 <__lo0bits>
 800870a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800870e:	b1d0      	cbz	r0, 8008746 <__d2b+0x7e>
 8008710:	f1c0 0320 	rsb	r3, r0, #32
 8008714:	fa02 f303 	lsl.w	r3, r2, r3
 8008718:	430b      	orrs	r3, r1
 800871a:	40c2      	lsrs	r2, r0
 800871c:	6163      	str	r3, [r4, #20]
 800871e:	9201      	str	r2, [sp, #4]
 8008720:	9b01      	ldr	r3, [sp, #4]
 8008722:	61a3      	str	r3, [r4, #24]
 8008724:	2b00      	cmp	r3, #0
 8008726:	bf0c      	ite	eq
 8008728:	2201      	moveq	r2, #1
 800872a:	2202      	movne	r2, #2
 800872c:	6122      	str	r2, [r4, #16]
 800872e:	b1a5      	cbz	r5, 800875a <__d2b+0x92>
 8008730:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008734:	4405      	add	r5, r0
 8008736:	603d      	str	r5, [r7, #0]
 8008738:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800873c:	6030      	str	r0, [r6, #0]
 800873e:	4620      	mov	r0, r4
 8008740:	b003      	add	sp, #12
 8008742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008746:	6161      	str	r1, [r4, #20]
 8008748:	e7ea      	b.n	8008720 <__d2b+0x58>
 800874a:	a801      	add	r0, sp, #4
 800874c:	f7ff fcf1 	bl	8008132 <__lo0bits>
 8008750:	9b01      	ldr	r3, [sp, #4]
 8008752:	6163      	str	r3, [r4, #20]
 8008754:	3020      	adds	r0, #32
 8008756:	2201      	movs	r2, #1
 8008758:	e7e8      	b.n	800872c <__d2b+0x64>
 800875a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800875e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008762:	6038      	str	r0, [r7, #0]
 8008764:	6918      	ldr	r0, [r3, #16]
 8008766:	f7ff fcc5 	bl	80080f4 <__hi0bits>
 800876a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800876e:	e7e5      	b.n	800873c <__d2b+0x74>
 8008770:	0800a889 	.word	0x0800a889
 8008774:	0800a89a 	.word	0x0800a89a

08008778 <__ratio>:
 8008778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877c:	b085      	sub	sp, #20
 800877e:	e9cd 1000 	strd	r1, r0, [sp]
 8008782:	a902      	add	r1, sp, #8
 8008784:	f7ff ff56 	bl	8008634 <__b2d>
 8008788:	9800      	ldr	r0, [sp, #0]
 800878a:	a903      	add	r1, sp, #12
 800878c:	ec55 4b10 	vmov	r4, r5, d0
 8008790:	f7ff ff50 	bl	8008634 <__b2d>
 8008794:	9b01      	ldr	r3, [sp, #4]
 8008796:	6919      	ldr	r1, [r3, #16]
 8008798:	9b00      	ldr	r3, [sp, #0]
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	1ac9      	subs	r1, r1, r3
 800879e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80087a2:	1a9b      	subs	r3, r3, r2
 80087a4:	ec5b ab10 	vmov	sl, fp, d0
 80087a8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	bfce      	itee	gt
 80087b0:	462a      	movgt	r2, r5
 80087b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80087b6:	465a      	movle	r2, fp
 80087b8:	462f      	mov	r7, r5
 80087ba:	46d9      	mov	r9, fp
 80087bc:	bfcc      	ite	gt
 80087be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80087c2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80087c6:	464b      	mov	r3, r9
 80087c8:	4652      	mov	r2, sl
 80087ca:	4620      	mov	r0, r4
 80087cc:	4639      	mov	r1, r7
 80087ce:	f7f8 f845 	bl	800085c <__aeabi_ddiv>
 80087d2:	ec41 0b10 	vmov	d0, r0, r1
 80087d6:	b005      	add	sp, #20
 80087d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087dc <__copybits>:
 80087dc:	3901      	subs	r1, #1
 80087de:	b570      	push	{r4, r5, r6, lr}
 80087e0:	1149      	asrs	r1, r1, #5
 80087e2:	6914      	ldr	r4, [r2, #16]
 80087e4:	3101      	adds	r1, #1
 80087e6:	f102 0314 	add.w	r3, r2, #20
 80087ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80087ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80087f2:	1f05      	subs	r5, r0, #4
 80087f4:	42a3      	cmp	r3, r4
 80087f6:	d30c      	bcc.n	8008812 <__copybits+0x36>
 80087f8:	1aa3      	subs	r3, r4, r2
 80087fa:	3b11      	subs	r3, #17
 80087fc:	f023 0303 	bic.w	r3, r3, #3
 8008800:	3211      	adds	r2, #17
 8008802:	42a2      	cmp	r2, r4
 8008804:	bf88      	it	hi
 8008806:	2300      	movhi	r3, #0
 8008808:	4418      	add	r0, r3
 800880a:	2300      	movs	r3, #0
 800880c:	4288      	cmp	r0, r1
 800880e:	d305      	bcc.n	800881c <__copybits+0x40>
 8008810:	bd70      	pop	{r4, r5, r6, pc}
 8008812:	f853 6b04 	ldr.w	r6, [r3], #4
 8008816:	f845 6f04 	str.w	r6, [r5, #4]!
 800881a:	e7eb      	b.n	80087f4 <__copybits+0x18>
 800881c:	f840 3b04 	str.w	r3, [r0], #4
 8008820:	e7f4      	b.n	800880c <__copybits+0x30>

08008822 <__any_on>:
 8008822:	f100 0214 	add.w	r2, r0, #20
 8008826:	6900      	ldr	r0, [r0, #16]
 8008828:	114b      	asrs	r3, r1, #5
 800882a:	4298      	cmp	r0, r3
 800882c:	b510      	push	{r4, lr}
 800882e:	db11      	blt.n	8008854 <__any_on+0x32>
 8008830:	dd0a      	ble.n	8008848 <__any_on+0x26>
 8008832:	f011 011f 	ands.w	r1, r1, #31
 8008836:	d007      	beq.n	8008848 <__any_on+0x26>
 8008838:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800883c:	fa24 f001 	lsr.w	r0, r4, r1
 8008840:	fa00 f101 	lsl.w	r1, r0, r1
 8008844:	428c      	cmp	r4, r1
 8008846:	d10b      	bne.n	8008860 <__any_on+0x3e>
 8008848:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800884c:	4293      	cmp	r3, r2
 800884e:	d803      	bhi.n	8008858 <__any_on+0x36>
 8008850:	2000      	movs	r0, #0
 8008852:	bd10      	pop	{r4, pc}
 8008854:	4603      	mov	r3, r0
 8008856:	e7f7      	b.n	8008848 <__any_on+0x26>
 8008858:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800885c:	2900      	cmp	r1, #0
 800885e:	d0f5      	beq.n	800884c <__any_on+0x2a>
 8008860:	2001      	movs	r0, #1
 8008862:	e7f6      	b.n	8008852 <__any_on+0x30>

08008864 <sulp>:
 8008864:	b570      	push	{r4, r5, r6, lr}
 8008866:	4604      	mov	r4, r0
 8008868:	460d      	mov	r5, r1
 800886a:	ec45 4b10 	vmov	d0, r4, r5
 800886e:	4616      	mov	r6, r2
 8008870:	f7ff feba 	bl	80085e8 <__ulp>
 8008874:	ec51 0b10 	vmov	r0, r1, d0
 8008878:	b17e      	cbz	r6, 800889a <sulp+0x36>
 800887a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800887e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008882:	2b00      	cmp	r3, #0
 8008884:	dd09      	ble.n	800889a <sulp+0x36>
 8008886:	051b      	lsls	r3, r3, #20
 8008888:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800888c:	2400      	movs	r4, #0
 800888e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008892:	4622      	mov	r2, r4
 8008894:	462b      	mov	r3, r5
 8008896:	f7f7 feb7 	bl	8000608 <__aeabi_dmul>
 800889a:	ec41 0b10 	vmov	d0, r0, r1
 800889e:	bd70      	pop	{r4, r5, r6, pc}

080088a0 <_strtod_l>:
 80088a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a4:	b09f      	sub	sp, #124	@ 0x7c
 80088a6:	460c      	mov	r4, r1
 80088a8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80088aa:	2200      	movs	r2, #0
 80088ac:	921a      	str	r2, [sp, #104]	@ 0x68
 80088ae:	9005      	str	r0, [sp, #20]
 80088b0:	f04f 0a00 	mov.w	sl, #0
 80088b4:	f04f 0b00 	mov.w	fp, #0
 80088b8:	460a      	mov	r2, r1
 80088ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80088bc:	7811      	ldrb	r1, [r2, #0]
 80088be:	292b      	cmp	r1, #43	@ 0x2b
 80088c0:	d04a      	beq.n	8008958 <_strtod_l+0xb8>
 80088c2:	d838      	bhi.n	8008936 <_strtod_l+0x96>
 80088c4:	290d      	cmp	r1, #13
 80088c6:	d832      	bhi.n	800892e <_strtod_l+0x8e>
 80088c8:	2908      	cmp	r1, #8
 80088ca:	d832      	bhi.n	8008932 <_strtod_l+0x92>
 80088cc:	2900      	cmp	r1, #0
 80088ce:	d03b      	beq.n	8008948 <_strtod_l+0xa8>
 80088d0:	2200      	movs	r2, #0
 80088d2:	920e      	str	r2, [sp, #56]	@ 0x38
 80088d4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80088d6:	782a      	ldrb	r2, [r5, #0]
 80088d8:	2a30      	cmp	r2, #48	@ 0x30
 80088da:	f040 80b2 	bne.w	8008a42 <_strtod_l+0x1a2>
 80088de:	786a      	ldrb	r2, [r5, #1]
 80088e0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80088e4:	2a58      	cmp	r2, #88	@ 0x58
 80088e6:	d16e      	bne.n	80089c6 <_strtod_l+0x126>
 80088e8:	9302      	str	r3, [sp, #8]
 80088ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088ec:	9301      	str	r3, [sp, #4]
 80088ee:	ab1a      	add	r3, sp, #104	@ 0x68
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	4a8f      	ldr	r2, [pc, #572]	@ (8008b30 <_strtod_l+0x290>)
 80088f4:	9805      	ldr	r0, [sp, #20]
 80088f6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80088f8:	a919      	add	r1, sp, #100	@ 0x64
 80088fa:	f001 f927 	bl	8009b4c <__gethex>
 80088fe:	f010 060f 	ands.w	r6, r0, #15
 8008902:	4604      	mov	r4, r0
 8008904:	d005      	beq.n	8008912 <_strtod_l+0x72>
 8008906:	2e06      	cmp	r6, #6
 8008908:	d128      	bne.n	800895c <_strtod_l+0xbc>
 800890a:	3501      	adds	r5, #1
 800890c:	2300      	movs	r3, #0
 800890e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008910:	930e      	str	r3, [sp, #56]	@ 0x38
 8008912:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008914:	2b00      	cmp	r3, #0
 8008916:	f040 858e 	bne.w	8009436 <_strtod_l+0xb96>
 800891a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800891c:	b1cb      	cbz	r3, 8008952 <_strtod_l+0xb2>
 800891e:	4652      	mov	r2, sl
 8008920:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008924:	ec43 2b10 	vmov	d0, r2, r3
 8008928:	b01f      	add	sp, #124	@ 0x7c
 800892a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800892e:	2920      	cmp	r1, #32
 8008930:	d1ce      	bne.n	80088d0 <_strtod_l+0x30>
 8008932:	3201      	adds	r2, #1
 8008934:	e7c1      	b.n	80088ba <_strtod_l+0x1a>
 8008936:	292d      	cmp	r1, #45	@ 0x2d
 8008938:	d1ca      	bne.n	80088d0 <_strtod_l+0x30>
 800893a:	2101      	movs	r1, #1
 800893c:	910e      	str	r1, [sp, #56]	@ 0x38
 800893e:	1c51      	adds	r1, r2, #1
 8008940:	9119      	str	r1, [sp, #100]	@ 0x64
 8008942:	7852      	ldrb	r2, [r2, #1]
 8008944:	2a00      	cmp	r2, #0
 8008946:	d1c5      	bne.n	80088d4 <_strtod_l+0x34>
 8008948:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800894a:	9419      	str	r4, [sp, #100]	@ 0x64
 800894c:	2b00      	cmp	r3, #0
 800894e:	f040 8570 	bne.w	8009432 <_strtod_l+0xb92>
 8008952:	4652      	mov	r2, sl
 8008954:	465b      	mov	r3, fp
 8008956:	e7e5      	b.n	8008924 <_strtod_l+0x84>
 8008958:	2100      	movs	r1, #0
 800895a:	e7ef      	b.n	800893c <_strtod_l+0x9c>
 800895c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800895e:	b13a      	cbz	r2, 8008970 <_strtod_l+0xd0>
 8008960:	2135      	movs	r1, #53	@ 0x35
 8008962:	a81c      	add	r0, sp, #112	@ 0x70
 8008964:	f7ff ff3a 	bl	80087dc <__copybits>
 8008968:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800896a:	9805      	ldr	r0, [sp, #20]
 800896c:	f7ff fb10 	bl	8007f90 <_Bfree>
 8008970:	3e01      	subs	r6, #1
 8008972:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008974:	2e04      	cmp	r6, #4
 8008976:	d806      	bhi.n	8008986 <_strtod_l+0xe6>
 8008978:	e8df f006 	tbb	[pc, r6]
 800897c:	201d0314 	.word	0x201d0314
 8008980:	14          	.byte	0x14
 8008981:	00          	.byte	0x00
 8008982:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008986:	05e1      	lsls	r1, r4, #23
 8008988:	bf48      	it	mi
 800898a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800898e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008992:	0d1b      	lsrs	r3, r3, #20
 8008994:	051b      	lsls	r3, r3, #20
 8008996:	2b00      	cmp	r3, #0
 8008998:	d1bb      	bne.n	8008912 <_strtod_l+0x72>
 800899a:	f7fe fb2b 	bl	8006ff4 <__errno>
 800899e:	2322      	movs	r3, #34	@ 0x22
 80089a0:	6003      	str	r3, [r0, #0]
 80089a2:	e7b6      	b.n	8008912 <_strtod_l+0x72>
 80089a4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80089a8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80089ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80089b0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80089b4:	e7e7      	b.n	8008986 <_strtod_l+0xe6>
 80089b6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008b38 <_strtod_l+0x298>
 80089ba:	e7e4      	b.n	8008986 <_strtod_l+0xe6>
 80089bc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80089c0:	f04f 3aff 	mov.w	sl, #4294967295
 80089c4:	e7df      	b.n	8008986 <_strtod_l+0xe6>
 80089c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80089c8:	1c5a      	adds	r2, r3, #1
 80089ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80089cc:	785b      	ldrb	r3, [r3, #1]
 80089ce:	2b30      	cmp	r3, #48	@ 0x30
 80089d0:	d0f9      	beq.n	80089c6 <_strtod_l+0x126>
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d09d      	beq.n	8008912 <_strtod_l+0x72>
 80089d6:	2301      	movs	r3, #1
 80089d8:	2700      	movs	r7, #0
 80089da:	9308      	str	r3, [sp, #32]
 80089dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80089de:	930c      	str	r3, [sp, #48]	@ 0x30
 80089e0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80089e2:	46b9      	mov	r9, r7
 80089e4:	220a      	movs	r2, #10
 80089e6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80089e8:	7805      	ldrb	r5, [r0, #0]
 80089ea:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80089ee:	b2d9      	uxtb	r1, r3
 80089f0:	2909      	cmp	r1, #9
 80089f2:	d928      	bls.n	8008a46 <_strtod_l+0x1a6>
 80089f4:	494f      	ldr	r1, [pc, #316]	@ (8008b34 <_strtod_l+0x294>)
 80089f6:	2201      	movs	r2, #1
 80089f8:	f000 ffd6 	bl	80099a8 <strncmp>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	d032      	beq.n	8008a66 <_strtod_l+0x1c6>
 8008a00:	2000      	movs	r0, #0
 8008a02:	462a      	mov	r2, r5
 8008a04:	900a      	str	r0, [sp, #40]	@ 0x28
 8008a06:	464d      	mov	r5, r9
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2a65      	cmp	r2, #101	@ 0x65
 8008a0c:	d001      	beq.n	8008a12 <_strtod_l+0x172>
 8008a0e:	2a45      	cmp	r2, #69	@ 0x45
 8008a10:	d114      	bne.n	8008a3c <_strtod_l+0x19c>
 8008a12:	b91d      	cbnz	r5, 8008a1c <_strtod_l+0x17c>
 8008a14:	9a08      	ldr	r2, [sp, #32]
 8008a16:	4302      	orrs	r2, r0
 8008a18:	d096      	beq.n	8008948 <_strtod_l+0xa8>
 8008a1a:	2500      	movs	r5, #0
 8008a1c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008a1e:	1c62      	adds	r2, r4, #1
 8008a20:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a22:	7862      	ldrb	r2, [r4, #1]
 8008a24:	2a2b      	cmp	r2, #43	@ 0x2b
 8008a26:	d07a      	beq.n	8008b1e <_strtod_l+0x27e>
 8008a28:	2a2d      	cmp	r2, #45	@ 0x2d
 8008a2a:	d07e      	beq.n	8008b2a <_strtod_l+0x28a>
 8008a2c:	f04f 0c00 	mov.w	ip, #0
 8008a30:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008a34:	2909      	cmp	r1, #9
 8008a36:	f240 8085 	bls.w	8008b44 <_strtod_l+0x2a4>
 8008a3a:	9419      	str	r4, [sp, #100]	@ 0x64
 8008a3c:	f04f 0800 	mov.w	r8, #0
 8008a40:	e0a5      	b.n	8008b8e <_strtod_l+0x2ee>
 8008a42:	2300      	movs	r3, #0
 8008a44:	e7c8      	b.n	80089d8 <_strtod_l+0x138>
 8008a46:	f1b9 0f08 	cmp.w	r9, #8
 8008a4a:	bfd8      	it	le
 8008a4c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008a4e:	f100 0001 	add.w	r0, r0, #1
 8008a52:	bfda      	itte	le
 8008a54:	fb02 3301 	mlale	r3, r2, r1, r3
 8008a58:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008a5a:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008a5e:	f109 0901 	add.w	r9, r9, #1
 8008a62:	9019      	str	r0, [sp, #100]	@ 0x64
 8008a64:	e7bf      	b.n	80089e6 <_strtod_l+0x146>
 8008a66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a68:	1c5a      	adds	r2, r3, #1
 8008a6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a6c:	785a      	ldrb	r2, [r3, #1]
 8008a6e:	f1b9 0f00 	cmp.w	r9, #0
 8008a72:	d03b      	beq.n	8008aec <_strtod_l+0x24c>
 8008a74:	900a      	str	r0, [sp, #40]	@ 0x28
 8008a76:	464d      	mov	r5, r9
 8008a78:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008a7c:	2b09      	cmp	r3, #9
 8008a7e:	d912      	bls.n	8008aa6 <_strtod_l+0x206>
 8008a80:	2301      	movs	r3, #1
 8008a82:	e7c2      	b.n	8008a0a <_strtod_l+0x16a>
 8008a84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a86:	1c5a      	adds	r2, r3, #1
 8008a88:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a8a:	785a      	ldrb	r2, [r3, #1]
 8008a8c:	3001      	adds	r0, #1
 8008a8e:	2a30      	cmp	r2, #48	@ 0x30
 8008a90:	d0f8      	beq.n	8008a84 <_strtod_l+0x1e4>
 8008a92:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008a96:	2b08      	cmp	r3, #8
 8008a98:	f200 84d2 	bhi.w	8009440 <_strtod_l+0xba0>
 8008a9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a9e:	900a      	str	r0, [sp, #40]	@ 0x28
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	930c      	str	r3, [sp, #48]	@ 0x30
 8008aa4:	4605      	mov	r5, r0
 8008aa6:	3a30      	subs	r2, #48	@ 0x30
 8008aa8:	f100 0301 	add.w	r3, r0, #1
 8008aac:	d018      	beq.n	8008ae0 <_strtod_l+0x240>
 8008aae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008ab0:	4419      	add	r1, r3
 8008ab2:	910a      	str	r1, [sp, #40]	@ 0x28
 8008ab4:	462e      	mov	r6, r5
 8008ab6:	f04f 0e0a 	mov.w	lr, #10
 8008aba:	1c71      	adds	r1, r6, #1
 8008abc:	eba1 0c05 	sub.w	ip, r1, r5
 8008ac0:	4563      	cmp	r3, ip
 8008ac2:	dc15      	bgt.n	8008af0 <_strtod_l+0x250>
 8008ac4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008ac8:	182b      	adds	r3, r5, r0
 8008aca:	2b08      	cmp	r3, #8
 8008acc:	f105 0501 	add.w	r5, r5, #1
 8008ad0:	4405      	add	r5, r0
 8008ad2:	dc1a      	bgt.n	8008b0a <_strtod_l+0x26a>
 8008ad4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008ad6:	230a      	movs	r3, #10
 8008ad8:	fb03 2301 	mla	r3, r3, r1, r2
 8008adc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ade:	2300      	movs	r3, #0
 8008ae0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ae2:	1c51      	adds	r1, r2, #1
 8008ae4:	9119      	str	r1, [sp, #100]	@ 0x64
 8008ae6:	7852      	ldrb	r2, [r2, #1]
 8008ae8:	4618      	mov	r0, r3
 8008aea:	e7c5      	b.n	8008a78 <_strtod_l+0x1d8>
 8008aec:	4648      	mov	r0, r9
 8008aee:	e7ce      	b.n	8008a8e <_strtod_l+0x1ee>
 8008af0:	2e08      	cmp	r6, #8
 8008af2:	dc05      	bgt.n	8008b00 <_strtod_l+0x260>
 8008af4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008af6:	fb0e f606 	mul.w	r6, lr, r6
 8008afa:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008afc:	460e      	mov	r6, r1
 8008afe:	e7dc      	b.n	8008aba <_strtod_l+0x21a>
 8008b00:	2910      	cmp	r1, #16
 8008b02:	bfd8      	it	le
 8008b04:	fb0e f707 	mulle.w	r7, lr, r7
 8008b08:	e7f8      	b.n	8008afc <_strtod_l+0x25c>
 8008b0a:	2b0f      	cmp	r3, #15
 8008b0c:	bfdc      	itt	le
 8008b0e:	230a      	movle	r3, #10
 8008b10:	fb03 2707 	mlale	r7, r3, r7, r2
 8008b14:	e7e3      	b.n	8008ade <_strtod_l+0x23e>
 8008b16:	2300      	movs	r3, #0
 8008b18:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e77a      	b.n	8008a14 <_strtod_l+0x174>
 8008b1e:	f04f 0c00 	mov.w	ip, #0
 8008b22:	1ca2      	adds	r2, r4, #2
 8008b24:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b26:	78a2      	ldrb	r2, [r4, #2]
 8008b28:	e782      	b.n	8008a30 <_strtod_l+0x190>
 8008b2a:	f04f 0c01 	mov.w	ip, #1
 8008b2e:	e7f8      	b.n	8008b22 <_strtod_l+0x282>
 8008b30:	0800aabc 	.word	0x0800aabc
 8008b34:	0800a8f3 	.word	0x0800a8f3
 8008b38:	7ff00000 	.word	0x7ff00000
 8008b3c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b3e:	1c51      	adds	r1, r2, #1
 8008b40:	9119      	str	r1, [sp, #100]	@ 0x64
 8008b42:	7852      	ldrb	r2, [r2, #1]
 8008b44:	2a30      	cmp	r2, #48	@ 0x30
 8008b46:	d0f9      	beq.n	8008b3c <_strtod_l+0x29c>
 8008b48:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008b4c:	2908      	cmp	r1, #8
 8008b4e:	f63f af75 	bhi.w	8008a3c <_strtod_l+0x19c>
 8008b52:	3a30      	subs	r2, #48	@ 0x30
 8008b54:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b56:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b58:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008b5a:	f04f 080a 	mov.w	r8, #10
 8008b5e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b60:	1c56      	adds	r6, r2, #1
 8008b62:	9619      	str	r6, [sp, #100]	@ 0x64
 8008b64:	7852      	ldrb	r2, [r2, #1]
 8008b66:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008b6a:	f1be 0f09 	cmp.w	lr, #9
 8008b6e:	d939      	bls.n	8008be4 <_strtod_l+0x344>
 8008b70:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008b72:	1a76      	subs	r6, r6, r1
 8008b74:	2e08      	cmp	r6, #8
 8008b76:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008b7a:	dc03      	bgt.n	8008b84 <_strtod_l+0x2e4>
 8008b7c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008b7e:	4588      	cmp	r8, r1
 8008b80:	bfa8      	it	ge
 8008b82:	4688      	movge	r8, r1
 8008b84:	f1bc 0f00 	cmp.w	ip, #0
 8008b88:	d001      	beq.n	8008b8e <_strtod_l+0x2ee>
 8008b8a:	f1c8 0800 	rsb	r8, r8, #0
 8008b8e:	2d00      	cmp	r5, #0
 8008b90:	d14e      	bne.n	8008c30 <_strtod_l+0x390>
 8008b92:	9908      	ldr	r1, [sp, #32]
 8008b94:	4308      	orrs	r0, r1
 8008b96:	f47f aebc 	bne.w	8008912 <_strtod_l+0x72>
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	f47f aed4 	bne.w	8008948 <_strtod_l+0xa8>
 8008ba0:	2a69      	cmp	r2, #105	@ 0x69
 8008ba2:	d028      	beq.n	8008bf6 <_strtod_l+0x356>
 8008ba4:	dc25      	bgt.n	8008bf2 <_strtod_l+0x352>
 8008ba6:	2a49      	cmp	r2, #73	@ 0x49
 8008ba8:	d025      	beq.n	8008bf6 <_strtod_l+0x356>
 8008baa:	2a4e      	cmp	r2, #78	@ 0x4e
 8008bac:	f47f aecc 	bne.w	8008948 <_strtod_l+0xa8>
 8008bb0:	499a      	ldr	r1, [pc, #616]	@ (8008e1c <_strtod_l+0x57c>)
 8008bb2:	a819      	add	r0, sp, #100	@ 0x64
 8008bb4:	f001 f9ec 	bl	8009f90 <__match>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	f43f aec5 	beq.w	8008948 <_strtod_l+0xa8>
 8008bbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	2b28      	cmp	r3, #40	@ 0x28
 8008bc4:	d12e      	bne.n	8008c24 <_strtod_l+0x384>
 8008bc6:	4996      	ldr	r1, [pc, #600]	@ (8008e20 <_strtod_l+0x580>)
 8008bc8:	aa1c      	add	r2, sp, #112	@ 0x70
 8008bca:	a819      	add	r0, sp, #100	@ 0x64
 8008bcc:	f001 f9f4 	bl	8009fb8 <__hexnan>
 8008bd0:	2805      	cmp	r0, #5
 8008bd2:	d127      	bne.n	8008c24 <_strtod_l+0x384>
 8008bd4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008bd6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008bda:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008bde:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008be2:	e696      	b.n	8008912 <_strtod_l+0x72>
 8008be4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008be6:	fb08 2101 	mla	r1, r8, r1, r2
 8008bea:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008bee:	9209      	str	r2, [sp, #36]	@ 0x24
 8008bf0:	e7b5      	b.n	8008b5e <_strtod_l+0x2be>
 8008bf2:	2a6e      	cmp	r2, #110	@ 0x6e
 8008bf4:	e7da      	b.n	8008bac <_strtod_l+0x30c>
 8008bf6:	498b      	ldr	r1, [pc, #556]	@ (8008e24 <_strtod_l+0x584>)
 8008bf8:	a819      	add	r0, sp, #100	@ 0x64
 8008bfa:	f001 f9c9 	bl	8009f90 <__match>
 8008bfe:	2800      	cmp	r0, #0
 8008c00:	f43f aea2 	beq.w	8008948 <_strtod_l+0xa8>
 8008c04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c06:	4988      	ldr	r1, [pc, #544]	@ (8008e28 <_strtod_l+0x588>)
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	a819      	add	r0, sp, #100	@ 0x64
 8008c0c:	9319      	str	r3, [sp, #100]	@ 0x64
 8008c0e:	f001 f9bf 	bl	8009f90 <__match>
 8008c12:	b910      	cbnz	r0, 8008c1a <_strtod_l+0x37a>
 8008c14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c16:	3301      	adds	r3, #1
 8008c18:	9319      	str	r3, [sp, #100]	@ 0x64
 8008c1a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008e38 <_strtod_l+0x598>
 8008c1e:	f04f 0a00 	mov.w	sl, #0
 8008c22:	e676      	b.n	8008912 <_strtod_l+0x72>
 8008c24:	4881      	ldr	r0, [pc, #516]	@ (8008e2c <_strtod_l+0x58c>)
 8008c26:	f000 feef 	bl	8009a08 <nan>
 8008c2a:	ec5b ab10 	vmov	sl, fp, d0
 8008c2e:	e670      	b.n	8008912 <_strtod_l+0x72>
 8008c30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c32:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008c34:	eba8 0303 	sub.w	r3, r8, r3
 8008c38:	f1b9 0f00 	cmp.w	r9, #0
 8008c3c:	bf08      	it	eq
 8008c3e:	46a9      	moveq	r9, r5
 8008c40:	2d10      	cmp	r5, #16
 8008c42:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c44:	462c      	mov	r4, r5
 8008c46:	bfa8      	it	ge
 8008c48:	2410      	movge	r4, #16
 8008c4a:	f7f7 fc63 	bl	8000514 <__aeabi_ui2d>
 8008c4e:	2d09      	cmp	r5, #9
 8008c50:	4682      	mov	sl, r0
 8008c52:	468b      	mov	fp, r1
 8008c54:	dc13      	bgt.n	8008c7e <_strtod_l+0x3de>
 8008c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f43f ae5a 	beq.w	8008912 <_strtod_l+0x72>
 8008c5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c60:	dd78      	ble.n	8008d54 <_strtod_l+0x4b4>
 8008c62:	2b16      	cmp	r3, #22
 8008c64:	dc5f      	bgt.n	8008d26 <_strtod_l+0x486>
 8008c66:	4972      	ldr	r1, [pc, #456]	@ (8008e30 <_strtod_l+0x590>)
 8008c68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008c6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c70:	4652      	mov	r2, sl
 8008c72:	465b      	mov	r3, fp
 8008c74:	f7f7 fcc8 	bl	8000608 <__aeabi_dmul>
 8008c78:	4682      	mov	sl, r0
 8008c7a:	468b      	mov	fp, r1
 8008c7c:	e649      	b.n	8008912 <_strtod_l+0x72>
 8008c7e:	4b6c      	ldr	r3, [pc, #432]	@ (8008e30 <_strtod_l+0x590>)
 8008c80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c84:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008c88:	f7f7 fcbe 	bl	8000608 <__aeabi_dmul>
 8008c8c:	4682      	mov	sl, r0
 8008c8e:	4638      	mov	r0, r7
 8008c90:	468b      	mov	fp, r1
 8008c92:	f7f7 fc3f 	bl	8000514 <__aeabi_ui2d>
 8008c96:	4602      	mov	r2, r0
 8008c98:	460b      	mov	r3, r1
 8008c9a:	4650      	mov	r0, sl
 8008c9c:	4659      	mov	r1, fp
 8008c9e:	f7f7 fafd 	bl	800029c <__adddf3>
 8008ca2:	2d0f      	cmp	r5, #15
 8008ca4:	4682      	mov	sl, r0
 8008ca6:	468b      	mov	fp, r1
 8008ca8:	ddd5      	ble.n	8008c56 <_strtod_l+0x3b6>
 8008caa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cac:	1b2c      	subs	r4, r5, r4
 8008cae:	441c      	add	r4, r3
 8008cb0:	2c00      	cmp	r4, #0
 8008cb2:	f340 8093 	ble.w	8008ddc <_strtod_l+0x53c>
 8008cb6:	f014 030f 	ands.w	r3, r4, #15
 8008cba:	d00a      	beq.n	8008cd2 <_strtod_l+0x432>
 8008cbc:	495c      	ldr	r1, [pc, #368]	@ (8008e30 <_strtod_l+0x590>)
 8008cbe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008cc2:	4652      	mov	r2, sl
 8008cc4:	465b      	mov	r3, fp
 8008cc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cca:	f7f7 fc9d 	bl	8000608 <__aeabi_dmul>
 8008cce:	4682      	mov	sl, r0
 8008cd0:	468b      	mov	fp, r1
 8008cd2:	f034 040f 	bics.w	r4, r4, #15
 8008cd6:	d073      	beq.n	8008dc0 <_strtod_l+0x520>
 8008cd8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008cdc:	dd49      	ble.n	8008d72 <_strtod_l+0x4d2>
 8008cde:	2400      	movs	r4, #0
 8008ce0:	46a0      	mov	r8, r4
 8008ce2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008ce4:	46a1      	mov	r9, r4
 8008ce6:	9a05      	ldr	r2, [sp, #20]
 8008ce8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008e38 <_strtod_l+0x598>
 8008cec:	2322      	movs	r3, #34	@ 0x22
 8008cee:	6013      	str	r3, [r2, #0]
 8008cf0:	f04f 0a00 	mov.w	sl, #0
 8008cf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f43f ae0b 	beq.w	8008912 <_strtod_l+0x72>
 8008cfc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008cfe:	9805      	ldr	r0, [sp, #20]
 8008d00:	f7ff f946 	bl	8007f90 <_Bfree>
 8008d04:	9805      	ldr	r0, [sp, #20]
 8008d06:	4649      	mov	r1, r9
 8008d08:	f7ff f942 	bl	8007f90 <_Bfree>
 8008d0c:	9805      	ldr	r0, [sp, #20]
 8008d0e:	4641      	mov	r1, r8
 8008d10:	f7ff f93e 	bl	8007f90 <_Bfree>
 8008d14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d16:	9805      	ldr	r0, [sp, #20]
 8008d18:	f7ff f93a 	bl	8007f90 <_Bfree>
 8008d1c:	9805      	ldr	r0, [sp, #20]
 8008d1e:	4621      	mov	r1, r4
 8008d20:	f7ff f936 	bl	8007f90 <_Bfree>
 8008d24:	e5f5      	b.n	8008912 <_strtod_l+0x72>
 8008d26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d28:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	dbbc      	blt.n	8008caa <_strtod_l+0x40a>
 8008d30:	4c3f      	ldr	r4, [pc, #252]	@ (8008e30 <_strtod_l+0x590>)
 8008d32:	f1c5 050f 	rsb	r5, r5, #15
 8008d36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008d3a:	4652      	mov	r2, sl
 8008d3c:	465b      	mov	r3, fp
 8008d3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d42:	f7f7 fc61 	bl	8000608 <__aeabi_dmul>
 8008d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d48:	1b5d      	subs	r5, r3, r5
 8008d4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008d4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008d52:	e78f      	b.n	8008c74 <_strtod_l+0x3d4>
 8008d54:	3316      	adds	r3, #22
 8008d56:	dba8      	blt.n	8008caa <_strtod_l+0x40a>
 8008d58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d5a:	eba3 0808 	sub.w	r8, r3, r8
 8008d5e:	4b34      	ldr	r3, [pc, #208]	@ (8008e30 <_strtod_l+0x590>)
 8008d60:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008d64:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008d68:	4650      	mov	r0, sl
 8008d6a:	4659      	mov	r1, fp
 8008d6c:	f7f7 fd76 	bl	800085c <__aeabi_ddiv>
 8008d70:	e782      	b.n	8008c78 <_strtod_l+0x3d8>
 8008d72:	2300      	movs	r3, #0
 8008d74:	4f2f      	ldr	r7, [pc, #188]	@ (8008e34 <_strtod_l+0x594>)
 8008d76:	1124      	asrs	r4, r4, #4
 8008d78:	4650      	mov	r0, sl
 8008d7a:	4659      	mov	r1, fp
 8008d7c:	461e      	mov	r6, r3
 8008d7e:	2c01      	cmp	r4, #1
 8008d80:	dc21      	bgt.n	8008dc6 <_strtod_l+0x526>
 8008d82:	b10b      	cbz	r3, 8008d88 <_strtod_l+0x4e8>
 8008d84:	4682      	mov	sl, r0
 8008d86:	468b      	mov	fp, r1
 8008d88:	492a      	ldr	r1, [pc, #168]	@ (8008e34 <_strtod_l+0x594>)
 8008d8a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008d8e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008d92:	4652      	mov	r2, sl
 8008d94:	465b      	mov	r3, fp
 8008d96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d9a:	f7f7 fc35 	bl	8000608 <__aeabi_dmul>
 8008d9e:	4b26      	ldr	r3, [pc, #152]	@ (8008e38 <_strtod_l+0x598>)
 8008da0:	460a      	mov	r2, r1
 8008da2:	400b      	ands	r3, r1
 8008da4:	4925      	ldr	r1, [pc, #148]	@ (8008e3c <_strtod_l+0x59c>)
 8008da6:	428b      	cmp	r3, r1
 8008da8:	4682      	mov	sl, r0
 8008daa:	d898      	bhi.n	8008cde <_strtod_l+0x43e>
 8008dac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008db0:	428b      	cmp	r3, r1
 8008db2:	bf86      	itte	hi
 8008db4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008e40 <_strtod_l+0x5a0>
 8008db8:	f04f 3aff 	movhi.w	sl, #4294967295
 8008dbc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	9308      	str	r3, [sp, #32]
 8008dc4:	e076      	b.n	8008eb4 <_strtod_l+0x614>
 8008dc6:	07e2      	lsls	r2, r4, #31
 8008dc8:	d504      	bpl.n	8008dd4 <_strtod_l+0x534>
 8008dca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dce:	f7f7 fc1b 	bl	8000608 <__aeabi_dmul>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	3601      	adds	r6, #1
 8008dd6:	1064      	asrs	r4, r4, #1
 8008dd8:	3708      	adds	r7, #8
 8008dda:	e7d0      	b.n	8008d7e <_strtod_l+0x4de>
 8008ddc:	d0f0      	beq.n	8008dc0 <_strtod_l+0x520>
 8008dde:	4264      	negs	r4, r4
 8008de0:	f014 020f 	ands.w	r2, r4, #15
 8008de4:	d00a      	beq.n	8008dfc <_strtod_l+0x55c>
 8008de6:	4b12      	ldr	r3, [pc, #72]	@ (8008e30 <_strtod_l+0x590>)
 8008de8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dec:	4650      	mov	r0, sl
 8008dee:	4659      	mov	r1, fp
 8008df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df4:	f7f7 fd32 	bl	800085c <__aeabi_ddiv>
 8008df8:	4682      	mov	sl, r0
 8008dfa:	468b      	mov	fp, r1
 8008dfc:	1124      	asrs	r4, r4, #4
 8008dfe:	d0df      	beq.n	8008dc0 <_strtod_l+0x520>
 8008e00:	2c1f      	cmp	r4, #31
 8008e02:	dd1f      	ble.n	8008e44 <_strtod_l+0x5a4>
 8008e04:	2400      	movs	r4, #0
 8008e06:	46a0      	mov	r8, r4
 8008e08:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008e0a:	46a1      	mov	r9, r4
 8008e0c:	9a05      	ldr	r2, [sp, #20]
 8008e0e:	2322      	movs	r3, #34	@ 0x22
 8008e10:	f04f 0a00 	mov.w	sl, #0
 8008e14:	f04f 0b00 	mov.w	fp, #0
 8008e18:	6013      	str	r3, [r2, #0]
 8008e1a:	e76b      	b.n	8008cf4 <_strtod_l+0x454>
 8008e1c:	0800a7e1 	.word	0x0800a7e1
 8008e20:	0800aaa8 	.word	0x0800aaa8
 8008e24:	0800a7d9 	.word	0x0800a7d9
 8008e28:	0800a810 	.word	0x0800a810
 8008e2c:	0800a949 	.word	0x0800a949
 8008e30:	0800a9e0 	.word	0x0800a9e0
 8008e34:	0800a9b8 	.word	0x0800a9b8
 8008e38:	7ff00000 	.word	0x7ff00000
 8008e3c:	7ca00000 	.word	0x7ca00000
 8008e40:	7fefffff 	.word	0x7fefffff
 8008e44:	f014 0310 	ands.w	r3, r4, #16
 8008e48:	bf18      	it	ne
 8008e4a:	236a      	movne	r3, #106	@ 0x6a
 8008e4c:	4ea9      	ldr	r6, [pc, #676]	@ (80090f4 <_strtod_l+0x854>)
 8008e4e:	9308      	str	r3, [sp, #32]
 8008e50:	4650      	mov	r0, sl
 8008e52:	4659      	mov	r1, fp
 8008e54:	2300      	movs	r3, #0
 8008e56:	07e7      	lsls	r7, r4, #31
 8008e58:	d504      	bpl.n	8008e64 <_strtod_l+0x5c4>
 8008e5a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e5e:	f7f7 fbd3 	bl	8000608 <__aeabi_dmul>
 8008e62:	2301      	movs	r3, #1
 8008e64:	1064      	asrs	r4, r4, #1
 8008e66:	f106 0608 	add.w	r6, r6, #8
 8008e6a:	d1f4      	bne.n	8008e56 <_strtod_l+0x5b6>
 8008e6c:	b10b      	cbz	r3, 8008e72 <_strtod_l+0x5d2>
 8008e6e:	4682      	mov	sl, r0
 8008e70:	468b      	mov	fp, r1
 8008e72:	9b08      	ldr	r3, [sp, #32]
 8008e74:	b1b3      	cbz	r3, 8008ea4 <_strtod_l+0x604>
 8008e76:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008e7a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	4659      	mov	r1, fp
 8008e82:	dd0f      	ble.n	8008ea4 <_strtod_l+0x604>
 8008e84:	2b1f      	cmp	r3, #31
 8008e86:	dd56      	ble.n	8008f36 <_strtod_l+0x696>
 8008e88:	2b34      	cmp	r3, #52	@ 0x34
 8008e8a:	bfde      	ittt	le
 8008e8c:	f04f 33ff 	movle.w	r3, #4294967295
 8008e90:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008e94:	4093      	lslle	r3, r2
 8008e96:	f04f 0a00 	mov.w	sl, #0
 8008e9a:	bfcc      	ite	gt
 8008e9c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008ea0:	ea03 0b01 	andle.w	fp, r3, r1
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	4650      	mov	r0, sl
 8008eaa:	4659      	mov	r1, fp
 8008eac:	f7f7 fe14 	bl	8000ad8 <__aeabi_dcmpeq>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	d1a7      	bne.n	8008e04 <_strtod_l+0x564>
 8008eb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008eba:	9805      	ldr	r0, [sp, #20]
 8008ebc:	462b      	mov	r3, r5
 8008ebe:	464a      	mov	r2, r9
 8008ec0:	f7ff f8ce 	bl	8008060 <__s2b>
 8008ec4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	f43f af09 	beq.w	8008cde <_strtod_l+0x43e>
 8008ecc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ece:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ed0:	2a00      	cmp	r2, #0
 8008ed2:	eba3 0308 	sub.w	r3, r3, r8
 8008ed6:	bfa8      	it	ge
 8008ed8:	2300      	movge	r3, #0
 8008eda:	9312      	str	r3, [sp, #72]	@ 0x48
 8008edc:	2400      	movs	r4, #0
 8008ede:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008ee2:	9316      	str	r3, [sp, #88]	@ 0x58
 8008ee4:	46a0      	mov	r8, r4
 8008ee6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ee8:	9805      	ldr	r0, [sp, #20]
 8008eea:	6859      	ldr	r1, [r3, #4]
 8008eec:	f7ff f810 	bl	8007f10 <_Balloc>
 8008ef0:	4681      	mov	r9, r0
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	f43f aef7 	beq.w	8008ce6 <_strtod_l+0x446>
 8008ef8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008efa:	691a      	ldr	r2, [r3, #16]
 8008efc:	3202      	adds	r2, #2
 8008efe:	f103 010c 	add.w	r1, r3, #12
 8008f02:	0092      	lsls	r2, r2, #2
 8008f04:	300c      	adds	r0, #12
 8008f06:	f000 fd71 	bl	80099ec <memcpy>
 8008f0a:	ec4b ab10 	vmov	d0, sl, fp
 8008f0e:	9805      	ldr	r0, [sp, #20]
 8008f10:	aa1c      	add	r2, sp, #112	@ 0x70
 8008f12:	a91b      	add	r1, sp, #108	@ 0x6c
 8008f14:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008f18:	f7ff fbd6 	bl	80086c8 <__d2b>
 8008f1c:	901a      	str	r0, [sp, #104]	@ 0x68
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	f43f aee1 	beq.w	8008ce6 <_strtod_l+0x446>
 8008f24:	9805      	ldr	r0, [sp, #20]
 8008f26:	2101      	movs	r1, #1
 8008f28:	f7ff f930 	bl	800818c <__i2b>
 8008f2c:	4680      	mov	r8, r0
 8008f2e:	b948      	cbnz	r0, 8008f44 <_strtod_l+0x6a4>
 8008f30:	f04f 0800 	mov.w	r8, #0
 8008f34:	e6d7      	b.n	8008ce6 <_strtod_l+0x446>
 8008f36:	f04f 32ff 	mov.w	r2, #4294967295
 8008f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f3e:	ea03 0a0a 	and.w	sl, r3, sl
 8008f42:	e7af      	b.n	8008ea4 <_strtod_l+0x604>
 8008f44:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008f46:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008f48:	2d00      	cmp	r5, #0
 8008f4a:	bfab      	itete	ge
 8008f4c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008f4e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008f50:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008f52:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008f54:	bfac      	ite	ge
 8008f56:	18ef      	addge	r7, r5, r3
 8008f58:	1b5e      	sublt	r6, r3, r5
 8008f5a:	9b08      	ldr	r3, [sp, #32]
 8008f5c:	1aed      	subs	r5, r5, r3
 8008f5e:	4415      	add	r5, r2
 8008f60:	4b65      	ldr	r3, [pc, #404]	@ (80090f8 <_strtod_l+0x858>)
 8008f62:	3d01      	subs	r5, #1
 8008f64:	429d      	cmp	r5, r3
 8008f66:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008f6a:	da50      	bge.n	800900e <_strtod_l+0x76e>
 8008f6c:	1b5b      	subs	r3, r3, r5
 8008f6e:	2b1f      	cmp	r3, #31
 8008f70:	eba2 0203 	sub.w	r2, r2, r3
 8008f74:	f04f 0101 	mov.w	r1, #1
 8008f78:	dc3d      	bgt.n	8008ff6 <_strtod_l+0x756>
 8008f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8008f7e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f80:	2300      	movs	r3, #0
 8008f82:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f84:	18bd      	adds	r5, r7, r2
 8008f86:	9b08      	ldr	r3, [sp, #32]
 8008f88:	42af      	cmp	r7, r5
 8008f8a:	4416      	add	r6, r2
 8008f8c:	441e      	add	r6, r3
 8008f8e:	463b      	mov	r3, r7
 8008f90:	bfa8      	it	ge
 8008f92:	462b      	movge	r3, r5
 8008f94:	42b3      	cmp	r3, r6
 8008f96:	bfa8      	it	ge
 8008f98:	4633      	movge	r3, r6
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	bfc2      	ittt	gt
 8008f9e:	1aed      	subgt	r5, r5, r3
 8008fa0:	1af6      	subgt	r6, r6, r3
 8008fa2:	1aff      	subgt	r7, r7, r3
 8008fa4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	dd16      	ble.n	8008fd8 <_strtod_l+0x738>
 8008faa:	4641      	mov	r1, r8
 8008fac:	9805      	ldr	r0, [sp, #20]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	f7ff f9a4 	bl	80082fc <__pow5mult>
 8008fb4:	4680      	mov	r8, r0
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	d0ba      	beq.n	8008f30 <_strtod_l+0x690>
 8008fba:	4601      	mov	r1, r0
 8008fbc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008fbe:	9805      	ldr	r0, [sp, #20]
 8008fc0:	f7ff f8fa 	bl	80081b8 <__multiply>
 8008fc4:	900a      	str	r0, [sp, #40]	@ 0x28
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	f43f ae8d 	beq.w	8008ce6 <_strtod_l+0x446>
 8008fcc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008fce:	9805      	ldr	r0, [sp, #20]
 8008fd0:	f7fe ffde 	bl	8007f90 <_Bfree>
 8008fd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fd6:	931a      	str	r3, [sp, #104]	@ 0x68
 8008fd8:	2d00      	cmp	r5, #0
 8008fda:	dc1d      	bgt.n	8009018 <_strtod_l+0x778>
 8008fdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	dd23      	ble.n	800902a <_strtod_l+0x78a>
 8008fe2:	4649      	mov	r1, r9
 8008fe4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008fe6:	9805      	ldr	r0, [sp, #20]
 8008fe8:	f7ff f988 	bl	80082fc <__pow5mult>
 8008fec:	4681      	mov	r9, r0
 8008fee:	b9e0      	cbnz	r0, 800902a <_strtod_l+0x78a>
 8008ff0:	f04f 0900 	mov.w	r9, #0
 8008ff4:	e677      	b.n	8008ce6 <_strtod_l+0x446>
 8008ff6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008ffa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008ffe:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009002:	35e2      	adds	r5, #226	@ 0xe2
 8009004:	fa01 f305 	lsl.w	r3, r1, r5
 8009008:	9310      	str	r3, [sp, #64]	@ 0x40
 800900a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800900c:	e7ba      	b.n	8008f84 <_strtod_l+0x6e4>
 800900e:	2300      	movs	r3, #0
 8009010:	9310      	str	r3, [sp, #64]	@ 0x40
 8009012:	2301      	movs	r3, #1
 8009014:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009016:	e7b5      	b.n	8008f84 <_strtod_l+0x6e4>
 8009018:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800901a:	9805      	ldr	r0, [sp, #20]
 800901c:	462a      	mov	r2, r5
 800901e:	f7ff f9c7 	bl	80083b0 <__lshift>
 8009022:	901a      	str	r0, [sp, #104]	@ 0x68
 8009024:	2800      	cmp	r0, #0
 8009026:	d1d9      	bne.n	8008fdc <_strtod_l+0x73c>
 8009028:	e65d      	b.n	8008ce6 <_strtod_l+0x446>
 800902a:	2e00      	cmp	r6, #0
 800902c:	dd07      	ble.n	800903e <_strtod_l+0x79e>
 800902e:	4649      	mov	r1, r9
 8009030:	9805      	ldr	r0, [sp, #20]
 8009032:	4632      	mov	r2, r6
 8009034:	f7ff f9bc 	bl	80083b0 <__lshift>
 8009038:	4681      	mov	r9, r0
 800903a:	2800      	cmp	r0, #0
 800903c:	d0d8      	beq.n	8008ff0 <_strtod_l+0x750>
 800903e:	2f00      	cmp	r7, #0
 8009040:	dd08      	ble.n	8009054 <_strtod_l+0x7b4>
 8009042:	4641      	mov	r1, r8
 8009044:	9805      	ldr	r0, [sp, #20]
 8009046:	463a      	mov	r2, r7
 8009048:	f7ff f9b2 	bl	80083b0 <__lshift>
 800904c:	4680      	mov	r8, r0
 800904e:	2800      	cmp	r0, #0
 8009050:	f43f ae49 	beq.w	8008ce6 <_strtod_l+0x446>
 8009054:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009056:	9805      	ldr	r0, [sp, #20]
 8009058:	464a      	mov	r2, r9
 800905a:	f7ff fa31 	bl	80084c0 <__mdiff>
 800905e:	4604      	mov	r4, r0
 8009060:	2800      	cmp	r0, #0
 8009062:	f43f ae40 	beq.w	8008ce6 <_strtod_l+0x446>
 8009066:	68c3      	ldr	r3, [r0, #12]
 8009068:	930f      	str	r3, [sp, #60]	@ 0x3c
 800906a:	2300      	movs	r3, #0
 800906c:	60c3      	str	r3, [r0, #12]
 800906e:	4641      	mov	r1, r8
 8009070:	f7ff fa0a 	bl	8008488 <__mcmp>
 8009074:	2800      	cmp	r0, #0
 8009076:	da45      	bge.n	8009104 <_strtod_l+0x864>
 8009078:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800907a:	ea53 030a 	orrs.w	r3, r3, sl
 800907e:	d16b      	bne.n	8009158 <_strtod_l+0x8b8>
 8009080:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009084:	2b00      	cmp	r3, #0
 8009086:	d167      	bne.n	8009158 <_strtod_l+0x8b8>
 8009088:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800908c:	0d1b      	lsrs	r3, r3, #20
 800908e:	051b      	lsls	r3, r3, #20
 8009090:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009094:	d960      	bls.n	8009158 <_strtod_l+0x8b8>
 8009096:	6963      	ldr	r3, [r4, #20]
 8009098:	b913      	cbnz	r3, 80090a0 <_strtod_l+0x800>
 800909a:	6923      	ldr	r3, [r4, #16]
 800909c:	2b01      	cmp	r3, #1
 800909e:	dd5b      	ble.n	8009158 <_strtod_l+0x8b8>
 80090a0:	4621      	mov	r1, r4
 80090a2:	2201      	movs	r2, #1
 80090a4:	9805      	ldr	r0, [sp, #20]
 80090a6:	f7ff f983 	bl	80083b0 <__lshift>
 80090aa:	4641      	mov	r1, r8
 80090ac:	4604      	mov	r4, r0
 80090ae:	f7ff f9eb 	bl	8008488 <__mcmp>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	dd50      	ble.n	8009158 <_strtod_l+0x8b8>
 80090b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80090ba:	9a08      	ldr	r2, [sp, #32]
 80090bc:	0d1b      	lsrs	r3, r3, #20
 80090be:	051b      	lsls	r3, r3, #20
 80090c0:	2a00      	cmp	r2, #0
 80090c2:	d06a      	beq.n	800919a <_strtod_l+0x8fa>
 80090c4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80090c8:	d867      	bhi.n	800919a <_strtod_l+0x8fa>
 80090ca:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80090ce:	f67f ae9d 	bls.w	8008e0c <_strtod_l+0x56c>
 80090d2:	4b0a      	ldr	r3, [pc, #40]	@ (80090fc <_strtod_l+0x85c>)
 80090d4:	4650      	mov	r0, sl
 80090d6:	4659      	mov	r1, fp
 80090d8:	2200      	movs	r2, #0
 80090da:	f7f7 fa95 	bl	8000608 <__aeabi_dmul>
 80090de:	4b08      	ldr	r3, [pc, #32]	@ (8009100 <_strtod_l+0x860>)
 80090e0:	400b      	ands	r3, r1
 80090e2:	4682      	mov	sl, r0
 80090e4:	468b      	mov	fp, r1
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f47f ae08 	bne.w	8008cfc <_strtod_l+0x45c>
 80090ec:	9a05      	ldr	r2, [sp, #20]
 80090ee:	2322      	movs	r3, #34	@ 0x22
 80090f0:	6013      	str	r3, [r2, #0]
 80090f2:	e603      	b.n	8008cfc <_strtod_l+0x45c>
 80090f4:	0800aad0 	.word	0x0800aad0
 80090f8:	fffffc02 	.word	0xfffffc02
 80090fc:	39500000 	.word	0x39500000
 8009100:	7ff00000 	.word	0x7ff00000
 8009104:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009108:	d165      	bne.n	80091d6 <_strtod_l+0x936>
 800910a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800910c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009110:	b35a      	cbz	r2, 800916a <_strtod_l+0x8ca>
 8009112:	4a9f      	ldr	r2, [pc, #636]	@ (8009390 <_strtod_l+0xaf0>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d12b      	bne.n	8009170 <_strtod_l+0x8d0>
 8009118:	9b08      	ldr	r3, [sp, #32]
 800911a:	4651      	mov	r1, sl
 800911c:	b303      	cbz	r3, 8009160 <_strtod_l+0x8c0>
 800911e:	4b9d      	ldr	r3, [pc, #628]	@ (8009394 <_strtod_l+0xaf4>)
 8009120:	465a      	mov	r2, fp
 8009122:	4013      	ands	r3, r2
 8009124:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009128:	f04f 32ff 	mov.w	r2, #4294967295
 800912c:	d81b      	bhi.n	8009166 <_strtod_l+0x8c6>
 800912e:	0d1b      	lsrs	r3, r3, #20
 8009130:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009134:	fa02 f303 	lsl.w	r3, r2, r3
 8009138:	4299      	cmp	r1, r3
 800913a:	d119      	bne.n	8009170 <_strtod_l+0x8d0>
 800913c:	4b96      	ldr	r3, [pc, #600]	@ (8009398 <_strtod_l+0xaf8>)
 800913e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009140:	429a      	cmp	r2, r3
 8009142:	d102      	bne.n	800914a <_strtod_l+0x8aa>
 8009144:	3101      	adds	r1, #1
 8009146:	f43f adce 	beq.w	8008ce6 <_strtod_l+0x446>
 800914a:	4b92      	ldr	r3, [pc, #584]	@ (8009394 <_strtod_l+0xaf4>)
 800914c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800914e:	401a      	ands	r2, r3
 8009150:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009154:	f04f 0a00 	mov.w	sl, #0
 8009158:	9b08      	ldr	r3, [sp, #32]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1b9      	bne.n	80090d2 <_strtod_l+0x832>
 800915e:	e5cd      	b.n	8008cfc <_strtod_l+0x45c>
 8009160:	f04f 33ff 	mov.w	r3, #4294967295
 8009164:	e7e8      	b.n	8009138 <_strtod_l+0x898>
 8009166:	4613      	mov	r3, r2
 8009168:	e7e6      	b.n	8009138 <_strtod_l+0x898>
 800916a:	ea53 030a 	orrs.w	r3, r3, sl
 800916e:	d0a2      	beq.n	80090b6 <_strtod_l+0x816>
 8009170:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009172:	b1db      	cbz	r3, 80091ac <_strtod_l+0x90c>
 8009174:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009176:	4213      	tst	r3, r2
 8009178:	d0ee      	beq.n	8009158 <_strtod_l+0x8b8>
 800917a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800917c:	9a08      	ldr	r2, [sp, #32]
 800917e:	4650      	mov	r0, sl
 8009180:	4659      	mov	r1, fp
 8009182:	b1bb      	cbz	r3, 80091b4 <_strtod_l+0x914>
 8009184:	f7ff fb6e 	bl	8008864 <sulp>
 8009188:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800918c:	ec53 2b10 	vmov	r2, r3, d0
 8009190:	f7f7 f884 	bl	800029c <__adddf3>
 8009194:	4682      	mov	sl, r0
 8009196:	468b      	mov	fp, r1
 8009198:	e7de      	b.n	8009158 <_strtod_l+0x8b8>
 800919a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800919e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80091a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80091a6:	f04f 3aff 	mov.w	sl, #4294967295
 80091aa:	e7d5      	b.n	8009158 <_strtod_l+0x8b8>
 80091ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80091ae:	ea13 0f0a 	tst.w	r3, sl
 80091b2:	e7e1      	b.n	8009178 <_strtod_l+0x8d8>
 80091b4:	f7ff fb56 	bl	8008864 <sulp>
 80091b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091bc:	ec53 2b10 	vmov	r2, r3, d0
 80091c0:	f7f7 f86a 	bl	8000298 <__aeabi_dsub>
 80091c4:	2200      	movs	r2, #0
 80091c6:	2300      	movs	r3, #0
 80091c8:	4682      	mov	sl, r0
 80091ca:	468b      	mov	fp, r1
 80091cc:	f7f7 fc84 	bl	8000ad8 <__aeabi_dcmpeq>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	d0c1      	beq.n	8009158 <_strtod_l+0x8b8>
 80091d4:	e61a      	b.n	8008e0c <_strtod_l+0x56c>
 80091d6:	4641      	mov	r1, r8
 80091d8:	4620      	mov	r0, r4
 80091da:	f7ff facd 	bl	8008778 <__ratio>
 80091de:	ec57 6b10 	vmov	r6, r7, d0
 80091e2:	2200      	movs	r2, #0
 80091e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80091e8:	4630      	mov	r0, r6
 80091ea:	4639      	mov	r1, r7
 80091ec:	f7f7 fc88 	bl	8000b00 <__aeabi_dcmple>
 80091f0:	2800      	cmp	r0, #0
 80091f2:	d06f      	beq.n	80092d4 <_strtod_l+0xa34>
 80091f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d17a      	bne.n	80092f0 <_strtod_l+0xa50>
 80091fa:	f1ba 0f00 	cmp.w	sl, #0
 80091fe:	d158      	bne.n	80092b2 <_strtod_l+0xa12>
 8009200:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009202:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009206:	2b00      	cmp	r3, #0
 8009208:	d15a      	bne.n	80092c0 <_strtod_l+0xa20>
 800920a:	4b64      	ldr	r3, [pc, #400]	@ (800939c <_strtod_l+0xafc>)
 800920c:	2200      	movs	r2, #0
 800920e:	4630      	mov	r0, r6
 8009210:	4639      	mov	r1, r7
 8009212:	f7f7 fc6b 	bl	8000aec <__aeabi_dcmplt>
 8009216:	2800      	cmp	r0, #0
 8009218:	d159      	bne.n	80092ce <_strtod_l+0xa2e>
 800921a:	4630      	mov	r0, r6
 800921c:	4639      	mov	r1, r7
 800921e:	4b60      	ldr	r3, [pc, #384]	@ (80093a0 <_strtod_l+0xb00>)
 8009220:	2200      	movs	r2, #0
 8009222:	f7f7 f9f1 	bl	8000608 <__aeabi_dmul>
 8009226:	4606      	mov	r6, r0
 8009228:	460f      	mov	r7, r1
 800922a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800922e:	9606      	str	r6, [sp, #24]
 8009230:	9307      	str	r3, [sp, #28]
 8009232:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009236:	4d57      	ldr	r5, [pc, #348]	@ (8009394 <_strtod_l+0xaf4>)
 8009238:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800923c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800923e:	401d      	ands	r5, r3
 8009240:	4b58      	ldr	r3, [pc, #352]	@ (80093a4 <_strtod_l+0xb04>)
 8009242:	429d      	cmp	r5, r3
 8009244:	f040 80b2 	bne.w	80093ac <_strtod_l+0xb0c>
 8009248:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800924a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800924e:	ec4b ab10 	vmov	d0, sl, fp
 8009252:	f7ff f9c9 	bl	80085e8 <__ulp>
 8009256:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800925a:	ec51 0b10 	vmov	r0, r1, d0
 800925e:	f7f7 f9d3 	bl	8000608 <__aeabi_dmul>
 8009262:	4652      	mov	r2, sl
 8009264:	465b      	mov	r3, fp
 8009266:	f7f7 f819 	bl	800029c <__adddf3>
 800926a:	460b      	mov	r3, r1
 800926c:	4949      	ldr	r1, [pc, #292]	@ (8009394 <_strtod_l+0xaf4>)
 800926e:	4a4e      	ldr	r2, [pc, #312]	@ (80093a8 <_strtod_l+0xb08>)
 8009270:	4019      	ands	r1, r3
 8009272:	4291      	cmp	r1, r2
 8009274:	4682      	mov	sl, r0
 8009276:	d942      	bls.n	80092fe <_strtod_l+0xa5e>
 8009278:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800927a:	4b47      	ldr	r3, [pc, #284]	@ (8009398 <_strtod_l+0xaf8>)
 800927c:	429a      	cmp	r2, r3
 800927e:	d103      	bne.n	8009288 <_strtod_l+0x9e8>
 8009280:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009282:	3301      	adds	r3, #1
 8009284:	f43f ad2f 	beq.w	8008ce6 <_strtod_l+0x446>
 8009288:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009398 <_strtod_l+0xaf8>
 800928c:	f04f 3aff 	mov.w	sl, #4294967295
 8009290:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009292:	9805      	ldr	r0, [sp, #20]
 8009294:	f7fe fe7c 	bl	8007f90 <_Bfree>
 8009298:	9805      	ldr	r0, [sp, #20]
 800929a:	4649      	mov	r1, r9
 800929c:	f7fe fe78 	bl	8007f90 <_Bfree>
 80092a0:	9805      	ldr	r0, [sp, #20]
 80092a2:	4641      	mov	r1, r8
 80092a4:	f7fe fe74 	bl	8007f90 <_Bfree>
 80092a8:	9805      	ldr	r0, [sp, #20]
 80092aa:	4621      	mov	r1, r4
 80092ac:	f7fe fe70 	bl	8007f90 <_Bfree>
 80092b0:	e619      	b.n	8008ee6 <_strtod_l+0x646>
 80092b2:	f1ba 0f01 	cmp.w	sl, #1
 80092b6:	d103      	bne.n	80092c0 <_strtod_l+0xa20>
 80092b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f43f ada6 	beq.w	8008e0c <_strtod_l+0x56c>
 80092c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009370 <_strtod_l+0xad0>
 80092c4:	4f35      	ldr	r7, [pc, #212]	@ (800939c <_strtod_l+0xafc>)
 80092c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80092ca:	2600      	movs	r6, #0
 80092cc:	e7b1      	b.n	8009232 <_strtod_l+0x992>
 80092ce:	4f34      	ldr	r7, [pc, #208]	@ (80093a0 <_strtod_l+0xb00>)
 80092d0:	2600      	movs	r6, #0
 80092d2:	e7aa      	b.n	800922a <_strtod_l+0x98a>
 80092d4:	4b32      	ldr	r3, [pc, #200]	@ (80093a0 <_strtod_l+0xb00>)
 80092d6:	4630      	mov	r0, r6
 80092d8:	4639      	mov	r1, r7
 80092da:	2200      	movs	r2, #0
 80092dc:	f7f7 f994 	bl	8000608 <__aeabi_dmul>
 80092e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092e2:	4606      	mov	r6, r0
 80092e4:	460f      	mov	r7, r1
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d09f      	beq.n	800922a <_strtod_l+0x98a>
 80092ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80092ee:	e7a0      	b.n	8009232 <_strtod_l+0x992>
 80092f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009378 <_strtod_l+0xad8>
 80092f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80092f8:	ec57 6b17 	vmov	r6, r7, d7
 80092fc:	e799      	b.n	8009232 <_strtod_l+0x992>
 80092fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009302:	9b08      	ldr	r3, [sp, #32]
 8009304:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009308:	2b00      	cmp	r3, #0
 800930a:	d1c1      	bne.n	8009290 <_strtod_l+0x9f0>
 800930c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009310:	0d1b      	lsrs	r3, r3, #20
 8009312:	051b      	lsls	r3, r3, #20
 8009314:	429d      	cmp	r5, r3
 8009316:	d1bb      	bne.n	8009290 <_strtod_l+0x9f0>
 8009318:	4630      	mov	r0, r6
 800931a:	4639      	mov	r1, r7
 800931c:	f7f7 fcd4 	bl	8000cc8 <__aeabi_d2lz>
 8009320:	f7f7 f944 	bl	80005ac <__aeabi_l2d>
 8009324:	4602      	mov	r2, r0
 8009326:	460b      	mov	r3, r1
 8009328:	4630      	mov	r0, r6
 800932a:	4639      	mov	r1, r7
 800932c:	f7f6 ffb4 	bl	8000298 <__aeabi_dsub>
 8009330:	460b      	mov	r3, r1
 8009332:	4602      	mov	r2, r0
 8009334:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009338:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800933c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800933e:	ea46 060a 	orr.w	r6, r6, sl
 8009342:	431e      	orrs	r6, r3
 8009344:	d06f      	beq.n	8009426 <_strtod_l+0xb86>
 8009346:	a30e      	add	r3, pc, #56	@ (adr r3, 8009380 <_strtod_l+0xae0>)
 8009348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934c:	f7f7 fbce 	bl	8000aec <__aeabi_dcmplt>
 8009350:	2800      	cmp	r0, #0
 8009352:	f47f acd3 	bne.w	8008cfc <_strtod_l+0x45c>
 8009356:	a30c      	add	r3, pc, #48	@ (adr r3, 8009388 <_strtod_l+0xae8>)
 8009358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009360:	f7f7 fbe2 	bl	8000b28 <__aeabi_dcmpgt>
 8009364:	2800      	cmp	r0, #0
 8009366:	d093      	beq.n	8009290 <_strtod_l+0x9f0>
 8009368:	e4c8      	b.n	8008cfc <_strtod_l+0x45c>
 800936a:	bf00      	nop
 800936c:	f3af 8000 	nop.w
 8009370:	00000000 	.word	0x00000000
 8009374:	bff00000 	.word	0xbff00000
 8009378:	00000000 	.word	0x00000000
 800937c:	3ff00000 	.word	0x3ff00000
 8009380:	94a03595 	.word	0x94a03595
 8009384:	3fdfffff 	.word	0x3fdfffff
 8009388:	35afe535 	.word	0x35afe535
 800938c:	3fe00000 	.word	0x3fe00000
 8009390:	000fffff 	.word	0x000fffff
 8009394:	7ff00000 	.word	0x7ff00000
 8009398:	7fefffff 	.word	0x7fefffff
 800939c:	3ff00000 	.word	0x3ff00000
 80093a0:	3fe00000 	.word	0x3fe00000
 80093a4:	7fe00000 	.word	0x7fe00000
 80093a8:	7c9fffff 	.word	0x7c9fffff
 80093ac:	9b08      	ldr	r3, [sp, #32]
 80093ae:	b323      	cbz	r3, 80093fa <_strtod_l+0xb5a>
 80093b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80093b4:	d821      	bhi.n	80093fa <_strtod_l+0xb5a>
 80093b6:	a328      	add	r3, pc, #160	@ (adr r3, 8009458 <_strtod_l+0xbb8>)
 80093b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093bc:	4630      	mov	r0, r6
 80093be:	4639      	mov	r1, r7
 80093c0:	f7f7 fb9e 	bl	8000b00 <__aeabi_dcmple>
 80093c4:	b1a0      	cbz	r0, 80093f0 <_strtod_l+0xb50>
 80093c6:	4639      	mov	r1, r7
 80093c8:	4630      	mov	r0, r6
 80093ca:	f7f7 fbf5 	bl	8000bb8 <__aeabi_d2uiz>
 80093ce:	2801      	cmp	r0, #1
 80093d0:	bf38      	it	cc
 80093d2:	2001      	movcc	r0, #1
 80093d4:	f7f7 f89e 	bl	8000514 <__aeabi_ui2d>
 80093d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093da:	4606      	mov	r6, r0
 80093dc:	460f      	mov	r7, r1
 80093de:	b9fb      	cbnz	r3, 8009420 <_strtod_l+0xb80>
 80093e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80093e4:	9014      	str	r0, [sp, #80]	@ 0x50
 80093e6:	9315      	str	r3, [sp, #84]	@ 0x54
 80093e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80093ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80093f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80093f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80093f6:	1b5b      	subs	r3, r3, r5
 80093f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80093fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80093fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009402:	f7ff f8f1 	bl	80085e8 <__ulp>
 8009406:	4650      	mov	r0, sl
 8009408:	ec53 2b10 	vmov	r2, r3, d0
 800940c:	4659      	mov	r1, fp
 800940e:	f7f7 f8fb 	bl	8000608 <__aeabi_dmul>
 8009412:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009416:	f7f6 ff41 	bl	800029c <__adddf3>
 800941a:	4682      	mov	sl, r0
 800941c:	468b      	mov	fp, r1
 800941e:	e770      	b.n	8009302 <_strtod_l+0xa62>
 8009420:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009424:	e7e0      	b.n	80093e8 <_strtod_l+0xb48>
 8009426:	a30e      	add	r3, pc, #56	@ (adr r3, 8009460 <_strtod_l+0xbc0>)
 8009428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942c:	f7f7 fb5e 	bl	8000aec <__aeabi_dcmplt>
 8009430:	e798      	b.n	8009364 <_strtod_l+0xac4>
 8009432:	2300      	movs	r3, #0
 8009434:	930e      	str	r3, [sp, #56]	@ 0x38
 8009436:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009438:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800943a:	6013      	str	r3, [r2, #0]
 800943c:	f7ff ba6d 	b.w	800891a <_strtod_l+0x7a>
 8009440:	2a65      	cmp	r2, #101	@ 0x65
 8009442:	f43f ab68 	beq.w	8008b16 <_strtod_l+0x276>
 8009446:	2a45      	cmp	r2, #69	@ 0x45
 8009448:	f43f ab65 	beq.w	8008b16 <_strtod_l+0x276>
 800944c:	2301      	movs	r3, #1
 800944e:	f7ff bba0 	b.w	8008b92 <_strtod_l+0x2f2>
 8009452:	bf00      	nop
 8009454:	f3af 8000 	nop.w
 8009458:	ffc00000 	.word	0xffc00000
 800945c:	41dfffff 	.word	0x41dfffff
 8009460:	94a03595 	.word	0x94a03595
 8009464:	3fcfffff 	.word	0x3fcfffff

08009468 <_strtod_r>:
 8009468:	4b01      	ldr	r3, [pc, #4]	@ (8009470 <_strtod_r+0x8>)
 800946a:	f7ff ba19 	b.w	80088a0 <_strtod_l>
 800946e:	bf00      	nop
 8009470:	20000074 	.word	0x20000074

08009474 <_strtol_l.isra.0>:
 8009474:	2b24      	cmp	r3, #36	@ 0x24
 8009476:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800947a:	4686      	mov	lr, r0
 800947c:	4690      	mov	r8, r2
 800947e:	d801      	bhi.n	8009484 <_strtol_l.isra.0+0x10>
 8009480:	2b01      	cmp	r3, #1
 8009482:	d106      	bne.n	8009492 <_strtol_l.isra.0+0x1e>
 8009484:	f7fd fdb6 	bl	8006ff4 <__errno>
 8009488:	2316      	movs	r3, #22
 800948a:	6003      	str	r3, [r0, #0]
 800948c:	2000      	movs	r0, #0
 800948e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009492:	4834      	ldr	r0, [pc, #208]	@ (8009564 <_strtol_l.isra.0+0xf0>)
 8009494:	460d      	mov	r5, r1
 8009496:	462a      	mov	r2, r5
 8009498:	f815 4b01 	ldrb.w	r4, [r5], #1
 800949c:	5d06      	ldrb	r6, [r0, r4]
 800949e:	f016 0608 	ands.w	r6, r6, #8
 80094a2:	d1f8      	bne.n	8009496 <_strtol_l.isra.0+0x22>
 80094a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80094a6:	d110      	bne.n	80094ca <_strtol_l.isra.0+0x56>
 80094a8:	782c      	ldrb	r4, [r5, #0]
 80094aa:	2601      	movs	r6, #1
 80094ac:	1c95      	adds	r5, r2, #2
 80094ae:	f033 0210 	bics.w	r2, r3, #16
 80094b2:	d115      	bne.n	80094e0 <_strtol_l.isra.0+0x6c>
 80094b4:	2c30      	cmp	r4, #48	@ 0x30
 80094b6:	d10d      	bne.n	80094d4 <_strtol_l.isra.0+0x60>
 80094b8:	782a      	ldrb	r2, [r5, #0]
 80094ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80094be:	2a58      	cmp	r2, #88	@ 0x58
 80094c0:	d108      	bne.n	80094d4 <_strtol_l.isra.0+0x60>
 80094c2:	786c      	ldrb	r4, [r5, #1]
 80094c4:	3502      	adds	r5, #2
 80094c6:	2310      	movs	r3, #16
 80094c8:	e00a      	b.n	80094e0 <_strtol_l.isra.0+0x6c>
 80094ca:	2c2b      	cmp	r4, #43	@ 0x2b
 80094cc:	bf04      	itt	eq
 80094ce:	782c      	ldrbeq	r4, [r5, #0]
 80094d0:	1c95      	addeq	r5, r2, #2
 80094d2:	e7ec      	b.n	80094ae <_strtol_l.isra.0+0x3a>
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1f6      	bne.n	80094c6 <_strtol_l.isra.0+0x52>
 80094d8:	2c30      	cmp	r4, #48	@ 0x30
 80094da:	bf14      	ite	ne
 80094dc:	230a      	movne	r3, #10
 80094de:	2308      	moveq	r3, #8
 80094e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80094e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80094e8:	2200      	movs	r2, #0
 80094ea:	fbbc f9f3 	udiv	r9, ip, r3
 80094ee:	4610      	mov	r0, r2
 80094f0:	fb03 ca19 	mls	sl, r3, r9, ip
 80094f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80094f8:	2f09      	cmp	r7, #9
 80094fa:	d80f      	bhi.n	800951c <_strtol_l.isra.0+0xa8>
 80094fc:	463c      	mov	r4, r7
 80094fe:	42a3      	cmp	r3, r4
 8009500:	dd1b      	ble.n	800953a <_strtol_l.isra.0+0xc6>
 8009502:	1c57      	adds	r7, r2, #1
 8009504:	d007      	beq.n	8009516 <_strtol_l.isra.0+0xa2>
 8009506:	4581      	cmp	r9, r0
 8009508:	d314      	bcc.n	8009534 <_strtol_l.isra.0+0xc0>
 800950a:	d101      	bne.n	8009510 <_strtol_l.isra.0+0x9c>
 800950c:	45a2      	cmp	sl, r4
 800950e:	db11      	blt.n	8009534 <_strtol_l.isra.0+0xc0>
 8009510:	fb00 4003 	mla	r0, r0, r3, r4
 8009514:	2201      	movs	r2, #1
 8009516:	f815 4b01 	ldrb.w	r4, [r5], #1
 800951a:	e7eb      	b.n	80094f4 <_strtol_l.isra.0+0x80>
 800951c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009520:	2f19      	cmp	r7, #25
 8009522:	d801      	bhi.n	8009528 <_strtol_l.isra.0+0xb4>
 8009524:	3c37      	subs	r4, #55	@ 0x37
 8009526:	e7ea      	b.n	80094fe <_strtol_l.isra.0+0x8a>
 8009528:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800952c:	2f19      	cmp	r7, #25
 800952e:	d804      	bhi.n	800953a <_strtol_l.isra.0+0xc6>
 8009530:	3c57      	subs	r4, #87	@ 0x57
 8009532:	e7e4      	b.n	80094fe <_strtol_l.isra.0+0x8a>
 8009534:	f04f 32ff 	mov.w	r2, #4294967295
 8009538:	e7ed      	b.n	8009516 <_strtol_l.isra.0+0xa2>
 800953a:	1c53      	adds	r3, r2, #1
 800953c:	d108      	bne.n	8009550 <_strtol_l.isra.0+0xdc>
 800953e:	2322      	movs	r3, #34	@ 0x22
 8009540:	f8ce 3000 	str.w	r3, [lr]
 8009544:	4660      	mov	r0, ip
 8009546:	f1b8 0f00 	cmp.w	r8, #0
 800954a:	d0a0      	beq.n	800948e <_strtol_l.isra.0+0x1a>
 800954c:	1e69      	subs	r1, r5, #1
 800954e:	e006      	b.n	800955e <_strtol_l.isra.0+0xea>
 8009550:	b106      	cbz	r6, 8009554 <_strtol_l.isra.0+0xe0>
 8009552:	4240      	negs	r0, r0
 8009554:	f1b8 0f00 	cmp.w	r8, #0
 8009558:	d099      	beq.n	800948e <_strtol_l.isra.0+0x1a>
 800955a:	2a00      	cmp	r2, #0
 800955c:	d1f6      	bne.n	800954c <_strtol_l.isra.0+0xd8>
 800955e:	f8c8 1000 	str.w	r1, [r8]
 8009562:	e794      	b.n	800948e <_strtol_l.isra.0+0x1a>
 8009564:	0800aaf9 	.word	0x0800aaf9

08009568 <_strtol_r>:
 8009568:	f7ff bf84 	b.w	8009474 <_strtol_l.isra.0>

0800956c <__ssputs_r>:
 800956c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009570:	688e      	ldr	r6, [r1, #8]
 8009572:	461f      	mov	r7, r3
 8009574:	42be      	cmp	r6, r7
 8009576:	680b      	ldr	r3, [r1, #0]
 8009578:	4682      	mov	sl, r0
 800957a:	460c      	mov	r4, r1
 800957c:	4690      	mov	r8, r2
 800957e:	d82d      	bhi.n	80095dc <__ssputs_r+0x70>
 8009580:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009584:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009588:	d026      	beq.n	80095d8 <__ssputs_r+0x6c>
 800958a:	6965      	ldr	r5, [r4, #20]
 800958c:	6909      	ldr	r1, [r1, #16]
 800958e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009592:	eba3 0901 	sub.w	r9, r3, r1
 8009596:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800959a:	1c7b      	adds	r3, r7, #1
 800959c:	444b      	add	r3, r9
 800959e:	106d      	asrs	r5, r5, #1
 80095a0:	429d      	cmp	r5, r3
 80095a2:	bf38      	it	cc
 80095a4:	461d      	movcc	r5, r3
 80095a6:	0553      	lsls	r3, r2, #21
 80095a8:	d527      	bpl.n	80095fa <__ssputs_r+0x8e>
 80095aa:	4629      	mov	r1, r5
 80095ac:	f7fe fc24 	bl	8007df8 <_malloc_r>
 80095b0:	4606      	mov	r6, r0
 80095b2:	b360      	cbz	r0, 800960e <__ssputs_r+0xa2>
 80095b4:	6921      	ldr	r1, [r4, #16]
 80095b6:	464a      	mov	r2, r9
 80095b8:	f000 fa18 	bl	80099ec <memcpy>
 80095bc:	89a3      	ldrh	r3, [r4, #12]
 80095be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80095c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095c6:	81a3      	strh	r3, [r4, #12]
 80095c8:	6126      	str	r6, [r4, #16]
 80095ca:	6165      	str	r5, [r4, #20]
 80095cc:	444e      	add	r6, r9
 80095ce:	eba5 0509 	sub.w	r5, r5, r9
 80095d2:	6026      	str	r6, [r4, #0]
 80095d4:	60a5      	str	r5, [r4, #8]
 80095d6:	463e      	mov	r6, r7
 80095d8:	42be      	cmp	r6, r7
 80095da:	d900      	bls.n	80095de <__ssputs_r+0x72>
 80095dc:	463e      	mov	r6, r7
 80095de:	6820      	ldr	r0, [r4, #0]
 80095e0:	4632      	mov	r2, r6
 80095e2:	4641      	mov	r1, r8
 80095e4:	f000 f9c6 	bl	8009974 <memmove>
 80095e8:	68a3      	ldr	r3, [r4, #8]
 80095ea:	1b9b      	subs	r3, r3, r6
 80095ec:	60a3      	str	r3, [r4, #8]
 80095ee:	6823      	ldr	r3, [r4, #0]
 80095f0:	4433      	add	r3, r6
 80095f2:	6023      	str	r3, [r4, #0]
 80095f4:	2000      	movs	r0, #0
 80095f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095fa:	462a      	mov	r2, r5
 80095fc:	f000 fd89 	bl	800a112 <_realloc_r>
 8009600:	4606      	mov	r6, r0
 8009602:	2800      	cmp	r0, #0
 8009604:	d1e0      	bne.n	80095c8 <__ssputs_r+0x5c>
 8009606:	6921      	ldr	r1, [r4, #16]
 8009608:	4650      	mov	r0, sl
 800960a:	f7fe fb81 	bl	8007d10 <_free_r>
 800960e:	230c      	movs	r3, #12
 8009610:	f8ca 3000 	str.w	r3, [sl]
 8009614:	89a3      	ldrh	r3, [r4, #12]
 8009616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800961a:	81a3      	strh	r3, [r4, #12]
 800961c:	f04f 30ff 	mov.w	r0, #4294967295
 8009620:	e7e9      	b.n	80095f6 <__ssputs_r+0x8a>
	...

08009624 <_svfiprintf_r>:
 8009624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009628:	4698      	mov	r8, r3
 800962a:	898b      	ldrh	r3, [r1, #12]
 800962c:	061b      	lsls	r3, r3, #24
 800962e:	b09d      	sub	sp, #116	@ 0x74
 8009630:	4607      	mov	r7, r0
 8009632:	460d      	mov	r5, r1
 8009634:	4614      	mov	r4, r2
 8009636:	d510      	bpl.n	800965a <_svfiprintf_r+0x36>
 8009638:	690b      	ldr	r3, [r1, #16]
 800963a:	b973      	cbnz	r3, 800965a <_svfiprintf_r+0x36>
 800963c:	2140      	movs	r1, #64	@ 0x40
 800963e:	f7fe fbdb 	bl	8007df8 <_malloc_r>
 8009642:	6028      	str	r0, [r5, #0]
 8009644:	6128      	str	r0, [r5, #16]
 8009646:	b930      	cbnz	r0, 8009656 <_svfiprintf_r+0x32>
 8009648:	230c      	movs	r3, #12
 800964a:	603b      	str	r3, [r7, #0]
 800964c:	f04f 30ff 	mov.w	r0, #4294967295
 8009650:	b01d      	add	sp, #116	@ 0x74
 8009652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009656:	2340      	movs	r3, #64	@ 0x40
 8009658:	616b      	str	r3, [r5, #20]
 800965a:	2300      	movs	r3, #0
 800965c:	9309      	str	r3, [sp, #36]	@ 0x24
 800965e:	2320      	movs	r3, #32
 8009660:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009664:	f8cd 800c 	str.w	r8, [sp, #12]
 8009668:	2330      	movs	r3, #48	@ 0x30
 800966a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009808 <_svfiprintf_r+0x1e4>
 800966e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009672:	f04f 0901 	mov.w	r9, #1
 8009676:	4623      	mov	r3, r4
 8009678:	469a      	mov	sl, r3
 800967a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800967e:	b10a      	cbz	r2, 8009684 <_svfiprintf_r+0x60>
 8009680:	2a25      	cmp	r2, #37	@ 0x25
 8009682:	d1f9      	bne.n	8009678 <_svfiprintf_r+0x54>
 8009684:	ebba 0b04 	subs.w	fp, sl, r4
 8009688:	d00b      	beq.n	80096a2 <_svfiprintf_r+0x7e>
 800968a:	465b      	mov	r3, fp
 800968c:	4622      	mov	r2, r4
 800968e:	4629      	mov	r1, r5
 8009690:	4638      	mov	r0, r7
 8009692:	f7ff ff6b 	bl	800956c <__ssputs_r>
 8009696:	3001      	adds	r0, #1
 8009698:	f000 80a7 	beq.w	80097ea <_svfiprintf_r+0x1c6>
 800969c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800969e:	445a      	add	r2, fp
 80096a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80096a2:	f89a 3000 	ldrb.w	r3, [sl]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f000 809f 	beq.w	80097ea <_svfiprintf_r+0x1c6>
 80096ac:	2300      	movs	r3, #0
 80096ae:	f04f 32ff 	mov.w	r2, #4294967295
 80096b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096b6:	f10a 0a01 	add.w	sl, sl, #1
 80096ba:	9304      	str	r3, [sp, #16]
 80096bc:	9307      	str	r3, [sp, #28]
 80096be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80096c4:	4654      	mov	r4, sl
 80096c6:	2205      	movs	r2, #5
 80096c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096cc:	484e      	ldr	r0, [pc, #312]	@ (8009808 <_svfiprintf_r+0x1e4>)
 80096ce:	f7f6 fd87 	bl	80001e0 <memchr>
 80096d2:	9a04      	ldr	r2, [sp, #16]
 80096d4:	b9d8      	cbnz	r0, 800970e <_svfiprintf_r+0xea>
 80096d6:	06d0      	lsls	r0, r2, #27
 80096d8:	bf44      	itt	mi
 80096da:	2320      	movmi	r3, #32
 80096dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096e0:	0711      	lsls	r1, r2, #28
 80096e2:	bf44      	itt	mi
 80096e4:	232b      	movmi	r3, #43	@ 0x2b
 80096e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096ea:	f89a 3000 	ldrb.w	r3, [sl]
 80096ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80096f0:	d015      	beq.n	800971e <_svfiprintf_r+0xfa>
 80096f2:	9a07      	ldr	r2, [sp, #28]
 80096f4:	4654      	mov	r4, sl
 80096f6:	2000      	movs	r0, #0
 80096f8:	f04f 0c0a 	mov.w	ip, #10
 80096fc:	4621      	mov	r1, r4
 80096fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009702:	3b30      	subs	r3, #48	@ 0x30
 8009704:	2b09      	cmp	r3, #9
 8009706:	d94b      	bls.n	80097a0 <_svfiprintf_r+0x17c>
 8009708:	b1b0      	cbz	r0, 8009738 <_svfiprintf_r+0x114>
 800970a:	9207      	str	r2, [sp, #28]
 800970c:	e014      	b.n	8009738 <_svfiprintf_r+0x114>
 800970e:	eba0 0308 	sub.w	r3, r0, r8
 8009712:	fa09 f303 	lsl.w	r3, r9, r3
 8009716:	4313      	orrs	r3, r2
 8009718:	9304      	str	r3, [sp, #16]
 800971a:	46a2      	mov	sl, r4
 800971c:	e7d2      	b.n	80096c4 <_svfiprintf_r+0xa0>
 800971e:	9b03      	ldr	r3, [sp, #12]
 8009720:	1d19      	adds	r1, r3, #4
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	9103      	str	r1, [sp, #12]
 8009726:	2b00      	cmp	r3, #0
 8009728:	bfbb      	ittet	lt
 800972a:	425b      	neglt	r3, r3
 800972c:	f042 0202 	orrlt.w	r2, r2, #2
 8009730:	9307      	strge	r3, [sp, #28]
 8009732:	9307      	strlt	r3, [sp, #28]
 8009734:	bfb8      	it	lt
 8009736:	9204      	strlt	r2, [sp, #16]
 8009738:	7823      	ldrb	r3, [r4, #0]
 800973a:	2b2e      	cmp	r3, #46	@ 0x2e
 800973c:	d10a      	bne.n	8009754 <_svfiprintf_r+0x130>
 800973e:	7863      	ldrb	r3, [r4, #1]
 8009740:	2b2a      	cmp	r3, #42	@ 0x2a
 8009742:	d132      	bne.n	80097aa <_svfiprintf_r+0x186>
 8009744:	9b03      	ldr	r3, [sp, #12]
 8009746:	1d1a      	adds	r2, r3, #4
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	9203      	str	r2, [sp, #12]
 800974c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009750:	3402      	adds	r4, #2
 8009752:	9305      	str	r3, [sp, #20]
 8009754:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009818 <_svfiprintf_r+0x1f4>
 8009758:	7821      	ldrb	r1, [r4, #0]
 800975a:	2203      	movs	r2, #3
 800975c:	4650      	mov	r0, sl
 800975e:	f7f6 fd3f 	bl	80001e0 <memchr>
 8009762:	b138      	cbz	r0, 8009774 <_svfiprintf_r+0x150>
 8009764:	9b04      	ldr	r3, [sp, #16]
 8009766:	eba0 000a 	sub.w	r0, r0, sl
 800976a:	2240      	movs	r2, #64	@ 0x40
 800976c:	4082      	lsls	r2, r0
 800976e:	4313      	orrs	r3, r2
 8009770:	3401      	adds	r4, #1
 8009772:	9304      	str	r3, [sp, #16]
 8009774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009778:	4824      	ldr	r0, [pc, #144]	@ (800980c <_svfiprintf_r+0x1e8>)
 800977a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800977e:	2206      	movs	r2, #6
 8009780:	f7f6 fd2e 	bl	80001e0 <memchr>
 8009784:	2800      	cmp	r0, #0
 8009786:	d036      	beq.n	80097f6 <_svfiprintf_r+0x1d2>
 8009788:	4b21      	ldr	r3, [pc, #132]	@ (8009810 <_svfiprintf_r+0x1ec>)
 800978a:	bb1b      	cbnz	r3, 80097d4 <_svfiprintf_r+0x1b0>
 800978c:	9b03      	ldr	r3, [sp, #12]
 800978e:	3307      	adds	r3, #7
 8009790:	f023 0307 	bic.w	r3, r3, #7
 8009794:	3308      	adds	r3, #8
 8009796:	9303      	str	r3, [sp, #12]
 8009798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800979a:	4433      	add	r3, r6
 800979c:	9309      	str	r3, [sp, #36]	@ 0x24
 800979e:	e76a      	b.n	8009676 <_svfiprintf_r+0x52>
 80097a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80097a4:	460c      	mov	r4, r1
 80097a6:	2001      	movs	r0, #1
 80097a8:	e7a8      	b.n	80096fc <_svfiprintf_r+0xd8>
 80097aa:	2300      	movs	r3, #0
 80097ac:	3401      	adds	r4, #1
 80097ae:	9305      	str	r3, [sp, #20]
 80097b0:	4619      	mov	r1, r3
 80097b2:	f04f 0c0a 	mov.w	ip, #10
 80097b6:	4620      	mov	r0, r4
 80097b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097bc:	3a30      	subs	r2, #48	@ 0x30
 80097be:	2a09      	cmp	r2, #9
 80097c0:	d903      	bls.n	80097ca <_svfiprintf_r+0x1a6>
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d0c6      	beq.n	8009754 <_svfiprintf_r+0x130>
 80097c6:	9105      	str	r1, [sp, #20]
 80097c8:	e7c4      	b.n	8009754 <_svfiprintf_r+0x130>
 80097ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80097ce:	4604      	mov	r4, r0
 80097d0:	2301      	movs	r3, #1
 80097d2:	e7f0      	b.n	80097b6 <_svfiprintf_r+0x192>
 80097d4:	ab03      	add	r3, sp, #12
 80097d6:	9300      	str	r3, [sp, #0]
 80097d8:	462a      	mov	r2, r5
 80097da:	4b0e      	ldr	r3, [pc, #56]	@ (8009814 <_svfiprintf_r+0x1f0>)
 80097dc:	a904      	add	r1, sp, #16
 80097de:	4638      	mov	r0, r7
 80097e0:	f7fc fc94 	bl	800610c <_printf_float>
 80097e4:	1c42      	adds	r2, r0, #1
 80097e6:	4606      	mov	r6, r0
 80097e8:	d1d6      	bne.n	8009798 <_svfiprintf_r+0x174>
 80097ea:	89ab      	ldrh	r3, [r5, #12]
 80097ec:	065b      	lsls	r3, r3, #25
 80097ee:	f53f af2d 	bmi.w	800964c <_svfiprintf_r+0x28>
 80097f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097f4:	e72c      	b.n	8009650 <_svfiprintf_r+0x2c>
 80097f6:	ab03      	add	r3, sp, #12
 80097f8:	9300      	str	r3, [sp, #0]
 80097fa:	462a      	mov	r2, r5
 80097fc:	4b05      	ldr	r3, [pc, #20]	@ (8009814 <_svfiprintf_r+0x1f0>)
 80097fe:	a904      	add	r1, sp, #16
 8009800:	4638      	mov	r0, r7
 8009802:	f7fc ff1b 	bl	800663c <_printf_i>
 8009806:	e7ed      	b.n	80097e4 <_svfiprintf_r+0x1c0>
 8009808:	0800a8f5 	.word	0x0800a8f5
 800980c:	0800a8ff 	.word	0x0800a8ff
 8009810:	0800610d 	.word	0x0800610d
 8009814:	0800956d 	.word	0x0800956d
 8009818:	0800a8fb 	.word	0x0800a8fb

0800981c <__sflush_r>:
 800981c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009824:	0716      	lsls	r6, r2, #28
 8009826:	4605      	mov	r5, r0
 8009828:	460c      	mov	r4, r1
 800982a:	d454      	bmi.n	80098d6 <__sflush_r+0xba>
 800982c:	684b      	ldr	r3, [r1, #4]
 800982e:	2b00      	cmp	r3, #0
 8009830:	dc02      	bgt.n	8009838 <__sflush_r+0x1c>
 8009832:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009834:	2b00      	cmp	r3, #0
 8009836:	dd48      	ble.n	80098ca <__sflush_r+0xae>
 8009838:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800983a:	2e00      	cmp	r6, #0
 800983c:	d045      	beq.n	80098ca <__sflush_r+0xae>
 800983e:	2300      	movs	r3, #0
 8009840:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009844:	682f      	ldr	r7, [r5, #0]
 8009846:	6a21      	ldr	r1, [r4, #32]
 8009848:	602b      	str	r3, [r5, #0]
 800984a:	d030      	beq.n	80098ae <__sflush_r+0x92>
 800984c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800984e:	89a3      	ldrh	r3, [r4, #12]
 8009850:	0759      	lsls	r1, r3, #29
 8009852:	d505      	bpl.n	8009860 <__sflush_r+0x44>
 8009854:	6863      	ldr	r3, [r4, #4]
 8009856:	1ad2      	subs	r2, r2, r3
 8009858:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800985a:	b10b      	cbz	r3, 8009860 <__sflush_r+0x44>
 800985c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800985e:	1ad2      	subs	r2, r2, r3
 8009860:	2300      	movs	r3, #0
 8009862:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009864:	6a21      	ldr	r1, [r4, #32]
 8009866:	4628      	mov	r0, r5
 8009868:	47b0      	blx	r6
 800986a:	1c43      	adds	r3, r0, #1
 800986c:	89a3      	ldrh	r3, [r4, #12]
 800986e:	d106      	bne.n	800987e <__sflush_r+0x62>
 8009870:	6829      	ldr	r1, [r5, #0]
 8009872:	291d      	cmp	r1, #29
 8009874:	d82b      	bhi.n	80098ce <__sflush_r+0xb2>
 8009876:	4a2a      	ldr	r2, [pc, #168]	@ (8009920 <__sflush_r+0x104>)
 8009878:	40ca      	lsrs	r2, r1
 800987a:	07d6      	lsls	r6, r2, #31
 800987c:	d527      	bpl.n	80098ce <__sflush_r+0xb2>
 800987e:	2200      	movs	r2, #0
 8009880:	6062      	str	r2, [r4, #4]
 8009882:	04d9      	lsls	r1, r3, #19
 8009884:	6922      	ldr	r2, [r4, #16]
 8009886:	6022      	str	r2, [r4, #0]
 8009888:	d504      	bpl.n	8009894 <__sflush_r+0x78>
 800988a:	1c42      	adds	r2, r0, #1
 800988c:	d101      	bne.n	8009892 <__sflush_r+0x76>
 800988e:	682b      	ldr	r3, [r5, #0]
 8009890:	b903      	cbnz	r3, 8009894 <__sflush_r+0x78>
 8009892:	6560      	str	r0, [r4, #84]	@ 0x54
 8009894:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009896:	602f      	str	r7, [r5, #0]
 8009898:	b1b9      	cbz	r1, 80098ca <__sflush_r+0xae>
 800989a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800989e:	4299      	cmp	r1, r3
 80098a0:	d002      	beq.n	80098a8 <__sflush_r+0x8c>
 80098a2:	4628      	mov	r0, r5
 80098a4:	f7fe fa34 	bl	8007d10 <_free_r>
 80098a8:	2300      	movs	r3, #0
 80098aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80098ac:	e00d      	b.n	80098ca <__sflush_r+0xae>
 80098ae:	2301      	movs	r3, #1
 80098b0:	4628      	mov	r0, r5
 80098b2:	47b0      	blx	r6
 80098b4:	4602      	mov	r2, r0
 80098b6:	1c50      	adds	r0, r2, #1
 80098b8:	d1c9      	bne.n	800984e <__sflush_r+0x32>
 80098ba:	682b      	ldr	r3, [r5, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d0c6      	beq.n	800984e <__sflush_r+0x32>
 80098c0:	2b1d      	cmp	r3, #29
 80098c2:	d001      	beq.n	80098c8 <__sflush_r+0xac>
 80098c4:	2b16      	cmp	r3, #22
 80098c6:	d11e      	bne.n	8009906 <__sflush_r+0xea>
 80098c8:	602f      	str	r7, [r5, #0]
 80098ca:	2000      	movs	r0, #0
 80098cc:	e022      	b.n	8009914 <__sflush_r+0xf8>
 80098ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098d2:	b21b      	sxth	r3, r3
 80098d4:	e01b      	b.n	800990e <__sflush_r+0xf2>
 80098d6:	690f      	ldr	r7, [r1, #16]
 80098d8:	2f00      	cmp	r7, #0
 80098da:	d0f6      	beq.n	80098ca <__sflush_r+0xae>
 80098dc:	0793      	lsls	r3, r2, #30
 80098de:	680e      	ldr	r6, [r1, #0]
 80098e0:	bf08      	it	eq
 80098e2:	694b      	ldreq	r3, [r1, #20]
 80098e4:	600f      	str	r7, [r1, #0]
 80098e6:	bf18      	it	ne
 80098e8:	2300      	movne	r3, #0
 80098ea:	eba6 0807 	sub.w	r8, r6, r7
 80098ee:	608b      	str	r3, [r1, #8]
 80098f0:	f1b8 0f00 	cmp.w	r8, #0
 80098f4:	dde9      	ble.n	80098ca <__sflush_r+0xae>
 80098f6:	6a21      	ldr	r1, [r4, #32]
 80098f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80098fa:	4643      	mov	r3, r8
 80098fc:	463a      	mov	r2, r7
 80098fe:	4628      	mov	r0, r5
 8009900:	47b0      	blx	r6
 8009902:	2800      	cmp	r0, #0
 8009904:	dc08      	bgt.n	8009918 <__sflush_r+0xfc>
 8009906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800990a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800990e:	81a3      	strh	r3, [r4, #12]
 8009910:	f04f 30ff 	mov.w	r0, #4294967295
 8009914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009918:	4407      	add	r7, r0
 800991a:	eba8 0800 	sub.w	r8, r8, r0
 800991e:	e7e7      	b.n	80098f0 <__sflush_r+0xd4>
 8009920:	20400001 	.word	0x20400001

08009924 <_fflush_r>:
 8009924:	b538      	push	{r3, r4, r5, lr}
 8009926:	690b      	ldr	r3, [r1, #16]
 8009928:	4605      	mov	r5, r0
 800992a:	460c      	mov	r4, r1
 800992c:	b913      	cbnz	r3, 8009934 <_fflush_r+0x10>
 800992e:	2500      	movs	r5, #0
 8009930:	4628      	mov	r0, r5
 8009932:	bd38      	pop	{r3, r4, r5, pc}
 8009934:	b118      	cbz	r0, 800993e <_fflush_r+0x1a>
 8009936:	6a03      	ldr	r3, [r0, #32]
 8009938:	b90b      	cbnz	r3, 800993e <_fflush_r+0x1a>
 800993a:	f7fd fa37 	bl	8006dac <__sinit>
 800993e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d0f3      	beq.n	800992e <_fflush_r+0xa>
 8009946:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009948:	07d0      	lsls	r0, r2, #31
 800994a:	d404      	bmi.n	8009956 <_fflush_r+0x32>
 800994c:	0599      	lsls	r1, r3, #22
 800994e:	d402      	bmi.n	8009956 <_fflush_r+0x32>
 8009950:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009952:	f7fd fb7a 	bl	800704a <__retarget_lock_acquire_recursive>
 8009956:	4628      	mov	r0, r5
 8009958:	4621      	mov	r1, r4
 800995a:	f7ff ff5f 	bl	800981c <__sflush_r>
 800995e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009960:	07da      	lsls	r2, r3, #31
 8009962:	4605      	mov	r5, r0
 8009964:	d4e4      	bmi.n	8009930 <_fflush_r+0xc>
 8009966:	89a3      	ldrh	r3, [r4, #12]
 8009968:	059b      	lsls	r3, r3, #22
 800996a:	d4e1      	bmi.n	8009930 <_fflush_r+0xc>
 800996c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800996e:	f7fd fb6d 	bl	800704c <__retarget_lock_release_recursive>
 8009972:	e7dd      	b.n	8009930 <_fflush_r+0xc>

08009974 <memmove>:
 8009974:	4288      	cmp	r0, r1
 8009976:	b510      	push	{r4, lr}
 8009978:	eb01 0402 	add.w	r4, r1, r2
 800997c:	d902      	bls.n	8009984 <memmove+0x10>
 800997e:	4284      	cmp	r4, r0
 8009980:	4623      	mov	r3, r4
 8009982:	d807      	bhi.n	8009994 <memmove+0x20>
 8009984:	1e43      	subs	r3, r0, #1
 8009986:	42a1      	cmp	r1, r4
 8009988:	d008      	beq.n	800999c <memmove+0x28>
 800998a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800998e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009992:	e7f8      	b.n	8009986 <memmove+0x12>
 8009994:	4402      	add	r2, r0
 8009996:	4601      	mov	r1, r0
 8009998:	428a      	cmp	r2, r1
 800999a:	d100      	bne.n	800999e <memmove+0x2a>
 800999c:	bd10      	pop	{r4, pc}
 800999e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099a6:	e7f7      	b.n	8009998 <memmove+0x24>

080099a8 <strncmp>:
 80099a8:	b510      	push	{r4, lr}
 80099aa:	b16a      	cbz	r2, 80099c8 <strncmp+0x20>
 80099ac:	3901      	subs	r1, #1
 80099ae:	1884      	adds	r4, r0, r2
 80099b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099b4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d103      	bne.n	80099c4 <strncmp+0x1c>
 80099bc:	42a0      	cmp	r0, r4
 80099be:	d001      	beq.n	80099c4 <strncmp+0x1c>
 80099c0:	2a00      	cmp	r2, #0
 80099c2:	d1f5      	bne.n	80099b0 <strncmp+0x8>
 80099c4:	1ad0      	subs	r0, r2, r3
 80099c6:	bd10      	pop	{r4, pc}
 80099c8:	4610      	mov	r0, r2
 80099ca:	e7fc      	b.n	80099c6 <strncmp+0x1e>

080099cc <_sbrk_r>:
 80099cc:	b538      	push	{r3, r4, r5, lr}
 80099ce:	4d06      	ldr	r5, [pc, #24]	@ (80099e8 <_sbrk_r+0x1c>)
 80099d0:	2300      	movs	r3, #0
 80099d2:	4604      	mov	r4, r0
 80099d4:	4608      	mov	r0, r1
 80099d6:	602b      	str	r3, [r5, #0]
 80099d8:	f7f8 fe16 	bl	8002608 <_sbrk>
 80099dc:	1c43      	adds	r3, r0, #1
 80099de:	d102      	bne.n	80099e6 <_sbrk_r+0x1a>
 80099e0:	682b      	ldr	r3, [r5, #0]
 80099e2:	b103      	cbz	r3, 80099e6 <_sbrk_r+0x1a>
 80099e4:	6023      	str	r3, [r4, #0]
 80099e6:	bd38      	pop	{r3, r4, r5, pc}
 80099e8:	200005c4 	.word	0x200005c4

080099ec <memcpy>:
 80099ec:	440a      	add	r2, r1
 80099ee:	4291      	cmp	r1, r2
 80099f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80099f4:	d100      	bne.n	80099f8 <memcpy+0xc>
 80099f6:	4770      	bx	lr
 80099f8:	b510      	push	{r4, lr}
 80099fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a02:	4291      	cmp	r1, r2
 8009a04:	d1f9      	bne.n	80099fa <memcpy+0xe>
 8009a06:	bd10      	pop	{r4, pc}

08009a08 <nan>:
 8009a08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009a10 <nan+0x8>
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop
 8009a10:	00000000 	.word	0x00000000
 8009a14:	7ff80000 	.word	0x7ff80000

08009a18 <__assert_func>:
 8009a18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a1a:	4614      	mov	r4, r2
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	4b09      	ldr	r3, [pc, #36]	@ (8009a44 <__assert_func+0x2c>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4605      	mov	r5, r0
 8009a24:	68d8      	ldr	r0, [r3, #12]
 8009a26:	b14c      	cbz	r4, 8009a3c <__assert_func+0x24>
 8009a28:	4b07      	ldr	r3, [pc, #28]	@ (8009a48 <__assert_func+0x30>)
 8009a2a:	9100      	str	r1, [sp, #0]
 8009a2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a30:	4906      	ldr	r1, [pc, #24]	@ (8009a4c <__assert_func+0x34>)
 8009a32:	462b      	mov	r3, r5
 8009a34:	f000 fba8 	bl	800a188 <fiprintf>
 8009a38:	f000 fbb8 	bl	800a1ac <abort>
 8009a3c:	4b04      	ldr	r3, [pc, #16]	@ (8009a50 <__assert_func+0x38>)
 8009a3e:	461c      	mov	r4, r3
 8009a40:	e7f3      	b.n	8009a2a <__assert_func+0x12>
 8009a42:	bf00      	nop
 8009a44:	20000024 	.word	0x20000024
 8009a48:	0800a90e 	.word	0x0800a90e
 8009a4c:	0800a91b 	.word	0x0800a91b
 8009a50:	0800a949 	.word	0x0800a949

08009a54 <_calloc_r>:
 8009a54:	b570      	push	{r4, r5, r6, lr}
 8009a56:	fba1 5402 	umull	r5, r4, r1, r2
 8009a5a:	b934      	cbnz	r4, 8009a6a <_calloc_r+0x16>
 8009a5c:	4629      	mov	r1, r5
 8009a5e:	f7fe f9cb 	bl	8007df8 <_malloc_r>
 8009a62:	4606      	mov	r6, r0
 8009a64:	b928      	cbnz	r0, 8009a72 <_calloc_r+0x1e>
 8009a66:	4630      	mov	r0, r6
 8009a68:	bd70      	pop	{r4, r5, r6, pc}
 8009a6a:	220c      	movs	r2, #12
 8009a6c:	6002      	str	r2, [r0, #0]
 8009a6e:	2600      	movs	r6, #0
 8009a70:	e7f9      	b.n	8009a66 <_calloc_r+0x12>
 8009a72:	462a      	mov	r2, r5
 8009a74:	4621      	mov	r1, r4
 8009a76:	f7fd fa6a 	bl	8006f4e <memset>
 8009a7a:	e7f4      	b.n	8009a66 <_calloc_r+0x12>

08009a7c <rshift>:
 8009a7c:	6903      	ldr	r3, [r0, #16]
 8009a7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009a82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a86:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009a8a:	f100 0414 	add.w	r4, r0, #20
 8009a8e:	dd45      	ble.n	8009b1c <rshift+0xa0>
 8009a90:	f011 011f 	ands.w	r1, r1, #31
 8009a94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009a98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009a9c:	d10c      	bne.n	8009ab8 <rshift+0x3c>
 8009a9e:	f100 0710 	add.w	r7, r0, #16
 8009aa2:	4629      	mov	r1, r5
 8009aa4:	42b1      	cmp	r1, r6
 8009aa6:	d334      	bcc.n	8009b12 <rshift+0x96>
 8009aa8:	1a9b      	subs	r3, r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	1eea      	subs	r2, r5, #3
 8009aae:	4296      	cmp	r6, r2
 8009ab0:	bf38      	it	cc
 8009ab2:	2300      	movcc	r3, #0
 8009ab4:	4423      	add	r3, r4
 8009ab6:	e015      	b.n	8009ae4 <rshift+0x68>
 8009ab8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009abc:	f1c1 0820 	rsb	r8, r1, #32
 8009ac0:	40cf      	lsrs	r7, r1
 8009ac2:	f105 0e04 	add.w	lr, r5, #4
 8009ac6:	46a1      	mov	r9, r4
 8009ac8:	4576      	cmp	r6, lr
 8009aca:	46f4      	mov	ip, lr
 8009acc:	d815      	bhi.n	8009afa <rshift+0x7e>
 8009ace:	1a9a      	subs	r2, r3, r2
 8009ad0:	0092      	lsls	r2, r2, #2
 8009ad2:	3a04      	subs	r2, #4
 8009ad4:	3501      	adds	r5, #1
 8009ad6:	42ae      	cmp	r6, r5
 8009ad8:	bf38      	it	cc
 8009ada:	2200      	movcc	r2, #0
 8009adc:	18a3      	adds	r3, r4, r2
 8009ade:	50a7      	str	r7, [r4, r2]
 8009ae0:	b107      	cbz	r7, 8009ae4 <rshift+0x68>
 8009ae2:	3304      	adds	r3, #4
 8009ae4:	1b1a      	subs	r2, r3, r4
 8009ae6:	42a3      	cmp	r3, r4
 8009ae8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009aec:	bf08      	it	eq
 8009aee:	2300      	moveq	r3, #0
 8009af0:	6102      	str	r2, [r0, #16]
 8009af2:	bf08      	it	eq
 8009af4:	6143      	streq	r3, [r0, #20]
 8009af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009afa:	f8dc c000 	ldr.w	ip, [ip]
 8009afe:	fa0c fc08 	lsl.w	ip, ip, r8
 8009b02:	ea4c 0707 	orr.w	r7, ip, r7
 8009b06:	f849 7b04 	str.w	r7, [r9], #4
 8009b0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b0e:	40cf      	lsrs	r7, r1
 8009b10:	e7da      	b.n	8009ac8 <rshift+0x4c>
 8009b12:	f851 cb04 	ldr.w	ip, [r1], #4
 8009b16:	f847 cf04 	str.w	ip, [r7, #4]!
 8009b1a:	e7c3      	b.n	8009aa4 <rshift+0x28>
 8009b1c:	4623      	mov	r3, r4
 8009b1e:	e7e1      	b.n	8009ae4 <rshift+0x68>

08009b20 <__hexdig_fun>:
 8009b20:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009b24:	2b09      	cmp	r3, #9
 8009b26:	d802      	bhi.n	8009b2e <__hexdig_fun+0xe>
 8009b28:	3820      	subs	r0, #32
 8009b2a:	b2c0      	uxtb	r0, r0
 8009b2c:	4770      	bx	lr
 8009b2e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009b32:	2b05      	cmp	r3, #5
 8009b34:	d801      	bhi.n	8009b3a <__hexdig_fun+0x1a>
 8009b36:	3847      	subs	r0, #71	@ 0x47
 8009b38:	e7f7      	b.n	8009b2a <__hexdig_fun+0xa>
 8009b3a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009b3e:	2b05      	cmp	r3, #5
 8009b40:	d801      	bhi.n	8009b46 <__hexdig_fun+0x26>
 8009b42:	3827      	subs	r0, #39	@ 0x27
 8009b44:	e7f1      	b.n	8009b2a <__hexdig_fun+0xa>
 8009b46:	2000      	movs	r0, #0
 8009b48:	4770      	bx	lr
	...

08009b4c <__gethex>:
 8009b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b50:	b085      	sub	sp, #20
 8009b52:	468a      	mov	sl, r1
 8009b54:	9302      	str	r3, [sp, #8]
 8009b56:	680b      	ldr	r3, [r1, #0]
 8009b58:	9001      	str	r0, [sp, #4]
 8009b5a:	4690      	mov	r8, r2
 8009b5c:	1c9c      	adds	r4, r3, #2
 8009b5e:	46a1      	mov	r9, r4
 8009b60:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009b64:	2830      	cmp	r0, #48	@ 0x30
 8009b66:	d0fa      	beq.n	8009b5e <__gethex+0x12>
 8009b68:	eba9 0303 	sub.w	r3, r9, r3
 8009b6c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009b70:	f7ff ffd6 	bl	8009b20 <__hexdig_fun>
 8009b74:	4605      	mov	r5, r0
 8009b76:	2800      	cmp	r0, #0
 8009b78:	d168      	bne.n	8009c4c <__gethex+0x100>
 8009b7a:	49a0      	ldr	r1, [pc, #640]	@ (8009dfc <__gethex+0x2b0>)
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	4648      	mov	r0, r9
 8009b80:	f7ff ff12 	bl	80099a8 <strncmp>
 8009b84:	4607      	mov	r7, r0
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d167      	bne.n	8009c5a <__gethex+0x10e>
 8009b8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009b8e:	4626      	mov	r6, r4
 8009b90:	f7ff ffc6 	bl	8009b20 <__hexdig_fun>
 8009b94:	2800      	cmp	r0, #0
 8009b96:	d062      	beq.n	8009c5e <__gethex+0x112>
 8009b98:	4623      	mov	r3, r4
 8009b9a:	7818      	ldrb	r0, [r3, #0]
 8009b9c:	2830      	cmp	r0, #48	@ 0x30
 8009b9e:	4699      	mov	r9, r3
 8009ba0:	f103 0301 	add.w	r3, r3, #1
 8009ba4:	d0f9      	beq.n	8009b9a <__gethex+0x4e>
 8009ba6:	f7ff ffbb 	bl	8009b20 <__hexdig_fun>
 8009baa:	fab0 f580 	clz	r5, r0
 8009bae:	096d      	lsrs	r5, r5, #5
 8009bb0:	f04f 0b01 	mov.w	fp, #1
 8009bb4:	464a      	mov	r2, r9
 8009bb6:	4616      	mov	r6, r2
 8009bb8:	3201      	adds	r2, #1
 8009bba:	7830      	ldrb	r0, [r6, #0]
 8009bbc:	f7ff ffb0 	bl	8009b20 <__hexdig_fun>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	d1f8      	bne.n	8009bb6 <__gethex+0x6a>
 8009bc4:	498d      	ldr	r1, [pc, #564]	@ (8009dfc <__gethex+0x2b0>)
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	4630      	mov	r0, r6
 8009bca:	f7ff feed 	bl	80099a8 <strncmp>
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	d13f      	bne.n	8009c52 <__gethex+0x106>
 8009bd2:	b944      	cbnz	r4, 8009be6 <__gethex+0x9a>
 8009bd4:	1c74      	adds	r4, r6, #1
 8009bd6:	4622      	mov	r2, r4
 8009bd8:	4616      	mov	r6, r2
 8009bda:	3201      	adds	r2, #1
 8009bdc:	7830      	ldrb	r0, [r6, #0]
 8009bde:	f7ff ff9f 	bl	8009b20 <__hexdig_fun>
 8009be2:	2800      	cmp	r0, #0
 8009be4:	d1f8      	bne.n	8009bd8 <__gethex+0x8c>
 8009be6:	1ba4      	subs	r4, r4, r6
 8009be8:	00a7      	lsls	r7, r4, #2
 8009bea:	7833      	ldrb	r3, [r6, #0]
 8009bec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009bf0:	2b50      	cmp	r3, #80	@ 0x50
 8009bf2:	d13e      	bne.n	8009c72 <__gethex+0x126>
 8009bf4:	7873      	ldrb	r3, [r6, #1]
 8009bf6:	2b2b      	cmp	r3, #43	@ 0x2b
 8009bf8:	d033      	beq.n	8009c62 <__gethex+0x116>
 8009bfa:	2b2d      	cmp	r3, #45	@ 0x2d
 8009bfc:	d034      	beq.n	8009c68 <__gethex+0x11c>
 8009bfe:	1c71      	adds	r1, r6, #1
 8009c00:	2400      	movs	r4, #0
 8009c02:	7808      	ldrb	r0, [r1, #0]
 8009c04:	f7ff ff8c 	bl	8009b20 <__hexdig_fun>
 8009c08:	1e43      	subs	r3, r0, #1
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	2b18      	cmp	r3, #24
 8009c0e:	d830      	bhi.n	8009c72 <__gethex+0x126>
 8009c10:	f1a0 0210 	sub.w	r2, r0, #16
 8009c14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009c18:	f7ff ff82 	bl	8009b20 <__hexdig_fun>
 8009c1c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009c20:	fa5f fc8c 	uxtb.w	ip, ip
 8009c24:	f1bc 0f18 	cmp.w	ip, #24
 8009c28:	f04f 030a 	mov.w	r3, #10
 8009c2c:	d91e      	bls.n	8009c6c <__gethex+0x120>
 8009c2e:	b104      	cbz	r4, 8009c32 <__gethex+0xe6>
 8009c30:	4252      	negs	r2, r2
 8009c32:	4417      	add	r7, r2
 8009c34:	f8ca 1000 	str.w	r1, [sl]
 8009c38:	b1ed      	cbz	r5, 8009c76 <__gethex+0x12a>
 8009c3a:	f1bb 0f00 	cmp.w	fp, #0
 8009c3e:	bf0c      	ite	eq
 8009c40:	2506      	moveq	r5, #6
 8009c42:	2500      	movne	r5, #0
 8009c44:	4628      	mov	r0, r5
 8009c46:	b005      	add	sp, #20
 8009c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4c:	2500      	movs	r5, #0
 8009c4e:	462c      	mov	r4, r5
 8009c50:	e7b0      	b.n	8009bb4 <__gethex+0x68>
 8009c52:	2c00      	cmp	r4, #0
 8009c54:	d1c7      	bne.n	8009be6 <__gethex+0x9a>
 8009c56:	4627      	mov	r7, r4
 8009c58:	e7c7      	b.n	8009bea <__gethex+0x9e>
 8009c5a:	464e      	mov	r6, r9
 8009c5c:	462f      	mov	r7, r5
 8009c5e:	2501      	movs	r5, #1
 8009c60:	e7c3      	b.n	8009bea <__gethex+0x9e>
 8009c62:	2400      	movs	r4, #0
 8009c64:	1cb1      	adds	r1, r6, #2
 8009c66:	e7cc      	b.n	8009c02 <__gethex+0xb6>
 8009c68:	2401      	movs	r4, #1
 8009c6a:	e7fb      	b.n	8009c64 <__gethex+0x118>
 8009c6c:	fb03 0002 	mla	r0, r3, r2, r0
 8009c70:	e7ce      	b.n	8009c10 <__gethex+0xc4>
 8009c72:	4631      	mov	r1, r6
 8009c74:	e7de      	b.n	8009c34 <__gethex+0xe8>
 8009c76:	eba6 0309 	sub.w	r3, r6, r9
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	4629      	mov	r1, r5
 8009c7e:	2b07      	cmp	r3, #7
 8009c80:	dc0a      	bgt.n	8009c98 <__gethex+0x14c>
 8009c82:	9801      	ldr	r0, [sp, #4]
 8009c84:	f7fe f944 	bl	8007f10 <_Balloc>
 8009c88:	4604      	mov	r4, r0
 8009c8a:	b940      	cbnz	r0, 8009c9e <__gethex+0x152>
 8009c8c:	4b5c      	ldr	r3, [pc, #368]	@ (8009e00 <__gethex+0x2b4>)
 8009c8e:	4602      	mov	r2, r0
 8009c90:	21e4      	movs	r1, #228	@ 0xe4
 8009c92:	485c      	ldr	r0, [pc, #368]	@ (8009e04 <__gethex+0x2b8>)
 8009c94:	f7ff fec0 	bl	8009a18 <__assert_func>
 8009c98:	3101      	adds	r1, #1
 8009c9a:	105b      	asrs	r3, r3, #1
 8009c9c:	e7ef      	b.n	8009c7e <__gethex+0x132>
 8009c9e:	f100 0a14 	add.w	sl, r0, #20
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	4655      	mov	r5, sl
 8009ca6:	469b      	mov	fp, r3
 8009ca8:	45b1      	cmp	r9, r6
 8009caa:	d337      	bcc.n	8009d1c <__gethex+0x1d0>
 8009cac:	f845 bb04 	str.w	fp, [r5], #4
 8009cb0:	eba5 050a 	sub.w	r5, r5, sl
 8009cb4:	10ad      	asrs	r5, r5, #2
 8009cb6:	6125      	str	r5, [r4, #16]
 8009cb8:	4658      	mov	r0, fp
 8009cba:	f7fe fa1b 	bl	80080f4 <__hi0bits>
 8009cbe:	016d      	lsls	r5, r5, #5
 8009cc0:	f8d8 6000 	ldr.w	r6, [r8]
 8009cc4:	1a2d      	subs	r5, r5, r0
 8009cc6:	42b5      	cmp	r5, r6
 8009cc8:	dd54      	ble.n	8009d74 <__gethex+0x228>
 8009cca:	1bad      	subs	r5, r5, r6
 8009ccc:	4629      	mov	r1, r5
 8009cce:	4620      	mov	r0, r4
 8009cd0:	f7fe fda7 	bl	8008822 <__any_on>
 8009cd4:	4681      	mov	r9, r0
 8009cd6:	b178      	cbz	r0, 8009cf8 <__gethex+0x1ac>
 8009cd8:	1e6b      	subs	r3, r5, #1
 8009cda:	1159      	asrs	r1, r3, #5
 8009cdc:	f003 021f 	and.w	r2, r3, #31
 8009ce0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009ce4:	f04f 0901 	mov.w	r9, #1
 8009ce8:	fa09 f202 	lsl.w	r2, r9, r2
 8009cec:	420a      	tst	r2, r1
 8009cee:	d003      	beq.n	8009cf8 <__gethex+0x1ac>
 8009cf0:	454b      	cmp	r3, r9
 8009cf2:	dc36      	bgt.n	8009d62 <__gethex+0x216>
 8009cf4:	f04f 0902 	mov.w	r9, #2
 8009cf8:	4629      	mov	r1, r5
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	f7ff febe 	bl	8009a7c <rshift>
 8009d00:	442f      	add	r7, r5
 8009d02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d06:	42bb      	cmp	r3, r7
 8009d08:	da42      	bge.n	8009d90 <__gethex+0x244>
 8009d0a:	9801      	ldr	r0, [sp, #4]
 8009d0c:	4621      	mov	r1, r4
 8009d0e:	f7fe f93f 	bl	8007f90 <_Bfree>
 8009d12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d14:	2300      	movs	r3, #0
 8009d16:	6013      	str	r3, [r2, #0]
 8009d18:	25a3      	movs	r5, #163	@ 0xa3
 8009d1a:	e793      	b.n	8009c44 <__gethex+0xf8>
 8009d1c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009d20:	2a2e      	cmp	r2, #46	@ 0x2e
 8009d22:	d012      	beq.n	8009d4a <__gethex+0x1fe>
 8009d24:	2b20      	cmp	r3, #32
 8009d26:	d104      	bne.n	8009d32 <__gethex+0x1e6>
 8009d28:	f845 bb04 	str.w	fp, [r5], #4
 8009d2c:	f04f 0b00 	mov.w	fp, #0
 8009d30:	465b      	mov	r3, fp
 8009d32:	7830      	ldrb	r0, [r6, #0]
 8009d34:	9303      	str	r3, [sp, #12]
 8009d36:	f7ff fef3 	bl	8009b20 <__hexdig_fun>
 8009d3a:	9b03      	ldr	r3, [sp, #12]
 8009d3c:	f000 000f 	and.w	r0, r0, #15
 8009d40:	4098      	lsls	r0, r3
 8009d42:	ea4b 0b00 	orr.w	fp, fp, r0
 8009d46:	3304      	adds	r3, #4
 8009d48:	e7ae      	b.n	8009ca8 <__gethex+0x15c>
 8009d4a:	45b1      	cmp	r9, r6
 8009d4c:	d8ea      	bhi.n	8009d24 <__gethex+0x1d8>
 8009d4e:	492b      	ldr	r1, [pc, #172]	@ (8009dfc <__gethex+0x2b0>)
 8009d50:	9303      	str	r3, [sp, #12]
 8009d52:	2201      	movs	r2, #1
 8009d54:	4630      	mov	r0, r6
 8009d56:	f7ff fe27 	bl	80099a8 <strncmp>
 8009d5a:	9b03      	ldr	r3, [sp, #12]
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	d1e1      	bne.n	8009d24 <__gethex+0x1d8>
 8009d60:	e7a2      	b.n	8009ca8 <__gethex+0x15c>
 8009d62:	1ea9      	subs	r1, r5, #2
 8009d64:	4620      	mov	r0, r4
 8009d66:	f7fe fd5c 	bl	8008822 <__any_on>
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	d0c2      	beq.n	8009cf4 <__gethex+0x1a8>
 8009d6e:	f04f 0903 	mov.w	r9, #3
 8009d72:	e7c1      	b.n	8009cf8 <__gethex+0x1ac>
 8009d74:	da09      	bge.n	8009d8a <__gethex+0x23e>
 8009d76:	1b75      	subs	r5, r6, r5
 8009d78:	4621      	mov	r1, r4
 8009d7a:	9801      	ldr	r0, [sp, #4]
 8009d7c:	462a      	mov	r2, r5
 8009d7e:	f7fe fb17 	bl	80083b0 <__lshift>
 8009d82:	1b7f      	subs	r7, r7, r5
 8009d84:	4604      	mov	r4, r0
 8009d86:	f100 0a14 	add.w	sl, r0, #20
 8009d8a:	f04f 0900 	mov.w	r9, #0
 8009d8e:	e7b8      	b.n	8009d02 <__gethex+0x1b6>
 8009d90:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009d94:	42bd      	cmp	r5, r7
 8009d96:	dd6f      	ble.n	8009e78 <__gethex+0x32c>
 8009d98:	1bed      	subs	r5, r5, r7
 8009d9a:	42ae      	cmp	r6, r5
 8009d9c:	dc34      	bgt.n	8009e08 <__gethex+0x2bc>
 8009d9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d022      	beq.n	8009dec <__gethex+0x2a0>
 8009da6:	2b03      	cmp	r3, #3
 8009da8:	d024      	beq.n	8009df4 <__gethex+0x2a8>
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d115      	bne.n	8009dda <__gethex+0x28e>
 8009dae:	42ae      	cmp	r6, r5
 8009db0:	d113      	bne.n	8009dda <__gethex+0x28e>
 8009db2:	2e01      	cmp	r6, #1
 8009db4:	d10b      	bne.n	8009dce <__gethex+0x282>
 8009db6:	9a02      	ldr	r2, [sp, #8]
 8009db8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009dbc:	6013      	str	r3, [r2, #0]
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	6123      	str	r3, [r4, #16]
 8009dc2:	f8ca 3000 	str.w	r3, [sl]
 8009dc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dc8:	2562      	movs	r5, #98	@ 0x62
 8009dca:	601c      	str	r4, [r3, #0]
 8009dcc:	e73a      	b.n	8009c44 <__gethex+0xf8>
 8009dce:	1e71      	subs	r1, r6, #1
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	f7fe fd26 	bl	8008822 <__any_on>
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	d1ed      	bne.n	8009db6 <__gethex+0x26a>
 8009dda:	9801      	ldr	r0, [sp, #4]
 8009ddc:	4621      	mov	r1, r4
 8009dde:	f7fe f8d7 	bl	8007f90 <_Bfree>
 8009de2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009de4:	2300      	movs	r3, #0
 8009de6:	6013      	str	r3, [r2, #0]
 8009de8:	2550      	movs	r5, #80	@ 0x50
 8009dea:	e72b      	b.n	8009c44 <__gethex+0xf8>
 8009dec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1f3      	bne.n	8009dda <__gethex+0x28e>
 8009df2:	e7e0      	b.n	8009db6 <__gethex+0x26a>
 8009df4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d1dd      	bne.n	8009db6 <__gethex+0x26a>
 8009dfa:	e7ee      	b.n	8009dda <__gethex+0x28e>
 8009dfc:	0800a8f3 	.word	0x0800a8f3
 8009e00:	0800a889 	.word	0x0800a889
 8009e04:	0800a94a 	.word	0x0800a94a
 8009e08:	1e6f      	subs	r7, r5, #1
 8009e0a:	f1b9 0f00 	cmp.w	r9, #0
 8009e0e:	d130      	bne.n	8009e72 <__gethex+0x326>
 8009e10:	b127      	cbz	r7, 8009e1c <__gethex+0x2d0>
 8009e12:	4639      	mov	r1, r7
 8009e14:	4620      	mov	r0, r4
 8009e16:	f7fe fd04 	bl	8008822 <__any_on>
 8009e1a:	4681      	mov	r9, r0
 8009e1c:	117a      	asrs	r2, r7, #5
 8009e1e:	2301      	movs	r3, #1
 8009e20:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009e24:	f007 071f 	and.w	r7, r7, #31
 8009e28:	40bb      	lsls	r3, r7
 8009e2a:	4213      	tst	r3, r2
 8009e2c:	4629      	mov	r1, r5
 8009e2e:	4620      	mov	r0, r4
 8009e30:	bf18      	it	ne
 8009e32:	f049 0902 	orrne.w	r9, r9, #2
 8009e36:	f7ff fe21 	bl	8009a7c <rshift>
 8009e3a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009e3e:	1b76      	subs	r6, r6, r5
 8009e40:	2502      	movs	r5, #2
 8009e42:	f1b9 0f00 	cmp.w	r9, #0
 8009e46:	d047      	beq.n	8009ed8 <__gethex+0x38c>
 8009e48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	d015      	beq.n	8009e7c <__gethex+0x330>
 8009e50:	2b03      	cmp	r3, #3
 8009e52:	d017      	beq.n	8009e84 <__gethex+0x338>
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d109      	bne.n	8009e6c <__gethex+0x320>
 8009e58:	f019 0f02 	tst.w	r9, #2
 8009e5c:	d006      	beq.n	8009e6c <__gethex+0x320>
 8009e5e:	f8da 3000 	ldr.w	r3, [sl]
 8009e62:	ea49 0903 	orr.w	r9, r9, r3
 8009e66:	f019 0f01 	tst.w	r9, #1
 8009e6a:	d10e      	bne.n	8009e8a <__gethex+0x33e>
 8009e6c:	f045 0510 	orr.w	r5, r5, #16
 8009e70:	e032      	b.n	8009ed8 <__gethex+0x38c>
 8009e72:	f04f 0901 	mov.w	r9, #1
 8009e76:	e7d1      	b.n	8009e1c <__gethex+0x2d0>
 8009e78:	2501      	movs	r5, #1
 8009e7a:	e7e2      	b.n	8009e42 <__gethex+0x2f6>
 8009e7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e7e:	f1c3 0301 	rsb	r3, r3, #1
 8009e82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009e84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d0f0      	beq.n	8009e6c <__gethex+0x320>
 8009e8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009e8e:	f104 0314 	add.w	r3, r4, #20
 8009e92:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009e96:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009e9a:	f04f 0c00 	mov.w	ip, #0
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ea4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009ea8:	d01b      	beq.n	8009ee2 <__gethex+0x396>
 8009eaa:	3201      	adds	r2, #1
 8009eac:	6002      	str	r2, [r0, #0]
 8009eae:	2d02      	cmp	r5, #2
 8009eb0:	f104 0314 	add.w	r3, r4, #20
 8009eb4:	d13c      	bne.n	8009f30 <__gethex+0x3e4>
 8009eb6:	f8d8 2000 	ldr.w	r2, [r8]
 8009eba:	3a01      	subs	r2, #1
 8009ebc:	42b2      	cmp	r2, r6
 8009ebe:	d109      	bne.n	8009ed4 <__gethex+0x388>
 8009ec0:	1171      	asrs	r1, r6, #5
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009ec8:	f006 061f 	and.w	r6, r6, #31
 8009ecc:	fa02 f606 	lsl.w	r6, r2, r6
 8009ed0:	421e      	tst	r6, r3
 8009ed2:	d13a      	bne.n	8009f4a <__gethex+0x3fe>
 8009ed4:	f045 0520 	orr.w	r5, r5, #32
 8009ed8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009eda:	601c      	str	r4, [r3, #0]
 8009edc:	9b02      	ldr	r3, [sp, #8]
 8009ede:	601f      	str	r7, [r3, #0]
 8009ee0:	e6b0      	b.n	8009c44 <__gethex+0xf8>
 8009ee2:	4299      	cmp	r1, r3
 8009ee4:	f843 cc04 	str.w	ip, [r3, #-4]
 8009ee8:	d8d9      	bhi.n	8009e9e <__gethex+0x352>
 8009eea:	68a3      	ldr	r3, [r4, #8]
 8009eec:	459b      	cmp	fp, r3
 8009eee:	db17      	blt.n	8009f20 <__gethex+0x3d4>
 8009ef0:	6861      	ldr	r1, [r4, #4]
 8009ef2:	9801      	ldr	r0, [sp, #4]
 8009ef4:	3101      	adds	r1, #1
 8009ef6:	f7fe f80b 	bl	8007f10 <_Balloc>
 8009efa:	4681      	mov	r9, r0
 8009efc:	b918      	cbnz	r0, 8009f06 <__gethex+0x3ba>
 8009efe:	4b1a      	ldr	r3, [pc, #104]	@ (8009f68 <__gethex+0x41c>)
 8009f00:	4602      	mov	r2, r0
 8009f02:	2184      	movs	r1, #132	@ 0x84
 8009f04:	e6c5      	b.n	8009c92 <__gethex+0x146>
 8009f06:	6922      	ldr	r2, [r4, #16]
 8009f08:	3202      	adds	r2, #2
 8009f0a:	f104 010c 	add.w	r1, r4, #12
 8009f0e:	0092      	lsls	r2, r2, #2
 8009f10:	300c      	adds	r0, #12
 8009f12:	f7ff fd6b 	bl	80099ec <memcpy>
 8009f16:	4621      	mov	r1, r4
 8009f18:	9801      	ldr	r0, [sp, #4]
 8009f1a:	f7fe f839 	bl	8007f90 <_Bfree>
 8009f1e:	464c      	mov	r4, r9
 8009f20:	6923      	ldr	r3, [r4, #16]
 8009f22:	1c5a      	adds	r2, r3, #1
 8009f24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f28:	6122      	str	r2, [r4, #16]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	615a      	str	r2, [r3, #20]
 8009f2e:	e7be      	b.n	8009eae <__gethex+0x362>
 8009f30:	6922      	ldr	r2, [r4, #16]
 8009f32:	455a      	cmp	r2, fp
 8009f34:	dd0b      	ble.n	8009f4e <__gethex+0x402>
 8009f36:	2101      	movs	r1, #1
 8009f38:	4620      	mov	r0, r4
 8009f3a:	f7ff fd9f 	bl	8009a7c <rshift>
 8009f3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f42:	3701      	adds	r7, #1
 8009f44:	42bb      	cmp	r3, r7
 8009f46:	f6ff aee0 	blt.w	8009d0a <__gethex+0x1be>
 8009f4a:	2501      	movs	r5, #1
 8009f4c:	e7c2      	b.n	8009ed4 <__gethex+0x388>
 8009f4e:	f016 061f 	ands.w	r6, r6, #31
 8009f52:	d0fa      	beq.n	8009f4a <__gethex+0x3fe>
 8009f54:	4453      	add	r3, sl
 8009f56:	f1c6 0620 	rsb	r6, r6, #32
 8009f5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009f5e:	f7fe f8c9 	bl	80080f4 <__hi0bits>
 8009f62:	42b0      	cmp	r0, r6
 8009f64:	dbe7      	blt.n	8009f36 <__gethex+0x3ea>
 8009f66:	e7f0      	b.n	8009f4a <__gethex+0x3fe>
 8009f68:	0800a889 	.word	0x0800a889

08009f6c <L_shift>:
 8009f6c:	f1c2 0208 	rsb	r2, r2, #8
 8009f70:	0092      	lsls	r2, r2, #2
 8009f72:	b570      	push	{r4, r5, r6, lr}
 8009f74:	f1c2 0620 	rsb	r6, r2, #32
 8009f78:	6843      	ldr	r3, [r0, #4]
 8009f7a:	6804      	ldr	r4, [r0, #0]
 8009f7c:	fa03 f506 	lsl.w	r5, r3, r6
 8009f80:	432c      	orrs	r4, r5
 8009f82:	40d3      	lsrs	r3, r2
 8009f84:	6004      	str	r4, [r0, #0]
 8009f86:	f840 3f04 	str.w	r3, [r0, #4]!
 8009f8a:	4288      	cmp	r0, r1
 8009f8c:	d3f4      	bcc.n	8009f78 <L_shift+0xc>
 8009f8e:	bd70      	pop	{r4, r5, r6, pc}

08009f90 <__match>:
 8009f90:	b530      	push	{r4, r5, lr}
 8009f92:	6803      	ldr	r3, [r0, #0]
 8009f94:	3301      	adds	r3, #1
 8009f96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f9a:	b914      	cbnz	r4, 8009fa2 <__match+0x12>
 8009f9c:	6003      	str	r3, [r0, #0]
 8009f9e:	2001      	movs	r0, #1
 8009fa0:	bd30      	pop	{r4, r5, pc}
 8009fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fa6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009faa:	2d19      	cmp	r5, #25
 8009fac:	bf98      	it	ls
 8009fae:	3220      	addls	r2, #32
 8009fb0:	42a2      	cmp	r2, r4
 8009fb2:	d0f0      	beq.n	8009f96 <__match+0x6>
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	e7f3      	b.n	8009fa0 <__match+0x10>

08009fb8 <__hexnan>:
 8009fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fbc:	680b      	ldr	r3, [r1, #0]
 8009fbe:	6801      	ldr	r1, [r0, #0]
 8009fc0:	115e      	asrs	r6, r3, #5
 8009fc2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009fc6:	f013 031f 	ands.w	r3, r3, #31
 8009fca:	b087      	sub	sp, #28
 8009fcc:	bf18      	it	ne
 8009fce:	3604      	addne	r6, #4
 8009fd0:	2500      	movs	r5, #0
 8009fd2:	1f37      	subs	r7, r6, #4
 8009fd4:	4682      	mov	sl, r0
 8009fd6:	4690      	mov	r8, r2
 8009fd8:	9301      	str	r3, [sp, #4]
 8009fda:	f846 5c04 	str.w	r5, [r6, #-4]
 8009fde:	46b9      	mov	r9, r7
 8009fe0:	463c      	mov	r4, r7
 8009fe2:	9502      	str	r5, [sp, #8]
 8009fe4:	46ab      	mov	fp, r5
 8009fe6:	784a      	ldrb	r2, [r1, #1]
 8009fe8:	1c4b      	adds	r3, r1, #1
 8009fea:	9303      	str	r3, [sp, #12]
 8009fec:	b342      	cbz	r2, 800a040 <__hexnan+0x88>
 8009fee:	4610      	mov	r0, r2
 8009ff0:	9105      	str	r1, [sp, #20]
 8009ff2:	9204      	str	r2, [sp, #16]
 8009ff4:	f7ff fd94 	bl	8009b20 <__hexdig_fun>
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	d151      	bne.n	800a0a0 <__hexnan+0xe8>
 8009ffc:	9a04      	ldr	r2, [sp, #16]
 8009ffe:	9905      	ldr	r1, [sp, #20]
 800a000:	2a20      	cmp	r2, #32
 800a002:	d818      	bhi.n	800a036 <__hexnan+0x7e>
 800a004:	9b02      	ldr	r3, [sp, #8]
 800a006:	459b      	cmp	fp, r3
 800a008:	dd13      	ble.n	800a032 <__hexnan+0x7a>
 800a00a:	454c      	cmp	r4, r9
 800a00c:	d206      	bcs.n	800a01c <__hexnan+0x64>
 800a00e:	2d07      	cmp	r5, #7
 800a010:	dc04      	bgt.n	800a01c <__hexnan+0x64>
 800a012:	462a      	mov	r2, r5
 800a014:	4649      	mov	r1, r9
 800a016:	4620      	mov	r0, r4
 800a018:	f7ff ffa8 	bl	8009f6c <L_shift>
 800a01c:	4544      	cmp	r4, r8
 800a01e:	d952      	bls.n	800a0c6 <__hexnan+0x10e>
 800a020:	2300      	movs	r3, #0
 800a022:	f1a4 0904 	sub.w	r9, r4, #4
 800a026:	f844 3c04 	str.w	r3, [r4, #-4]
 800a02a:	f8cd b008 	str.w	fp, [sp, #8]
 800a02e:	464c      	mov	r4, r9
 800a030:	461d      	mov	r5, r3
 800a032:	9903      	ldr	r1, [sp, #12]
 800a034:	e7d7      	b.n	8009fe6 <__hexnan+0x2e>
 800a036:	2a29      	cmp	r2, #41	@ 0x29
 800a038:	d157      	bne.n	800a0ea <__hexnan+0x132>
 800a03a:	3102      	adds	r1, #2
 800a03c:	f8ca 1000 	str.w	r1, [sl]
 800a040:	f1bb 0f00 	cmp.w	fp, #0
 800a044:	d051      	beq.n	800a0ea <__hexnan+0x132>
 800a046:	454c      	cmp	r4, r9
 800a048:	d206      	bcs.n	800a058 <__hexnan+0xa0>
 800a04a:	2d07      	cmp	r5, #7
 800a04c:	dc04      	bgt.n	800a058 <__hexnan+0xa0>
 800a04e:	462a      	mov	r2, r5
 800a050:	4649      	mov	r1, r9
 800a052:	4620      	mov	r0, r4
 800a054:	f7ff ff8a 	bl	8009f6c <L_shift>
 800a058:	4544      	cmp	r4, r8
 800a05a:	d936      	bls.n	800a0ca <__hexnan+0x112>
 800a05c:	f1a8 0204 	sub.w	r2, r8, #4
 800a060:	4623      	mov	r3, r4
 800a062:	f853 1b04 	ldr.w	r1, [r3], #4
 800a066:	f842 1f04 	str.w	r1, [r2, #4]!
 800a06a:	429f      	cmp	r7, r3
 800a06c:	d2f9      	bcs.n	800a062 <__hexnan+0xaa>
 800a06e:	1b3b      	subs	r3, r7, r4
 800a070:	f023 0303 	bic.w	r3, r3, #3
 800a074:	3304      	adds	r3, #4
 800a076:	3401      	adds	r4, #1
 800a078:	3e03      	subs	r6, #3
 800a07a:	42b4      	cmp	r4, r6
 800a07c:	bf88      	it	hi
 800a07e:	2304      	movhi	r3, #4
 800a080:	4443      	add	r3, r8
 800a082:	2200      	movs	r2, #0
 800a084:	f843 2b04 	str.w	r2, [r3], #4
 800a088:	429f      	cmp	r7, r3
 800a08a:	d2fb      	bcs.n	800a084 <__hexnan+0xcc>
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	b91b      	cbnz	r3, 800a098 <__hexnan+0xe0>
 800a090:	4547      	cmp	r7, r8
 800a092:	d128      	bne.n	800a0e6 <__hexnan+0x12e>
 800a094:	2301      	movs	r3, #1
 800a096:	603b      	str	r3, [r7, #0]
 800a098:	2005      	movs	r0, #5
 800a09a:	b007      	add	sp, #28
 800a09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a0:	3501      	adds	r5, #1
 800a0a2:	2d08      	cmp	r5, #8
 800a0a4:	f10b 0b01 	add.w	fp, fp, #1
 800a0a8:	dd06      	ble.n	800a0b8 <__hexnan+0x100>
 800a0aa:	4544      	cmp	r4, r8
 800a0ac:	d9c1      	bls.n	800a032 <__hexnan+0x7a>
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0b4:	2501      	movs	r5, #1
 800a0b6:	3c04      	subs	r4, #4
 800a0b8:	6822      	ldr	r2, [r4, #0]
 800a0ba:	f000 000f 	and.w	r0, r0, #15
 800a0be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a0c2:	6020      	str	r0, [r4, #0]
 800a0c4:	e7b5      	b.n	800a032 <__hexnan+0x7a>
 800a0c6:	2508      	movs	r5, #8
 800a0c8:	e7b3      	b.n	800a032 <__hexnan+0x7a>
 800a0ca:	9b01      	ldr	r3, [sp, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d0dd      	beq.n	800a08c <__hexnan+0xd4>
 800a0d0:	f1c3 0320 	rsb	r3, r3, #32
 800a0d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0d8:	40da      	lsrs	r2, r3
 800a0da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a0de:	4013      	ands	r3, r2
 800a0e0:	f846 3c04 	str.w	r3, [r6, #-4]
 800a0e4:	e7d2      	b.n	800a08c <__hexnan+0xd4>
 800a0e6:	3f04      	subs	r7, #4
 800a0e8:	e7d0      	b.n	800a08c <__hexnan+0xd4>
 800a0ea:	2004      	movs	r0, #4
 800a0ec:	e7d5      	b.n	800a09a <__hexnan+0xe2>

0800a0ee <__ascii_mbtowc>:
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	b901      	cbnz	r1, 800a0f4 <__ascii_mbtowc+0x6>
 800a0f2:	a901      	add	r1, sp, #4
 800a0f4:	b142      	cbz	r2, 800a108 <__ascii_mbtowc+0x1a>
 800a0f6:	b14b      	cbz	r3, 800a10c <__ascii_mbtowc+0x1e>
 800a0f8:	7813      	ldrb	r3, [r2, #0]
 800a0fa:	600b      	str	r3, [r1, #0]
 800a0fc:	7812      	ldrb	r2, [r2, #0]
 800a0fe:	1e10      	subs	r0, r2, #0
 800a100:	bf18      	it	ne
 800a102:	2001      	movne	r0, #1
 800a104:	b002      	add	sp, #8
 800a106:	4770      	bx	lr
 800a108:	4610      	mov	r0, r2
 800a10a:	e7fb      	b.n	800a104 <__ascii_mbtowc+0x16>
 800a10c:	f06f 0001 	mvn.w	r0, #1
 800a110:	e7f8      	b.n	800a104 <__ascii_mbtowc+0x16>

0800a112 <_realloc_r>:
 800a112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a116:	4607      	mov	r7, r0
 800a118:	4614      	mov	r4, r2
 800a11a:	460d      	mov	r5, r1
 800a11c:	b921      	cbnz	r1, 800a128 <_realloc_r+0x16>
 800a11e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a122:	4611      	mov	r1, r2
 800a124:	f7fd be68 	b.w	8007df8 <_malloc_r>
 800a128:	b92a      	cbnz	r2, 800a136 <_realloc_r+0x24>
 800a12a:	f7fd fdf1 	bl	8007d10 <_free_r>
 800a12e:	4625      	mov	r5, r4
 800a130:	4628      	mov	r0, r5
 800a132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a136:	f000 f840 	bl	800a1ba <_malloc_usable_size_r>
 800a13a:	4284      	cmp	r4, r0
 800a13c:	4606      	mov	r6, r0
 800a13e:	d802      	bhi.n	800a146 <_realloc_r+0x34>
 800a140:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a144:	d8f4      	bhi.n	800a130 <_realloc_r+0x1e>
 800a146:	4621      	mov	r1, r4
 800a148:	4638      	mov	r0, r7
 800a14a:	f7fd fe55 	bl	8007df8 <_malloc_r>
 800a14e:	4680      	mov	r8, r0
 800a150:	b908      	cbnz	r0, 800a156 <_realloc_r+0x44>
 800a152:	4645      	mov	r5, r8
 800a154:	e7ec      	b.n	800a130 <_realloc_r+0x1e>
 800a156:	42b4      	cmp	r4, r6
 800a158:	4622      	mov	r2, r4
 800a15a:	4629      	mov	r1, r5
 800a15c:	bf28      	it	cs
 800a15e:	4632      	movcs	r2, r6
 800a160:	f7ff fc44 	bl	80099ec <memcpy>
 800a164:	4629      	mov	r1, r5
 800a166:	4638      	mov	r0, r7
 800a168:	f7fd fdd2 	bl	8007d10 <_free_r>
 800a16c:	e7f1      	b.n	800a152 <_realloc_r+0x40>

0800a16e <__ascii_wctomb>:
 800a16e:	4603      	mov	r3, r0
 800a170:	4608      	mov	r0, r1
 800a172:	b141      	cbz	r1, 800a186 <__ascii_wctomb+0x18>
 800a174:	2aff      	cmp	r2, #255	@ 0xff
 800a176:	d904      	bls.n	800a182 <__ascii_wctomb+0x14>
 800a178:	228a      	movs	r2, #138	@ 0x8a
 800a17a:	601a      	str	r2, [r3, #0]
 800a17c:	f04f 30ff 	mov.w	r0, #4294967295
 800a180:	4770      	bx	lr
 800a182:	700a      	strb	r2, [r1, #0]
 800a184:	2001      	movs	r0, #1
 800a186:	4770      	bx	lr

0800a188 <fiprintf>:
 800a188:	b40e      	push	{r1, r2, r3}
 800a18a:	b503      	push	{r0, r1, lr}
 800a18c:	4601      	mov	r1, r0
 800a18e:	ab03      	add	r3, sp, #12
 800a190:	4805      	ldr	r0, [pc, #20]	@ (800a1a8 <fiprintf+0x20>)
 800a192:	f853 2b04 	ldr.w	r2, [r3], #4
 800a196:	6800      	ldr	r0, [r0, #0]
 800a198:	9301      	str	r3, [sp, #4]
 800a19a:	f000 f83f 	bl	800a21c <_vfiprintf_r>
 800a19e:	b002      	add	sp, #8
 800a1a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1a4:	b003      	add	sp, #12
 800a1a6:	4770      	bx	lr
 800a1a8:	20000024 	.word	0x20000024

0800a1ac <abort>:
 800a1ac:	b508      	push	{r3, lr}
 800a1ae:	2006      	movs	r0, #6
 800a1b0:	f000 fa08 	bl	800a5c4 <raise>
 800a1b4:	2001      	movs	r0, #1
 800a1b6:	f7f8 f9af 	bl	8002518 <_exit>

0800a1ba <_malloc_usable_size_r>:
 800a1ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1be:	1f18      	subs	r0, r3, #4
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	bfbc      	itt	lt
 800a1c4:	580b      	ldrlt	r3, [r1, r0]
 800a1c6:	18c0      	addlt	r0, r0, r3
 800a1c8:	4770      	bx	lr

0800a1ca <__sfputc_r>:
 800a1ca:	6893      	ldr	r3, [r2, #8]
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	b410      	push	{r4}
 800a1d2:	6093      	str	r3, [r2, #8]
 800a1d4:	da08      	bge.n	800a1e8 <__sfputc_r+0x1e>
 800a1d6:	6994      	ldr	r4, [r2, #24]
 800a1d8:	42a3      	cmp	r3, r4
 800a1da:	db01      	blt.n	800a1e0 <__sfputc_r+0x16>
 800a1dc:	290a      	cmp	r1, #10
 800a1de:	d103      	bne.n	800a1e8 <__sfputc_r+0x1e>
 800a1e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1e4:	f000 b932 	b.w	800a44c <__swbuf_r>
 800a1e8:	6813      	ldr	r3, [r2, #0]
 800a1ea:	1c58      	adds	r0, r3, #1
 800a1ec:	6010      	str	r0, [r2, #0]
 800a1ee:	7019      	strb	r1, [r3, #0]
 800a1f0:	4608      	mov	r0, r1
 800a1f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <__sfputs_r>:
 800a1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fa:	4606      	mov	r6, r0
 800a1fc:	460f      	mov	r7, r1
 800a1fe:	4614      	mov	r4, r2
 800a200:	18d5      	adds	r5, r2, r3
 800a202:	42ac      	cmp	r4, r5
 800a204:	d101      	bne.n	800a20a <__sfputs_r+0x12>
 800a206:	2000      	movs	r0, #0
 800a208:	e007      	b.n	800a21a <__sfputs_r+0x22>
 800a20a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a20e:	463a      	mov	r2, r7
 800a210:	4630      	mov	r0, r6
 800a212:	f7ff ffda 	bl	800a1ca <__sfputc_r>
 800a216:	1c43      	adds	r3, r0, #1
 800a218:	d1f3      	bne.n	800a202 <__sfputs_r+0xa>
 800a21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a21c <_vfiprintf_r>:
 800a21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a220:	460d      	mov	r5, r1
 800a222:	b09d      	sub	sp, #116	@ 0x74
 800a224:	4614      	mov	r4, r2
 800a226:	4698      	mov	r8, r3
 800a228:	4606      	mov	r6, r0
 800a22a:	b118      	cbz	r0, 800a234 <_vfiprintf_r+0x18>
 800a22c:	6a03      	ldr	r3, [r0, #32]
 800a22e:	b90b      	cbnz	r3, 800a234 <_vfiprintf_r+0x18>
 800a230:	f7fc fdbc 	bl	8006dac <__sinit>
 800a234:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a236:	07d9      	lsls	r1, r3, #31
 800a238:	d405      	bmi.n	800a246 <_vfiprintf_r+0x2a>
 800a23a:	89ab      	ldrh	r3, [r5, #12]
 800a23c:	059a      	lsls	r2, r3, #22
 800a23e:	d402      	bmi.n	800a246 <_vfiprintf_r+0x2a>
 800a240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a242:	f7fc ff02 	bl	800704a <__retarget_lock_acquire_recursive>
 800a246:	89ab      	ldrh	r3, [r5, #12]
 800a248:	071b      	lsls	r3, r3, #28
 800a24a:	d501      	bpl.n	800a250 <_vfiprintf_r+0x34>
 800a24c:	692b      	ldr	r3, [r5, #16]
 800a24e:	b99b      	cbnz	r3, 800a278 <_vfiprintf_r+0x5c>
 800a250:	4629      	mov	r1, r5
 800a252:	4630      	mov	r0, r6
 800a254:	f000 f938 	bl	800a4c8 <__swsetup_r>
 800a258:	b170      	cbz	r0, 800a278 <_vfiprintf_r+0x5c>
 800a25a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a25c:	07dc      	lsls	r4, r3, #31
 800a25e:	d504      	bpl.n	800a26a <_vfiprintf_r+0x4e>
 800a260:	f04f 30ff 	mov.w	r0, #4294967295
 800a264:	b01d      	add	sp, #116	@ 0x74
 800a266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a26a:	89ab      	ldrh	r3, [r5, #12]
 800a26c:	0598      	lsls	r0, r3, #22
 800a26e:	d4f7      	bmi.n	800a260 <_vfiprintf_r+0x44>
 800a270:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a272:	f7fc feeb 	bl	800704c <__retarget_lock_release_recursive>
 800a276:	e7f3      	b.n	800a260 <_vfiprintf_r+0x44>
 800a278:	2300      	movs	r3, #0
 800a27a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a27c:	2320      	movs	r3, #32
 800a27e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a282:	f8cd 800c 	str.w	r8, [sp, #12]
 800a286:	2330      	movs	r3, #48	@ 0x30
 800a288:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a438 <_vfiprintf_r+0x21c>
 800a28c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a290:	f04f 0901 	mov.w	r9, #1
 800a294:	4623      	mov	r3, r4
 800a296:	469a      	mov	sl, r3
 800a298:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a29c:	b10a      	cbz	r2, 800a2a2 <_vfiprintf_r+0x86>
 800a29e:	2a25      	cmp	r2, #37	@ 0x25
 800a2a0:	d1f9      	bne.n	800a296 <_vfiprintf_r+0x7a>
 800a2a2:	ebba 0b04 	subs.w	fp, sl, r4
 800a2a6:	d00b      	beq.n	800a2c0 <_vfiprintf_r+0xa4>
 800a2a8:	465b      	mov	r3, fp
 800a2aa:	4622      	mov	r2, r4
 800a2ac:	4629      	mov	r1, r5
 800a2ae:	4630      	mov	r0, r6
 800a2b0:	f7ff ffa2 	bl	800a1f8 <__sfputs_r>
 800a2b4:	3001      	adds	r0, #1
 800a2b6:	f000 80a7 	beq.w	800a408 <_vfiprintf_r+0x1ec>
 800a2ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2bc:	445a      	add	r2, fp
 800a2be:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2c0:	f89a 3000 	ldrb.w	r3, [sl]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	f000 809f 	beq.w	800a408 <_vfiprintf_r+0x1ec>
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a2d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2d4:	f10a 0a01 	add.w	sl, sl, #1
 800a2d8:	9304      	str	r3, [sp, #16]
 800a2da:	9307      	str	r3, [sp, #28]
 800a2dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2e0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2e2:	4654      	mov	r4, sl
 800a2e4:	2205      	movs	r2, #5
 800a2e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2ea:	4853      	ldr	r0, [pc, #332]	@ (800a438 <_vfiprintf_r+0x21c>)
 800a2ec:	f7f5 ff78 	bl	80001e0 <memchr>
 800a2f0:	9a04      	ldr	r2, [sp, #16]
 800a2f2:	b9d8      	cbnz	r0, 800a32c <_vfiprintf_r+0x110>
 800a2f4:	06d1      	lsls	r1, r2, #27
 800a2f6:	bf44      	itt	mi
 800a2f8:	2320      	movmi	r3, #32
 800a2fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2fe:	0713      	lsls	r3, r2, #28
 800a300:	bf44      	itt	mi
 800a302:	232b      	movmi	r3, #43	@ 0x2b
 800a304:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a308:	f89a 3000 	ldrb.w	r3, [sl]
 800a30c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a30e:	d015      	beq.n	800a33c <_vfiprintf_r+0x120>
 800a310:	9a07      	ldr	r2, [sp, #28]
 800a312:	4654      	mov	r4, sl
 800a314:	2000      	movs	r0, #0
 800a316:	f04f 0c0a 	mov.w	ip, #10
 800a31a:	4621      	mov	r1, r4
 800a31c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a320:	3b30      	subs	r3, #48	@ 0x30
 800a322:	2b09      	cmp	r3, #9
 800a324:	d94b      	bls.n	800a3be <_vfiprintf_r+0x1a2>
 800a326:	b1b0      	cbz	r0, 800a356 <_vfiprintf_r+0x13a>
 800a328:	9207      	str	r2, [sp, #28]
 800a32a:	e014      	b.n	800a356 <_vfiprintf_r+0x13a>
 800a32c:	eba0 0308 	sub.w	r3, r0, r8
 800a330:	fa09 f303 	lsl.w	r3, r9, r3
 800a334:	4313      	orrs	r3, r2
 800a336:	9304      	str	r3, [sp, #16]
 800a338:	46a2      	mov	sl, r4
 800a33a:	e7d2      	b.n	800a2e2 <_vfiprintf_r+0xc6>
 800a33c:	9b03      	ldr	r3, [sp, #12]
 800a33e:	1d19      	adds	r1, r3, #4
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	9103      	str	r1, [sp, #12]
 800a344:	2b00      	cmp	r3, #0
 800a346:	bfbb      	ittet	lt
 800a348:	425b      	neglt	r3, r3
 800a34a:	f042 0202 	orrlt.w	r2, r2, #2
 800a34e:	9307      	strge	r3, [sp, #28]
 800a350:	9307      	strlt	r3, [sp, #28]
 800a352:	bfb8      	it	lt
 800a354:	9204      	strlt	r2, [sp, #16]
 800a356:	7823      	ldrb	r3, [r4, #0]
 800a358:	2b2e      	cmp	r3, #46	@ 0x2e
 800a35a:	d10a      	bne.n	800a372 <_vfiprintf_r+0x156>
 800a35c:	7863      	ldrb	r3, [r4, #1]
 800a35e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a360:	d132      	bne.n	800a3c8 <_vfiprintf_r+0x1ac>
 800a362:	9b03      	ldr	r3, [sp, #12]
 800a364:	1d1a      	adds	r2, r3, #4
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	9203      	str	r2, [sp, #12]
 800a36a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a36e:	3402      	adds	r4, #2
 800a370:	9305      	str	r3, [sp, #20]
 800a372:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a448 <_vfiprintf_r+0x22c>
 800a376:	7821      	ldrb	r1, [r4, #0]
 800a378:	2203      	movs	r2, #3
 800a37a:	4650      	mov	r0, sl
 800a37c:	f7f5 ff30 	bl	80001e0 <memchr>
 800a380:	b138      	cbz	r0, 800a392 <_vfiprintf_r+0x176>
 800a382:	9b04      	ldr	r3, [sp, #16]
 800a384:	eba0 000a 	sub.w	r0, r0, sl
 800a388:	2240      	movs	r2, #64	@ 0x40
 800a38a:	4082      	lsls	r2, r0
 800a38c:	4313      	orrs	r3, r2
 800a38e:	3401      	adds	r4, #1
 800a390:	9304      	str	r3, [sp, #16]
 800a392:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a396:	4829      	ldr	r0, [pc, #164]	@ (800a43c <_vfiprintf_r+0x220>)
 800a398:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a39c:	2206      	movs	r2, #6
 800a39e:	f7f5 ff1f 	bl	80001e0 <memchr>
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	d03f      	beq.n	800a426 <_vfiprintf_r+0x20a>
 800a3a6:	4b26      	ldr	r3, [pc, #152]	@ (800a440 <_vfiprintf_r+0x224>)
 800a3a8:	bb1b      	cbnz	r3, 800a3f2 <_vfiprintf_r+0x1d6>
 800a3aa:	9b03      	ldr	r3, [sp, #12]
 800a3ac:	3307      	adds	r3, #7
 800a3ae:	f023 0307 	bic.w	r3, r3, #7
 800a3b2:	3308      	adds	r3, #8
 800a3b4:	9303      	str	r3, [sp, #12]
 800a3b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3b8:	443b      	add	r3, r7
 800a3ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3bc:	e76a      	b.n	800a294 <_vfiprintf_r+0x78>
 800a3be:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	2001      	movs	r0, #1
 800a3c6:	e7a8      	b.n	800a31a <_vfiprintf_r+0xfe>
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	3401      	adds	r4, #1
 800a3cc:	9305      	str	r3, [sp, #20]
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	f04f 0c0a 	mov.w	ip, #10
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3da:	3a30      	subs	r2, #48	@ 0x30
 800a3dc:	2a09      	cmp	r2, #9
 800a3de:	d903      	bls.n	800a3e8 <_vfiprintf_r+0x1cc>
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d0c6      	beq.n	800a372 <_vfiprintf_r+0x156>
 800a3e4:	9105      	str	r1, [sp, #20]
 800a3e6:	e7c4      	b.n	800a372 <_vfiprintf_r+0x156>
 800a3e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e7f0      	b.n	800a3d4 <_vfiprintf_r+0x1b8>
 800a3f2:	ab03      	add	r3, sp, #12
 800a3f4:	9300      	str	r3, [sp, #0]
 800a3f6:	462a      	mov	r2, r5
 800a3f8:	4b12      	ldr	r3, [pc, #72]	@ (800a444 <_vfiprintf_r+0x228>)
 800a3fa:	a904      	add	r1, sp, #16
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	f7fb fe85 	bl	800610c <_printf_float>
 800a402:	4607      	mov	r7, r0
 800a404:	1c78      	adds	r0, r7, #1
 800a406:	d1d6      	bne.n	800a3b6 <_vfiprintf_r+0x19a>
 800a408:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a40a:	07d9      	lsls	r1, r3, #31
 800a40c:	d405      	bmi.n	800a41a <_vfiprintf_r+0x1fe>
 800a40e:	89ab      	ldrh	r3, [r5, #12]
 800a410:	059a      	lsls	r2, r3, #22
 800a412:	d402      	bmi.n	800a41a <_vfiprintf_r+0x1fe>
 800a414:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a416:	f7fc fe19 	bl	800704c <__retarget_lock_release_recursive>
 800a41a:	89ab      	ldrh	r3, [r5, #12]
 800a41c:	065b      	lsls	r3, r3, #25
 800a41e:	f53f af1f 	bmi.w	800a260 <_vfiprintf_r+0x44>
 800a422:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a424:	e71e      	b.n	800a264 <_vfiprintf_r+0x48>
 800a426:	ab03      	add	r3, sp, #12
 800a428:	9300      	str	r3, [sp, #0]
 800a42a:	462a      	mov	r2, r5
 800a42c:	4b05      	ldr	r3, [pc, #20]	@ (800a444 <_vfiprintf_r+0x228>)
 800a42e:	a904      	add	r1, sp, #16
 800a430:	4630      	mov	r0, r6
 800a432:	f7fc f903 	bl	800663c <_printf_i>
 800a436:	e7e4      	b.n	800a402 <_vfiprintf_r+0x1e6>
 800a438:	0800a8f5 	.word	0x0800a8f5
 800a43c:	0800a8ff 	.word	0x0800a8ff
 800a440:	0800610d 	.word	0x0800610d
 800a444:	0800a1f9 	.word	0x0800a1f9
 800a448:	0800a8fb 	.word	0x0800a8fb

0800a44c <__swbuf_r>:
 800a44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44e:	460e      	mov	r6, r1
 800a450:	4614      	mov	r4, r2
 800a452:	4605      	mov	r5, r0
 800a454:	b118      	cbz	r0, 800a45e <__swbuf_r+0x12>
 800a456:	6a03      	ldr	r3, [r0, #32]
 800a458:	b90b      	cbnz	r3, 800a45e <__swbuf_r+0x12>
 800a45a:	f7fc fca7 	bl	8006dac <__sinit>
 800a45e:	69a3      	ldr	r3, [r4, #24]
 800a460:	60a3      	str	r3, [r4, #8]
 800a462:	89a3      	ldrh	r3, [r4, #12]
 800a464:	071a      	lsls	r2, r3, #28
 800a466:	d501      	bpl.n	800a46c <__swbuf_r+0x20>
 800a468:	6923      	ldr	r3, [r4, #16]
 800a46a:	b943      	cbnz	r3, 800a47e <__swbuf_r+0x32>
 800a46c:	4621      	mov	r1, r4
 800a46e:	4628      	mov	r0, r5
 800a470:	f000 f82a 	bl	800a4c8 <__swsetup_r>
 800a474:	b118      	cbz	r0, 800a47e <__swbuf_r+0x32>
 800a476:	f04f 37ff 	mov.w	r7, #4294967295
 800a47a:	4638      	mov	r0, r7
 800a47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a47e:	6823      	ldr	r3, [r4, #0]
 800a480:	6922      	ldr	r2, [r4, #16]
 800a482:	1a98      	subs	r0, r3, r2
 800a484:	6963      	ldr	r3, [r4, #20]
 800a486:	b2f6      	uxtb	r6, r6
 800a488:	4283      	cmp	r3, r0
 800a48a:	4637      	mov	r7, r6
 800a48c:	dc05      	bgt.n	800a49a <__swbuf_r+0x4e>
 800a48e:	4621      	mov	r1, r4
 800a490:	4628      	mov	r0, r5
 800a492:	f7ff fa47 	bl	8009924 <_fflush_r>
 800a496:	2800      	cmp	r0, #0
 800a498:	d1ed      	bne.n	800a476 <__swbuf_r+0x2a>
 800a49a:	68a3      	ldr	r3, [r4, #8]
 800a49c:	3b01      	subs	r3, #1
 800a49e:	60a3      	str	r3, [r4, #8]
 800a4a0:	6823      	ldr	r3, [r4, #0]
 800a4a2:	1c5a      	adds	r2, r3, #1
 800a4a4:	6022      	str	r2, [r4, #0]
 800a4a6:	701e      	strb	r6, [r3, #0]
 800a4a8:	6962      	ldr	r2, [r4, #20]
 800a4aa:	1c43      	adds	r3, r0, #1
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d004      	beq.n	800a4ba <__swbuf_r+0x6e>
 800a4b0:	89a3      	ldrh	r3, [r4, #12]
 800a4b2:	07db      	lsls	r3, r3, #31
 800a4b4:	d5e1      	bpl.n	800a47a <__swbuf_r+0x2e>
 800a4b6:	2e0a      	cmp	r6, #10
 800a4b8:	d1df      	bne.n	800a47a <__swbuf_r+0x2e>
 800a4ba:	4621      	mov	r1, r4
 800a4bc:	4628      	mov	r0, r5
 800a4be:	f7ff fa31 	bl	8009924 <_fflush_r>
 800a4c2:	2800      	cmp	r0, #0
 800a4c4:	d0d9      	beq.n	800a47a <__swbuf_r+0x2e>
 800a4c6:	e7d6      	b.n	800a476 <__swbuf_r+0x2a>

0800a4c8 <__swsetup_r>:
 800a4c8:	b538      	push	{r3, r4, r5, lr}
 800a4ca:	4b29      	ldr	r3, [pc, #164]	@ (800a570 <__swsetup_r+0xa8>)
 800a4cc:	4605      	mov	r5, r0
 800a4ce:	6818      	ldr	r0, [r3, #0]
 800a4d0:	460c      	mov	r4, r1
 800a4d2:	b118      	cbz	r0, 800a4dc <__swsetup_r+0x14>
 800a4d4:	6a03      	ldr	r3, [r0, #32]
 800a4d6:	b90b      	cbnz	r3, 800a4dc <__swsetup_r+0x14>
 800a4d8:	f7fc fc68 	bl	8006dac <__sinit>
 800a4dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4e0:	0719      	lsls	r1, r3, #28
 800a4e2:	d422      	bmi.n	800a52a <__swsetup_r+0x62>
 800a4e4:	06da      	lsls	r2, r3, #27
 800a4e6:	d407      	bmi.n	800a4f8 <__swsetup_r+0x30>
 800a4e8:	2209      	movs	r2, #9
 800a4ea:	602a      	str	r2, [r5, #0]
 800a4ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4f0:	81a3      	strh	r3, [r4, #12]
 800a4f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f6:	e033      	b.n	800a560 <__swsetup_r+0x98>
 800a4f8:	0758      	lsls	r0, r3, #29
 800a4fa:	d512      	bpl.n	800a522 <__swsetup_r+0x5a>
 800a4fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4fe:	b141      	cbz	r1, 800a512 <__swsetup_r+0x4a>
 800a500:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a504:	4299      	cmp	r1, r3
 800a506:	d002      	beq.n	800a50e <__swsetup_r+0x46>
 800a508:	4628      	mov	r0, r5
 800a50a:	f7fd fc01 	bl	8007d10 <_free_r>
 800a50e:	2300      	movs	r3, #0
 800a510:	6363      	str	r3, [r4, #52]	@ 0x34
 800a512:	89a3      	ldrh	r3, [r4, #12]
 800a514:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a518:	81a3      	strh	r3, [r4, #12]
 800a51a:	2300      	movs	r3, #0
 800a51c:	6063      	str	r3, [r4, #4]
 800a51e:	6923      	ldr	r3, [r4, #16]
 800a520:	6023      	str	r3, [r4, #0]
 800a522:	89a3      	ldrh	r3, [r4, #12]
 800a524:	f043 0308 	orr.w	r3, r3, #8
 800a528:	81a3      	strh	r3, [r4, #12]
 800a52a:	6923      	ldr	r3, [r4, #16]
 800a52c:	b94b      	cbnz	r3, 800a542 <__swsetup_r+0x7a>
 800a52e:	89a3      	ldrh	r3, [r4, #12]
 800a530:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a534:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a538:	d003      	beq.n	800a542 <__swsetup_r+0x7a>
 800a53a:	4621      	mov	r1, r4
 800a53c:	4628      	mov	r0, r5
 800a53e:	f000 f883 	bl	800a648 <__smakebuf_r>
 800a542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a546:	f013 0201 	ands.w	r2, r3, #1
 800a54a:	d00a      	beq.n	800a562 <__swsetup_r+0x9a>
 800a54c:	2200      	movs	r2, #0
 800a54e:	60a2      	str	r2, [r4, #8]
 800a550:	6962      	ldr	r2, [r4, #20]
 800a552:	4252      	negs	r2, r2
 800a554:	61a2      	str	r2, [r4, #24]
 800a556:	6922      	ldr	r2, [r4, #16]
 800a558:	b942      	cbnz	r2, 800a56c <__swsetup_r+0xa4>
 800a55a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a55e:	d1c5      	bne.n	800a4ec <__swsetup_r+0x24>
 800a560:	bd38      	pop	{r3, r4, r5, pc}
 800a562:	0799      	lsls	r1, r3, #30
 800a564:	bf58      	it	pl
 800a566:	6962      	ldrpl	r2, [r4, #20]
 800a568:	60a2      	str	r2, [r4, #8]
 800a56a:	e7f4      	b.n	800a556 <__swsetup_r+0x8e>
 800a56c:	2000      	movs	r0, #0
 800a56e:	e7f7      	b.n	800a560 <__swsetup_r+0x98>
 800a570:	20000024 	.word	0x20000024

0800a574 <_raise_r>:
 800a574:	291f      	cmp	r1, #31
 800a576:	b538      	push	{r3, r4, r5, lr}
 800a578:	4605      	mov	r5, r0
 800a57a:	460c      	mov	r4, r1
 800a57c:	d904      	bls.n	800a588 <_raise_r+0x14>
 800a57e:	2316      	movs	r3, #22
 800a580:	6003      	str	r3, [r0, #0]
 800a582:	f04f 30ff 	mov.w	r0, #4294967295
 800a586:	bd38      	pop	{r3, r4, r5, pc}
 800a588:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a58a:	b112      	cbz	r2, 800a592 <_raise_r+0x1e>
 800a58c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a590:	b94b      	cbnz	r3, 800a5a6 <_raise_r+0x32>
 800a592:	4628      	mov	r0, r5
 800a594:	f000 f830 	bl	800a5f8 <_getpid_r>
 800a598:	4622      	mov	r2, r4
 800a59a:	4601      	mov	r1, r0
 800a59c:	4628      	mov	r0, r5
 800a59e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5a2:	f000 b817 	b.w	800a5d4 <_kill_r>
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d00a      	beq.n	800a5c0 <_raise_r+0x4c>
 800a5aa:	1c59      	adds	r1, r3, #1
 800a5ac:	d103      	bne.n	800a5b6 <_raise_r+0x42>
 800a5ae:	2316      	movs	r3, #22
 800a5b0:	6003      	str	r3, [r0, #0]
 800a5b2:	2001      	movs	r0, #1
 800a5b4:	e7e7      	b.n	800a586 <_raise_r+0x12>
 800a5b6:	2100      	movs	r1, #0
 800a5b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a5bc:	4620      	mov	r0, r4
 800a5be:	4798      	blx	r3
 800a5c0:	2000      	movs	r0, #0
 800a5c2:	e7e0      	b.n	800a586 <_raise_r+0x12>

0800a5c4 <raise>:
 800a5c4:	4b02      	ldr	r3, [pc, #8]	@ (800a5d0 <raise+0xc>)
 800a5c6:	4601      	mov	r1, r0
 800a5c8:	6818      	ldr	r0, [r3, #0]
 800a5ca:	f7ff bfd3 	b.w	800a574 <_raise_r>
 800a5ce:	bf00      	nop
 800a5d0:	20000024 	.word	0x20000024

0800a5d4 <_kill_r>:
 800a5d4:	b538      	push	{r3, r4, r5, lr}
 800a5d6:	4d07      	ldr	r5, [pc, #28]	@ (800a5f4 <_kill_r+0x20>)
 800a5d8:	2300      	movs	r3, #0
 800a5da:	4604      	mov	r4, r0
 800a5dc:	4608      	mov	r0, r1
 800a5de:	4611      	mov	r1, r2
 800a5e0:	602b      	str	r3, [r5, #0]
 800a5e2:	f7f7 ff89 	bl	80024f8 <_kill>
 800a5e6:	1c43      	adds	r3, r0, #1
 800a5e8:	d102      	bne.n	800a5f0 <_kill_r+0x1c>
 800a5ea:	682b      	ldr	r3, [r5, #0]
 800a5ec:	b103      	cbz	r3, 800a5f0 <_kill_r+0x1c>
 800a5ee:	6023      	str	r3, [r4, #0]
 800a5f0:	bd38      	pop	{r3, r4, r5, pc}
 800a5f2:	bf00      	nop
 800a5f4:	200005c4 	.word	0x200005c4

0800a5f8 <_getpid_r>:
 800a5f8:	f7f7 bf76 	b.w	80024e8 <_getpid>

0800a5fc <__swhatbuf_r>:
 800a5fc:	b570      	push	{r4, r5, r6, lr}
 800a5fe:	460c      	mov	r4, r1
 800a600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a604:	2900      	cmp	r1, #0
 800a606:	b096      	sub	sp, #88	@ 0x58
 800a608:	4615      	mov	r5, r2
 800a60a:	461e      	mov	r6, r3
 800a60c:	da0d      	bge.n	800a62a <__swhatbuf_r+0x2e>
 800a60e:	89a3      	ldrh	r3, [r4, #12]
 800a610:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a614:	f04f 0100 	mov.w	r1, #0
 800a618:	bf14      	ite	ne
 800a61a:	2340      	movne	r3, #64	@ 0x40
 800a61c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a620:	2000      	movs	r0, #0
 800a622:	6031      	str	r1, [r6, #0]
 800a624:	602b      	str	r3, [r5, #0]
 800a626:	b016      	add	sp, #88	@ 0x58
 800a628:	bd70      	pop	{r4, r5, r6, pc}
 800a62a:	466a      	mov	r2, sp
 800a62c:	f000 f848 	bl	800a6c0 <_fstat_r>
 800a630:	2800      	cmp	r0, #0
 800a632:	dbec      	blt.n	800a60e <__swhatbuf_r+0x12>
 800a634:	9901      	ldr	r1, [sp, #4]
 800a636:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a63a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a63e:	4259      	negs	r1, r3
 800a640:	4159      	adcs	r1, r3
 800a642:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a646:	e7eb      	b.n	800a620 <__swhatbuf_r+0x24>

0800a648 <__smakebuf_r>:
 800a648:	898b      	ldrh	r3, [r1, #12]
 800a64a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a64c:	079d      	lsls	r5, r3, #30
 800a64e:	4606      	mov	r6, r0
 800a650:	460c      	mov	r4, r1
 800a652:	d507      	bpl.n	800a664 <__smakebuf_r+0x1c>
 800a654:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a658:	6023      	str	r3, [r4, #0]
 800a65a:	6123      	str	r3, [r4, #16]
 800a65c:	2301      	movs	r3, #1
 800a65e:	6163      	str	r3, [r4, #20]
 800a660:	b003      	add	sp, #12
 800a662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a664:	ab01      	add	r3, sp, #4
 800a666:	466a      	mov	r2, sp
 800a668:	f7ff ffc8 	bl	800a5fc <__swhatbuf_r>
 800a66c:	9f00      	ldr	r7, [sp, #0]
 800a66e:	4605      	mov	r5, r0
 800a670:	4639      	mov	r1, r7
 800a672:	4630      	mov	r0, r6
 800a674:	f7fd fbc0 	bl	8007df8 <_malloc_r>
 800a678:	b948      	cbnz	r0, 800a68e <__smakebuf_r+0x46>
 800a67a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a67e:	059a      	lsls	r2, r3, #22
 800a680:	d4ee      	bmi.n	800a660 <__smakebuf_r+0x18>
 800a682:	f023 0303 	bic.w	r3, r3, #3
 800a686:	f043 0302 	orr.w	r3, r3, #2
 800a68a:	81a3      	strh	r3, [r4, #12]
 800a68c:	e7e2      	b.n	800a654 <__smakebuf_r+0xc>
 800a68e:	89a3      	ldrh	r3, [r4, #12]
 800a690:	6020      	str	r0, [r4, #0]
 800a692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a696:	81a3      	strh	r3, [r4, #12]
 800a698:	9b01      	ldr	r3, [sp, #4]
 800a69a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a69e:	b15b      	cbz	r3, 800a6b8 <__smakebuf_r+0x70>
 800a6a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	f000 f81d 	bl	800a6e4 <_isatty_r>
 800a6aa:	b128      	cbz	r0, 800a6b8 <__smakebuf_r+0x70>
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	f023 0303 	bic.w	r3, r3, #3
 800a6b2:	f043 0301 	orr.w	r3, r3, #1
 800a6b6:	81a3      	strh	r3, [r4, #12]
 800a6b8:	89a3      	ldrh	r3, [r4, #12]
 800a6ba:	431d      	orrs	r5, r3
 800a6bc:	81a5      	strh	r5, [r4, #12]
 800a6be:	e7cf      	b.n	800a660 <__smakebuf_r+0x18>

0800a6c0 <_fstat_r>:
 800a6c0:	b538      	push	{r3, r4, r5, lr}
 800a6c2:	4d07      	ldr	r5, [pc, #28]	@ (800a6e0 <_fstat_r+0x20>)
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	4604      	mov	r4, r0
 800a6c8:	4608      	mov	r0, r1
 800a6ca:	4611      	mov	r1, r2
 800a6cc:	602b      	str	r3, [r5, #0]
 800a6ce:	f7f7 ff73 	bl	80025b8 <_fstat>
 800a6d2:	1c43      	adds	r3, r0, #1
 800a6d4:	d102      	bne.n	800a6dc <_fstat_r+0x1c>
 800a6d6:	682b      	ldr	r3, [r5, #0]
 800a6d8:	b103      	cbz	r3, 800a6dc <_fstat_r+0x1c>
 800a6da:	6023      	str	r3, [r4, #0]
 800a6dc:	bd38      	pop	{r3, r4, r5, pc}
 800a6de:	bf00      	nop
 800a6e0:	200005c4 	.word	0x200005c4

0800a6e4 <_isatty_r>:
 800a6e4:	b538      	push	{r3, r4, r5, lr}
 800a6e6:	4d06      	ldr	r5, [pc, #24]	@ (800a700 <_isatty_r+0x1c>)
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	4604      	mov	r4, r0
 800a6ec:	4608      	mov	r0, r1
 800a6ee:	602b      	str	r3, [r5, #0]
 800a6f0:	f7f7 ff72 	bl	80025d8 <_isatty>
 800a6f4:	1c43      	adds	r3, r0, #1
 800a6f6:	d102      	bne.n	800a6fe <_isatty_r+0x1a>
 800a6f8:	682b      	ldr	r3, [r5, #0]
 800a6fa:	b103      	cbz	r3, 800a6fe <_isatty_r+0x1a>
 800a6fc:	6023      	str	r3, [r4, #0]
 800a6fe:	bd38      	pop	{r3, r4, r5, pc}
 800a700:	200005c4 	.word	0x200005c4

0800a704 <_init>:
 800a704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a706:	bf00      	nop
 800a708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a70a:	bc08      	pop	{r3}
 800a70c:	469e      	mov	lr, r3
 800a70e:	4770      	bx	lr

0800a710 <_fini>:
 800a710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a712:	bf00      	nop
 800a714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a716:	bc08      	pop	{r3}
 800a718:	469e      	mov	lr, r3
 800a71a:	4770      	bx	lr
