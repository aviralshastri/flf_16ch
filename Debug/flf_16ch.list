
flf_16ch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad1c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  0800aec0  0800aec0  0000bec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b31c  0800b31c  0000d1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b31c  0800b31c  0000c31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b324  0800b324  0000d1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b324  0800b324  0000c324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b328  0800b328  0000c328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800b32c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  200001e0  0800b50c  0000d1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006a4  0800b50c  0000d6a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff21  00000000  00000000  0000d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002378  00000000  00000000  0001d131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  0001f4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc7  00000000  00000000  000203b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018966  00000000  00000000  00020f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110c6  00000000  00000000  000398e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c5f0  00000000  00000000  0004a9ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6f9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000547c  00000000  00000000  000e6fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  000ec45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aea4 	.word	0x0800aea4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800aea4 	.word	0x0800aea4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <setMuxChannel>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void setMuxChannel(uint8_t ch)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
    if(ch >= 16) return;
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	2b0f      	cmp	r3, #15
 800103e:	d82b      	bhi.n	8001098 <setMuxChannel+0x68>

    HAL_GPIO_WritePin(GPIOB, S0_Pin, (ch & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	b2db      	uxtb	r3, r3
 8001048:	461a      	mov	r2, r3
 800104a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800104e:	4814      	ldr	r0, [pc, #80]	@ (80010a0 <setMuxChannel+0x70>)
 8001050:	f002 fee6 	bl	8003e20 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, S1_Pin, (ch & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	105b      	asrs	r3, r3, #1
 8001058:	b2db      	uxtb	r3, r3
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	461a      	mov	r2, r3
 8001062:	2104      	movs	r1, #4
 8001064:	480e      	ldr	r0, [pc, #56]	@ (80010a0 <setMuxChannel+0x70>)
 8001066:	f002 fedb 	bl	8003e20 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, S2_Pin, (ch & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	109b      	asrs	r3, r3, #2
 800106e:	b2db      	uxtb	r3, r3
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	b2db      	uxtb	r3, r3
 8001076:	461a      	mov	r2, r3
 8001078:	2102      	movs	r1, #2
 800107a:	4809      	ldr	r0, [pc, #36]	@ (80010a0 <setMuxChannel+0x70>)
 800107c:	f002 fed0 	bl	8003e20 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, S3_Pin, (ch & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	10db      	asrs	r3, r3, #3
 8001084:	b2db      	uxtb	r3, r3
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	b2db      	uxtb	r3, r3
 800108c:	461a      	mov	r2, r3
 800108e:	2101      	movs	r1, #1
 8001090:	4803      	ldr	r0, [pc, #12]	@ (80010a0 <setMuxChannel+0x70>)
 8001092:	f002 fec5 	bl	8003e20 <HAL_GPIO_WritePin>
 8001096:	e000      	b.n	800109a <setMuxChannel+0x6a>
    if(ch >= 16) return;
 8001098:	bf00      	nop
}
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40020400 	.word	0x40020400

080010a4 <calculate_line_position>:

int16_t calculate_line_position(void) {
 80010a4:	b480      	push	{r7}
 80010a6:	b087      	sub	sp, #28
 80010a8:	af00      	add	r7, sp, #0
    uint32_t weighted_sum = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
    uint32_t total_weight = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
    uint8_t sensors_on_line = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	73fb      	strb	r3, [r7, #15]

    // Read from the stable buffer
    volatile uint16_t *sensor_data = adc_buffer_ptrs[adc_buffer_read_ptr_index];
 80010b6:	4b24      	ldr	r3, [pc, #144]	@ (8001148 <calculate_line_position+0xa4>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	461a      	mov	r2, r3
 80010be:	4b23      	ldr	r3, [pc, #140]	@ (800114c <calculate_line_position+0xa8>)
 80010c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c4:	607b      	str	r3, [r7, #4]

    for(int i = 0; i < NUM_SENSORS; i++) {
 80010c6:	2300      	movs	r3, #0
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	e021      	b.n	8001110 <calculate_line_position+0x6c>
        // Check if sensor detects line (value below threshold means white/line)
        if(sensor_data[i] < THRESHOLD) {
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	4413      	add	r3, r2
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80010dc:	4293      	cmp	r3, r2
 80010de:	d814      	bhi.n	800110a <calculate_line_position+0x66>
            weighted_sum += (uint32_t)(sensor_weights[i] * 1000); // Scale up for precision
 80010e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001150 <calculate_line_position+0xac>)
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	4413      	add	r3, r2
 80010e6:	f993 3000 	ldrsb.w	r3, [r3]
 80010ea:	461a      	mov	r2, r3
 80010ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f0:	fb02 f303 	mul.w	r3, r2, r3
 80010f4:	461a      	mov	r2, r3
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	4413      	add	r3, r2
 80010fa:	617b      	str	r3, [r7, #20]
            total_weight += 1000;
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001102:	613b      	str	r3, [r7, #16]
            sensors_on_line++;
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	3301      	adds	r3, #1
 8001108:	73fb      	strb	r3, [r7, #15]
    for(int i = 0; i < NUM_SENSORS; i++) {
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	3301      	adds	r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	2b0f      	cmp	r3, #15
 8001114:	ddda      	ble.n	80010cc <calculate_line_position+0x28>
        }
    }

    if(sensors_on_line > 0) {
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d008      	beq.n	800112e <calculate_line_position+0x8a>
        line_detected = 1;
 800111c:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <calculate_line_position+0xb0>)
 800111e:	2201      	movs	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
        return (int16_t)(weighted_sum / total_weight); // Returns scaled position
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	b21b      	sxth	r3, r3
 800112c:	e005      	b.n	800113a <calculate_line_position+0x96>
    } else {
        line_detected = 0;
 800112e:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <calculate_line_position+0xb0>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
        return current_position; // Return last known position
 8001134:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <calculate_line_position+0xb4>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	b21b      	sxth	r3, r3
    }
}
 800113a:	4618      	mov	r0, r3
 800113c:	371c      	adds	r7, #28
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20000008 	.word	0x20000008
 800114c:	20000000 	.word	0x20000000
 8001150:	0800aec0 	.word	0x0800aec0
 8001154:	20000506 	.word	0x20000506
 8001158:	20000504 	.word	0x20000504

0800115c <set_motor_speeds>:

/**
 * Set motor speeds and directions
 * speed1, speed2: -999 to +999 (negative = reverse, positive = forward)
 */
void set_motor_speeds(int16_t speed1, int16_t speed2) {
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	460a      	mov	r2, r1
 8001166:	80fb      	strh	r3, [r7, #6]
 8001168:	4613      	mov	r3, r2
 800116a:	80bb      	strh	r3, [r7, #4]
    uint16_t pwm1, pwm2;

    // Motor 1 control
    if(speed1 >= 0) {
 800116c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db13      	blt.n	800119c <set_motor_speeds+0x40>
        // Forward direction - CH1 = PWM, CH2 = 0
        pwm1 = (uint16_t)MIN(speed1, 999);
 8001174:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001178:	f240 32e6 	movw	r2, #998	@ 0x3e6
 800117c:	4293      	cmp	r3, r2
 800117e:	dc01      	bgt.n	8001184 <set_motor_speeds+0x28>
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	e001      	b.n	8001188 <set_motor_speeds+0x2c>
 8001184:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001188:	81fb      	strh	r3, [r7, #14]
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm1);
 800118a:	4b27      	ldr	r3, [pc, #156]	@ (8001228 <set_motor_speeds+0xcc>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	89fa      	ldrh	r2, [r7, #14]
 8001190:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001192:	4b25      	ldr	r3, [pc, #148]	@ (8001228 <set_motor_speeds+0xcc>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2200      	movs	r2, #0
 8001198:	639a      	str	r2, [r3, #56]	@ 0x38
 800119a:	e013      	b.n	80011c4 <set_motor_speeds+0x68>
    } else {
        // Reverse direction - CH1 = 0, CH2 = PWM
        pwm1 = (uint16_t)MIN(-speed1, 999);
 800119c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a0:	4a22      	ldr	r2, [pc, #136]	@ (800122c <set_motor_speeds+0xd0>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	db03      	blt.n	80011ae <set_motor_speeds+0x52>
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	425b      	negs	r3, r3
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	e001      	b.n	80011b2 <set_motor_speeds+0x56>
 80011ae:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80011b2:	81fb      	strh	r3, [r7, #14]
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80011b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001228 <set_motor_speeds+0xcc>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2200      	movs	r2, #0
 80011ba:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm1);
 80011bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001228 <set_motor_speeds+0xcc>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	89fa      	ldrh	r2, [r7, #14]
 80011c2:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    // Motor 2 control
    if(speed2 >= 0) {
 80011c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db13      	blt.n	80011f4 <set_motor_speeds+0x98>
        // Forward direction - CH3 = PWM, CH4 = 0
        pwm2 = (uint16_t)MIN(speed2, 999);
 80011cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011d0:	f240 32e6 	movw	r2, #998	@ 0x3e6
 80011d4:	4293      	cmp	r3, r2
 80011d6:	dc01      	bgt.n	80011dc <set_motor_speeds+0x80>
 80011d8:	88bb      	ldrh	r3, [r7, #4]
 80011da:	e001      	b.n	80011e0 <set_motor_speeds+0x84>
 80011dc:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80011e0:	81bb      	strh	r3, [r7, #12]
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm2);
 80011e2:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <set_motor_speeds+0xcc>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	89ba      	ldrh	r2, [r7, #12]
 80011e8:	63da      	str	r2, [r3, #60]	@ 0x3c
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80011ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001228 <set_motor_speeds+0xcc>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2200      	movs	r2, #0
 80011f0:	641a      	str	r2, [r3, #64]	@ 0x40
        // Reverse direction - CH3 = 0, CH4 = PWM
        pwm2 = (uint16_t)MIN(-speed2, 999);
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm2);
    }
}
 80011f2:	e013      	b.n	800121c <set_motor_speeds+0xc0>
        pwm2 = (uint16_t)MIN(-speed2, 999);
 80011f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011f8:	4a0c      	ldr	r2, [pc, #48]	@ (800122c <set_motor_speeds+0xd0>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	db03      	blt.n	8001206 <set_motor_speeds+0xaa>
 80011fe:	88bb      	ldrh	r3, [r7, #4]
 8001200:	425b      	negs	r3, r3
 8001202:	b29b      	uxth	r3, r3
 8001204:	e001      	b.n	800120a <set_motor_speeds+0xae>
 8001206:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800120a:	81bb      	strh	r3, [r7, #12]
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800120c:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <set_motor_speeds+0xcc>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2200      	movs	r2, #0
 8001212:	63da      	str	r2, [r3, #60]	@ 0x3c
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm2);
 8001214:	4b04      	ldr	r3, [pc, #16]	@ (8001228 <set_motor_speeds+0xcc>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	89ba      	ldrh	r2, [r7, #12]
 800121a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	200002a4 	.word	0x200002a4
 800122c:	fffffc1a 	.word	0xfffffc1a

08001230 <main_pid_loop>:

// REPLACE the empty main_pid_loop function with this:
void main_pid_loop(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
    static uint32_t last_pid_time = 0;
    uint32_t current_time = HAL_GetTick();
 8001236:	f001 fa2f 	bl	8002698 <HAL_GetTick>
 800123a:	61b8      	str	r0, [r7, #24]
    float dt = (current_time - last_pid_time) / 1000.0f; // Convert to seconds
 800123c:	4b6d      	ldr	r3, [pc, #436]	@ (80013f4 <main_pid_loop+0x1c4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	ee07 3a90 	vmov	s15, r3
 8001248:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800124c:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 80013f8 <main_pid_loop+0x1c8>
 8001250:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001254:	edc7 7a05 	vstr	s15, [r7, #20]

    if(dt < 0.001f) return; // Avoid too frequent calls
 8001258:	edd7 7a05 	vldr	s15, [r7, #20]
 800125c:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80013fc <main_pid_loop+0x1cc>
 8001260:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001268:	f100 80c0 	bmi.w	80013ec <main_pid_loop+0x1bc>
    last_pid_time = current_time;
 800126c:	4a61      	ldr	r2, [pc, #388]	@ (80013f4 <main_pid_loop+0x1c4>)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	6013      	str	r3, [r2, #0]

    // Get current line position
    current_position = calculate_line_position();
 8001272:	f7ff ff17 	bl	80010a4 <calculate_line_position>
 8001276:	4603      	mov	r3, r0
 8001278:	461a      	mov	r2, r3
 800127a:	4b61      	ldr	r3, [pc, #388]	@ (8001400 <main_pid_loop+0x1d0>)
 800127c:	801a      	strh	r2, [r3, #0]

    // Calculate error (0 means centered, negative = left of center, positive = right of center)
    float error = (float)current_position;
 800127e:	4b60      	ldr	r3, [pc, #384]	@ (8001400 <main_pid_loop+0x1d0>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	b21b      	sxth	r3, r3
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800128c:	edc7 7a04 	vstr	s15, [r7, #16]

    // PID calculations
    float proportional = KP * error;
 8001290:	edd7 7a04 	vldr	s15, [r7, #16]
 8001294:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8001404 <main_pid_loop+0x1d4>
 8001298:	ee67 7a87 	vmul.f32	s15, s15, s14
 800129c:	edc7 7a03 	vstr	s15, [r7, #12]

    integral += error * dt;
 80012a0:	ed97 7a04 	vldr	s14, [r7, #16]
 80012a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80012a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012ac:	4b56      	ldr	r3, [pc, #344]	@ (8001408 <main_pid_loop+0x1d8>)
 80012ae:	edd3 7a00 	vldr	s15, [r3]
 80012b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b6:	4b54      	ldr	r3, [pc, #336]	@ (8001408 <main_pid_loop+0x1d8>)
 80012b8:	edc3 7a00 	vstr	s15, [r3]
    // Limit integral wind-up
    if(integral > 1000.0f) integral = 1000.0f;
 80012bc:	4b52      	ldr	r3, [pc, #328]	@ (8001408 <main_pid_loop+0x1d8>)
 80012be:	edd3 7a00 	vldr	s15, [r3]
 80012c2:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80013f8 <main_pid_loop+0x1c8>
 80012c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ce:	dd02      	ble.n	80012d6 <main_pid_loop+0xa6>
 80012d0:	4b4d      	ldr	r3, [pc, #308]	@ (8001408 <main_pid_loop+0x1d8>)
 80012d2:	4a4e      	ldr	r2, [pc, #312]	@ (800140c <main_pid_loop+0x1dc>)
 80012d4:	601a      	str	r2, [r3, #0]
    if(integral < -1000.0f) integral = -1000.0f;
 80012d6:	4b4c      	ldr	r3, [pc, #304]	@ (8001408 <main_pid_loop+0x1d8>)
 80012d8:	edd3 7a00 	vldr	s15, [r3]
 80012dc:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001410 <main_pid_loop+0x1e0>
 80012e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e8:	d502      	bpl.n	80012f0 <main_pid_loop+0xc0>
 80012ea:	4b47      	ldr	r3, [pc, #284]	@ (8001408 <main_pid_loop+0x1d8>)
 80012ec:	4a49      	ldr	r2, [pc, #292]	@ (8001414 <main_pid_loop+0x1e4>)
 80012ee:	601a      	str	r2, [r3, #0]
    float integral_term = KI * integral;
 80012f0:	4b45      	ldr	r3, [pc, #276]	@ (8001408 <main_pid_loop+0x1d8>)
 80012f2:	edd3 7a00 	vldr	s15, [r3]
 80012f6:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8001418 <main_pid_loop+0x1e8>
 80012fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012fe:	edc7 7a02 	vstr	s15, [r7, #8]

    float derivative = KD * (error - last_error) / dt;
 8001302:	4b46      	ldr	r3, [pc, #280]	@ (800141c <main_pid_loop+0x1ec>)
 8001304:	edd3 7a00 	vldr	s15, [r3]
 8001308:	ed97 7a04 	vldr	s14, [r7, #16]
 800130c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001310:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8001420 <main_pid_loop+0x1f0>
 8001314:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001318:	ed97 7a05 	vldr	s14, [r7, #20]
 800131c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001320:	edc7 7a01 	vstr	s15, [r7, #4]
    last_error = error;
 8001324:	4a3d      	ldr	r2, [pc, #244]	@ (800141c <main_pid_loop+0x1ec>)
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	6013      	str	r3, [r2, #0]

    // Calculate PID output
    float pid_output = proportional + integral_term + derivative;
 800132a:	ed97 7a03 	vldr	s14, [r7, #12]
 800132e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001332:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001336:	ed97 7a01 	vldr	s14, [r7, #4]
 800133a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800133e:	edc7 7a00 	vstr	s15, [r7]

    // Calculate motor speeds
    int16_t left_speed, right_speed;

    if(!line_detected) {
 8001342:	4b38      	ldr	r3, [pc, #224]	@ (8001424 <main_pid_loop+0x1f4>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b00      	cmp	r3, #0
 800134a:	d110      	bne.n	800136e <main_pid_loop+0x13e>
        // Line lost - implement search behavior
        if(current_position > 0) {
 800134c:	4b2c      	ldr	r3, [pc, #176]	@ (8001400 <main_pid_loop+0x1d0>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	b21b      	sxth	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	dd05      	ble.n	8001362 <main_pid_loop+0x132>
            // Last seen on right, turn right to search
            left_speed = BASE_SPEED / 2;
 8001356:	23c8      	movs	r3, #200	@ 0xc8
 8001358:	83fb      	strh	r3, [r7, #30]
            right_speed = -BASE_SPEED / 2;
 800135a:	f64f 7338 	movw	r3, #65336	@ 0xff38
 800135e:	83bb      	strh	r3, [r7, #28]
 8001360:	e03b      	b.n	80013da <main_pid_loop+0x1aa>
        } else {
            // Last seen on left, turn left to search
            left_speed = -BASE_SPEED / 2;
 8001362:	f64f 7338 	movw	r3, #65336	@ 0xff38
 8001366:	83fb      	strh	r3, [r7, #30]
            right_speed = BASE_SPEED / 2;
 8001368:	23c8      	movs	r3, #200	@ 0xc8
 800136a:	83bb      	strh	r3, [r7, #28]
 800136c:	e035      	b.n	80013da <main_pid_loop+0x1aa>
        }
    } else {
        // Normal line following
        left_speed = BASE_SPEED - (int16_t)pid_output;
 800136e:	edd7 7a00 	vldr	s15, [r7]
 8001372:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001376:	ee17 3a90 	vmov	r3, s15
 800137a:	b21b      	sxth	r3, r3
 800137c:	b29b      	uxth	r3, r3
 800137e:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 8001382:	b29b      	uxth	r3, r3
 8001384:	83fb      	strh	r3, [r7, #30]
        right_speed = BASE_SPEED + (int16_t)pid_output;
 8001386:	edd7 7a00 	vldr	s15, [r7]
 800138a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800138e:	ee17 3a90 	vmov	r3, s15
 8001392:	b21b      	sxth	r3, r3
 8001394:	b29b      	uxth	r3, r3
 8001396:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800139a:	b29b      	uxth	r3, r3
 800139c:	83bb      	strh	r3, [r7, #28]

        // Limit speeds
        left_speed = MAX(MIN_SPEED, MIN(left_speed, MAX_SPEED));
 800139e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013a2:	2b63      	cmp	r3, #99	@ 0x63
 80013a4:	dd08      	ble.n	80013b8 <main_pid_loop+0x188>
 80013a6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013aa:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80013ae:	bfa8      	it	ge
 80013b0:	f44f 7348 	movge.w	r3, #800	@ 0x320
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	e000      	b.n	80013ba <main_pid_loop+0x18a>
 80013b8:	2364      	movs	r3, #100	@ 0x64
 80013ba:	83fb      	strh	r3, [r7, #30]
        right_speed = MAX(MIN_SPEED, MIN(right_speed, MAX_SPEED));
 80013bc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013c0:	2b63      	cmp	r3, #99	@ 0x63
 80013c2:	dd08      	ble.n	80013d6 <main_pid_loop+0x1a6>
 80013c4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013c8:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80013cc:	bfa8      	it	ge
 80013ce:	f44f 7348 	movge.w	r3, #800	@ 0x320
 80013d2:	b21b      	sxth	r3, r3
 80013d4:	e000      	b.n	80013d8 <main_pid_loop+0x1a8>
 80013d6:	2364      	movs	r3, #100	@ 0x64
 80013d8:	83bb      	strh	r3, [r7, #28]
    }

    // Set motor speeds
    set_motor_speeds(left_speed, right_speed);
 80013da:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80013de:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff feb9 	bl	800115c <set_motor_speeds>
 80013ea:	e000      	b.n	80013ee <main_pid_loop+0x1be>
    if(dt < 0.001f) return; // Avoid too frequent calls
 80013ec:	bf00      	nop
}
 80013ee:	3720      	adds	r7, #32
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	2000054c 	.word	0x2000054c
 80013f8:	447a0000 	.word	0x447a0000
 80013fc:	3a83126f 	.word	0x3a83126f
 8001400:	20000504 	.word	0x20000504
 8001404:	3f4ccccd 	.word	0x3f4ccccd
 8001408:	200004fc 	.word	0x200004fc
 800140c:	447a0000 	.word	0x447a0000
 8001410:	c47a0000 	.word	0xc47a0000
 8001414:	c47a0000 	.word	0xc47a0000
 8001418:	00000000 	.word	0x00000000
 800141c:	20000500 	.word	0x20000500
 8001420:	3e19999a 	.word	0x3e19999a
 8001424:	20000506 	.word	0x20000506

08001428 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM3)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a09      	ldr	r2, [pc, #36]	@ (800145c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d105      	bne.n	8001446 <HAL_TIM_PeriodElapsedCallback+0x1e>
    {
        HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_dma_single_value, 1);
 800143a:	2201      	movs	r2, #1
 800143c:	4908      	ldr	r1, [pc, #32]	@ (8001460 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800143e:	4809      	ldr	r0, [pc, #36]	@ (8001464 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001440:	f001 fa8a 	bl	8002958 <HAL_ADC_Start_DMA>
    }
    else if(htim->Instance == TIM4)
    {
    	main_pid_loop();
    }
}
 8001444:	e006      	b.n	8001454 <HAL_TIM_PeriodElapsedCallback+0x2c>
    else if(htim->Instance == TIM4)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a07      	ldr	r2, [pc, #28]	@ (8001468 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d101      	bne.n	8001454 <HAL_TIM_PeriodElapsedCallback+0x2c>
    	main_pid_loop();
 8001450:	f7ff feee 	bl	8001230 <main_pid_loop>
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40000400 	.word	0x40000400
 8001460:	2000054a 	.word	0x2000054a
 8001464:	200001fc 	.word	0x200001fc
 8001468:	40000800 	.word	0x40000800

0800146c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a1d      	ldr	r2, [pc, #116]	@ (80014f0 <HAL_ADC_ConvCpltCallback+0x84>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d134      	bne.n	80014e8 <HAL_ADC_ConvCpltCallback+0x7c>
    {
        adc_buffer_ptrs[adc_buffer_write_ptr_index][current_sensor_index] = adc_dma_single_value;
 800147e:	4b1d      	ldr	r3, [pc, #116]	@ (80014f4 <HAL_ADC_ConvCpltCallback+0x88>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	461a      	mov	r2, r3
 8001486:	4b1c      	ldr	r3, [pc, #112]	@ (80014f8 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001488:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800148c:	4b1b      	ldr	r3, [pc, #108]	@ (80014fc <HAL_ADC_ConvCpltCallback+0x90>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	4a1a      	ldr	r2, [pc, #104]	@ (8001500 <HAL_ADC_ConvCpltCallback+0x94>)
 8001498:	8812      	ldrh	r2, [r2, #0]
 800149a:	b292      	uxth	r2, r2
 800149c:	801a      	strh	r2, [r3, #0]

        current_sensor_index++;
 800149e:	4b17      	ldr	r3, [pc, #92]	@ (80014fc <HAL_ADC_ConvCpltCallback+0x90>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	3301      	adds	r3, #1
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	4b14      	ldr	r3, [pc, #80]	@ (80014fc <HAL_ADC_ConvCpltCallback+0x90>)
 80014aa:	701a      	strb	r2, [r3, #0]

        if(current_sensor_index >= NUM_SENSORS)
 80014ac:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <HAL_ADC_ConvCpltCallback+0x90>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b0f      	cmp	r3, #15
 80014b4:	d912      	bls.n	80014dc <HAL_ADC_ConvCpltCallback+0x70>
        {

            current_sensor_index = 0;
 80014b6:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <HAL_ADC_ConvCpltCallback+0x90>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]

            adc_buffer_write_ptr_index ^= 1;
 80014bc:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <HAL_ADC_ConvCpltCallback+0x88>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	f083 0301 	eor.w	r3, r3, #1
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <HAL_ADC_ConvCpltCallback+0x88>)
 80014ca:	701a      	strb	r2, [r3, #0]
            adc_buffer_read_ptr_index ^= 1;
 80014cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001504 <HAL_ADC_ConvCpltCallback+0x98>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	f083 0301 	eor.w	r3, r3, #1
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001504 <HAL_ADC_ConvCpltCallback+0x98>)
 80014da:	701a      	strb	r2, [r3, #0]
        }

        setMuxChannel(current_sensor_index);
 80014dc:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <HAL_ADC_ConvCpltCallback+0x90>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fda4 	bl	8001030 <setMuxChannel>
    }
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40012000 	.word	0x40012000
 80014f4:	20000548 	.word	0x20000548
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000549 	.word	0x20000549
 8001500:	2000054a 	.word	0x2000054a
 8001504:	20000008 	.word	0x20000008

08001508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150c:	f001 f85e 	bl	80025cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001510:	f000 f852 	bl	80015b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001514:	f000 fbc4 	bl	8001ca0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001518:	f000 fb9a 	bl	8001c50 <MX_DMA_Init>
  MX_ADC1_Init();
 800151c:	f000 f8b4 	bl	8001688 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001520:	f000 f904 	bl	800172c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001524:	f000 f9c6 	bl	80018b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001528:	f000 fa18 	bl	800195c <MX_TIM3_Init>
  MX_TIM5_Init();
 800152c:	f000 fab0 	bl	8001a90 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001530:	f000 fb64 	bl	8001bfc <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001534:	f000 fa5e 	bl	80019f4 <MX_TIM4_Init>
  MX_TIM9_Init();
 8001538:	f000 fafe 	bl	8001b38 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 800153c:	4818      	ldr	r0, [pc, #96]	@ (80015a0 <main+0x98>)
 800153e:	f003 f931 	bl	80047a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001542:	4818      	ldr	r0, [pc, #96]	@ (80015a4 <main+0x9c>)
 8001544:	f003 f92e 	bl	80047a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001548:	213c      	movs	r1, #60	@ 0x3c
 800154a:	4817      	ldr	r0, [pc, #92]	@ (80015a8 <main+0xa0>)
 800154c:	f003 fb3c 	bl	8004bc8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001550:	213c      	movs	r1, #60	@ 0x3c
 8001552:	4816      	ldr	r0, [pc, #88]	@ (80015ac <main+0xa4>)
 8001554:	f003 fb38 	bl	8004bc8 <HAL_TIM_Encoder_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8001558:	4b13      	ldr	r3, [pc, #76]	@ (80015a8 <main+0xa0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2200      	movs	r2, #0
 800155e:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_TIM_SET_COUNTER(&htim5, 0);
 8001560:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <main+0xa4>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2200      	movs	r2, #0
 8001566:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001568:	2100      	movs	r1, #0
 800156a:	4811      	ldr	r0, [pc, #68]	@ (80015b0 <main+0xa8>)
 800156c:	f003 f9d6 	bl	800491c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001570:	2104      	movs	r1, #4
 8001572:	480f      	ldr	r0, [pc, #60]	@ (80015b0 <main+0xa8>)
 8001574:	f003 f9d2 	bl	800491c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001578:	2108      	movs	r1, #8
 800157a:	480d      	ldr	r0, [pc, #52]	@ (80015b0 <main+0xa8>)
 800157c:	f003 f9ce 	bl	800491c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001580:	210c      	movs	r1, #12
 8001582:	480b      	ldr	r0, [pc, #44]	@ (80015b0 <main+0xa8>)
 8001584:	f003 f9ca 	bl	800491c <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, GPIO_PIN_SET);
 8001588:	2201      	movs	r2, #1
 800158a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800158e:	4809      	ldr	r0, [pc, #36]	@ (80015b4 <main+0xac>)
 8001590:	f002 fc46 	bl	8003e20 <HAL_GPIO_WritePin>
  setMuxChannel(0);
 8001594:	2000      	movs	r0, #0
 8001596:	f7ff fd4b 	bl	8001030 <setMuxChannel>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800159a:	bf00      	nop
 800159c:	e7fd      	b.n	800159a <main+0x92>
 800159e:	bf00      	nop
 80015a0:	20000334 	.word	0x20000334
 80015a4:	2000037c 	.word	0x2000037c
 80015a8:	200002ec 	.word	0x200002ec
 80015ac:	200003c4 	.word	0x200003c4
 80015b0:	200002a4 	.word	0x200002a4
 80015b4:	40020000 	.word	0x40020000

080015b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b094      	sub	sp, #80	@ 0x50
 80015bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015be:	f107 0320 	add.w	r3, r7, #32
 80015c2:	2230      	movs	r2, #48	@ 0x30
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f006 f891 	bl	80076ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	4b27      	ldr	r3, [pc, #156]	@ (8001680 <SystemClock_Config+0xc8>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e4:	4a26      	ldr	r2, [pc, #152]	@ (8001680 <SystemClock_Config+0xc8>)
 80015e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ec:	4b24      	ldr	r3, [pc, #144]	@ (8001680 <SystemClock_Config+0xc8>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f8:	2300      	movs	r3, #0
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	4b21      	ldr	r3, [pc, #132]	@ (8001684 <SystemClock_Config+0xcc>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a20      	ldr	r2, [pc, #128]	@ (8001684 <SystemClock_Config+0xcc>)
 8001602:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b1e      	ldr	r3, [pc, #120]	@ (8001684 <SystemClock_Config+0xcc>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001614:	2301      	movs	r3, #1
 8001616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001618:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800161e:	2302      	movs	r3, #2
 8001620:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001622:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001626:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001628:	230c      	movs	r3, #12
 800162a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800162c:	2360      	movs	r3, #96	@ 0x60
 800162e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001630:	2302      	movs	r3, #2
 8001632:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001634:	2304      	movs	r3, #4
 8001636:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001638:	f107 0320 	add.w	r3, r7, #32
 800163c:	4618      	mov	r0, r3
 800163e:	f002 fc09 	bl	8003e54 <HAL_RCC_OscConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001648:	f000 fb94 	bl	8001d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164c:	230f      	movs	r3, #15
 800164e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001650:	2302      	movs	r3, #2
 8001652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001658:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800165c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	2103      	movs	r1, #3
 8001668:	4618      	mov	r0, r3
 800166a:	f002 fe6b 	bl	8004344 <HAL_RCC_ClockConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001674:	f000 fb7e 	bl	8001d74 <Error_Handler>
  }
}
 8001678:	bf00      	nop
 800167a:	3750      	adds	r7, #80	@ 0x50
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40023800 	.word	0x40023800
 8001684:	40007000 	.word	0x40007000

08001688 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800168e:	463b      	mov	r3, r7
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800169a:	4b21      	ldr	r3, [pc, #132]	@ (8001720 <MX_ADC1_Init+0x98>)
 800169c:	4a21      	ldr	r2, [pc, #132]	@ (8001724 <MX_ADC1_Init+0x9c>)
 800169e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001720 <MX_ADC1_Init+0x98>)
 80016a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001720 <MX_ADC1_Init+0x98>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80016ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001720 <MX_ADC1_Init+0x98>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001720 <MX_ADC1_Init+0x98>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016ba:	4b19      	ldr	r3, [pc, #100]	@ (8001720 <MX_ADC1_Init+0x98>)
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016c2:	4b17      	ldr	r3, [pc, #92]	@ (8001720 <MX_ADC1_Init+0x98>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016c8:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <MX_ADC1_Init+0x98>)
 80016ca:	4a17      	ldr	r2, [pc, #92]	@ (8001728 <MX_ADC1_Init+0xa0>)
 80016cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016ce:	4b14      	ldr	r3, [pc, #80]	@ (8001720 <MX_ADC1_Init+0x98>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016d4:	4b12      	ldr	r3, [pc, #72]	@ (8001720 <MX_ADC1_Init+0x98>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016da:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <MX_ADC1_Init+0x98>)
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001720 <MX_ADC1_Init+0x98>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016e8:	480d      	ldr	r0, [pc, #52]	@ (8001720 <MX_ADC1_Init+0x98>)
 80016ea:	f000 ffe1 	bl	80026b0 <HAL_ADC_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80016f4:	f000 fb3e 	bl	8001d74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80016f8:	2307      	movs	r3, #7
 80016fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016fc:	2301      	movs	r3, #1
 80016fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001700:	2304      	movs	r3, #4
 8001702:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001704:	463b      	mov	r3, r7
 8001706:	4619      	mov	r1, r3
 8001708:	4805      	ldr	r0, [pc, #20]	@ (8001720 <MX_ADC1_Init+0x98>)
 800170a:	f001 fa37 	bl	8002b7c <HAL_ADC_ConfigChannel>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001714:	f000 fb2e 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001718:	bf00      	nop
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	200001fc 	.word	0x200001fc
 8001724:	40012000 	.word	0x40012000
 8001728:	0f000001 	.word	0x0f000001

0800172c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b096      	sub	sp, #88	@ 0x58
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001732:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001740:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800174a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	611a      	str	r2, [r3, #16]
 800175a:	615a      	str	r2, [r3, #20]
 800175c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	2220      	movs	r2, #32
 8001762:	2100      	movs	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f005 ffc2 	bl	80076ee <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800176a:	4b50      	ldr	r3, [pc, #320]	@ (80018ac <MX_TIM1_Init+0x180>)
 800176c:	4a50      	ldr	r2, [pc, #320]	@ (80018b0 <MX_TIM1_Init+0x184>)
 800176e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8001770:	4b4e      	ldr	r3, [pc, #312]	@ (80018ac <MX_TIM1_Init+0x180>)
 8001772:	2263      	movs	r2, #99	@ 0x63
 8001774:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001776:	4b4d      	ldr	r3, [pc, #308]	@ (80018ac <MX_TIM1_Init+0x180>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800177c:	4b4b      	ldr	r3, [pc, #300]	@ (80018ac <MX_TIM1_Init+0x180>)
 800177e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001782:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001784:	4b49      	ldr	r3, [pc, #292]	@ (80018ac <MX_TIM1_Init+0x180>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800178a:	4b48      	ldr	r3, [pc, #288]	@ (80018ac <MX_TIM1_Init+0x180>)
 800178c:	2200      	movs	r2, #0
 800178e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001790:	4b46      	ldr	r3, [pc, #280]	@ (80018ac <MX_TIM1_Init+0x180>)
 8001792:	2280      	movs	r2, #128	@ 0x80
 8001794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001796:	4845      	ldr	r0, [pc, #276]	@ (80018ac <MX_TIM1_Init+0x180>)
 8001798:	f002 ffb4 	bl	8004704 <HAL_TIM_Base_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80017a2:	f000 fae7 	bl	8001d74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017ac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80017b0:	4619      	mov	r1, r3
 80017b2:	483e      	ldr	r0, [pc, #248]	@ (80018ac <MX_TIM1_Init+0x180>)
 80017b4:	f003 fc48 	bl	8005048 <HAL_TIM_ConfigClockSource>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80017be:	f000 fad9 	bl	8001d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017c2:	483a      	ldr	r0, [pc, #232]	@ (80018ac <MX_TIM1_Init+0x180>)
 80017c4:	f003 f850 	bl	8004868 <HAL_TIM_PWM_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80017ce:	f000 fad1 	bl	8001d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017da:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017de:	4619      	mov	r1, r3
 80017e0:	4832      	ldr	r0, [pc, #200]	@ (80018ac <MX_TIM1_Init+0x180>)
 80017e2:	f003 fff3 	bl	80057cc <HAL_TIMEx_MasterConfigSynchronization>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80017ec:	f000 fac2 	bl	8001d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017f0:	2360      	movs	r3, #96	@ 0x60
 80017f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017f8:	2300      	movs	r3, #0
 80017fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017fc:	2300      	movs	r3, #0
 80017fe:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001804:	2300      	movs	r3, #0
 8001806:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001808:	2300      	movs	r3, #0
 800180a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800180c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001810:	2200      	movs	r2, #0
 8001812:	4619      	mov	r1, r3
 8001814:	4825      	ldr	r0, [pc, #148]	@ (80018ac <MX_TIM1_Init+0x180>)
 8001816:	f003 fb55 	bl	8004ec4 <HAL_TIM_PWM_ConfigChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001820:	f000 faa8 	bl	8001d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001824:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001828:	2204      	movs	r2, #4
 800182a:	4619      	mov	r1, r3
 800182c:	481f      	ldr	r0, [pc, #124]	@ (80018ac <MX_TIM1_Init+0x180>)
 800182e:	f003 fb49 	bl	8004ec4 <HAL_TIM_PWM_ConfigChannel>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001838:	f000 fa9c 	bl	8001d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800183c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001840:	2208      	movs	r2, #8
 8001842:	4619      	mov	r1, r3
 8001844:	4819      	ldr	r0, [pc, #100]	@ (80018ac <MX_TIM1_Init+0x180>)
 8001846:	f003 fb3d 	bl	8004ec4 <HAL_TIM_PWM_ConfigChannel>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001850:	f000 fa90 	bl	8001d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001854:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001858:	220c      	movs	r2, #12
 800185a:	4619      	mov	r1, r3
 800185c:	4813      	ldr	r0, [pc, #76]	@ (80018ac <MX_TIM1_Init+0x180>)
 800185e:	f003 fb31 	bl	8004ec4 <HAL_TIM_PWM_ConfigChannel>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001868:	f000 fa84 	bl	8001d74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800186c:	2300      	movs	r3, #0
 800186e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001874:	2300      	movs	r3, #0
 8001876:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001880:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001884:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001886:	2300      	movs	r3, #0
 8001888:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	4619      	mov	r1, r3
 800188e:	4807      	ldr	r0, [pc, #28]	@ (80018ac <MX_TIM1_Init+0x180>)
 8001890:	f004 f80a 	bl	80058a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800189a:	f000 fa6b 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800189e:	4803      	ldr	r0, [pc, #12]	@ (80018ac <MX_TIM1_Init+0x180>)
 80018a0:	f000 fc22 	bl	80020e8 <HAL_TIM_MspPostInit>

}
 80018a4:	bf00      	nop
 80018a6:	3758      	adds	r7, #88	@ 0x58
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	200002a4 	.word	0x200002a4
 80018b0:	40010000 	.word	0x40010000

080018b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08c      	sub	sp, #48	@ 0x30
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	2224      	movs	r2, #36	@ 0x24
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f005 ff13 	bl	80076ee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018d0:	4b21      	ldr	r3, [pc, #132]	@ (8001958 <MX_TIM2_Init+0xa4>)
 80018d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001958 <MX_TIM2_Init+0xa4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018de:	4b1e      	ldr	r3, [pc, #120]	@ (8001958 <MX_TIM2_Init+0xa4>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80018e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001958 <MX_TIM2_Init+0xa4>)
 80018e6:	f04f 32ff 	mov.w	r2, #4294967295
 80018ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001958 <MX_TIM2_Init+0xa4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f2:	4b19      	ldr	r3, [pc, #100]	@ (8001958 <MX_TIM2_Init+0xa4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018f8:	2303      	movs	r3, #3
 80018fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018fc:	2300      	movs	r3, #0
 80018fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001900:	2301      	movs	r3, #1
 8001902:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001904:	2300      	movs	r3, #0
 8001906:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001910:	2301      	movs	r3, #1
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001914:	2300      	movs	r3, #0
 8001916:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	4619      	mov	r1, r3
 8001922:	480d      	ldr	r0, [pc, #52]	@ (8001958 <MX_TIM2_Init+0xa4>)
 8001924:	f003 f8aa 	bl	8004a7c <HAL_TIM_Encoder_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800192e:	f000 fa21 	bl	8001d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	4619      	mov	r1, r3
 800193e:	4806      	ldr	r0, [pc, #24]	@ (8001958 <MX_TIM2_Init+0xa4>)
 8001940:	f003 ff44 	bl	80057cc <HAL_TIMEx_MasterConfigSynchronization>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800194a:	f000 fa13 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	3730      	adds	r7, #48	@ 0x30
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	200002ec 	.word	0x200002ec

0800195c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001962:	f107 0308 	add.w	r3, r7, #8
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001970:	463b      	mov	r3, r7
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001978:	4b1c      	ldr	r3, [pc, #112]	@ (80019ec <MX_TIM3_Init+0x90>)
 800197a:	4a1d      	ldr	r2, [pc, #116]	@ (80019f0 <MX_TIM3_Init+0x94>)
 800197c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 800197e:	4b1b      	ldr	r3, [pc, #108]	@ (80019ec <MX_TIM3_Init+0x90>)
 8001980:	2263      	movs	r2, #99	@ 0x63
 8001982:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001984:	4b19      	ldr	r3, [pc, #100]	@ (80019ec <MX_TIM3_Init+0x90>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800198a:	4b18      	ldr	r3, [pc, #96]	@ (80019ec <MX_TIM3_Init+0x90>)
 800198c:	2263      	movs	r2, #99	@ 0x63
 800198e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001990:	4b16      	ldr	r3, [pc, #88]	@ (80019ec <MX_TIM3_Init+0x90>)
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <MX_TIM3_Init+0x90>)
 8001998:	2280      	movs	r2, #128	@ 0x80
 800199a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800199c:	4813      	ldr	r0, [pc, #76]	@ (80019ec <MX_TIM3_Init+0x90>)
 800199e:	f002 feb1 	bl	8004704 <HAL_TIM_Base_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80019a8:	f000 f9e4 	bl	8001d74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019b2:	f107 0308 	add.w	r3, r7, #8
 80019b6:	4619      	mov	r1, r3
 80019b8:	480c      	ldr	r0, [pc, #48]	@ (80019ec <MX_TIM3_Init+0x90>)
 80019ba:	f003 fb45 	bl	8005048 <HAL_TIM_ConfigClockSource>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80019c4:	f000 f9d6 	bl	8001d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c8:	2300      	movs	r3, #0
 80019ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019d0:	463b      	mov	r3, r7
 80019d2:	4619      	mov	r1, r3
 80019d4:	4805      	ldr	r0, [pc, #20]	@ (80019ec <MX_TIM3_Init+0x90>)
 80019d6:	f003 fef9 	bl	80057cc <HAL_TIMEx_MasterConfigSynchronization>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80019e0:	f000 f9c8 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019e4:	bf00      	nop
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000334 	.word	0x20000334
 80019f0:	40000400 	.word	0x40000400

080019f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019fa:	f107 0308 	add.w	r3, r7, #8
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a08:	463b      	mov	r3, r7
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a10:	4b1d      	ldr	r3, [pc, #116]	@ (8001a88 <MX_TIM4_Init+0x94>)
 8001a12:	4a1e      	ldr	r2, [pc, #120]	@ (8001a8c <MX_TIM4_Init+0x98>)
 8001a14:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8001a16:	4b1c      	ldr	r3, [pc, #112]	@ (8001a88 <MX_TIM4_Init+0x94>)
 8001a18:	2263      	movs	r2, #99	@ 0x63
 8001a1a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a88 <MX_TIM4_Init+0x94>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 8001a22:	4b19      	ldr	r3, [pc, #100]	@ (8001a88 <MX_TIM4_Init+0x94>)
 8001a24:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001a28:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2a:	4b17      	ldr	r3, [pc, #92]	@ (8001a88 <MX_TIM4_Init+0x94>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a30:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <MX_TIM4_Init+0x94>)
 8001a32:	2280      	movs	r2, #128	@ 0x80
 8001a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a36:	4814      	ldr	r0, [pc, #80]	@ (8001a88 <MX_TIM4_Init+0x94>)
 8001a38:	f002 fe64 	bl	8004704 <HAL_TIM_Base_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001a42:	f000 f997 	bl	8001d74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a4c:	f107 0308 	add.w	r3, r7, #8
 8001a50:	4619      	mov	r1, r3
 8001a52:	480d      	ldr	r0, [pc, #52]	@ (8001a88 <MX_TIM4_Init+0x94>)
 8001a54:	f003 faf8 	bl	8005048 <HAL_TIM_ConfigClockSource>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001a5e:	f000 f989 	bl	8001d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a62:	2300      	movs	r3, #0
 8001a64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a6a:	463b      	mov	r3, r7
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4806      	ldr	r0, [pc, #24]	@ (8001a88 <MX_TIM4_Init+0x94>)
 8001a70:	f003 feac 	bl	80057cc <HAL_TIMEx_MasterConfigSynchronization>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001a7a:	f000 f97b 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2000037c 	.word	0x2000037c
 8001a8c:	40000800 	.word	0x40000800

08001a90 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08c      	sub	sp, #48	@ 0x30
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a96:	f107 030c 	add.w	r3, r7, #12
 8001a9a:	2224      	movs	r2, #36	@ 0x24
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f005 fe25 	bl	80076ee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001aac:	4b20      	ldr	r3, [pc, #128]	@ (8001b30 <MX_TIM5_Init+0xa0>)
 8001aae:	4a21      	ldr	r2, [pc, #132]	@ (8001b34 <MX_TIM5_Init+0xa4>)
 8001ab0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b30 <MX_TIM5_Init+0xa0>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b30 <MX_TIM5_Init+0xa0>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001abe:	4b1c      	ldr	r3, [pc, #112]	@ (8001b30 <MX_TIM5_Init+0xa0>)
 8001ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b30 <MX_TIM5_Init+0xa0>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001acc:	4b18      	ldr	r3, [pc, #96]	@ (8001b30 <MX_TIM5_Init+0xa0>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ada:	2301      	movs	r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001aea:	2301      	movs	r3, #1
 8001aec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001aee:	2300      	movs	r3, #0
 8001af0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001af6:	f107 030c 	add.w	r3, r7, #12
 8001afa:	4619      	mov	r1, r3
 8001afc:	480c      	ldr	r0, [pc, #48]	@ (8001b30 <MX_TIM5_Init+0xa0>)
 8001afe:	f002 ffbd 	bl	8004a7c <HAL_TIM_Encoder_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001b08:	f000 f934 	bl	8001d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	4619      	mov	r1, r3
 8001b18:	4805      	ldr	r0, [pc, #20]	@ (8001b30 <MX_TIM5_Init+0xa0>)
 8001b1a:	f003 fe57 	bl	80057cc <HAL_TIMEx_MasterConfigSynchronization>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001b24:	f000 f926 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001b28:	bf00      	nop
 8001b2a:	3730      	adds	r7, #48	@ 0x30
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	200003c4 	.word	0x200003c4
 8001b34:	40000c00 	.word	0x40000c00

08001b38 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08c      	sub	sp, #48	@ 0x30
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b3e:	f107 0320 	add.w	r3, r7, #32
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
 8001b58:	611a      	str	r2, [r3, #16]
 8001b5a:	615a      	str	r2, [r3, #20]
 8001b5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001b5e:	4b25      	ldr	r3, [pc, #148]	@ (8001bf4 <MX_TIM9_Init+0xbc>)
 8001b60:	4a25      	ldr	r2, [pc, #148]	@ (8001bf8 <MX_TIM9_Init+0xc0>)
 8001b62:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 100-1;
 8001b64:	4b23      	ldr	r3, [pc, #140]	@ (8001bf4 <MX_TIM9_Init+0xbc>)
 8001b66:	2263      	movs	r2, #99	@ 0x63
 8001b68:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6a:	4b22      	ldr	r3, [pc, #136]	@ (8001bf4 <MX_TIM9_Init+0xbc>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000-1;
 8001b70:	4b20      	ldr	r3, [pc, #128]	@ (8001bf4 <MX_TIM9_Init+0xbc>)
 8001b72:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001b76:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b78:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf4 <MX_TIM9_Init+0xbc>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf4 <MX_TIM9_Init+0xbc>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001b84:	481b      	ldr	r0, [pc, #108]	@ (8001bf4 <MX_TIM9_Init+0xbc>)
 8001b86:	f002 fdbd 	bl	8004704 <HAL_TIM_Base_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001b90:	f000 f8f0 	bl	8001d74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b98:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001b9a:	f107 0320 	add.w	r3, r7, #32
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4814      	ldr	r0, [pc, #80]	@ (8001bf4 <MX_TIM9_Init+0xbc>)
 8001ba2:	f003 fa51 	bl	8005048 <HAL_TIM_ConfigClockSource>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001bac:	f000 f8e2 	bl	8001d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001bb0:	4810      	ldr	r0, [pc, #64]	@ (8001bf4 <MX_TIM9_Init+0xbc>)
 8001bb2:	f002 fe59 	bl	8004868 <HAL_TIM_PWM_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001bbc:	f000 f8da 	bl	8001d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bc0:	2360      	movs	r3, #96	@ 0x60
 8001bc2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4807      	ldr	r0, [pc, #28]	@ (8001bf4 <MX_TIM9_Init+0xbc>)
 8001bd8:	f003 f974 	bl	8004ec4 <HAL_TIM_PWM_ConfigChannel>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8001be2:	f000 f8c7 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001be6:	4803      	ldr	r0, [pc, #12]	@ (8001bf4 <MX_TIM9_Init+0xbc>)
 8001be8:	f000 fa7e 	bl	80020e8 <HAL_TIM_MspPostInit>

}
 8001bec:	bf00      	nop
 8001bee:	3730      	adds	r7, #48	@ 0x30
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	2000040c 	.word	0x2000040c
 8001bf8:	40014000 	.word	0x40014000

08001bfc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c00:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <MX_USART1_UART_Init+0x4c>)
 8001c02:	4a12      	ldr	r2, [pc, #72]	@ (8001c4c <MX_USART1_UART_Init+0x50>)
 8001c04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001c06:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <MX_USART1_UART_Init+0x4c>)
 8001c08:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8001c0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c48 <MX_USART1_UART_Init+0x4c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c14:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <MX_USART1_UART_Init+0x4c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c48 <MX_USART1_UART_Init+0x4c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c20:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <MX_USART1_UART_Init+0x4c>)
 8001c22:	220c      	movs	r2, #12
 8001c24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c26:	4b08      	ldr	r3, [pc, #32]	@ (8001c48 <MX_USART1_UART_Init+0x4c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <MX_USART1_UART_Init+0x4c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c32:	4805      	ldr	r0, [pc, #20]	@ (8001c48 <MX_USART1_UART_Init+0x4c>)
 8001c34:	f003 fe9e 	bl	8005974 <HAL_UART_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c3e:	f000 f899 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000454 	.word	0x20000454
 8001c4c:	40011000 	.word	0x40011000

08001c50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	4b10      	ldr	r3, [pc, #64]	@ (8001c9c <MX_DMA_Init+0x4c>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c9c <MX_DMA_Init+0x4c>)
 8001c60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c66:	4b0d      	ldr	r3, [pc, #52]	@ (8001c9c <MX_DMA_Init+0x4c>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2100      	movs	r1, #0
 8001c76:	2038      	movs	r0, #56	@ 0x38
 8001c78:	f001 fb15 	bl	80032a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c7c:	2038      	movs	r0, #56	@ 0x38
 8001c7e:	f001 fb2e 	bl	80032de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2100      	movs	r1, #0
 8001c86:	203a      	movs	r0, #58	@ 0x3a
 8001c88:	f001 fb0d 	bl	80032a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001c8c:	203a      	movs	r0, #58	@ 0x3a
 8001c8e:	f001 fb26 	bl	80032de <HAL_NVIC_EnableIRQ>

}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800

08001ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca6:	f107 030c 	add.w	r3, r7, #12
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
 8001cb4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	4b2b      	ldr	r3, [pc, #172]	@ (8001d68 <MX_GPIO_Init+0xc8>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8001d68 <MX_GPIO_Init+0xc8>)
 8001cc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc6:	4b28      	ldr	r3, [pc, #160]	@ (8001d68 <MX_GPIO_Init+0xc8>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	4b24      	ldr	r3, [pc, #144]	@ (8001d68 <MX_GPIO_Init+0xc8>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	4a23      	ldr	r2, [pc, #140]	@ (8001d68 <MX_GPIO_Init+0xc8>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce2:	4b21      	ldr	r3, [pc, #132]	@ (8001d68 <MX_GPIO_Init+0xc8>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d68 <MX_GPIO_Init+0xc8>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8001d68 <MX_GPIO_Init+0xc8>)
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001d68 <MX_GPIO_Init+0xc8>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S3_Pin|S2_Pin|S1_Pin|S0_Pin, GPIO_PIN_RESET);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f240 4107 	movw	r1, #1031	@ 0x407
 8001d10:	4816      	ldr	r0, [pc, #88]	@ (8001d6c <MX_GPIO_Init+0xcc>)
 8001d12:	f002 f885 	bl	8003e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, GPIO_PIN_SET);
 8001d16:	2201      	movs	r2, #1
 8001d18:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d1c:	4814      	ldr	r0, [pc, #80]	@ (8001d70 <MX_GPIO_Init+0xd0>)
 8001d1e:	f002 f87f 	bl	8003e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : S3_Pin S2_Pin S1_Pin S0_Pin */
  GPIO_InitStruct.Pin = S3_Pin|S2_Pin|S1_Pin|S0_Pin;
 8001d22:	f240 4307 	movw	r3, #1031	@ 0x407
 8001d26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d34:	f107 030c 	add.w	r3, r7, #12
 8001d38:	4619      	mov	r1, r3
 8001d3a:	480c      	ldr	r0, [pc, #48]	@ (8001d6c <MX_GPIO_Init+0xcc>)
 8001d3c:	f001 feec 	bl	8003b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : STBY_Pin */
  GPIO_InitStruct.Pin = STBY_Pin;
 8001d40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d46:	2301      	movs	r3, #1
 8001d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STBY_GPIO_Port, &GPIO_InitStruct);
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	4619      	mov	r1, r3
 8001d58:	4805      	ldr	r0, [pc, #20]	@ (8001d70 <MX_GPIO_Init+0xd0>)
 8001d5a:	f001 fedd 	bl	8003b18 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001d5e:	bf00      	nop
 8001d60:	3720      	adds	r7, #32
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40020400 	.word	0x40020400
 8001d70:	40020000 	.word	0x40020000

08001d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d78:	b672      	cpsid	i
}
 8001d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <Error_Handler+0x8>

08001d80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	4b10      	ldr	r3, [pc, #64]	@ (8001dcc <HAL_MspInit+0x4c>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8e:	4a0f      	ldr	r2, [pc, #60]	@ (8001dcc <HAL_MspInit+0x4c>)
 8001d90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d96:	4b0d      	ldr	r3, [pc, #52]	@ (8001dcc <HAL_MspInit+0x4c>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d9e:	607b      	str	r3, [r7, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	603b      	str	r3, [r7, #0]
 8001da6:	4b09      	ldr	r3, [pc, #36]	@ (8001dcc <HAL_MspInit+0x4c>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001daa:	4a08      	ldr	r2, [pc, #32]	@ (8001dcc <HAL_MspInit+0x4c>)
 8001dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001db2:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <HAL_MspInit+0x4c>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dba:	603b      	str	r3, [r7, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800

08001dd0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	@ 0x28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a33      	ldr	r2, [pc, #204]	@ (8001ebc <HAL_ADC_MspInit+0xec>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d15f      	bne.n	8001eb2 <HAL_ADC_MspInit+0xe2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	4b32      	ldr	r3, [pc, #200]	@ (8001ec0 <HAL_ADC_MspInit+0xf0>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfa:	4a31      	ldr	r2, [pc, #196]	@ (8001ec0 <HAL_ADC_MspInit+0xf0>)
 8001dfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e02:	4b2f      	ldr	r3, [pc, #188]	@ (8001ec0 <HAL_ADC_MspInit+0xf0>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec0 <HAL_ADC_MspInit+0xf0>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	4a2a      	ldr	r2, [pc, #168]	@ (8001ec0 <HAL_ADC_MspInit+0xf0>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1e:	4b28      	ldr	r3, [pc, #160]	@ (8001ec0 <HAL_ADC_MspInit+0xf0>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = OUT_Pin;
 8001e2a:	2380      	movs	r3, #128	@ 0x80
 8001e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OUT_GPIO_Port, &GPIO_InitStruct);
 8001e36:	f107 0314 	add.w	r3, r7, #20
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4821      	ldr	r0, [pc, #132]	@ (8001ec4 <HAL_ADC_MspInit+0xf4>)
 8001e3e:	f001 fe6b 	bl	8003b18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e42:	4b21      	ldr	r3, [pc, #132]	@ (8001ec8 <HAL_ADC_MspInit+0xf8>)
 8001e44:	4a21      	ldr	r2, [pc, #132]	@ (8001ecc <HAL_ADC_MspInit+0xfc>)
 8001e46:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e48:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec8 <HAL_ADC_MspInit+0xf8>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec8 <HAL_ADC_MspInit+0xf8>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e54:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec8 <HAL_ADC_MspInit+0xf8>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec8 <HAL_ADC_MspInit+0xf8>)
 8001e5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e60:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e62:	4b19      	ldr	r3, [pc, #100]	@ (8001ec8 <HAL_ADC_MspInit+0xf8>)
 8001e64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e68:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e6a:	4b17      	ldr	r3, [pc, #92]	@ (8001ec8 <HAL_ADC_MspInit+0xf8>)
 8001e6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e70:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e72:	4b15      	ldr	r3, [pc, #84]	@ (8001ec8 <HAL_ADC_MspInit+0xf8>)
 8001e74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e78:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e7a:	4b13      	ldr	r3, [pc, #76]	@ (8001ec8 <HAL_ADC_MspInit+0xf8>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e80:	4b11      	ldr	r3, [pc, #68]	@ (8001ec8 <HAL_ADC_MspInit+0xf8>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e86:	4810      	ldr	r0, [pc, #64]	@ (8001ec8 <HAL_ADC_MspInit+0xf8>)
 8001e88:	f001 fa44 	bl	8003314 <HAL_DMA_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001e92:	f7ff ff6f 	bl	8001d74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a0b      	ldr	r2, [pc, #44]	@ (8001ec8 <HAL_ADC_MspInit+0xf8>)
 8001e9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec8 <HAL_ADC_MspInit+0xf8>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	2012      	movs	r0, #18
 8001ea8:	f001 f9fd 	bl	80032a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001eac:	2012      	movs	r0, #18
 8001eae:	f001 fa16 	bl	80032de <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001eb2:	bf00      	nop
 8001eb4:	3728      	adds	r7, #40	@ 0x28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40012000 	.word	0x40012000
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020000 	.word	0x40020000
 8001ec8:	20000244 	.word	0x20000244
 8001ecc:	40026410 	.word	0x40026410

08001ed0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a30      	ldr	r2, [pc, #192]	@ (8001fa0 <HAL_TIM_Base_MspInit+0xd0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d10e      	bne.n	8001f00 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	4b2f      	ldr	r3, [pc, #188]	@ (8001fa4 <HAL_TIM_Base_MspInit+0xd4>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eea:	4a2e      	ldr	r2, [pc, #184]	@ (8001fa4 <HAL_TIM_Base_MspInit+0xd4>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8001fa4 <HAL_TIM_Base_MspInit+0xd4>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM9_MspInit 1 */

    /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001efe:	e04a      	b.n	8001f96 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a28      	ldr	r2, [pc, #160]	@ (8001fa8 <HAL_TIM_Base_MspInit+0xd8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d116      	bne.n	8001f38 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	4b25      	ldr	r3, [pc, #148]	@ (8001fa4 <HAL_TIM_Base_MspInit+0xd4>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	4a24      	ldr	r2, [pc, #144]	@ (8001fa4 <HAL_TIM_Base_MspInit+0xd4>)
 8001f14:	f043 0302 	orr.w	r3, r3, #2
 8001f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f1a:	4b22      	ldr	r3, [pc, #136]	@ (8001fa4 <HAL_TIM_Base_MspInit+0xd4>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2100      	movs	r1, #0
 8001f2a:	201d      	movs	r0, #29
 8001f2c:	f001 f9bb 	bl	80032a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f30:	201d      	movs	r0, #29
 8001f32:	f001 f9d4 	bl	80032de <HAL_NVIC_EnableIRQ>
}
 8001f36:	e02e      	b.n	8001f96 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a1b      	ldr	r2, [pc, #108]	@ (8001fac <HAL_TIM_Base_MspInit+0xdc>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d116      	bne.n	8001f70 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	4b17      	ldr	r3, [pc, #92]	@ (8001fa4 <HAL_TIM_Base_MspInit+0xd4>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	4a16      	ldr	r2, [pc, #88]	@ (8001fa4 <HAL_TIM_Base_MspInit+0xd4>)
 8001f4c:	f043 0304 	orr.w	r3, r3, #4
 8001f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f52:	4b14      	ldr	r3, [pc, #80]	@ (8001fa4 <HAL_TIM_Base_MspInit+0xd4>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2100      	movs	r1, #0
 8001f62:	201e      	movs	r0, #30
 8001f64:	f001 f99f 	bl	80032a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f68:	201e      	movs	r0, #30
 8001f6a:	f001 f9b8 	bl	80032de <HAL_NVIC_EnableIRQ>
}
 8001f6e:	e012      	b.n	8001f96 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM9)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0e      	ldr	r2, [pc, #56]	@ (8001fb0 <HAL_TIM_Base_MspInit+0xe0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d10d      	bne.n	8001f96 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	4b09      	ldr	r3, [pc, #36]	@ (8001fa4 <HAL_TIM_Base_MspInit+0xd4>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f82:	4a08      	ldr	r2, [pc, #32]	@ (8001fa4 <HAL_TIM_Base_MspInit+0xd4>)
 8001f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f8a:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <HAL_TIM_Base_MspInit+0xd4>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]
}
 8001f96:	bf00      	nop
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40010000 	.word	0x40010000
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40000400 	.word	0x40000400
 8001fac:	40000800 	.word	0x40000800
 8001fb0:	40014000 	.word	0x40014000

08001fb4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08c      	sub	sp, #48	@ 0x30
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 031c 	add.w	r3, r7, #28
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fd4:	d14a      	bne.n	800206c <HAL_TIM_Encoder_MspInit+0xb8>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61bb      	str	r3, [r7, #24]
 8001fda:	4b3f      	ldr	r3, [pc, #252]	@ (80020d8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	4a3e      	ldr	r2, [pc, #248]	@ (80020d8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fe6:	4b3c      	ldr	r3, [pc, #240]	@ (80020d8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	61bb      	str	r3, [r7, #24]
 8001ff0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	4b38      	ldr	r3, [pc, #224]	@ (80020d8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	4a37      	ldr	r2, [pc, #220]	@ (80020d8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6313      	str	r3, [r2, #48]	@ 0x30
 8002002:	4b35      	ldr	r3, [pc, #212]	@ (80020d8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	4b31      	ldr	r3, [pc, #196]	@ (80020d8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	4a30      	ldr	r2, [pc, #192]	@ (80020d8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	6313      	str	r3, [r2, #48]	@ 0x30
 800201e:	4b2e      	ldr	r3, [pc, #184]	@ (80020d8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODERA1_Pin;
 800202a:	2320      	movs	r3, #32
 800202c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002036:	2300      	movs	r3, #0
 8002038:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800203a:	2301      	movs	r3, #1
 800203c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ENCODERA1_GPIO_Port, &GPIO_InitStruct);
 800203e:	f107 031c 	add.w	r3, r7, #28
 8002042:	4619      	mov	r1, r3
 8002044:	4825      	ldr	r0, [pc, #148]	@ (80020dc <HAL_TIM_Encoder_MspInit+0x128>)
 8002046:	f001 fd67 	bl	8003b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODERA2_Pin;
 800204a:	2308      	movs	r3, #8
 800204c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002056:	2300      	movs	r3, #0
 8002058:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800205a:	2301      	movs	r3, #1
 800205c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ENCODERA2_GPIO_Port, &GPIO_InitStruct);
 800205e:	f107 031c 	add.w	r3, r7, #28
 8002062:	4619      	mov	r1, r3
 8002064:	481e      	ldr	r0, [pc, #120]	@ (80020e0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002066:	f001 fd57 	bl	8003b18 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 800206a:	e030      	b.n	80020ce <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM5)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a1c      	ldr	r2, [pc, #112]	@ (80020e4 <HAL_TIM_Encoder_MspInit+0x130>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d12b      	bne.n	80020ce <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	4b17      	ldr	r3, [pc, #92]	@ (80020d8 <HAL_TIM_Encoder_MspInit+0x124>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	4a16      	ldr	r2, [pc, #88]	@ (80020d8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002080:	f043 0308 	orr.w	r3, r3, #8
 8002084:	6413      	str	r3, [r2, #64]	@ 0x40
 8002086:	4b14      	ldr	r3, [pc, #80]	@ (80020d8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	4b10      	ldr	r3, [pc, #64]	@ (80020d8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	4a0f      	ldr	r2, [pc, #60]	@ (80020d8 <HAL_TIM_Encoder_MspInit+0x124>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a2:	4b0d      	ldr	r3, [pc, #52]	@ (80020d8 <HAL_TIM_Encoder_MspInit+0x124>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODERB1_Pin|ENCODERB2_Pin;
 80020ae:	2303      	movs	r3, #3
 80020b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80020be:	2302      	movs	r3, #2
 80020c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c2:	f107 031c 	add.w	r3, r7, #28
 80020c6:	4619      	mov	r1, r3
 80020c8:	4804      	ldr	r0, [pc, #16]	@ (80020dc <HAL_TIM_Encoder_MspInit+0x128>)
 80020ca:	f001 fd25 	bl	8003b18 <HAL_GPIO_Init>
}
 80020ce:	bf00      	nop
 80020d0:	3730      	adds	r7, #48	@ 0x30
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40020000 	.word	0x40020000
 80020e0:	40020400 	.word	0x40020400
 80020e4:	40000c00 	.word	0x40000c00

080020e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	@ 0x28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a24      	ldr	r2, [pc, #144]	@ (8002198 <HAL_TIM_MspPostInit+0xb0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d11f      	bne.n	800214a <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	4b23      	ldr	r3, [pc, #140]	@ (800219c <HAL_TIM_MspPostInit+0xb4>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	4a22      	ldr	r2, [pc, #136]	@ (800219c <HAL_TIM_MspPostInit+0xb4>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6313      	str	r3, [r2, #48]	@ 0x30
 800211a:	4b20      	ldr	r3, [pc, #128]	@ (800219c <HAL_TIM_MspPostInit+0xb4>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = INA1_Pin|INA2_Pin|INB1_Pin|INB2_Pin;
 8002126:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800212a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212c:	2302      	movs	r3, #2
 800212e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002134:	2300      	movs	r3, #0
 8002136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002138:	2301      	movs	r3, #1
 800213a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	4619      	mov	r1, r3
 8002142:	4817      	ldr	r0, [pc, #92]	@ (80021a0 <HAL_TIM_MspPostInit+0xb8>)
 8002144:	f001 fce8 	bl	8003b18 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM9_MspPostInit 1 */

    /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002148:	e022      	b.n	8002190 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a15      	ldr	r2, [pc, #84]	@ (80021a4 <HAL_TIM_MspPostInit+0xbc>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d11d      	bne.n	8002190 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	4b10      	ldr	r3, [pc, #64]	@ (800219c <HAL_TIM_MspPostInit+0xb4>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215c:	4a0f      	ldr	r2, [pc, #60]	@ (800219c <HAL_TIM_MspPostInit+0xb4>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6313      	str	r3, [r2, #48]	@ 0x30
 8002164:	4b0d      	ldr	r3, [pc, #52]	@ (800219c <HAL_TIM_MspPostInit+0xb4>)
 8002166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ESC_Pin;
 8002170:	2304      	movs	r3, #4
 8002172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	2302      	movs	r3, #2
 8002176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217c:	2300      	movs	r3, #0
 800217e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002180:	2303      	movs	r3, #3
 8002182:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ESC_GPIO_Port, &GPIO_InitStruct);
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	4619      	mov	r1, r3
 800218a:	4805      	ldr	r0, [pc, #20]	@ (80021a0 <HAL_TIM_MspPostInit+0xb8>)
 800218c:	f001 fcc4 	bl	8003b18 <HAL_GPIO_Init>
}
 8002190:	bf00      	nop
 8002192:	3728      	adds	r7, #40	@ 0x28
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40010000 	.word	0x40010000
 800219c:	40023800 	.word	0x40023800
 80021a0:	40020000 	.word	0x40020000
 80021a4:	40014000 	.word	0x40014000

080021a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	@ 0x28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a44      	ldr	r2, [pc, #272]	@ (80022d8 <HAL_UART_MspInit+0x130>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	f040 8082 	bne.w	80022d0 <HAL_UART_MspInit+0x128>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021cc:	2300      	movs	r3, #0
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	4b42      	ldr	r3, [pc, #264]	@ (80022dc <HAL_UART_MspInit+0x134>)
 80021d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d4:	4a41      	ldr	r2, [pc, #260]	@ (80022dc <HAL_UART_MspInit+0x134>)
 80021d6:	f043 0310 	orr.w	r3, r3, #16
 80021da:	6453      	str	r3, [r2, #68]	@ 0x44
 80021dc:	4b3f      	ldr	r3, [pc, #252]	@ (80022dc <HAL_UART_MspInit+0x134>)
 80021de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e0:	f003 0310 	and.w	r3, r3, #16
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	4b3b      	ldr	r3, [pc, #236]	@ (80022dc <HAL_UART_MspInit+0x134>)
 80021ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f0:	4a3a      	ldr	r2, [pc, #232]	@ (80022dc <HAL_UART_MspInit+0x134>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f8:	4b38      	ldr	r3, [pc, #224]	@ (80022dc <HAL_UART_MspInit+0x134>)
 80021fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002204:	2300      	movs	r3, #0
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	4b34      	ldr	r3, [pc, #208]	@ (80022dc <HAL_UART_MspInit+0x134>)
 800220a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220c:	4a33      	ldr	r2, [pc, #204]	@ (80022dc <HAL_UART_MspInit+0x134>)
 800220e:	f043 0302 	orr.w	r3, r3, #2
 8002212:	6313      	str	r3, [r2, #48]	@ 0x30
 8002214:	4b31      	ldr	r3, [pc, #196]	@ (80022dc <HAL_UART_MspInit+0x134>)
 8002216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002220:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222e:	2303      	movs	r3, #3
 8002230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002232:	2307      	movs	r3, #7
 8002234:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	4619      	mov	r1, r3
 800223c:	4828      	ldr	r0, [pc, #160]	@ (80022e0 <HAL_UART_MspInit+0x138>)
 800223e:	f001 fc6b 	bl	8003b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002242:	2380      	movs	r3, #128	@ 0x80
 8002244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002246:	2302      	movs	r3, #2
 8002248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224e:	2303      	movs	r3, #3
 8002250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002252:	2307      	movs	r3, #7
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002256:	f107 0314 	add.w	r3, r7, #20
 800225a:	4619      	mov	r1, r3
 800225c:	4821      	ldr	r0, [pc, #132]	@ (80022e4 <HAL_UART_MspInit+0x13c>)
 800225e:	f001 fc5b 	bl	8003b18 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002262:	4b21      	ldr	r3, [pc, #132]	@ (80022e8 <HAL_UART_MspInit+0x140>)
 8002264:	4a21      	ldr	r2, [pc, #132]	@ (80022ec <HAL_UART_MspInit+0x144>)
 8002266:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002268:	4b1f      	ldr	r3, [pc, #124]	@ (80022e8 <HAL_UART_MspInit+0x140>)
 800226a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800226e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002270:	4b1d      	ldr	r3, [pc, #116]	@ (80022e8 <HAL_UART_MspInit+0x140>)
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002276:	4b1c      	ldr	r3, [pc, #112]	@ (80022e8 <HAL_UART_MspInit+0x140>)
 8002278:	2200      	movs	r2, #0
 800227a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800227c:	4b1a      	ldr	r3, [pc, #104]	@ (80022e8 <HAL_UART_MspInit+0x140>)
 800227e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002282:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002284:	4b18      	ldr	r3, [pc, #96]	@ (80022e8 <HAL_UART_MspInit+0x140>)
 8002286:	2200      	movs	r2, #0
 8002288:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800228a:	4b17      	ldr	r3, [pc, #92]	@ (80022e8 <HAL_UART_MspInit+0x140>)
 800228c:	2200      	movs	r2, #0
 800228e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002290:	4b15      	ldr	r3, [pc, #84]	@ (80022e8 <HAL_UART_MspInit+0x140>)
 8002292:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002296:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002298:	4b13      	ldr	r3, [pc, #76]	@ (80022e8 <HAL_UART_MspInit+0x140>)
 800229a:	2200      	movs	r2, #0
 800229c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800229e:	4b12      	ldr	r3, [pc, #72]	@ (80022e8 <HAL_UART_MspInit+0x140>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80022a4:	4810      	ldr	r0, [pc, #64]	@ (80022e8 <HAL_UART_MspInit+0x140>)
 80022a6:	f001 f835 	bl	8003314 <HAL_DMA_Init>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80022b0:	f7ff fd60 	bl	8001d74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a0c      	ldr	r2, [pc, #48]	@ (80022e8 <HAL_UART_MspInit+0x140>)
 80022b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80022ba:	4a0b      	ldr	r2, [pc, #44]	@ (80022e8 <HAL_UART_MspInit+0x140>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022c0:	2200      	movs	r2, #0
 80022c2:	2100      	movs	r1, #0
 80022c4:	2025      	movs	r0, #37	@ 0x25
 80022c6:	f000 ffee 	bl	80032a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022ca:	2025      	movs	r0, #37	@ 0x25
 80022cc:	f001 f807 	bl	80032de <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80022d0:	bf00      	nop
 80022d2:	3728      	adds	r7, #40	@ 0x28
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40011000 	.word	0x40011000
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40020000 	.word	0x40020000
 80022e4:	40020400 	.word	0x40020400
 80022e8:	2000049c 	.word	0x2000049c
 80022ec:	40026440 	.word	0x40026440

080022f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022f4:	bf00      	nop
 80022f6:	e7fd      	b.n	80022f4 <NMI_Handler+0x4>

080022f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022fc:	bf00      	nop
 80022fe:	e7fd      	b.n	80022fc <HardFault_Handler+0x4>

08002300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002304:	bf00      	nop
 8002306:	e7fd      	b.n	8002304 <MemManage_Handler+0x4>

08002308 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800230c:	bf00      	nop
 800230e:	e7fd      	b.n	800230c <BusFault_Handler+0x4>

08002310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002314:	bf00      	nop
 8002316:	e7fd      	b.n	8002314 <UsageFault_Handler+0x4>

08002318 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002346:	f000 f993 	bl	8002670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002354:	4802      	ldr	r0, [pc, #8]	@ (8002360 <ADC_IRQHandler+0x10>)
 8002356:	f000 f9ee 	bl	8002736 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200001fc 	.word	0x200001fc

08002364 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002368:	4802      	ldr	r0, [pc, #8]	@ (8002374 <TIM3_IRQHandler+0x10>)
 800236a:	f002 fcbb 	bl	8004ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000334 	.word	0x20000334

08002378 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800237c:	4802      	ldr	r0, [pc, #8]	@ (8002388 <TIM4_IRQHandler+0x10>)
 800237e:	f002 fcb1 	bl	8004ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	2000037c 	.word	0x2000037c

0800238c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002390:	4802      	ldr	r0, [pc, #8]	@ (800239c <USART1_IRQHandler+0x10>)
 8002392:	f003 fb3f 	bl	8005a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000454 	.word	0x20000454

080023a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023a4:	4802      	ldr	r0, [pc, #8]	@ (80023b0 <DMA2_Stream0_IRQHandler+0x10>)
 80023a6:	f001 f94d 	bl	8003644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000244 	.word	0x20000244

080023b4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80023b8:	4802      	ldr	r0, [pc, #8]	@ (80023c4 <DMA2_Stream2_IRQHandler+0x10>)
 80023ba:	f001 f943 	bl	8003644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	2000049c 	.word	0x2000049c

080023c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return 1;
 80023cc:	2301      	movs	r3, #1
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <_kill>:

int _kill(int pid, int sig)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023e2:	f005 f9d7 	bl	8007794 <__errno>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2216      	movs	r2, #22
 80023ea:	601a      	str	r2, [r3, #0]
  return -1;
 80023ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <_exit>:

void _exit (int status)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002400:	f04f 31ff 	mov.w	r1, #4294967295
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff ffe7 	bl	80023d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800240a:	bf00      	nop
 800240c:	e7fd      	b.n	800240a <_exit+0x12>

0800240e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b086      	sub	sp, #24
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	e00a      	b.n	8002436 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002420:	f3af 8000 	nop.w
 8002424:	4601      	mov	r1, r0
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	60ba      	str	r2, [r7, #8]
 800242c:	b2ca      	uxtb	r2, r1
 800242e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	3301      	adds	r3, #1
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	429a      	cmp	r2, r3
 800243c:	dbf0      	blt.n	8002420 <_read+0x12>
  }

  return len;
 800243e:	687b      	ldr	r3, [r7, #4]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	e009      	b.n	800246e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	60ba      	str	r2, [r7, #8]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	3301      	adds	r3, #1
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	429a      	cmp	r2, r3
 8002474:	dbf1      	blt.n	800245a <_write+0x12>
  }
  return len;
 8002476:	687b      	ldr	r3, [r7, #4]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <_close>:

int _close(int file)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002488:	f04f 33ff 	mov.w	r3, #4294967295
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024a8:	605a      	str	r2, [r3, #4]
  return 0;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <_isatty>:

int _isatty(int file)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024c0:	2301      	movs	r3, #1
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b085      	sub	sp, #20
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	60f8      	str	r0, [r7, #12]
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024f0:	4a14      	ldr	r2, [pc, #80]	@ (8002544 <_sbrk+0x5c>)
 80024f2:	4b15      	ldr	r3, [pc, #84]	@ (8002548 <_sbrk+0x60>)
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024fc:	4b13      	ldr	r3, [pc, #76]	@ (800254c <_sbrk+0x64>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d102      	bne.n	800250a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002504:	4b11      	ldr	r3, [pc, #68]	@ (800254c <_sbrk+0x64>)
 8002506:	4a12      	ldr	r2, [pc, #72]	@ (8002550 <_sbrk+0x68>)
 8002508:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800250a:	4b10      	ldr	r3, [pc, #64]	@ (800254c <_sbrk+0x64>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	429a      	cmp	r2, r3
 8002516:	d207      	bcs.n	8002528 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002518:	f005 f93c 	bl	8007794 <__errno>
 800251c:	4603      	mov	r3, r0
 800251e:	220c      	movs	r2, #12
 8002520:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002522:	f04f 33ff 	mov.w	r3, #4294967295
 8002526:	e009      	b.n	800253c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002528:	4b08      	ldr	r3, [pc, #32]	@ (800254c <_sbrk+0x64>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800252e:	4b07      	ldr	r3, [pc, #28]	@ (800254c <_sbrk+0x64>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4413      	add	r3, r2
 8002536:	4a05      	ldr	r2, [pc, #20]	@ (800254c <_sbrk+0x64>)
 8002538:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800253a:	68fb      	ldr	r3, [r7, #12]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20020000 	.word	0x20020000
 8002548:	00000400 	.word	0x00000400
 800254c:	20000550 	.word	0x20000550
 8002550:	200006a8 	.word	0x200006a8

08002554 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002558:	4b06      	ldr	r3, [pc, #24]	@ (8002574 <SystemInit+0x20>)
 800255a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800255e:	4a05      	ldr	r2, [pc, #20]	@ (8002574 <SystemInit+0x20>)
 8002560:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002564:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002568:	bf00      	nop
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002578:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800257c:	f7ff ffea 	bl	8002554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002580:	480c      	ldr	r0, [pc, #48]	@ (80025b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002582:	490d      	ldr	r1, [pc, #52]	@ (80025b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002584:	4a0d      	ldr	r2, [pc, #52]	@ (80025bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002588:	e002      	b.n	8002590 <LoopCopyDataInit>

0800258a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800258a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800258c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800258e:	3304      	adds	r3, #4

08002590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002594:	d3f9      	bcc.n	800258a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002596:	4a0a      	ldr	r2, [pc, #40]	@ (80025c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002598:	4c0a      	ldr	r4, [pc, #40]	@ (80025c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800259a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800259c:	e001      	b.n	80025a2 <LoopFillZerobss>

0800259e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800259e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025a0:	3204      	adds	r2, #4

080025a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025a4:	d3fb      	bcc.n	800259e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025a6:	f005 f8fb 	bl	80077a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025aa:	f7fe ffad 	bl	8001508 <main>
  bx  lr    
 80025ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025b8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80025bc:	0800b32c 	.word	0x0800b32c
  ldr r2, =_sbss
 80025c0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80025c4:	200006a4 	.word	0x200006a4

080025c8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025c8:	e7fe      	b.n	80025c8 <DMA1_Stream0_IRQHandler>
	...

080025cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025d0:	4b0e      	ldr	r3, [pc, #56]	@ (800260c <HAL_Init+0x40>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a0d      	ldr	r2, [pc, #52]	@ (800260c <HAL_Init+0x40>)
 80025d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025dc:	4b0b      	ldr	r3, [pc, #44]	@ (800260c <HAL_Init+0x40>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a0a      	ldr	r2, [pc, #40]	@ (800260c <HAL_Init+0x40>)
 80025e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025e8:	4b08      	ldr	r3, [pc, #32]	@ (800260c <HAL_Init+0x40>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a07      	ldr	r2, [pc, #28]	@ (800260c <HAL_Init+0x40>)
 80025ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025f4:	2003      	movs	r0, #3
 80025f6:	f000 fe4b 	bl	8003290 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025fa:	200f      	movs	r0, #15
 80025fc:	f000 f808 	bl	8002610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002600:	f7ff fbbe 	bl	8001d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40023c00 	.word	0x40023c00

08002610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002618:	4b12      	ldr	r3, [pc, #72]	@ (8002664 <HAL_InitTick+0x54>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4b12      	ldr	r3, [pc, #72]	@ (8002668 <HAL_InitTick+0x58>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	4619      	mov	r1, r3
 8002622:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002626:	fbb3 f3f1 	udiv	r3, r3, r1
 800262a:	fbb2 f3f3 	udiv	r3, r2, r3
 800262e:	4618      	mov	r0, r3
 8002630:	f000 fe63 	bl	80032fa <HAL_SYSTICK_Config>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e00e      	b.n	800265c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b0f      	cmp	r3, #15
 8002642:	d80a      	bhi.n	800265a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002644:	2200      	movs	r2, #0
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	f04f 30ff 	mov.w	r0, #4294967295
 800264c:	f000 fe2b 	bl	80032a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002650:	4a06      	ldr	r2, [pc, #24]	@ (800266c <HAL_InitTick+0x5c>)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	e000      	b.n	800265c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
}
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	2000000c 	.word	0x2000000c
 8002668:	20000014 	.word	0x20000014
 800266c:	20000010 	.word	0x20000010

08002670 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002674:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <HAL_IncTick+0x20>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <HAL_IncTick+0x24>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4413      	add	r3, r2
 8002680:	4a04      	ldr	r2, [pc, #16]	@ (8002694 <HAL_IncTick+0x24>)
 8002682:	6013      	str	r3, [r2, #0]
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	20000014 	.word	0x20000014
 8002694:	20000554 	.word	0x20000554

08002698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return uwTick;
 800269c:	4b03      	ldr	r3, [pc, #12]	@ (80026ac <HAL_GetTick+0x14>)
 800269e:	681b      	ldr	r3, [r3, #0]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	20000554 	.word	0x20000554

080026b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e033      	b.n	800272e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff fb7e 	bl	8001dd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d118      	bne.n	8002720 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80026f6:	f023 0302 	bic.w	r3, r3, #2
 80026fa:	f043 0202 	orr.w	r2, r3, #2
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 fb6c 	bl	8002de0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	f023 0303 	bic.w	r3, r3, #3
 8002716:	f043 0201 	orr.w	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	641a      	str	r2, [r3, #64]	@ 0x40
 800271e:	e001      	b.n	8002724 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b086      	sub	sp, #24
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	2300      	movs	r3, #0
 8002744:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f003 0320 	and.w	r3, r3, #32
 8002764:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d049      	beq.n	8002800 <HAL_ADC_IRQHandler+0xca>
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d046      	beq.n	8002800 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b00      	cmp	r3, #0
 800277c:	d105      	bne.n	800278a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d12b      	bne.n	80027f0 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800279c:	2b00      	cmp	r3, #0
 800279e:	d127      	bne.n	80027f0 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d006      	beq.n	80027bc <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d119      	bne.n	80027f0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0220 	bic.w	r2, r2, #32
 80027ca:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d105      	bne.n	80027f0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e8:	f043 0201 	orr.w	r2, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7fe fe3b 	bl	800146c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f06f 0212 	mvn.w	r2, #18
 80027fe:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800280e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d057      	beq.n	80028c6 <HAL_ADC_IRQHandler+0x190>
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d054      	beq.n	80028c6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002820:	f003 0310 	and.w	r3, r3, #16
 8002824:	2b00      	cmp	r3, #0
 8002826:	d105      	bne.n	8002834 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d139      	bne.n	80028b6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002848:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800284c:	2b00      	cmp	r3, #0
 800284e:	d006      	beq.n	800285e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800285a:	2b00      	cmp	r3, #0
 800285c:	d12b      	bne.n	80028b6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002868:	2b00      	cmp	r3, #0
 800286a:	d124      	bne.n	80028b6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002876:	2b00      	cmp	r3, #0
 8002878:	d11d      	bne.n	80028b6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800287e:	2b00      	cmp	r3, #0
 8002880:	d119      	bne.n	80028b6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002890:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d105      	bne.n	80028b6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	f043 0201 	orr.w	r2, r3, #1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 fc10 	bl	80030dc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 020c 	mvn.w	r2, #12
 80028c4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028d4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d017      	beq.n	800290c <HAL_ADC_IRQHandler+0x1d6>
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d014      	beq.n	800290c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d10d      	bne.n	800290c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f929 	bl	8002b54 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f06f 0201 	mvn.w	r2, #1
 800290a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800291a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d015      	beq.n	800294e <HAL_ADC_IRQHandler+0x218>
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d012      	beq.n	800294e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292c:	f043 0202 	orr.w	r2, r3, #2
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f06f 0220 	mvn.w	r2, #32
 800293c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f912 	bl	8002b68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f06f 0220 	mvn.w	r2, #32
 800294c:	601a      	str	r2, [r3, #0]
  }
}
 800294e:	bf00      	nop
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_ADC_Start_DMA+0x22>
 8002976:	2302      	movs	r3, #2
 8002978:	e0d0      	b.n	8002b1c <HAL_ADC_Start_DMA+0x1c4>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b01      	cmp	r3, #1
 800298e:	d018      	beq.n	80029c2 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029a0:	4b60      	ldr	r3, [pc, #384]	@ (8002b24 <HAL_ADC_Start_DMA+0x1cc>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a60      	ldr	r2, [pc, #384]	@ (8002b28 <HAL_ADC_Start_DMA+0x1d0>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	0c9a      	lsrs	r2, r3, #18
 80029ac:	4613      	mov	r3, r2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80029b4:	e002      	b.n	80029bc <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	3b01      	subs	r3, #1
 80029ba:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f9      	bne.n	80029b6 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029d0:	d107      	bne.n	80029e2 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029e0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	f040 8088 	bne.w	8002b02 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80029fa:	f023 0301 	bic.w	r3, r3, #1
 80029fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d007      	beq.n	8002a24 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a18:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a1c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a30:	d106      	bne.n	8002a40 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a36:	f023 0206 	bic.w	r2, r3, #6
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	645a      	str	r2, [r3, #68]	@ 0x44
 8002a3e:	e002      	b.n	8002a46 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a4e:	4b37      	ldr	r3, [pc, #220]	@ (8002b2c <HAL_ADC_Start_DMA+0x1d4>)
 8002a50:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a56:	4a36      	ldr	r2, [pc, #216]	@ (8002b30 <HAL_ADC_Start_DMA+0x1d8>)
 8002a58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a5e:	4a35      	ldr	r2, [pc, #212]	@ (8002b34 <HAL_ADC_Start_DMA+0x1dc>)
 8002a60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a66:	4a34      	ldr	r2, [pc, #208]	@ (8002b38 <HAL_ADC_Start_DMA+0x1e0>)
 8002a68:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002a72:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002a82:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a92:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	334c      	adds	r3, #76	@ 0x4c
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f000 fce4 	bl	8003470 <HAL_DMA_Start_IT>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10f      	bne.n	8002ad8 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d129      	bne.n	8002b1a <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002ad4:	609a      	str	r2, [r3, #8]
 8002ad6:	e020      	b.n	8002b1a <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a17      	ldr	r2, [pc, #92]	@ (8002b3c <HAL_ADC_Start_DMA+0x1e4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d11b      	bne.n	8002b1a <HAL_ADC_Start_DMA+0x1c2>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d114      	bne.n	8002b1a <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	e00b      	b.n	8002b1a <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	f043 0210 	orr.w	r2, r3, #16
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b12:	f043 0201 	orr.w	r2, r3, #1
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002b1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3720      	adds	r7, #32
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	2000000c 	.word	0x2000000c
 8002b28:	431bde83 	.word	0x431bde83
 8002b2c:	40012300 	.word	0x40012300
 8002b30:	08002fd9 	.word	0x08002fd9
 8002b34:	08003093 	.word	0x08003093
 8002b38:	080030af 	.word	0x080030af
 8002b3c:	40012000 	.word	0x40012000

08002b40 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x1c>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e113      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x244>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b09      	cmp	r3, #9
 8002ba6:	d925      	bls.n	8002bf4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68d9      	ldr	r1, [r3, #12]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	3b1e      	subs	r3, #30
 8002bbe:	2207      	movs	r2, #7
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43da      	mvns	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	400a      	ands	r2, r1
 8002bcc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68d9      	ldr	r1, [r3, #12]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	4618      	mov	r0, r3
 8002be0:	4603      	mov	r3, r0
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	4403      	add	r3, r0
 8002be6:	3b1e      	subs	r3, #30
 8002be8:	409a      	lsls	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	e022      	b.n	8002c3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6919      	ldr	r1, [r3, #16]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	461a      	mov	r2, r3
 8002c02:	4613      	mov	r3, r2
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	4413      	add	r3, r2
 8002c08:	2207      	movs	r2, #7
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43da      	mvns	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	400a      	ands	r2, r1
 8002c16:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6919      	ldr	r1, [r3, #16]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	4618      	mov	r0, r3
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	4403      	add	r3, r0
 8002c30:	409a      	lsls	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b06      	cmp	r3, #6
 8002c40:	d824      	bhi.n	8002c8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	3b05      	subs	r3, #5
 8002c54:	221f      	movs	r2, #31
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43da      	mvns	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	400a      	ands	r2, r1
 8002c62:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	4618      	mov	r0, r3
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3b05      	subs	r3, #5
 8002c7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c8a:	e04c      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b0c      	cmp	r3, #12
 8002c92:	d824      	bhi.n	8002cde <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3b23      	subs	r3, #35	@ 0x23
 8002ca6:	221f      	movs	r2, #31
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43da      	mvns	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	400a      	ands	r2, r1
 8002cb4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	3b23      	subs	r3, #35	@ 0x23
 8002cd0:	fa00 f203 	lsl.w	r2, r0, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cdc:	e023      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	3b41      	subs	r3, #65	@ 0x41
 8002cf0:	221f      	movs	r2, #31
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43da      	mvns	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	400a      	ands	r2, r1
 8002cfe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	3b41      	subs	r3, #65	@ 0x41
 8002d1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d26:	4b29      	ldr	r3, [pc, #164]	@ (8002dcc <HAL_ADC_ConfigChannel+0x250>)
 8002d28:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a28      	ldr	r2, [pc, #160]	@ (8002dd0 <HAL_ADC_ConfigChannel+0x254>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d10f      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x1d8>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b12      	cmp	r3, #18
 8002d3a:	d10b      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a1d      	ldr	r2, [pc, #116]	@ (8002dd0 <HAL_ADC_ConfigChannel+0x254>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d12b      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x23a>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a1c      	ldr	r2, [pc, #112]	@ (8002dd4 <HAL_ADC_ConfigChannel+0x258>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d003      	beq.n	8002d70 <HAL_ADC_ConfigChannel+0x1f4>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b11      	cmp	r3, #17
 8002d6e:	d122      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a11      	ldr	r2, [pc, #68]	@ (8002dd4 <HAL_ADC_ConfigChannel+0x258>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d111      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d92:	4b11      	ldr	r3, [pc, #68]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x25c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a11      	ldr	r2, [pc, #68]	@ (8002ddc <HAL_ADC_ConfigChannel+0x260>)
 8002d98:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9c:	0c9a      	lsrs	r2, r3, #18
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002da8:	e002      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f9      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	40012300 	.word	0x40012300
 8002dd0:	40012000 	.word	0x40012000
 8002dd4:	10000012 	.word	0x10000012
 8002dd8:	2000000c 	.word	0x2000000c
 8002ddc:	431bde83 	.word	0x431bde83

08002de0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002de8:	4b79      	ldr	r3, [pc, #484]	@ (8002fd0 <ADC_Init+0x1f0>)
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	431a      	orrs	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6859      	ldr	r1, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	021a      	lsls	r2, r3, #8
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002e38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6859      	ldr	r1, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6899      	ldr	r1, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e72:	4a58      	ldr	r2, [pc, #352]	@ (8002fd4 <ADC_Init+0x1f4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d022      	beq.n	8002ebe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6899      	ldr	r1, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ea8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6899      	ldr	r1, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	e00f      	b.n	8002ede <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ecc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002edc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0202 	bic.w	r2, r2, #2
 8002eec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6899      	ldr	r1, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	7e1b      	ldrb	r3, [r3, #24]
 8002ef8:	005a      	lsls	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d01b      	beq.n	8002f44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f1a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002f2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6859      	ldr	r1, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f36:	3b01      	subs	r3, #1
 8002f38:	035a      	lsls	r2, r3, #13
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	e007      	b.n	8002f54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f52:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002f62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	051a      	lsls	r2, r3, #20
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6899      	ldr	r1, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f96:	025a      	lsls	r2, r3, #9
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6899      	ldr	r1, [r3, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	029a      	lsls	r2, r3, #10
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	609a      	str	r2, [r3, #8]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	40012300 	.word	0x40012300
 8002fd4:	0f000001 	.word	0x0f000001

08002fd8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d13c      	bne.n	800306c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d12b      	bne.n	8003064 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003010:	2b00      	cmp	r3, #0
 8003012:	d127      	bne.n	8003064 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800301e:	2b00      	cmp	r3, #0
 8003020:	d006      	beq.n	8003030 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800302c:	2b00      	cmp	r3, #0
 800302e:	d119      	bne.n	8003064 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0220 	bic.w	r2, r2, #32
 800303e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003044:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003050:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d105      	bne.n	8003064 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305c:	f043 0201 	orr.w	r2, r3, #1
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f7fe fa01 	bl	800146c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800306a:	e00e      	b.n	800308a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f7ff fd75 	bl	8002b68 <HAL_ADC_ErrorCallback>
}
 800307e:	e004      	b.n	800308a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	4798      	blx	r3
}
 800308a:	bf00      	nop
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b084      	sub	sp, #16
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800309e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f7ff fd4d 	bl	8002b40 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030a6:	bf00      	nop
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ba:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2240      	movs	r2, #64	@ 0x40
 80030c0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c6:	f043 0204 	orr.w	r2, r3, #4
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f7ff fd4a 	bl	8002b68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030d4:	bf00      	nop
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003100:	4b0c      	ldr	r3, [pc, #48]	@ (8003134 <__NVIC_SetPriorityGrouping+0x44>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800310c:	4013      	ands	r3, r2
 800310e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003118:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800311c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003122:	4a04      	ldr	r2, [pc, #16]	@ (8003134 <__NVIC_SetPriorityGrouping+0x44>)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	60d3      	str	r3, [r2, #12]
}
 8003128:	bf00      	nop
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	e000ed00 	.word	0xe000ed00

08003138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800313c:	4b04      	ldr	r3, [pc, #16]	@ (8003150 <__NVIC_GetPriorityGrouping+0x18>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	0a1b      	lsrs	r3, r3, #8
 8003142:	f003 0307 	and.w	r3, r3, #7
}
 8003146:	4618      	mov	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800315e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003162:	2b00      	cmp	r3, #0
 8003164:	db0b      	blt.n	800317e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	f003 021f 	and.w	r2, r3, #31
 800316c:	4907      	ldr	r1, [pc, #28]	@ (800318c <__NVIC_EnableIRQ+0x38>)
 800316e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003172:	095b      	lsrs	r3, r3, #5
 8003174:	2001      	movs	r0, #1
 8003176:	fa00 f202 	lsl.w	r2, r0, r2
 800317a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000e100 	.word	0xe000e100

08003190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	6039      	str	r1, [r7, #0]
 800319a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800319c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	db0a      	blt.n	80031ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	490c      	ldr	r1, [pc, #48]	@ (80031dc <__NVIC_SetPriority+0x4c>)
 80031aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ae:	0112      	lsls	r2, r2, #4
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	440b      	add	r3, r1
 80031b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031b8:	e00a      	b.n	80031d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	4908      	ldr	r1, [pc, #32]	@ (80031e0 <__NVIC_SetPriority+0x50>)
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	3b04      	subs	r3, #4
 80031c8:	0112      	lsls	r2, r2, #4
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	440b      	add	r3, r1
 80031ce:	761a      	strb	r2, [r3, #24]
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	e000e100 	.word	0xe000e100
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b089      	sub	sp, #36	@ 0x24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f1c3 0307 	rsb	r3, r3, #7
 80031fe:	2b04      	cmp	r3, #4
 8003200:	bf28      	it	cs
 8003202:	2304      	movcs	r3, #4
 8003204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	3304      	adds	r3, #4
 800320a:	2b06      	cmp	r3, #6
 800320c:	d902      	bls.n	8003214 <NVIC_EncodePriority+0x30>
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	3b03      	subs	r3, #3
 8003212:	e000      	b.n	8003216 <NVIC_EncodePriority+0x32>
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003218:	f04f 32ff 	mov.w	r2, #4294967295
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43da      	mvns	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	401a      	ands	r2, r3
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800322c:	f04f 31ff 	mov.w	r1, #4294967295
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	fa01 f303 	lsl.w	r3, r1, r3
 8003236:	43d9      	mvns	r1, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800323c:	4313      	orrs	r3, r2
         );
}
 800323e:	4618      	mov	r0, r3
 8003240:	3724      	adds	r7, #36	@ 0x24
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3b01      	subs	r3, #1
 8003258:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800325c:	d301      	bcc.n	8003262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800325e:	2301      	movs	r3, #1
 8003260:	e00f      	b.n	8003282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003262:	4a0a      	ldr	r2, [pc, #40]	@ (800328c <SysTick_Config+0x40>)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3b01      	subs	r3, #1
 8003268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800326a:	210f      	movs	r1, #15
 800326c:	f04f 30ff 	mov.w	r0, #4294967295
 8003270:	f7ff ff8e 	bl	8003190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003274:	4b05      	ldr	r3, [pc, #20]	@ (800328c <SysTick_Config+0x40>)
 8003276:	2200      	movs	r2, #0
 8003278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800327a:	4b04      	ldr	r3, [pc, #16]	@ (800328c <SysTick_Config+0x40>)
 800327c:	2207      	movs	r2, #7
 800327e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	e000e010 	.word	0xe000e010

08003290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7ff ff29 	bl	80030f0 <__NVIC_SetPriorityGrouping>
}
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b086      	sub	sp, #24
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	4603      	mov	r3, r0
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	607a      	str	r2, [r7, #4]
 80032b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032b8:	f7ff ff3e 	bl	8003138 <__NVIC_GetPriorityGrouping>
 80032bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	68b9      	ldr	r1, [r7, #8]
 80032c2:	6978      	ldr	r0, [r7, #20]
 80032c4:	f7ff ff8e 	bl	80031e4 <NVIC_EncodePriority>
 80032c8:	4602      	mov	r2, r0
 80032ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ce:	4611      	mov	r1, r2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff ff5d 	bl	8003190 <__NVIC_SetPriority>
}
 80032d6:	bf00      	nop
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	4603      	mov	r3, r0
 80032e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff ff31 	bl	8003154 <__NVIC_EnableIRQ>
}
 80032f2:	bf00      	nop
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff ffa2 	bl	800324c <SysTick_Config>
 8003308:	4603      	mov	r3, r0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003320:	f7ff f9ba 	bl	8002698 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e099      	b.n	8003464 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0201 	bic.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003350:	e00f      	b.n	8003372 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003352:	f7ff f9a1 	bl	8002698 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b05      	cmp	r3, #5
 800335e:	d908      	bls.n	8003372 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2220      	movs	r2, #32
 8003364:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2203      	movs	r2, #3
 800336a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e078      	b.n	8003464 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1e8      	bne.n	8003352 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	4b38      	ldr	r3, [pc, #224]	@ (800346c <HAL_DMA_Init+0x158>)
 800338c:	4013      	ands	r3, r2
 800338e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800339e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d107      	bne.n	80033dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d4:	4313      	orrs	r3, r2
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f023 0307 	bic.w	r3, r3, #7
 80033f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003402:	2b04      	cmp	r3, #4
 8003404:	d117      	bne.n	8003436 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4313      	orrs	r3, r2
 800340e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00e      	beq.n	8003436 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 fb01 	bl	8003a20 <DMA_CheckFifoParam>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d008      	beq.n	8003436 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2240      	movs	r2, #64	@ 0x40
 8003428:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003432:	2301      	movs	r3, #1
 8003434:	e016      	b.n	8003464 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fab8 	bl	80039b4 <DMA_CalcBaseAndBitshift>
 8003444:	4603      	mov	r3, r0
 8003446:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344c:	223f      	movs	r2, #63	@ 0x3f
 800344e:	409a      	lsls	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	f010803f 	.word	0xf010803f

08003470 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003486:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <HAL_DMA_Start_IT+0x26>
 8003492:	2302      	movs	r3, #2
 8003494:	e040      	b.n	8003518 <HAL_DMA_Start_IT+0xa8>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d12f      	bne.n	800350a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2202      	movs	r2, #2
 80034ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68b9      	ldr	r1, [r7, #8]
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 fa4a 	bl	8003958 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c8:	223f      	movs	r2, #63	@ 0x3f
 80034ca:	409a      	lsls	r2, r3
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0216 	orr.w	r2, r2, #22
 80034de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d007      	beq.n	80034f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0208 	orr.w	r2, r2, #8
 80034f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	e005      	b.n	8003516 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003512:	2302      	movs	r3, #2
 8003514:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003516:	7dfb      	ldrb	r3, [r7, #23]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800352e:	f7ff f8b3 	bl	8002698 <HAL_GetTick>
 8003532:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d008      	beq.n	8003552 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2280      	movs	r2, #128	@ 0x80
 8003544:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e052      	b.n	80035f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0216 	bic.w	r2, r2, #22
 8003560:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695a      	ldr	r2, [r3, #20]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003570:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	d103      	bne.n	8003582 <HAL_DMA_Abort+0x62>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800357e:	2b00      	cmp	r3, #0
 8003580:	d007      	beq.n	8003592 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0208 	bic.w	r2, r2, #8
 8003590:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0201 	bic.w	r2, r2, #1
 80035a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035a2:	e013      	b.n	80035cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035a4:	f7ff f878 	bl	8002698 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b05      	cmp	r3, #5
 80035b0:	d90c      	bls.n	80035cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2220      	movs	r2, #32
 80035b6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2203      	movs	r2, #3
 80035bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e015      	b.n	80035f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e4      	bne.n	80035a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035de:	223f      	movs	r2, #63	@ 0x3f
 80035e0:	409a      	lsls	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d004      	beq.n	800361e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2280      	movs	r2, #128	@ 0x80
 8003618:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e00c      	b.n	8003638 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2205      	movs	r2, #5
 8003622:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0201 	bic.w	r2, r2, #1
 8003634:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003650:	4b8e      	ldr	r3, [pc, #568]	@ (800388c <HAL_DMA_IRQHandler+0x248>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a8e      	ldr	r2, [pc, #568]	@ (8003890 <HAL_DMA_IRQHandler+0x24c>)
 8003656:	fba2 2303 	umull	r2, r3, r2, r3
 800365a:	0a9b      	lsrs	r3, r3, #10
 800365c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003662:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366e:	2208      	movs	r2, #8
 8003670:	409a      	lsls	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4013      	ands	r3, r2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d01a      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d013      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0204 	bic.w	r2, r2, #4
 8003696:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800369c:	2208      	movs	r2, #8
 800369e:	409a      	lsls	r2, r3
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a8:	f043 0201 	orr.w	r2, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b4:	2201      	movs	r2, #1
 80036b6:	409a      	lsls	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d012      	beq.n	80036e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00b      	beq.n	80036e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d2:	2201      	movs	r2, #1
 80036d4:	409a      	lsls	r2, r3
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036de:	f043 0202 	orr.w	r2, r3, #2
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ea:	2204      	movs	r2, #4
 80036ec:	409a      	lsls	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d012      	beq.n	800371c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00b      	beq.n	800371c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003708:	2204      	movs	r2, #4
 800370a:	409a      	lsls	r2, r3
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003714:	f043 0204 	orr.w	r2, r3, #4
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003720:	2210      	movs	r2, #16
 8003722:	409a      	lsls	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4013      	ands	r3, r2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d043      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d03c      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800373e:	2210      	movs	r2, #16
 8003740:	409a      	lsls	r2, r3
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d018      	beq.n	8003786 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d108      	bne.n	8003774 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003766:	2b00      	cmp	r3, #0
 8003768:	d024      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	4798      	blx	r3
 8003772:	e01f      	b.n	80037b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003778:	2b00      	cmp	r3, #0
 800377a:	d01b      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	4798      	blx	r3
 8003784:	e016      	b.n	80037b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d107      	bne.n	80037a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0208 	bic.w	r2, r2, #8
 80037a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b8:	2220      	movs	r2, #32
 80037ba:	409a      	lsls	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4013      	ands	r3, r2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 808f 	beq.w	80038e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 8087 	beq.w	80038e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037da:	2220      	movs	r2, #32
 80037dc:	409a      	lsls	r2, r3
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b05      	cmp	r3, #5
 80037ec:	d136      	bne.n	800385c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0216 	bic.w	r2, r2, #22
 80037fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695a      	ldr	r2, [r3, #20]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800380c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003812:	2b00      	cmp	r3, #0
 8003814:	d103      	bne.n	800381e <HAL_DMA_IRQHandler+0x1da>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800381a:	2b00      	cmp	r3, #0
 800381c:	d007      	beq.n	800382e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0208 	bic.w	r2, r2, #8
 800382c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003832:	223f      	movs	r2, #63	@ 0x3f
 8003834:	409a      	lsls	r2, r3
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800384e:	2b00      	cmp	r3, #0
 8003850:	d07e      	beq.n	8003950 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	4798      	blx	r3
        }
        return;
 800385a:	e079      	b.n	8003950 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d01d      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10d      	bne.n	8003894 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387c:	2b00      	cmp	r3, #0
 800387e:	d031      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4798      	blx	r3
 8003888:	e02c      	b.n	80038e4 <HAL_DMA_IRQHandler+0x2a0>
 800388a:	bf00      	nop
 800388c:	2000000c 	.word	0x2000000c
 8003890:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003898:	2b00      	cmp	r3, #0
 800389a:	d023      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	4798      	blx	r3
 80038a4:	e01e      	b.n	80038e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10f      	bne.n	80038d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0210 	bic.w	r2, r2, #16
 80038c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d032      	beq.n	8003952 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d022      	beq.n	800393e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2205      	movs	r2, #5
 80038fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	3301      	adds	r3, #1
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	429a      	cmp	r2, r3
 800391a:	d307      	bcc.n	800392c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f2      	bne.n	8003910 <HAL_DMA_IRQHandler+0x2cc>
 800392a:	e000      	b.n	800392e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800392c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003942:	2b00      	cmp	r3, #0
 8003944:	d005      	beq.n	8003952 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	4798      	blx	r3
 800394e:	e000      	b.n	8003952 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003950:	bf00      	nop
    }
  }
}
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003974:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2b40      	cmp	r3, #64	@ 0x40
 8003984:	d108      	bne.n	8003998 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003996:	e007      	b.n	80039a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	60da      	str	r2, [r3, #12]
}
 80039a8:	bf00      	nop
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	3b10      	subs	r3, #16
 80039c4:	4a14      	ldr	r2, [pc, #80]	@ (8003a18 <DMA_CalcBaseAndBitshift+0x64>)
 80039c6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ca:	091b      	lsrs	r3, r3, #4
 80039cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039ce:	4a13      	ldr	r2, [pc, #76]	@ (8003a1c <DMA_CalcBaseAndBitshift+0x68>)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2b03      	cmp	r3, #3
 80039e0:	d909      	bls.n	80039f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039ea:	f023 0303 	bic.w	r3, r3, #3
 80039ee:	1d1a      	adds	r2, r3, #4
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80039f4:	e007      	b.n	8003a06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039fe:	f023 0303 	bic.w	r3, r3, #3
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3714      	adds	r7, #20
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	aaaaaaab 	.word	0xaaaaaaab
 8003a1c:	0800aee8 	.word	0x0800aee8

08003a20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d11f      	bne.n	8003a7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d856      	bhi.n	8003aee <DMA_CheckFifoParam+0xce>
 8003a40:	a201      	add	r2, pc, #4	@ (adr r2, 8003a48 <DMA_CheckFifoParam+0x28>)
 8003a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a46:	bf00      	nop
 8003a48:	08003a59 	.word	0x08003a59
 8003a4c:	08003a6b 	.word	0x08003a6b
 8003a50:	08003a59 	.word	0x08003a59
 8003a54:	08003aef 	.word	0x08003aef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d046      	beq.n	8003af2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a68:	e043      	b.n	8003af2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a72:	d140      	bne.n	8003af6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a78:	e03d      	b.n	8003af6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a82:	d121      	bne.n	8003ac8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d837      	bhi.n	8003afa <DMA_CheckFifoParam+0xda>
 8003a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a90 <DMA_CheckFifoParam+0x70>)
 8003a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a90:	08003aa1 	.word	0x08003aa1
 8003a94:	08003aa7 	.word	0x08003aa7
 8003a98:	08003aa1 	.word	0x08003aa1
 8003a9c:	08003ab9 	.word	0x08003ab9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa4:	e030      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aaa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d025      	beq.n	8003afe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ab6:	e022      	b.n	8003afe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003abc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ac0:	d11f      	bne.n	8003b02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ac6:	e01c      	b.n	8003b02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d903      	bls.n	8003ad6 <DMA_CheckFifoParam+0xb6>
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d003      	beq.n	8003adc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ad4:	e018      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	73fb      	strb	r3, [r7, #15]
      break;
 8003ada:	e015      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00e      	beq.n	8003b06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	73fb      	strb	r3, [r7, #15]
      break;
 8003aec:	e00b      	b.n	8003b06 <DMA_CheckFifoParam+0xe6>
      break;
 8003aee:	bf00      	nop
 8003af0:	e00a      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
      break;
 8003af2:	bf00      	nop
 8003af4:	e008      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
      break;
 8003af6:	bf00      	nop
 8003af8:	e006      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
      break;
 8003afa:	bf00      	nop
 8003afc:	e004      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
      break;
 8003afe:	bf00      	nop
 8003b00:	e002      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b02:	bf00      	nop
 8003b04:	e000      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
      break;
 8003b06:	bf00      	nop
    }
  } 
  
  return status; 
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop

08003b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b089      	sub	sp, #36	@ 0x24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61fb      	str	r3, [r7, #28]
 8003b32:	e159      	b.n	8003de8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b34:	2201      	movs	r2, #1
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4013      	ands	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	f040 8148 	bne.w	8003de2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d005      	beq.n	8003b6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d130      	bne.n	8003bcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	2203      	movs	r2, #3
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4013      	ands	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	091b      	lsrs	r3, r3, #4
 8003bb6:	f003 0201 	and.w	r2, r3, #1
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d017      	beq.n	8003c08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	2203      	movs	r2, #3
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	43db      	mvns	r3, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 0303 	and.w	r3, r3, #3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d123      	bne.n	8003c5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	08da      	lsrs	r2, r3, #3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3208      	adds	r2, #8
 8003c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	220f      	movs	r2, #15
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4013      	ands	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	08da      	lsrs	r2, r3, #3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3208      	adds	r2, #8
 8003c56:	69b9      	ldr	r1, [r7, #24]
 8003c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	2203      	movs	r2, #3
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	4013      	ands	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f003 0203 	and.w	r2, r3, #3
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 80a2 	beq.w	8003de2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	4b57      	ldr	r3, [pc, #348]	@ (8003e00 <HAL_GPIO_Init+0x2e8>)
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca6:	4a56      	ldr	r2, [pc, #344]	@ (8003e00 <HAL_GPIO_Init+0x2e8>)
 8003ca8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cac:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cae:	4b54      	ldr	r3, [pc, #336]	@ (8003e00 <HAL_GPIO_Init+0x2e8>)
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cba:	4a52      	ldr	r2, [pc, #328]	@ (8003e04 <HAL_GPIO_Init+0x2ec>)
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	089b      	lsrs	r3, r3, #2
 8003cc0:	3302      	adds	r3, #2
 8003cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	220f      	movs	r2, #15
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a49      	ldr	r2, [pc, #292]	@ (8003e08 <HAL_GPIO_Init+0x2f0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d019      	beq.n	8003d1a <HAL_GPIO_Init+0x202>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a48      	ldr	r2, [pc, #288]	@ (8003e0c <HAL_GPIO_Init+0x2f4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d013      	beq.n	8003d16 <HAL_GPIO_Init+0x1fe>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a47      	ldr	r2, [pc, #284]	@ (8003e10 <HAL_GPIO_Init+0x2f8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d00d      	beq.n	8003d12 <HAL_GPIO_Init+0x1fa>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a46      	ldr	r2, [pc, #280]	@ (8003e14 <HAL_GPIO_Init+0x2fc>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d007      	beq.n	8003d0e <HAL_GPIO_Init+0x1f6>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a45      	ldr	r2, [pc, #276]	@ (8003e18 <HAL_GPIO_Init+0x300>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d101      	bne.n	8003d0a <HAL_GPIO_Init+0x1f2>
 8003d06:	2304      	movs	r3, #4
 8003d08:	e008      	b.n	8003d1c <HAL_GPIO_Init+0x204>
 8003d0a:	2307      	movs	r3, #7
 8003d0c:	e006      	b.n	8003d1c <HAL_GPIO_Init+0x204>
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e004      	b.n	8003d1c <HAL_GPIO_Init+0x204>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e002      	b.n	8003d1c <HAL_GPIO_Init+0x204>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <HAL_GPIO_Init+0x204>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	69fa      	ldr	r2, [r7, #28]
 8003d1e:	f002 0203 	and.w	r2, r2, #3
 8003d22:	0092      	lsls	r2, r2, #2
 8003d24:	4093      	lsls	r3, r2
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d2c:	4935      	ldr	r1, [pc, #212]	@ (8003e04 <HAL_GPIO_Init+0x2ec>)
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	089b      	lsrs	r3, r3, #2
 8003d32:	3302      	adds	r3, #2
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d3a:	4b38      	ldr	r3, [pc, #224]	@ (8003e1c <HAL_GPIO_Init+0x304>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	43db      	mvns	r3, r3
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4013      	ands	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d5e:	4a2f      	ldr	r2, [pc, #188]	@ (8003e1c <HAL_GPIO_Init+0x304>)
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d64:	4b2d      	ldr	r3, [pc, #180]	@ (8003e1c <HAL_GPIO_Init+0x304>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4013      	ands	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d88:	4a24      	ldr	r2, [pc, #144]	@ (8003e1c <HAL_GPIO_Init+0x304>)
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d8e:	4b23      	ldr	r3, [pc, #140]	@ (8003e1c <HAL_GPIO_Init+0x304>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	43db      	mvns	r3, r3
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003db2:	4a1a      	ldr	r2, [pc, #104]	@ (8003e1c <HAL_GPIO_Init+0x304>)
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003db8:	4b18      	ldr	r3, [pc, #96]	@ (8003e1c <HAL_GPIO_Init+0x304>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ddc:	4a0f      	ldr	r2, [pc, #60]	@ (8003e1c <HAL_GPIO_Init+0x304>)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	3301      	adds	r3, #1
 8003de6:	61fb      	str	r3, [r7, #28]
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	2b0f      	cmp	r3, #15
 8003dec:	f67f aea2 	bls.w	8003b34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003df0:	bf00      	nop
 8003df2:	bf00      	nop
 8003df4:	3724      	adds	r7, #36	@ 0x24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40023800 	.word	0x40023800
 8003e04:	40013800 	.word	0x40013800
 8003e08:	40020000 	.word	0x40020000
 8003e0c:	40020400 	.word	0x40020400
 8003e10:	40020800 	.word	0x40020800
 8003e14:	40020c00 	.word	0x40020c00
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	40013c00 	.word	0x40013c00

08003e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	807b      	strh	r3, [r7, #2]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e30:	787b      	ldrb	r3, [r7, #1]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e36:	887a      	ldrh	r2, [r7, #2]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e3c:	e003      	b.n	8003e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e3e:	887b      	ldrh	r3, [r7, #2]
 8003e40:	041a      	lsls	r2, r3, #16
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	619a      	str	r2, [r3, #24]
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
	...

08003e54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e267      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d075      	beq.n	8003f5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e72:	4b88      	ldr	r3, [pc, #544]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 030c 	and.w	r3, r3, #12
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d00c      	beq.n	8003e98 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e7e:	4b85      	ldr	r3, [pc, #532]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e86:	2b08      	cmp	r3, #8
 8003e88:	d112      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e8a:	4b82      	ldr	r3, [pc, #520]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e96:	d10b      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e98:	4b7e      	ldr	r3, [pc, #504]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d05b      	beq.n	8003f5c <HAL_RCC_OscConfig+0x108>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d157      	bne.n	8003f5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e242      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb8:	d106      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x74>
 8003eba:	4b76      	ldr	r3, [pc, #472]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a75      	ldr	r2, [pc, #468]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8003ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	e01d      	b.n	8003f04 <HAL_RCC_OscConfig+0xb0>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ed0:	d10c      	bne.n	8003eec <HAL_RCC_OscConfig+0x98>
 8003ed2:	4b70      	ldr	r3, [pc, #448]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a6f      	ldr	r2, [pc, #444]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8003ed8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	4b6d      	ldr	r3, [pc, #436]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a6c      	ldr	r2, [pc, #432]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8003ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	e00b      	b.n	8003f04 <HAL_RCC_OscConfig+0xb0>
 8003eec:	4b69      	ldr	r3, [pc, #420]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a68      	ldr	r2, [pc, #416]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8003ef2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ef6:	6013      	str	r3, [r2, #0]
 8003ef8:	4b66      	ldr	r3, [pc, #408]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a65      	ldr	r2, [pc, #404]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8003efe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d013      	beq.n	8003f34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0c:	f7fe fbc4 	bl	8002698 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f14:	f7fe fbc0 	bl	8002698 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b64      	cmp	r3, #100	@ 0x64
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e207      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f26:	4b5b      	ldr	r3, [pc, #364]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0xc0>
 8003f32:	e014      	b.n	8003f5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f34:	f7fe fbb0 	bl	8002698 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f3c:	f7fe fbac 	bl	8002698 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b64      	cmp	r3, #100	@ 0x64
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e1f3      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f4e:	4b51      	ldr	r3, [pc, #324]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0xe8>
 8003f5a:	e000      	b.n	8003f5e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d063      	beq.n	8004032 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f6a:	4b4a      	ldr	r3, [pc, #296]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 030c 	and.w	r3, r3, #12
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00b      	beq.n	8003f8e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f76:	4b47      	ldr	r3, [pc, #284]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d11c      	bne.n	8003fbc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f82:	4b44      	ldr	r3, [pc, #272]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d116      	bne.n	8003fbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f8e:	4b41      	ldr	r3, [pc, #260]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d005      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x152>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d001      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e1c7      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa6:	4b3b      	ldr	r3, [pc, #236]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4937      	ldr	r1, [pc, #220]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fba:	e03a      	b.n	8004032 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d020      	beq.n	8004006 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fc4:	4b34      	ldr	r3, [pc, #208]	@ (8004098 <HAL_RCC_OscConfig+0x244>)
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fca:	f7fe fb65 	bl	8002698 <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fd2:	f7fe fb61 	bl	8002698 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e1a8      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f0      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff0:	4b28      	ldr	r3, [pc, #160]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	4925      	ldr	r1, [pc, #148]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8004000:	4313      	orrs	r3, r2
 8004002:	600b      	str	r3, [r1, #0]
 8004004:	e015      	b.n	8004032 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004006:	4b24      	ldr	r3, [pc, #144]	@ (8004098 <HAL_RCC_OscConfig+0x244>)
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400c:	f7fe fb44 	bl	8002698 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004014:	f7fe fb40 	bl	8002698 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e187      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004026:	4b1b      	ldr	r3, [pc, #108]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f0      	bne.n	8004014 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b00      	cmp	r3, #0
 800403c:	d036      	beq.n	80040ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d016      	beq.n	8004074 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004046:	4b15      	ldr	r3, [pc, #84]	@ (800409c <HAL_RCC_OscConfig+0x248>)
 8004048:	2201      	movs	r2, #1
 800404a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800404c:	f7fe fb24 	bl	8002698 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004054:	f7fe fb20 	bl	8002698 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e167      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004066:	4b0b      	ldr	r3, [pc, #44]	@ (8004094 <HAL_RCC_OscConfig+0x240>)
 8004068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f0      	beq.n	8004054 <HAL_RCC_OscConfig+0x200>
 8004072:	e01b      	b.n	80040ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004074:	4b09      	ldr	r3, [pc, #36]	@ (800409c <HAL_RCC_OscConfig+0x248>)
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800407a:	f7fe fb0d 	bl	8002698 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004080:	e00e      	b.n	80040a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004082:	f7fe fb09 	bl	8002698 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d907      	bls.n	80040a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e150      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
 8004094:	40023800 	.word	0x40023800
 8004098:	42470000 	.word	0x42470000
 800409c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040a0:	4b88      	ldr	r3, [pc, #544]	@ (80042c4 <HAL_RCC_OscConfig+0x470>)
 80040a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1ea      	bne.n	8004082 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 8097 	beq.w	80041e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ba:	2300      	movs	r3, #0
 80040bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040be:	4b81      	ldr	r3, [pc, #516]	@ (80042c4 <HAL_RCC_OscConfig+0x470>)
 80040c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10f      	bne.n	80040ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ca:	2300      	movs	r3, #0
 80040cc:	60bb      	str	r3, [r7, #8]
 80040ce:	4b7d      	ldr	r3, [pc, #500]	@ (80042c4 <HAL_RCC_OscConfig+0x470>)
 80040d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d2:	4a7c      	ldr	r2, [pc, #496]	@ (80042c4 <HAL_RCC_OscConfig+0x470>)
 80040d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80040da:	4b7a      	ldr	r3, [pc, #488]	@ (80042c4 <HAL_RCC_OscConfig+0x470>)
 80040dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040e6:	2301      	movs	r3, #1
 80040e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ea:	4b77      	ldr	r3, [pc, #476]	@ (80042c8 <HAL_RCC_OscConfig+0x474>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d118      	bne.n	8004128 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040f6:	4b74      	ldr	r3, [pc, #464]	@ (80042c8 <HAL_RCC_OscConfig+0x474>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a73      	ldr	r2, [pc, #460]	@ (80042c8 <HAL_RCC_OscConfig+0x474>)
 80040fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004102:	f7fe fac9 	bl	8002698 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800410a:	f7fe fac5 	bl	8002698 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e10c      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411c:	4b6a      	ldr	r3, [pc, #424]	@ (80042c8 <HAL_RCC_OscConfig+0x474>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0f0      	beq.n	800410a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d106      	bne.n	800413e <HAL_RCC_OscConfig+0x2ea>
 8004130:	4b64      	ldr	r3, [pc, #400]	@ (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004134:	4a63      	ldr	r2, [pc, #396]	@ (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004136:	f043 0301 	orr.w	r3, r3, #1
 800413a:	6713      	str	r3, [r2, #112]	@ 0x70
 800413c:	e01c      	b.n	8004178 <HAL_RCC_OscConfig+0x324>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	2b05      	cmp	r3, #5
 8004144:	d10c      	bne.n	8004160 <HAL_RCC_OscConfig+0x30c>
 8004146:	4b5f      	ldr	r3, [pc, #380]	@ (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800414a:	4a5e      	ldr	r2, [pc, #376]	@ (80042c4 <HAL_RCC_OscConfig+0x470>)
 800414c:	f043 0304 	orr.w	r3, r3, #4
 8004150:	6713      	str	r3, [r2, #112]	@ 0x70
 8004152:	4b5c      	ldr	r3, [pc, #368]	@ (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004156:	4a5b      	ldr	r2, [pc, #364]	@ (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004158:	f043 0301 	orr.w	r3, r3, #1
 800415c:	6713      	str	r3, [r2, #112]	@ 0x70
 800415e:	e00b      	b.n	8004178 <HAL_RCC_OscConfig+0x324>
 8004160:	4b58      	ldr	r3, [pc, #352]	@ (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004164:	4a57      	ldr	r2, [pc, #348]	@ (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004166:	f023 0301 	bic.w	r3, r3, #1
 800416a:	6713      	str	r3, [r2, #112]	@ 0x70
 800416c:	4b55      	ldr	r3, [pc, #340]	@ (80042c4 <HAL_RCC_OscConfig+0x470>)
 800416e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004170:	4a54      	ldr	r2, [pc, #336]	@ (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004172:	f023 0304 	bic.w	r3, r3, #4
 8004176:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d015      	beq.n	80041ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004180:	f7fe fa8a 	bl	8002698 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004186:	e00a      	b.n	800419e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004188:	f7fe fa86 	bl	8002698 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e0cb      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419e:	4b49      	ldr	r3, [pc, #292]	@ (80042c4 <HAL_RCC_OscConfig+0x470>)
 80041a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0ee      	beq.n	8004188 <HAL_RCC_OscConfig+0x334>
 80041aa:	e014      	b.n	80041d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ac:	f7fe fa74 	bl	8002698 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041b2:	e00a      	b.n	80041ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b4:	f7fe fa70 	bl	8002698 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e0b5      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ca:	4b3e      	ldr	r3, [pc, #248]	@ (80042c4 <HAL_RCC_OscConfig+0x470>)
 80041cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1ee      	bne.n	80041b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041d6:	7dfb      	ldrb	r3, [r7, #23]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d105      	bne.n	80041e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041dc:	4b39      	ldr	r3, [pc, #228]	@ (80042c4 <HAL_RCC_OscConfig+0x470>)
 80041de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e0:	4a38      	ldr	r2, [pc, #224]	@ (80042c4 <HAL_RCC_OscConfig+0x470>)
 80041e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 80a1 	beq.w	8004334 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041f2:	4b34      	ldr	r3, [pc, #208]	@ (80042c4 <HAL_RCC_OscConfig+0x470>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 030c 	and.w	r3, r3, #12
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d05c      	beq.n	80042b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	2b02      	cmp	r3, #2
 8004204:	d141      	bne.n	800428a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004206:	4b31      	ldr	r3, [pc, #196]	@ (80042cc <HAL_RCC_OscConfig+0x478>)
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420c:	f7fe fa44 	bl	8002698 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004214:	f7fe fa40 	bl	8002698 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e087      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004226:	4b27      	ldr	r3, [pc, #156]	@ (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1f0      	bne.n	8004214 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69da      	ldr	r2, [r3, #28]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004240:	019b      	lsls	r3, r3, #6
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004248:	085b      	lsrs	r3, r3, #1
 800424a:	3b01      	subs	r3, #1
 800424c:	041b      	lsls	r3, r3, #16
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004254:	061b      	lsls	r3, r3, #24
 8004256:	491b      	ldr	r1, [pc, #108]	@ (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004258:	4313      	orrs	r3, r2
 800425a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800425c:	4b1b      	ldr	r3, [pc, #108]	@ (80042cc <HAL_RCC_OscConfig+0x478>)
 800425e:	2201      	movs	r2, #1
 8004260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004262:	f7fe fa19 	bl	8002698 <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800426a:	f7fe fa15 	bl	8002698 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e05c      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800427c:	4b11      	ldr	r3, [pc, #68]	@ (80042c4 <HAL_RCC_OscConfig+0x470>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0f0      	beq.n	800426a <HAL_RCC_OscConfig+0x416>
 8004288:	e054      	b.n	8004334 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800428a:	4b10      	ldr	r3, [pc, #64]	@ (80042cc <HAL_RCC_OscConfig+0x478>)
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004290:	f7fe fa02 	bl	8002698 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004298:	f7fe f9fe 	bl	8002698 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e045      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042aa:	4b06      	ldr	r3, [pc, #24]	@ (80042c4 <HAL_RCC_OscConfig+0x470>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f0      	bne.n	8004298 <HAL_RCC_OscConfig+0x444>
 80042b6:	e03d      	b.n	8004334 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d107      	bne.n	80042d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e038      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
 80042c4:	40023800 	.word	0x40023800
 80042c8:	40007000 	.word	0x40007000
 80042cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004340 <HAL_RCC_OscConfig+0x4ec>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d028      	beq.n	8004330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d121      	bne.n	8004330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d11a      	bne.n	8004330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004300:	4013      	ands	r3, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004306:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004308:	4293      	cmp	r3, r2
 800430a:	d111      	bne.n	8004330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004316:	085b      	lsrs	r3, r3, #1
 8004318:	3b01      	subs	r3, #1
 800431a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800431c:	429a      	cmp	r2, r3
 800431e:	d107      	bne.n	8004330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800432a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800432c:	429a      	cmp	r2, r3
 800432e:	d001      	beq.n	8004334 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e000      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40023800 	.word	0x40023800

08004344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e0cc      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004358:	4b68      	ldr	r3, [pc, #416]	@ (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d90c      	bls.n	8004380 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004366:	4b65      	ldr	r3, [pc, #404]	@ (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800436e:	4b63      	ldr	r3, [pc, #396]	@ (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d001      	beq.n	8004380 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e0b8      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d020      	beq.n	80043ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004398:	4b59      	ldr	r3, [pc, #356]	@ (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	4a58      	ldr	r2, [pc, #352]	@ (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 800439e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80043a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d005      	beq.n	80043bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043b0:	4b53      	ldr	r3, [pc, #332]	@ (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	4a52      	ldr	r2, [pc, #328]	@ (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80043ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043bc:	4b50      	ldr	r3, [pc, #320]	@ (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	494d      	ldr	r1, [pc, #308]	@ (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d044      	beq.n	8004464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d107      	bne.n	80043f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e2:	4b47      	ldr	r3, [pc, #284]	@ (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d119      	bne.n	8004422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e07f      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d003      	beq.n	8004402 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d107      	bne.n	8004412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004402:	4b3f      	ldr	r3, [pc, #252]	@ (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d109      	bne.n	8004422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e06f      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004412:	4b3b      	ldr	r3, [pc, #236]	@ (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e067      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004422:	4b37      	ldr	r3, [pc, #220]	@ (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f023 0203 	bic.w	r2, r3, #3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	4934      	ldr	r1, [pc, #208]	@ (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004430:	4313      	orrs	r3, r2
 8004432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004434:	f7fe f930 	bl	8002698 <HAL_GetTick>
 8004438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800443a:	e00a      	b.n	8004452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800443c:	f7fe f92c 	bl	8002698 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800444a:	4293      	cmp	r3, r2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e04f      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004452:	4b2b      	ldr	r3, [pc, #172]	@ (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 020c 	and.w	r2, r3, #12
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	429a      	cmp	r2, r3
 8004462:	d1eb      	bne.n	800443c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004464:	4b25      	ldr	r3, [pc, #148]	@ (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d20c      	bcs.n	800448c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004472:	4b22      	ldr	r3, [pc, #136]	@ (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800447a:	4b20      	ldr	r3, [pc, #128]	@ (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d001      	beq.n	800448c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e032      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d008      	beq.n	80044aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004498:	4b19      	ldr	r3, [pc, #100]	@ (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	4916      	ldr	r1, [pc, #88]	@ (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044b6:	4b12      	ldr	r3, [pc, #72]	@ (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	490e      	ldr	r1, [pc, #56]	@ (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044ca:	f000 f821 	bl	8004510 <HAL_RCC_GetSysClockFreq>
 80044ce:	4602      	mov	r2, r0
 80044d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	091b      	lsrs	r3, r3, #4
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	490a      	ldr	r1, [pc, #40]	@ (8004504 <HAL_RCC_ClockConfig+0x1c0>)
 80044dc:	5ccb      	ldrb	r3, [r1, r3]
 80044de:	fa22 f303 	lsr.w	r3, r2, r3
 80044e2:	4a09      	ldr	r2, [pc, #36]	@ (8004508 <HAL_RCC_ClockConfig+0x1c4>)
 80044e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80044e6:	4b09      	ldr	r3, [pc, #36]	@ (800450c <HAL_RCC_ClockConfig+0x1c8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fe f890 	bl	8002610 <HAL_InitTick>

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40023c00 	.word	0x40023c00
 8004500:	40023800 	.word	0x40023800
 8004504:	0800aed0 	.word	0x0800aed0
 8004508:	2000000c 	.word	0x2000000c
 800450c:	20000010 	.word	0x20000010

08004510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004514:	b090      	sub	sp, #64	@ 0x40
 8004516:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004528:	4b59      	ldr	r3, [pc, #356]	@ (8004690 <HAL_RCC_GetSysClockFreq+0x180>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 030c 	and.w	r3, r3, #12
 8004530:	2b08      	cmp	r3, #8
 8004532:	d00d      	beq.n	8004550 <HAL_RCC_GetSysClockFreq+0x40>
 8004534:	2b08      	cmp	r3, #8
 8004536:	f200 80a1 	bhi.w	800467c <HAL_RCC_GetSysClockFreq+0x16c>
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <HAL_RCC_GetSysClockFreq+0x34>
 800453e:	2b04      	cmp	r3, #4
 8004540:	d003      	beq.n	800454a <HAL_RCC_GetSysClockFreq+0x3a>
 8004542:	e09b      	b.n	800467c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004544:	4b53      	ldr	r3, [pc, #332]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x184>)
 8004546:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004548:	e09b      	b.n	8004682 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800454a:	4b53      	ldr	r3, [pc, #332]	@ (8004698 <HAL_RCC_GetSysClockFreq+0x188>)
 800454c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800454e:	e098      	b.n	8004682 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004550:	4b4f      	ldr	r3, [pc, #316]	@ (8004690 <HAL_RCC_GetSysClockFreq+0x180>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004558:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800455a:	4b4d      	ldr	r3, [pc, #308]	@ (8004690 <HAL_RCC_GetSysClockFreq+0x180>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d028      	beq.n	80045b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004566:	4b4a      	ldr	r3, [pc, #296]	@ (8004690 <HAL_RCC_GetSysClockFreq+0x180>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	099b      	lsrs	r3, r3, #6
 800456c:	2200      	movs	r2, #0
 800456e:	623b      	str	r3, [r7, #32]
 8004570:	627a      	str	r2, [r7, #36]	@ 0x24
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004578:	2100      	movs	r1, #0
 800457a:	4b47      	ldr	r3, [pc, #284]	@ (8004698 <HAL_RCC_GetSysClockFreq+0x188>)
 800457c:	fb03 f201 	mul.w	r2, r3, r1
 8004580:	2300      	movs	r3, #0
 8004582:	fb00 f303 	mul.w	r3, r0, r3
 8004586:	4413      	add	r3, r2
 8004588:	4a43      	ldr	r2, [pc, #268]	@ (8004698 <HAL_RCC_GetSysClockFreq+0x188>)
 800458a:	fba0 1202 	umull	r1, r2, r0, r2
 800458e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004590:	460a      	mov	r2, r1
 8004592:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004594:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004596:	4413      	add	r3, r2
 8004598:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800459a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800459c:	2200      	movs	r2, #0
 800459e:	61bb      	str	r3, [r7, #24]
 80045a0:	61fa      	str	r2, [r7, #28]
 80045a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80045aa:	f7fc fb75 	bl	8000c98 <__aeabi_uldivmod>
 80045ae:	4602      	mov	r2, r0
 80045b0:	460b      	mov	r3, r1
 80045b2:	4613      	mov	r3, r2
 80045b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045b6:	e053      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045b8:	4b35      	ldr	r3, [pc, #212]	@ (8004690 <HAL_RCC_GetSysClockFreq+0x180>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	099b      	lsrs	r3, r3, #6
 80045be:	2200      	movs	r2, #0
 80045c0:	613b      	str	r3, [r7, #16]
 80045c2:	617a      	str	r2, [r7, #20]
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80045ca:	f04f 0b00 	mov.w	fp, #0
 80045ce:	4652      	mov	r2, sl
 80045d0:	465b      	mov	r3, fp
 80045d2:	f04f 0000 	mov.w	r0, #0
 80045d6:	f04f 0100 	mov.w	r1, #0
 80045da:	0159      	lsls	r1, r3, #5
 80045dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045e0:	0150      	lsls	r0, r2, #5
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	ebb2 080a 	subs.w	r8, r2, sl
 80045ea:	eb63 090b 	sbc.w	r9, r3, fp
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80045fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80045fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004602:	ebb2 0408 	subs.w	r4, r2, r8
 8004606:	eb63 0509 	sbc.w	r5, r3, r9
 800460a:	f04f 0200 	mov.w	r2, #0
 800460e:	f04f 0300 	mov.w	r3, #0
 8004612:	00eb      	lsls	r3, r5, #3
 8004614:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004618:	00e2      	lsls	r2, r4, #3
 800461a:	4614      	mov	r4, r2
 800461c:	461d      	mov	r5, r3
 800461e:	eb14 030a 	adds.w	r3, r4, sl
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	eb45 030b 	adc.w	r3, r5, fp
 8004628:	607b      	str	r3, [r7, #4]
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	f04f 0300 	mov.w	r3, #0
 8004632:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004636:	4629      	mov	r1, r5
 8004638:	028b      	lsls	r3, r1, #10
 800463a:	4621      	mov	r1, r4
 800463c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004640:	4621      	mov	r1, r4
 8004642:	028a      	lsls	r2, r1, #10
 8004644:	4610      	mov	r0, r2
 8004646:	4619      	mov	r1, r3
 8004648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800464a:	2200      	movs	r2, #0
 800464c:	60bb      	str	r3, [r7, #8]
 800464e:	60fa      	str	r2, [r7, #12]
 8004650:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004654:	f7fc fb20 	bl	8000c98 <__aeabi_uldivmod>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4613      	mov	r3, r2
 800465e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004660:	4b0b      	ldr	r3, [pc, #44]	@ (8004690 <HAL_RCC_GetSysClockFreq+0x180>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	0c1b      	lsrs	r3, r3, #16
 8004666:	f003 0303 	and.w	r3, r3, #3
 800466a:	3301      	adds	r3, #1
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004670:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004674:	fbb2 f3f3 	udiv	r3, r2, r3
 8004678:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800467a:	e002      	b.n	8004682 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800467c:	4b05      	ldr	r3, [pc, #20]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x184>)
 800467e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004684:	4618      	mov	r0, r3
 8004686:	3740      	adds	r7, #64	@ 0x40
 8004688:	46bd      	mov	sp, r7
 800468a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800468e:	bf00      	nop
 8004690:	40023800 	.word	0x40023800
 8004694:	00f42400 	.word	0x00f42400
 8004698:	017d7840 	.word	0x017d7840

0800469c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046a0:	4b03      	ldr	r3, [pc, #12]	@ (80046b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80046a2:	681b      	ldr	r3, [r3, #0]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	2000000c 	.word	0x2000000c

080046b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046b8:	f7ff fff0 	bl	800469c <HAL_RCC_GetHCLKFreq>
 80046bc:	4602      	mov	r2, r0
 80046be:	4b05      	ldr	r3, [pc, #20]	@ (80046d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	0a9b      	lsrs	r3, r3, #10
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	4903      	ldr	r1, [pc, #12]	@ (80046d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ca:	5ccb      	ldrb	r3, [r1, r3]
 80046cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40023800 	.word	0x40023800
 80046d8:	0800aee0 	.word	0x0800aee0

080046dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046e0:	f7ff ffdc 	bl	800469c <HAL_RCC_GetHCLKFreq>
 80046e4:	4602      	mov	r2, r0
 80046e6:	4b05      	ldr	r3, [pc, #20]	@ (80046fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	0b5b      	lsrs	r3, r3, #13
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	4903      	ldr	r1, [pc, #12]	@ (8004700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046f2:	5ccb      	ldrb	r3, [r1, r3]
 80046f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40023800 	.word	0x40023800
 8004700:	0800aee0 	.word	0x0800aee0

08004704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e041      	b.n	800479a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d106      	bne.n	8004730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7fd fbd0 	bl	8001ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3304      	adds	r3, #4
 8004740:	4619      	mov	r1, r3
 8004742:	4610      	mov	r0, r2
 8004744:	f000 fd70 	bl	8005228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d001      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e044      	b.n	8004846 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68da      	ldr	r2, [r3, #12]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a1e      	ldr	r2, [pc, #120]	@ (8004854 <HAL_TIM_Base_Start_IT+0xb0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d018      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x6c>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047e6:	d013      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x6c>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004858 <HAL_TIM_Base_Start_IT+0xb4>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00e      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x6c>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a19      	ldr	r2, [pc, #100]	@ (800485c <HAL_TIM_Base_Start_IT+0xb8>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d009      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x6c>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a17      	ldr	r2, [pc, #92]	@ (8004860 <HAL_TIM_Base_Start_IT+0xbc>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x6c>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a16      	ldr	r2, [pc, #88]	@ (8004864 <HAL_TIM_Base_Start_IT+0xc0>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d111      	bne.n	8004834 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b06      	cmp	r3, #6
 8004820:	d010      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0201 	orr.w	r2, r2, #1
 8004830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004832:	e007      	b.n	8004844 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0201 	orr.w	r2, r2, #1
 8004842:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40010000 	.word	0x40010000
 8004858:	40000400 	.word	0x40000400
 800485c:	40000800 	.word	0x40000800
 8004860:	40000c00 	.word	0x40000c00
 8004864:	40014000 	.word	0x40014000

08004868 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e041      	b.n	80048fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d106      	bne.n	8004894 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f839 	bl	8004906 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3304      	adds	r3, #4
 80048a4:	4619      	mov	r1, r3
 80048a6:	4610      	mov	r0, r2
 80048a8:	f000 fcbe 	bl	8005228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
	...

0800491c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d109      	bne.n	8004940 <HAL_TIM_PWM_Start+0x24>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b01      	cmp	r3, #1
 8004936:	bf14      	ite	ne
 8004938:	2301      	movne	r3, #1
 800493a:	2300      	moveq	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	e022      	b.n	8004986 <HAL_TIM_PWM_Start+0x6a>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b04      	cmp	r3, #4
 8004944:	d109      	bne.n	800495a <HAL_TIM_PWM_Start+0x3e>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b01      	cmp	r3, #1
 8004950:	bf14      	ite	ne
 8004952:	2301      	movne	r3, #1
 8004954:	2300      	moveq	r3, #0
 8004956:	b2db      	uxtb	r3, r3
 8004958:	e015      	b.n	8004986 <HAL_TIM_PWM_Start+0x6a>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b08      	cmp	r3, #8
 800495e:	d109      	bne.n	8004974 <HAL_TIM_PWM_Start+0x58>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b01      	cmp	r3, #1
 800496a:	bf14      	ite	ne
 800496c:	2301      	movne	r3, #1
 800496e:	2300      	moveq	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	e008      	b.n	8004986 <HAL_TIM_PWM_Start+0x6a>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b01      	cmp	r3, #1
 800497e:	bf14      	ite	ne
 8004980:	2301      	movne	r3, #1
 8004982:	2300      	moveq	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e068      	b.n	8004a60 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d104      	bne.n	800499e <HAL_TIM_PWM_Start+0x82>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800499c:	e013      	b.n	80049c6 <HAL_TIM_PWM_Start+0xaa>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d104      	bne.n	80049ae <HAL_TIM_PWM_Start+0x92>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049ac:	e00b      	b.n	80049c6 <HAL_TIM_PWM_Start+0xaa>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d104      	bne.n	80049be <HAL_TIM_PWM_Start+0xa2>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049bc:	e003      	b.n	80049c6 <HAL_TIM_PWM_Start+0xaa>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2202      	movs	r2, #2
 80049c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2201      	movs	r2, #1
 80049cc:	6839      	ldr	r1, [r7, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fed6 	bl	8005780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a23      	ldr	r2, [pc, #140]	@ (8004a68 <HAL_TIM_PWM_Start+0x14c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d107      	bne.n	80049ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a1d      	ldr	r2, [pc, #116]	@ (8004a68 <HAL_TIM_PWM_Start+0x14c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d018      	beq.n	8004a2a <HAL_TIM_PWM_Start+0x10e>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a00:	d013      	beq.n	8004a2a <HAL_TIM_PWM_Start+0x10e>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a19      	ldr	r2, [pc, #100]	@ (8004a6c <HAL_TIM_PWM_Start+0x150>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d00e      	beq.n	8004a2a <HAL_TIM_PWM_Start+0x10e>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a17      	ldr	r2, [pc, #92]	@ (8004a70 <HAL_TIM_PWM_Start+0x154>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d009      	beq.n	8004a2a <HAL_TIM_PWM_Start+0x10e>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a16      	ldr	r2, [pc, #88]	@ (8004a74 <HAL_TIM_PWM_Start+0x158>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d004      	beq.n	8004a2a <HAL_TIM_PWM_Start+0x10e>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a14      	ldr	r2, [pc, #80]	@ (8004a78 <HAL_TIM_PWM_Start+0x15c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d111      	bne.n	8004a4e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2b06      	cmp	r3, #6
 8004a3a:	d010      	beq.n	8004a5e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a4c:	e007      	b.n	8004a5e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0201 	orr.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40010000 	.word	0x40010000
 8004a6c:	40000400 	.word	0x40000400
 8004a70:	40000800 	.word	0x40000800
 8004a74:	40000c00 	.word	0x40000c00
 8004a78:	40014000 	.word	0x40014000

08004a7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e097      	b.n	8004bc0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d106      	bne.n	8004aaa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7fd fa85 	bl	8001fb4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2202      	movs	r2, #2
 8004aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6812      	ldr	r2, [r2, #0]
 8004abc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ac0:	f023 0307 	bic.w	r3, r3, #7
 8004ac4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	3304      	adds	r3, #4
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	f000 fba9 	bl	8005228 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004afe:	f023 0303 	bic.w	r3, r3, #3
 8004b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004b1c:	f023 030c 	bic.w	r3, r3, #12
 8004b20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	021b      	lsls	r3, r3, #8
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	011a      	lsls	r2, r3, #4
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	031b      	lsls	r3, r3, #12
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004b5a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004b62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bd8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004be0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004be8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004bf0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d110      	bne.n	8004c1a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d102      	bne.n	8004c04 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004bfe:	7b7b      	ldrb	r3, [r7, #13]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d001      	beq.n	8004c08 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e069      	b.n	8004cdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c18:	e031      	b.n	8004c7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d110      	bne.n	8004c42 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c20:	7bbb      	ldrb	r3, [r7, #14]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d102      	bne.n	8004c2c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c26:	7b3b      	ldrb	r3, [r7, #12]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d001      	beq.n	8004c30 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e055      	b.n	8004cdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c40:	e01d      	b.n	8004c7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c42:	7bfb      	ldrb	r3, [r7, #15]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d108      	bne.n	8004c5a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c48:	7bbb      	ldrb	r3, [r7, #14]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d105      	bne.n	8004c5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c4e:	7b7b      	ldrb	r3, [r7, #13]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d102      	bne.n	8004c5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c54:	7b3b      	ldrb	r3, [r7, #12]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d001      	beq.n	8004c5e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e03e      	b.n	8004cdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2202      	movs	r2, #2
 8004c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2202      	movs	r2, #2
 8004c6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2202      	movs	r2, #2
 8004c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2202      	movs	r2, #2
 8004c7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <HAL_TIM_Encoder_Start+0xc4>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	d008      	beq.n	8004c9c <HAL_TIM_Encoder_Start+0xd4>
 8004c8a:	e00f      	b.n	8004cac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2201      	movs	r2, #1
 8004c92:	2100      	movs	r1, #0
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 fd73 	bl	8005780 <TIM_CCxChannelCmd>
      break;
 8004c9a:	e016      	b.n	8004cca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	2104      	movs	r1, #4
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 fd6b 	bl	8005780 <TIM_CCxChannelCmd>
      break;
 8004caa:	e00e      	b.n	8004cca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fd63 	bl	8005780 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	2104      	movs	r1, #4
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 fd5c 	bl	8005780 <TIM_CCxChannelCmd>
      break;
 8004cc8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f042 0201 	orr.w	r2, r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d020      	beq.n	8004d48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d01b      	beq.n	8004d48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0202 	mvn.w	r2, #2
 8004d18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fa5b 	bl	80051ea <HAL_TIM_IC_CaptureCallback>
 8004d34:	e005      	b.n	8004d42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fa4d 	bl	80051d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 fa5e 	bl	80051fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f003 0304 	and.w	r3, r3, #4
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d020      	beq.n	8004d94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d01b      	beq.n	8004d94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f06f 0204 	mvn.w	r2, #4
 8004d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2202      	movs	r2, #2
 8004d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 fa35 	bl	80051ea <HAL_TIM_IC_CaptureCallback>
 8004d80:	e005      	b.n	8004d8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fa27 	bl	80051d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 fa38 	bl	80051fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d020      	beq.n	8004de0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f003 0308 	and.w	r3, r3, #8
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d01b      	beq.n	8004de0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f06f 0208 	mvn.w	r2, #8
 8004db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2204      	movs	r2, #4
 8004db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fa0f 	bl	80051ea <HAL_TIM_IC_CaptureCallback>
 8004dcc:	e005      	b.n	8004dda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fa01 	bl	80051d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fa12 	bl	80051fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f003 0310 	and.w	r3, r3, #16
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d020      	beq.n	8004e2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f003 0310 	and.w	r3, r3, #16
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d01b      	beq.n	8004e2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f06f 0210 	mvn.w	r2, #16
 8004dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2208      	movs	r2, #8
 8004e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f9e9 	bl	80051ea <HAL_TIM_IC_CaptureCallback>
 8004e18:	e005      	b.n	8004e26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f9db 	bl	80051d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f9ec 	bl	80051fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00c      	beq.n	8004e50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d007      	beq.n	8004e50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f06f 0201 	mvn.w	r2, #1
 8004e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fc faec 	bl	8001428 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00c      	beq.n	8004e74 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d007      	beq.n	8004e74 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 fd76 	bl	8005960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00c      	beq.n	8004e98 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d007      	beq.n	8004e98 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f9bd 	bl	8005212 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f003 0320 	and.w	r3, r3, #32
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00c      	beq.n	8004ebc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f003 0320 	and.w	r3, r3, #32
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d007      	beq.n	8004ebc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f06f 0220 	mvn.w	r2, #32
 8004eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fd48 	bl	800594c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ebc:	bf00      	nop
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d101      	bne.n	8004ee2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	e0ae      	b.n	8005040 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b0c      	cmp	r3, #12
 8004eee:	f200 809f 	bhi.w	8005030 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef8:	08004f2d 	.word	0x08004f2d
 8004efc:	08005031 	.word	0x08005031
 8004f00:	08005031 	.word	0x08005031
 8004f04:	08005031 	.word	0x08005031
 8004f08:	08004f6d 	.word	0x08004f6d
 8004f0c:	08005031 	.word	0x08005031
 8004f10:	08005031 	.word	0x08005031
 8004f14:	08005031 	.word	0x08005031
 8004f18:	08004faf 	.word	0x08004faf
 8004f1c:	08005031 	.word	0x08005031
 8004f20:	08005031 	.word	0x08005031
 8004f24:	08005031 	.word	0x08005031
 8004f28:	08004fef 	.word	0x08004fef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68b9      	ldr	r1, [r7, #8]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 f9fe 	bl	8005334 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699a      	ldr	r2, [r3, #24]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0208 	orr.w	r2, r2, #8
 8004f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699a      	ldr	r2, [r3, #24]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0204 	bic.w	r2, r2, #4
 8004f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6999      	ldr	r1, [r3, #24]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	691a      	ldr	r2, [r3, #16]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	619a      	str	r2, [r3, #24]
      break;
 8004f6a:	e064      	b.n	8005036 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68b9      	ldr	r1, [r7, #8]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 fa44 	bl	8005400 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699a      	ldr	r2, [r3, #24]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6999      	ldr	r1, [r3, #24]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	021a      	lsls	r2, r3, #8
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	619a      	str	r2, [r3, #24]
      break;
 8004fac:	e043      	b.n	8005036 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68b9      	ldr	r1, [r7, #8]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 fa8f 	bl	80054d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69da      	ldr	r2, [r3, #28]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f042 0208 	orr.w	r2, r2, #8
 8004fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69da      	ldr	r2, [r3, #28]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f022 0204 	bic.w	r2, r2, #4
 8004fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69d9      	ldr	r1, [r3, #28]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	61da      	str	r2, [r3, #28]
      break;
 8004fec:	e023      	b.n	8005036 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68b9      	ldr	r1, [r7, #8]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 fad9 	bl	80055ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69da      	ldr	r2, [r3, #28]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69da      	ldr	r2, [r3, #28]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69d9      	ldr	r1, [r3, #28]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	021a      	lsls	r2, r3, #8
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	61da      	str	r2, [r3, #28]
      break;
 800502e:	e002      	b.n	8005036 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	75fb      	strb	r3, [r7, #23]
      break;
 8005034:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800503e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005052:	2300      	movs	r3, #0
 8005054:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_TIM_ConfigClockSource+0x1c>
 8005060:	2302      	movs	r3, #2
 8005062:	e0b4      	b.n	80051ce <HAL_TIM_ConfigClockSource+0x186>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800508a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800509c:	d03e      	beq.n	800511c <HAL_TIM_ConfigClockSource+0xd4>
 800509e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050a2:	f200 8087 	bhi.w	80051b4 <HAL_TIM_ConfigClockSource+0x16c>
 80050a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050aa:	f000 8086 	beq.w	80051ba <HAL_TIM_ConfigClockSource+0x172>
 80050ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050b2:	d87f      	bhi.n	80051b4 <HAL_TIM_ConfigClockSource+0x16c>
 80050b4:	2b70      	cmp	r3, #112	@ 0x70
 80050b6:	d01a      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0xa6>
 80050b8:	2b70      	cmp	r3, #112	@ 0x70
 80050ba:	d87b      	bhi.n	80051b4 <HAL_TIM_ConfigClockSource+0x16c>
 80050bc:	2b60      	cmp	r3, #96	@ 0x60
 80050be:	d050      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0x11a>
 80050c0:	2b60      	cmp	r3, #96	@ 0x60
 80050c2:	d877      	bhi.n	80051b4 <HAL_TIM_ConfigClockSource+0x16c>
 80050c4:	2b50      	cmp	r3, #80	@ 0x50
 80050c6:	d03c      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0xfa>
 80050c8:	2b50      	cmp	r3, #80	@ 0x50
 80050ca:	d873      	bhi.n	80051b4 <HAL_TIM_ConfigClockSource+0x16c>
 80050cc:	2b40      	cmp	r3, #64	@ 0x40
 80050ce:	d058      	beq.n	8005182 <HAL_TIM_ConfigClockSource+0x13a>
 80050d0:	2b40      	cmp	r3, #64	@ 0x40
 80050d2:	d86f      	bhi.n	80051b4 <HAL_TIM_ConfigClockSource+0x16c>
 80050d4:	2b30      	cmp	r3, #48	@ 0x30
 80050d6:	d064      	beq.n	80051a2 <HAL_TIM_ConfigClockSource+0x15a>
 80050d8:	2b30      	cmp	r3, #48	@ 0x30
 80050da:	d86b      	bhi.n	80051b4 <HAL_TIM_ConfigClockSource+0x16c>
 80050dc:	2b20      	cmp	r3, #32
 80050de:	d060      	beq.n	80051a2 <HAL_TIM_ConfigClockSource+0x15a>
 80050e0:	2b20      	cmp	r3, #32
 80050e2:	d867      	bhi.n	80051b4 <HAL_TIM_ConfigClockSource+0x16c>
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d05c      	beq.n	80051a2 <HAL_TIM_ConfigClockSource+0x15a>
 80050e8:	2b10      	cmp	r3, #16
 80050ea:	d05a      	beq.n	80051a2 <HAL_TIM_ConfigClockSource+0x15a>
 80050ec:	e062      	b.n	80051b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050fe:	f000 fb1f 	bl	8005740 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005110:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	609a      	str	r2, [r3, #8]
      break;
 800511a:	e04f      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800512c:	f000 fb08 	bl	8005740 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800513e:	609a      	str	r2, [r3, #8]
      break;
 8005140:	e03c      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800514e:	461a      	mov	r2, r3
 8005150:	f000 fa7c 	bl	800564c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2150      	movs	r1, #80	@ 0x50
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fad5 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 8005160:	e02c      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800516e:	461a      	mov	r2, r3
 8005170:	f000 fa9b 	bl	80056aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2160      	movs	r1, #96	@ 0x60
 800517a:	4618      	mov	r0, r3
 800517c:	f000 fac5 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 8005180:	e01c      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800518e:	461a      	mov	r2, r3
 8005190:	f000 fa5c 	bl	800564c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2140      	movs	r1, #64	@ 0x40
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fab5 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 80051a0:	e00c      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4619      	mov	r1, r3
 80051ac:	4610      	mov	r0, r2
 80051ae:	f000 faac 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 80051b2:	e003      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	73fb      	strb	r3, [r7, #15]
      break;
 80051b8:	e000      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005206:	bf00      	nop
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800521a:	bf00      	nop
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
	...

08005228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a37      	ldr	r2, [pc, #220]	@ (8005318 <TIM_Base_SetConfig+0xf0>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00f      	beq.n	8005260 <TIM_Base_SetConfig+0x38>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005246:	d00b      	beq.n	8005260 <TIM_Base_SetConfig+0x38>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a34      	ldr	r2, [pc, #208]	@ (800531c <TIM_Base_SetConfig+0xf4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d007      	beq.n	8005260 <TIM_Base_SetConfig+0x38>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a33      	ldr	r2, [pc, #204]	@ (8005320 <TIM_Base_SetConfig+0xf8>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d003      	beq.n	8005260 <TIM_Base_SetConfig+0x38>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a32      	ldr	r2, [pc, #200]	@ (8005324 <TIM_Base_SetConfig+0xfc>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d108      	bne.n	8005272 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a28      	ldr	r2, [pc, #160]	@ (8005318 <TIM_Base_SetConfig+0xf0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d01b      	beq.n	80052b2 <TIM_Base_SetConfig+0x8a>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005280:	d017      	beq.n	80052b2 <TIM_Base_SetConfig+0x8a>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a25      	ldr	r2, [pc, #148]	@ (800531c <TIM_Base_SetConfig+0xf4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d013      	beq.n	80052b2 <TIM_Base_SetConfig+0x8a>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a24      	ldr	r2, [pc, #144]	@ (8005320 <TIM_Base_SetConfig+0xf8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d00f      	beq.n	80052b2 <TIM_Base_SetConfig+0x8a>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a23      	ldr	r2, [pc, #140]	@ (8005324 <TIM_Base_SetConfig+0xfc>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d00b      	beq.n	80052b2 <TIM_Base_SetConfig+0x8a>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a22      	ldr	r2, [pc, #136]	@ (8005328 <TIM_Base_SetConfig+0x100>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d007      	beq.n	80052b2 <TIM_Base_SetConfig+0x8a>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a21      	ldr	r2, [pc, #132]	@ (800532c <TIM_Base_SetConfig+0x104>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d003      	beq.n	80052b2 <TIM_Base_SetConfig+0x8a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a20      	ldr	r2, [pc, #128]	@ (8005330 <TIM_Base_SetConfig+0x108>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d108      	bne.n	80052c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a0c      	ldr	r2, [pc, #48]	@ (8005318 <TIM_Base_SetConfig+0xf0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d103      	bne.n	80052f2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	691a      	ldr	r2, [r3, #16]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f043 0204 	orr.w	r2, r3, #4
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	601a      	str	r2, [r3, #0]
}
 800530a:	bf00      	nop
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	40010000 	.word	0x40010000
 800531c:	40000400 	.word	0x40000400
 8005320:	40000800 	.word	0x40000800
 8005324:	40000c00 	.word	0x40000c00
 8005328:	40014000 	.word	0x40014000
 800532c:	40014400 	.word	0x40014400
 8005330:	40014800 	.word	0x40014800

08005334 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	f023 0201 	bic.w	r2, r3, #1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 0303 	bic.w	r3, r3, #3
 800536a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f023 0302 	bic.w	r3, r3, #2
 800537c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	4313      	orrs	r3, r2
 8005386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a1c      	ldr	r2, [pc, #112]	@ (80053fc <TIM_OC1_SetConfig+0xc8>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d10c      	bne.n	80053aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f023 0308 	bic.w	r3, r3, #8
 8005396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4313      	orrs	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f023 0304 	bic.w	r3, r3, #4
 80053a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a13      	ldr	r2, [pc, #76]	@ (80053fc <TIM_OC1_SetConfig+0xc8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d111      	bne.n	80053d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	621a      	str	r2, [r3, #32]
}
 80053f0:	bf00      	nop
 80053f2:	371c      	adds	r7, #28
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	40010000 	.word	0x40010000

08005400 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	f023 0210 	bic.w	r2, r3, #16
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800542e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f023 0320 	bic.w	r3, r3, #32
 800544a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a1e      	ldr	r2, [pc, #120]	@ (80054d4 <TIM_OC2_SetConfig+0xd4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d10d      	bne.n	800547c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	011b      	lsls	r3, r3, #4
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	4313      	orrs	r3, r2
 8005472:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800547a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a15      	ldr	r2, [pc, #84]	@ (80054d4 <TIM_OC2_SetConfig+0xd4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d113      	bne.n	80054ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800548a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005492:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	621a      	str	r2, [r3, #32]
}
 80054c6:	bf00      	nop
 80054c8:	371c      	adds	r7, #28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40010000 	.word	0x40010000

080054d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0303 	bic.w	r3, r3, #3
 800550e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	021b      	lsls	r3, r3, #8
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	4313      	orrs	r3, r2
 800552c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a1d      	ldr	r2, [pc, #116]	@ (80055a8 <TIM_OC3_SetConfig+0xd0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d10d      	bne.n	8005552 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800553c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	021b      	lsls	r3, r3, #8
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	4313      	orrs	r3, r2
 8005548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a14      	ldr	r2, [pc, #80]	@ (80055a8 <TIM_OC3_SetConfig+0xd0>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d113      	bne.n	8005582 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	011b      	lsls	r3, r3, #4
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4313      	orrs	r3, r2
 8005580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	621a      	str	r2, [r3, #32]
}
 800559c:	bf00      	nop
 800559e:	371c      	adds	r7, #28
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	40010000 	.word	0x40010000

080055ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	021b      	lsls	r3, r3, #8
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	031b      	lsls	r3, r3, #12
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a10      	ldr	r2, [pc, #64]	@ (8005648 <TIM_OC4_SetConfig+0x9c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d109      	bne.n	8005620 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005612:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	019b      	lsls	r3, r3, #6
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	621a      	str	r2, [r3, #32]
}
 800563a:	bf00      	nop
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	40010000 	.word	0x40010000

0800564c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	f023 0201 	bic.w	r2, r3, #1
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f023 030a 	bic.w	r3, r3, #10
 8005688:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4313      	orrs	r3, r2
 8005690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	621a      	str	r2, [r3, #32]
}
 800569e:	bf00      	nop
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b087      	sub	sp, #28
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	f023 0210 	bic.w	r2, r3, #16
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80056d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	031b      	lsls	r3, r3, #12
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	4313      	orrs	r3, r2
 80056de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80056e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	621a      	str	r2, [r3, #32]
}
 80056fe:	bf00      	nop
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800570a:	b480      	push	{r7}
 800570c:	b085      	sub	sp, #20
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005720:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4313      	orrs	r3, r2
 8005728:	f043 0307 	orr.w	r3, r3, #7
 800572c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	609a      	str	r2, [r3, #8]
}
 8005734:	bf00      	nop
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800575a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	021a      	lsls	r2, r3, #8
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	431a      	orrs	r2, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4313      	orrs	r3, r2
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	4313      	orrs	r3, r2
 800576c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	609a      	str	r2, [r3, #8]
}
 8005774:	bf00      	nop
 8005776:	371c      	adds	r7, #28
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005780:	b480      	push	{r7}
 8005782:	b087      	sub	sp, #28
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f003 031f 	and.w	r3, r3, #31
 8005792:	2201      	movs	r2, #1
 8005794:	fa02 f303 	lsl.w	r3, r2, r3
 8005798:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6a1a      	ldr	r2, [r3, #32]
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	43db      	mvns	r3, r3
 80057a2:	401a      	ands	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6a1a      	ldr	r2, [r3, #32]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	f003 031f 	and.w	r3, r3, #31
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	fa01 f303 	lsl.w	r3, r1, r3
 80057b8:	431a      	orrs	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	621a      	str	r2, [r3, #32]
}
 80057be:	bf00      	nop
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
	...

080057cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e050      	b.n	8005886 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800580a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a1c      	ldr	r2, [pc, #112]	@ (8005894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d018      	beq.n	800585a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005830:	d013      	beq.n	800585a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a18      	ldr	r2, [pc, #96]	@ (8005898 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d00e      	beq.n	800585a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a16      	ldr	r2, [pc, #88]	@ (800589c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d009      	beq.n	800585a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a15      	ldr	r2, [pc, #84]	@ (80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d004      	beq.n	800585a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a13      	ldr	r2, [pc, #76]	@ (80058a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d10c      	bne.n	8005874 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005860:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	4313      	orrs	r3, r2
 800586a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	40010000 	.word	0x40010000
 8005898:	40000400 	.word	0x40000400
 800589c:	40000800 	.word	0x40000800
 80058a0:	40000c00 	.word	0x40000c00
 80058a4:	40014000 	.word	0x40014000

080058a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d101      	bne.n	80058c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80058c0:	2302      	movs	r3, #2
 80058c2:	e03d      	b.n	8005940 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4313      	orrs	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	4313      	orrs	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	4313      	orrs	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e042      	b.n	8005a0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d106      	bne.n	80059a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7fc fc04 	bl	80021a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2224      	movs	r2, #36	@ 0x24
 80059a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80059b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fc99 	bl	80062f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	691a      	ldr	r2, [r3, #16]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	695a      	ldr	r2, [r3, #20]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68da      	ldr	r2, [r3, #12]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80059ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2220      	movs	r2, #32
 8005a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b0ba      	sub	sp, #232	@ 0xe8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a4a:	f003 030f 	and.w	r3, r3, #15
 8005a4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005a52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10f      	bne.n	8005a7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a5e:	f003 0320 	and.w	r3, r3, #32
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d009      	beq.n	8005a7a <HAL_UART_IRQHandler+0x66>
 8005a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a6a:	f003 0320 	and.w	r3, r3, #32
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fb7e 	bl	8006174 <UART_Receive_IT>
      return;
 8005a78:	e273      	b.n	8005f62 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 80de 	beq.w	8005c40 <HAL_UART_IRQHandler+0x22c>
 8005a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d106      	bne.n	8005a9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a94:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 80d1 	beq.w	8005c40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00b      	beq.n	8005ac2 <HAL_UART_IRQHandler+0xae>
 8005aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d005      	beq.n	8005ac2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aba:	f043 0201 	orr.w	r2, r3, #1
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ac6:	f003 0304 	and.w	r3, r3, #4
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00b      	beq.n	8005ae6 <HAL_UART_IRQHandler+0xd2>
 8005ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d005      	beq.n	8005ae6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ade:	f043 0202 	orr.w	r2, r3, #2
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00b      	beq.n	8005b0a <HAL_UART_IRQHandler+0xf6>
 8005af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d005      	beq.n	8005b0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b02:	f043 0204 	orr.w	r2, r3, #4
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d011      	beq.n	8005b3a <HAL_UART_IRQHandler+0x126>
 8005b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b1a:	f003 0320 	and.w	r3, r3, #32
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d105      	bne.n	8005b2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d005      	beq.n	8005b3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b32:	f043 0208 	orr.w	r2, r3, #8
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 820a 	beq.w	8005f58 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b48:	f003 0320 	and.w	r3, r3, #32
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d008      	beq.n	8005b62 <HAL_UART_IRQHandler+0x14e>
 8005b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b54:	f003 0320 	and.w	r3, r3, #32
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 fb09 	bl	8006174 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b6c:	2b40      	cmp	r3, #64	@ 0x40
 8005b6e:	bf0c      	ite	eq
 8005b70:	2301      	moveq	r3, #1
 8005b72:	2300      	movne	r3, #0
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7e:	f003 0308 	and.w	r3, r3, #8
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d103      	bne.n	8005b8e <HAL_UART_IRQHandler+0x17a>
 8005b86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d04f      	beq.n	8005c2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fa14 	bl	8005fbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b9e:	2b40      	cmp	r3, #64	@ 0x40
 8005ba0:	d141      	bne.n	8005c26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	3314      	adds	r3, #20
 8005ba8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005bb0:	e853 3f00 	ldrex	r3, [r3]
 8005bb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005bbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3314      	adds	r3, #20
 8005bca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005bce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005bda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005bde:	e841 2300 	strex	r3, r2, [r1]
 8005be2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005be6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1d9      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d013      	beq.n	8005c1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bfa:	4a8a      	ldr	r2, [pc, #552]	@ (8005e24 <HAL_UART_IRQHandler+0x410>)
 8005bfc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fd fcfc 	bl	8003600 <HAL_DMA_Abort_IT>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d016      	beq.n	8005c3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c18:	4610      	mov	r0, r2
 8005c1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c1c:	e00e      	b.n	8005c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f9b6 	bl	8005f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c24:	e00a      	b.n	8005c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f9b2 	bl	8005f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c2c:	e006      	b.n	8005c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f9ae 	bl	8005f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005c3a:	e18d      	b.n	8005f58 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c3c:	bf00      	nop
    return;
 8005c3e:	e18b      	b.n	8005f58 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	f040 8167 	bne.w	8005f18 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c4e:	f003 0310 	and.w	r3, r3, #16
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 8160 	beq.w	8005f18 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c5c:	f003 0310 	and.w	r3, r3, #16
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 8159 	beq.w	8005f18 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c66:	2300      	movs	r3, #0
 8005c68:	60bb      	str	r3, [r7, #8]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	60bb      	str	r3, [r7, #8]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	60bb      	str	r3, [r7, #8]
 8005c7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c86:	2b40      	cmp	r3, #64	@ 0x40
 8005c88:	f040 80ce 	bne.w	8005e28 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 80a9 	beq.w	8005df4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005caa:	429a      	cmp	r2, r3
 8005cac:	f080 80a2 	bcs.w	8005df4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cb6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cc2:	f000 8088 	beq.w	8005dd6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	330c      	adds	r3, #12
 8005ccc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005cd4:	e853 3f00 	ldrex	r3, [r3]
 8005cd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005cdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ce0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	330c      	adds	r3, #12
 8005cee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005cf2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005cf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005cfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d02:	e841 2300 	strex	r3, r2, [r1]
 8005d06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1d9      	bne.n	8005cc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3314      	adds	r3, #20
 8005d18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d1c:	e853 3f00 	ldrex	r3, [r3]
 8005d20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d24:	f023 0301 	bic.w	r3, r3, #1
 8005d28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3314      	adds	r3, #20
 8005d32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005d3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d42:	e841 2300 	strex	r3, r2, [r1]
 8005d46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005d48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1e1      	bne.n	8005d12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	3314      	adds	r3, #20
 8005d54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d58:	e853 3f00 	ldrex	r3, [r3]
 8005d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005d5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3314      	adds	r3, #20
 8005d6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005d72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005d74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005d78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005d7a:	e841 2300 	strex	r3, r2, [r1]
 8005d7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005d80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1e3      	bne.n	8005d4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	330c      	adds	r3, #12
 8005d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d9e:	e853 3f00 	ldrex	r3, [r3]
 8005da2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005da4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005da6:	f023 0310 	bic.w	r3, r3, #16
 8005daa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	330c      	adds	r3, #12
 8005db4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005db8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005dba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005dbe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005dc0:	e841 2300 	strex	r3, r2, [r1]
 8005dc4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005dc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1e3      	bne.n	8005d94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7fd fba5 	bl	8003520 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2202      	movs	r2, #2
 8005dda:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	4619      	mov	r1, r3
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f8d9 	bl	8005fa4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005df2:	e0b3      	b.n	8005f5c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005df8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	f040 80ad 	bne.w	8005f5c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e0c:	f040 80a6 	bne.w	8005f5c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f8c1 	bl	8005fa4 <HAL_UARTEx_RxEventCallback>
      return;
 8005e22:	e09b      	b.n	8005f5c <HAL_UART_IRQHandler+0x548>
 8005e24:	08006083 	.word	0x08006083
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 808e 	beq.w	8005f60 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005e44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 8089 	beq.w	8005f60 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	330c      	adds	r3, #12
 8005e54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e58:	e853 3f00 	ldrex	r3, [r3]
 8005e5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	330c      	adds	r3, #12
 8005e6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005e72:	647a      	str	r2, [r7, #68]	@ 0x44
 8005e74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e7a:	e841 2300 	strex	r3, r2, [r1]
 8005e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1e3      	bne.n	8005e4e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	3314      	adds	r3, #20
 8005e8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e90:	e853 3f00 	ldrex	r3, [r3]
 8005e94:	623b      	str	r3, [r7, #32]
   return(result);
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	f023 0301 	bic.w	r3, r3, #1
 8005e9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3314      	adds	r3, #20
 8005ea6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005eaa:	633a      	str	r2, [r7, #48]	@ 0x30
 8005eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005eb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eb2:	e841 2300 	strex	r3, r2, [r1]
 8005eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1e3      	bne.n	8005e86 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	330c      	adds	r3, #12
 8005ed2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	e853 3f00 	ldrex	r3, [r3]
 8005eda:	60fb      	str	r3, [r7, #12]
   return(result);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 0310 	bic.w	r3, r3, #16
 8005ee2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	330c      	adds	r3, #12
 8005eec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005ef0:	61fa      	str	r2, [r7, #28]
 8005ef2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef4:	69b9      	ldr	r1, [r7, #24]
 8005ef6:	69fa      	ldr	r2, [r7, #28]
 8005ef8:	e841 2300 	strex	r3, r2, [r1]
 8005efc:	617b      	str	r3, [r7, #20]
   return(result);
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1e3      	bne.n	8005ecc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f0e:	4619      	mov	r1, r3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f847 	bl	8005fa4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f16:	e023      	b.n	8005f60 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d009      	beq.n	8005f38 <HAL_UART_IRQHandler+0x524>
 8005f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 f8b7 	bl	80060a4 <UART_Transmit_IT>
    return;
 8005f36:	e014      	b.n	8005f62 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00e      	beq.n	8005f62 <HAL_UART_IRQHandler+0x54e>
 8005f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d008      	beq.n	8005f62 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f8f7 	bl	8006144 <UART_EndTransmit_IT>
    return;
 8005f56:	e004      	b.n	8005f62 <HAL_UART_IRQHandler+0x54e>
    return;
 8005f58:	bf00      	nop
 8005f5a:	e002      	b.n	8005f62 <HAL_UART_IRQHandler+0x54e>
      return;
 8005f5c:	bf00      	nop
 8005f5e:	e000      	b.n	8005f62 <HAL_UART_IRQHandler+0x54e>
      return;
 8005f60:	bf00      	nop
  }
}
 8005f62:	37e8      	adds	r7, #232	@ 0xe8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	460b      	mov	r3, r1
 8005fae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b095      	sub	sp, #84	@ 0x54
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	330c      	adds	r3, #12
 8005fca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fce:	e853 3f00 	ldrex	r3, [r3]
 8005fd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	330c      	adds	r3, #12
 8005fe2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005fe4:	643a      	str	r2, [r7, #64]	@ 0x40
 8005fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fec:	e841 2300 	strex	r3, r2, [r1]
 8005ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1e5      	bne.n	8005fc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3314      	adds	r3, #20
 8005ffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	e853 3f00 	ldrex	r3, [r3]
 8006006:	61fb      	str	r3, [r7, #28]
   return(result);
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	f023 0301 	bic.w	r3, r3, #1
 800600e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	3314      	adds	r3, #20
 8006016:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006018:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800601a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800601e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006020:	e841 2300 	strex	r3, r2, [r1]
 8006024:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1e5      	bne.n	8005ff8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006030:	2b01      	cmp	r3, #1
 8006032:	d119      	bne.n	8006068 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	330c      	adds	r3, #12
 800603a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	e853 3f00 	ldrex	r3, [r3]
 8006042:	60bb      	str	r3, [r7, #8]
   return(result);
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f023 0310 	bic.w	r3, r3, #16
 800604a:	647b      	str	r3, [r7, #68]	@ 0x44
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	330c      	adds	r3, #12
 8006052:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006054:	61ba      	str	r2, [r7, #24]
 8006056:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006058:	6979      	ldr	r1, [r7, #20]
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	e841 2300 	strex	r3, r2, [r1]
 8006060:	613b      	str	r3, [r7, #16]
   return(result);
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1e5      	bne.n	8006034 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2220      	movs	r2, #32
 800606c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006076:	bf00      	nop
 8006078:	3754      	adds	r7, #84	@ 0x54
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b084      	sub	sp, #16
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800608e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f7ff ff7a 	bl	8005f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800609c:	bf00      	nop
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b21      	cmp	r3, #33	@ 0x21
 80060b6:	d13e      	bne.n	8006136 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060c0:	d114      	bne.n	80060ec <UART_Transmit_IT+0x48>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d110      	bne.n	80060ec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	881b      	ldrh	r3, [r3, #0]
 80060d4:	461a      	mov	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060de:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a1b      	ldr	r3, [r3, #32]
 80060e4:	1c9a      	adds	r2, r3, #2
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	621a      	str	r2, [r3, #32]
 80060ea:	e008      	b.n	80060fe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	1c59      	adds	r1, r3, #1
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	6211      	str	r1, [r2, #32]
 80060f6:	781a      	ldrb	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006102:	b29b      	uxth	r3, r3
 8006104:	3b01      	subs	r3, #1
 8006106:	b29b      	uxth	r3, r3
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	4619      	mov	r1, r3
 800610c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10f      	bne.n	8006132 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68da      	ldr	r2, [r3, #12]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006120:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006130:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	e000      	b.n	8006138 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006136:	2302      	movs	r3, #2
  }
}
 8006138:	4618      	mov	r0, r3
 800613a:	3714      	adds	r7, #20
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68da      	ldr	r2, [r3, #12]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800615a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2220      	movs	r2, #32
 8006160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7ff feff 	bl	8005f68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08c      	sub	sp, #48	@ 0x30
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800617c:	2300      	movs	r3, #0
 800617e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006180:	2300      	movs	r3, #0
 8006182:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b22      	cmp	r3, #34	@ 0x22
 800618e:	f040 80aa 	bne.w	80062e6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800619a:	d115      	bne.n	80061c8 <UART_Receive_IT+0x54>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d111      	bne.n	80061c8 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c0:	1c9a      	adds	r2, r3, #2
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80061c6:	e024      	b.n	8006212 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061d6:	d007      	beq.n	80061e8 <UART_Receive_IT+0x74>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10a      	bne.n	80061f6 <UART_Receive_IT+0x82>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d106      	bne.n	80061f6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f2:	701a      	strb	r2, [r3, #0]
 80061f4:	e008      	b.n	8006208 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006202:	b2da      	uxtb	r2, r3
 8006204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006206:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800620c:	1c5a      	adds	r2, r3, #1
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006216:	b29b      	uxth	r3, r3
 8006218:	3b01      	subs	r3, #1
 800621a:	b29b      	uxth	r3, r3
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	4619      	mov	r1, r3
 8006220:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006222:	2b00      	cmp	r3, #0
 8006224:	d15d      	bne.n	80062e2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0220 	bic.w	r2, r2, #32
 8006234:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68da      	ldr	r2, [r3, #12]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006244:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	695a      	ldr	r2, [r3, #20]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f022 0201 	bic.w	r2, r2, #1
 8006254:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2220      	movs	r2, #32
 800625a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006268:	2b01      	cmp	r3, #1
 800626a:	d135      	bne.n	80062d8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	330c      	adds	r3, #12
 8006278:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	e853 3f00 	ldrex	r3, [r3]
 8006280:	613b      	str	r3, [r7, #16]
   return(result);
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f023 0310 	bic.w	r3, r3, #16
 8006288:	627b      	str	r3, [r7, #36]	@ 0x24
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	330c      	adds	r3, #12
 8006290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006292:	623a      	str	r2, [r7, #32]
 8006294:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006296:	69f9      	ldr	r1, [r7, #28]
 8006298:	6a3a      	ldr	r2, [r7, #32]
 800629a:	e841 2300 	strex	r3, r2, [r1]
 800629e:	61bb      	str	r3, [r7, #24]
   return(result);
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1e5      	bne.n	8006272 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0310 	and.w	r3, r3, #16
 80062b0:	2b10      	cmp	r3, #16
 80062b2:	d10a      	bne.n	80062ca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062b4:	2300      	movs	r3, #0
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	60fb      	str	r3, [r7, #12]
 80062c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80062ce:	4619      	mov	r1, r3
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7ff fe67 	bl	8005fa4 <HAL_UARTEx_RxEventCallback>
 80062d6:	e002      	b.n	80062de <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7ff fe4f 	bl	8005f7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	e002      	b.n	80062e8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	e000      	b.n	80062e8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80062e6:	2302      	movs	r3, #2
  }
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3730      	adds	r7, #48	@ 0x30
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062f4:	b0c0      	sub	sp, #256	@ 0x100
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800630c:	68d9      	ldr	r1, [r3, #12]
 800630e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	ea40 0301 	orr.w	r3, r0, r1
 8006318:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800631a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	431a      	orrs	r2, r3
 8006328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	431a      	orrs	r2, r3
 8006330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	4313      	orrs	r3, r2
 8006338:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800633c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006348:	f021 010c 	bic.w	r1, r1, #12
 800634c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006356:	430b      	orrs	r3, r1
 8006358:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800635a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800636a:	6999      	ldr	r1, [r3, #24]
 800636c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	ea40 0301 	orr.w	r3, r0, r1
 8006376:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	4b8f      	ldr	r3, [pc, #572]	@ (80065bc <UART_SetConfig+0x2cc>)
 8006380:	429a      	cmp	r2, r3
 8006382:	d005      	beq.n	8006390 <UART_SetConfig+0xa0>
 8006384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	4b8d      	ldr	r3, [pc, #564]	@ (80065c0 <UART_SetConfig+0x2d0>)
 800638c:	429a      	cmp	r2, r3
 800638e:	d104      	bne.n	800639a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006390:	f7fe f9a4 	bl	80046dc <HAL_RCC_GetPCLK2Freq>
 8006394:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006398:	e003      	b.n	80063a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800639a:	f7fe f98b 	bl	80046b4 <HAL_RCC_GetPCLK1Freq>
 800639e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a6:	69db      	ldr	r3, [r3, #28]
 80063a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063ac:	f040 810c 	bne.w	80065c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063b4:	2200      	movs	r2, #0
 80063b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80063ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80063be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80063c2:	4622      	mov	r2, r4
 80063c4:	462b      	mov	r3, r5
 80063c6:	1891      	adds	r1, r2, r2
 80063c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80063ca:	415b      	adcs	r3, r3
 80063cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80063d2:	4621      	mov	r1, r4
 80063d4:	eb12 0801 	adds.w	r8, r2, r1
 80063d8:	4629      	mov	r1, r5
 80063da:	eb43 0901 	adc.w	r9, r3, r1
 80063de:	f04f 0200 	mov.w	r2, #0
 80063e2:	f04f 0300 	mov.w	r3, #0
 80063e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063f2:	4690      	mov	r8, r2
 80063f4:	4699      	mov	r9, r3
 80063f6:	4623      	mov	r3, r4
 80063f8:	eb18 0303 	adds.w	r3, r8, r3
 80063fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006400:	462b      	mov	r3, r5
 8006402:	eb49 0303 	adc.w	r3, r9, r3
 8006406:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800640a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006416:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800641a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800641e:	460b      	mov	r3, r1
 8006420:	18db      	adds	r3, r3, r3
 8006422:	653b      	str	r3, [r7, #80]	@ 0x50
 8006424:	4613      	mov	r3, r2
 8006426:	eb42 0303 	adc.w	r3, r2, r3
 800642a:	657b      	str	r3, [r7, #84]	@ 0x54
 800642c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006430:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006434:	f7fa fc30 	bl	8000c98 <__aeabi_uldivmod>
 8006438:	4602      	mov	r2, r0
 800643a:	460b      	mov	r3, r1
 800643c:	4b61      	ldr	r3, [pc, #388]	@ (80065c4 <UART_SetConfig+0x2d4>)
 800643e:	fba3 2302 	umull	r2, r3, r3, r2
 8006442:	095b      	lsrs	r3, r3, #5
 8006444:	011c      	lsls	r4, r3, #4
 8006446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800644a:	2200      	movs	r2, #0
 800644c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006450:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006454:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006458:	4642      	mov	r2, r8
 800645a:	464b      	mov	r3, r9
 800645c:	1891      	adds	r1, r2, r2
 800645e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006460:	415b      	adcs	r3, r3
 8006462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006464:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006468:	4641      	mov	r1, r8
 800646a:	eb12 0a01 	adds.w	sl, r2, r1
 800646e:	4649      	mov	r1, r9
 8006470:	eb43 0b01 	adc.w	fp, r3, r1
 8006474:	f04f 0200 	mov.w	r2, #0
 8006478:	f04f 0300 	mov.w	r3, #0
 800647c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006480:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006484:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006488:	4692      	mov	sl, r2
 800648a:	469b      	mov	fp, r3
 800648c:	4643      	mov	r3, r8
 800648e:	eb1a 0303 	adds.w	r3, sl, r3
 8006492:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006496:	464b      	mov	r3, r9
 8006498:	eb4b 0303 	adc.w	r3, fp, r3
 800649c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80064b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80064b4:	460b      	mov	r3, r1
 80064b6:	18db      	adds	r3, r3, r3
 80064b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80064ba:	4613      	mov	r3, r2
 80064bc:	eb42 0303 	adc.w	r3, r2, r3
 80064c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80064c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80064c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80064ca:	f7fa fbe5 	bl	8000c98 <__aeabi_uldivmod>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	4611      	mov	r1, r2
 80064d4:	4b3b      	ldr	r3, [pc, #236]	@ (80065c4 <UART_SetConfig+0x2d4>)
 80064d6:	fba3 2301 	umull	r2, r3, r3, r1
 80064da:	095b      	lsrs	r3, r3, #5
 80064dc:	2264      	movs	r2, #100	@ 0x64
 80064de:	fb02 f303 	mul.w	r3, r2, r3
 80064e2:	1acb      	subs	r3, r1, r3
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80064ea:	4b36      	ldr	r3, [pc, #216]	@ (80065c4 <UART_SetConfig+0x2d4>)
 80064ec:	fba3 2302 	umull	r2, r3, r3, r2
 80064f0:	095b      	lsrs	r3, r3, #5
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80064f8:	441c      	add	r4, r3
 80064fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064fe:	2200      	movs	r2, #0
 8006500:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006504:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006508:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800650c:	4642      	mov	r2, r8
 800650e:	464b      	mov	r3, r9
 8006510:	1891      	adds	r1, r2, r2
 8006512:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006514:	415b      	adcs	r3, r3
 8006516:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006518:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800651c:	4641      	mov	r1, r8
 800651e:	1851      	adds	r1, r2, r1
 8006520:	6339      	str	r1, [r7, #48]	@ 0x30
 8006522:	4649      	mov	r1, r9
 8006524:	414b      	adcs	r3, r1
 8006526:	637b      	str	r3, [r7, #52]	@ 0x34
 8006528:	f04f 0200 	mov.w	r2, #0
 800652c:	f04f 0300 	mov.w	r3, #0
 8006530:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006534:	4659      	mov	r1, fp
 8006536:	00cb      	lsls	r3, r1, #3
 8006538:	4651      	mov	r1, sl
 800653a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800653e:	4651      	mov	r1, sl
 8006540:	00ca      	lsls	r2, r1, #3
 8006542:	4610      	mov	r0, r2
 8006544:	4619      	mov	r1, r3
 8006546:	4603      	mov	r3, r0
 8006548:	4642      	mov	r2, r8
 800654a:	189b      	adds	r3, r3, r2
 800654c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006550:	464b      	mov	r3, r9
 8006552:	460a      	mov	r2, r1
 8006554:	eb42 0303 	adc.w	r3, r2, r3
 8006558:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800655c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006568:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800656c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006570:	460b      	mov	r3, r1
 8006572:	18db      	adds	r3, r3, r3
 8006574:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006576:	4613      	mov	r3, r2
 8006578:	eb42 0303 	adc.w	r3, r2, r3
 800657c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800657e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006582:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006586:	f7fa fb87 	bl	8000c98 <__aeabi_uldivmod>
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	4b0d      	ldr	r3, [pc, #52]	@ (80065c4 <UART_SetConfig+0x2d4>)
 8006590:	fba3 1302 	umull	r1, r3, r3, r2
 8006594:	095b      	lsrs	r3, r3, #5
 8006596:	2164      	movs	r1, #100	@ 0x64
 8006598:	fb01 f303 	mul.w	r3, r1, r3
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	00db      	lsls	r3, r3, #3
 80065a0:	3332      	adds	r3, #50	@ 0x32
 80065a2:	4a08      	ldr	r2, [pc, #32]	@ (80065c4 <UART_SetConfig+0x2d4>)
 80065a4:	fba2 2303 	umull	r2, r3, r2, r3
 80065a8:	095b      	lsrs	r3, r3, #5
 80065aa:	f003 0207 	and.w	r2, r3, #7
 80065ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4422      	add	r2, r4
 80065b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065b8:	e106      	b.n	80067c8 <UART_SetConfig+0x4d8>
 80065ba:	bf00      	nop
 80065bc:	40011000 	.word	0x40011000
 80065c0:	40011400 	.word	0x40011400
 80065c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065cc:	2200      	movs	r2, #0
 80065ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80065d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80065d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80065da:	4642      	mov	r2, r8
 80065dc:	464b      	mov	r3, r9
 80065de:	1891      	adds	r1, r2, r2
 80065e0:	6239      	str	r1, [r7, #32]
 80065e2:	415b      	adcs	r3, r3
 80065e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80065e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065ea:	4641      	mov	r1, r8
 80065ec:	1854      	adds	r4, r2, r1
 80065ee:	4649      	mov	r1, r9
 80065f0:	eb43 0501 	adc.w	r5, r3, r1
 80065f4:	f04f 0200 	mov.w	r2, #0
 80065f8:	f04f 0300 	mov.w	r3, #0
 80065fc:	00eb      	lsls	r3, r5, #3
 80065fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006602:	00e2      	lsls	r2, r4, #3
 8006604:	4614      	mov	r4, r2
 8006606:	461d      	mov	r5, r3
 8006608:	4643      	mov	r3, r8
 800660a:	18e3      	adds	r3, r4, r3
 800660c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006610:	464b      	mov	r3, r9
 8006612:	eb45 0303 	adc.w	r3, r5, r3
 8006616:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800661a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006626:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800662a:	f04f 0200 	mov.w	r2, #0
 800662e:	f04f 0300 	mov.w	r3, #0
 8006632:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006636:	4629      	mov	r1, r5
 8006638:	008b      	lsls	r3, r1, #2
 800663a:	4621      	mov	r1, r4
 800663c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006640:	4621      	mov	r1, r4
 8006642:	008a      	lsls	r2, r1, #2
 8006644:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006648:	f7fa fb26 	bl	8000c98 <__aeabi_uldivmod>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	4b60      	ldr	r3, [pc, #384]	@ (80067d4 <UART_SetConfig+0x4e4>)
 8006652:	fba3 2302 	umull	r2, r3, r3, r2
 8006656:	095b      	lsrs	r3, r3, #5
 8006658:	011c      	lsls	r4, r3, #4
 800665a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800665e:	2200      	movs	r2, #0
 8006660:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006664:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006668:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800666c:	4642      	mov	r2, r8
 800666e:	464b      	mov	r3, r9
 8006670:	1891      	adds	r1, r2, r2
 8006672:	61b9      	str	r1, [r7, #24]
 8006674:	415b      	adcs	r3, r3
 8006676:	61fb      	str	r3, [r7, #28]
 8006678:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800667c:	4641      	mov	r1, r8
 800667e:	1851      	adds	r1, r2, r1
 8006680:	6139      	str	r1, [r7, #16]
 8006682:	4649      	mov	r1, r9
 8006684:	414b      	adcs	r3, r1
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	f04f 0200 	mov.w	r2, #0
 800668c:	f04f 0300 	mov.w	r3, #0
 8006690:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006694:	4659      	mov	r1, fp
 8006696:	00cb      	lsls	r3, r1, #3
 8006698:	4651      	mov	r1, sl
 800669a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800669e:	4651      	mov	r1, sl
 80066a0:	00ca      	lsls	r2, r1, #3
 80066a2:	4610      	mov	r0, r2
 80066a4:	4619      	mov	r1, r3
 80066a6:	4603      	mov	r3, r0
 80066a8:	4642      	mov	r2, r8
 80066aa:	189b      	adds	r3, r3, r2
 80066ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80066b0:	464b      	mov	r3, r9
 80066b2:	460a      	mov	r2, r1
 80066b4:	eb42 0303 	adc.w	r3, r2, r3
 80066b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80066bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80066c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80066c8:	f04f 0200 	mov.w	r2, #0
 80066cc:	f04f 0300 	mov.w	r3, #0
 80066d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80066d4:	4649      	mov	r1, r9
 80066d6:	008b      	lsls	r3, r1, #2
 80066d8:	4641      	mov	r1, r8
 80066da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066de:	4641      	mov	r1, r8
 80066e0:	008a      	lsls	r2, r1, #2
 80066e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80066e6:	f7fa fad7 	bl	8000c98 <__aeabi_uldivmod>
 80066ea:	4602      	mov	r2, r0
 80066ec:	460b      	mov	r3, r1
 80066ee:	4611      	mov	r1, r2
 80066f0:	4b38      	ldr	r3, [pc, #224]	@ (80067d4 <UART_SetConfig+0x4e4>)
 80066f2:	fba3 2301 	umull	r2, r3, r3, r1
 80066f6:	095b      	lsrs	r3, r3, #5
 80066f8:	2264      	movs	r2, #100	@ 0x64
 80066fa:	fb02 f303 	mul.w	r3, r2, r3
 80066fe:	1acb      	subs	r3, r1, r3
 8006700:	011b      	lsls	r3, r3, #4
 8006702:	3332      	adds	r3, #50	@ 0x32
 8006704:	4a33      	ldr	r2, [pc, #204]	@ (80067d4 <UART_SetConfig+0x4e4>)
 8006706:	fba2 2303 	umull	r2, r3, r2, r3
 800670a:	095b      	lsrs	r3, r3, #5
 800670c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006710:	441c      	add	r4, r3
 8006712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006716:	2200      	movs	r2, #0
 8006718:	673b      	str	r3, [r7, #112]	@ 0x70
 800671a:	677a      	str	r2, [r7, #116]	@ 0x74
 800671c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006720:	4642      	mov	r2, r8
 8006722:	464b      	mov	r3, r9
 8006724:	1891      	adds	r1, r2, r2
 8006726:	60b9      	str	r1, [r7, #8]
 8006728:	415b      	adcs	r3, r3
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006730:	4641      	mov	r1, r8
 8006732:	1851      	adds	r1, r2, r1
 8006734:	6039      	str	r1, [r7, #0]
 8006736:	4649      	mov	r1, r9
 8006738:	414b      	adcs	r3, r1
 800673a:	607b      	str	r3, [r7, #4]
 800673c:	f04f 0200 	mov.w	r2, #0
 8006740:	f04f 0300 	mov.w	r3, #0
 8006744:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006748:	4659      	mov	r1, fp
 800674a:	00cb      	lsls	r3, r1, #3
 800674c:	4651      	mov	r1, sl
 800674e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006752:	4651      	mov	r1, sl
 8006754:	00ca      	lsls	r2, r1, #3
 8006756:	4610      	mov	r0, r2
 8006758:	4619      	mov	r1, r3
 800675a:	4603      	mov	r3, r0
 800675c:	4642      	mov	r2, r8
 800675e:	189b      	adds	r3, r3, r2
 8006760:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006762:	464b      	mov	r3, r9
 8006764:	460a      	mov	r2, r1
 8006766:	eb42 0303 	adc.w	r3, r2, r3
 800676a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800676c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	663b      	str	r3, [r7, #96]	@ 0x60
 8006776:	667a      	str	r2, [r7, #100]	@ 0x64
 8006778:	f04f 0200 	mov.w	r2, #0
 800677c:	f04f 0300 	mov.w	r3, #0
 8006780:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006784:	4649      	mov	r1, r9
 8006786:	008b      	lsls	r3, r1, #2
 8006788:	4641      	mov	r1, r8
 800678a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800678e:	4641      	mov	r1, r8
 8006790:	008a      	lsls	r2, r1, #2
 8006792:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006796:	f7fa fa7f 	bl	8000c98 <__aeabi_uldivmod>
 800679a:	4602      	mov	r2, r0
 800679c:	460b      	mov	r3, r1
 800679e:	4b0d      	ldr	r3, [pc, #52]	@ (80067d4 <UART_SetConfig+0x4e4>)
 80067a0:	fba3 1302 	umull	r1, r3, r3, r2
 80067a4:	095b      	lsrs	r3, r3, #5
 80067a6:	2164      	movs	r1, #100	@ 0x64
 80067a8:	fb01 f303 	mul.w	r3, r1, r3
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	011b      	lsls	r3, r3, #4
 80067b0:	3332      	adds	r3, #50	@ 0x32
 80067b2:	4a08      	ldr	r2, [pc, #32]	@ (80067d4 <UART_SetConfig+0x4e4>)
 80067b4:	fba2 2303 	umull	r2, r3, r2, r3
 80067b8:	095b      	lsrs	r3, r3, #5
 80067ba:	f003 020f 	and.w	r2, r3, #15
 80067be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4422      	add	r2, r4
 80067c6:	609a      	str	r2, [r3, #8]
}
 80067c8:	bf00      	nop
 80067ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80067ce:	46bd      	mov	sp, r7
 80067d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067d4:	51eb851f 	.word	0x51eb851f

080067d8 <__cvt>:
 80067d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067dc:	ec57 6b10 	vmov	r6, r7, d0
 80067e0:	2f00      	cmp	r7, #0
 80067e2:	460c      	mov	r4, r1
 80067e4:	4619      	mov	r1, r3
 80067e6:	463b      	mov	r3, r7
 80067e8:	bfbb      	ittet	lt
 80067ea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80067ee:	461f      	movlt	r7, r3
 80067f0:	2300      	movge	r3, #0
 80067f2:	232d      	movlt	r3, #45	@ 0x2d
 80067f4:	700b      	strb	r3, [r1, #0]
 80067f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067f8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80067fc:	4691      	mov	r9, r2
 80067fe:	f023 0820 	bic.w	r8, r3, #32
 8006802:	bfbc      	itt	lt
 8006804:	4632      	movlt	r2, r6
 8006806:	4616      	movlt	r6, r2
 8006808:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800680c:	d005      	beq.n	800681a <__cvt+0x42>
 800680e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006812:	d100      	bne.n	8006816 <__cvt+0x3e>
 8006814:	3401      	adds	r4, #1
 8006816:	2102      	movs	r1, #2
 8006818:	e000      	b.n	800681c <__cvt+0x44>
 800681a:	2103      	movs	r1, #3
 800681c:	ab03      	add	r3, sp, #12
 800681e:	9301      	str	r3, [sp, #4]
 8006820:	ab02      	add	r3, sp, #8
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	ec47 6b10 	vmov	d0, r6, r7
 8006828:	4653      	mov	r3, sl
 800682a:	4622      	mov	r2, r4
 800682c:	f001 f870 	bl	8007910 <_dtoa_r>
 8006830:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006834:	4605      	mov	r5, r0
 8006836:	d119      	bne.n	800686c <__cvt+0x94>
 8006838:	f019 0f01 	tst.w	r9, #1
 800683c:	d00e      	beq.n	800685c <__cvt+0x84>
 800683e:	eb00 0904 	add.w	r9, r0, r4
 8006842:	2200      	movs	r2, #0
 8006844:	2300      	movs	r3, #0
 8006846:	4630      	mov	r0, r6
 8006848:	4639      	mov	r1, r7
 800684a:	f7fa f945 	bl	8000ad8 <__aeabi_dcmpeq>
 800684e:	b108      	cbz	r0, 8006854 <__cvt+0x7c>
 8006850:	f8cd 900c 	str.w	r9, [sp, #12]
 8006854:	2230      	movs	r2, #48	@ 0x30
 8006856:	9b03      	ldr	r3, [sp, #12]
 8006858:	454b      	cmp	r3, r9
 800685a:	d31e      	bcc.n	800689a <__cvt+0xc2>
 800685c:	9b03      	ldr	r3, [sp, #12]
 800685e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006860:	1b5b      	subs	r3, r3, r5
 8006862:	4628      	mov	r0, r5
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	b004      	add	sp, #16
 8006868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800686c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006870:	eb00 0904 	add.w	r9, r0, r4
 8006874:	d1e5      	bne.n	8006842 <__cvt+0x6a>
 8006876:	7803      	ldrb	r3, [r0, #0]
 8006878:	2b30      	cmp	r3, #48	@ 0x30
 800687a:	d10a      	bne.n	8006892 <__cvt+0xba>
 800687c:	2200      	movs	r2, #0
 800687e:	2300      	movs	r3, #0
 8006880:	4630      	mov	r0, r6
 8006882:	4639      	mov	r1, r7
 8006884:	f7fa f928 	bl	8000ad8 <__aeabi_dcmpeq>
 8006888:	b918      	cbnz	r0, 8006892 <__cvt+0xba>
 800688a:	f1c4 0401 	rsb	r4, r4, #1
 800688e:	f8ca 4000 	str.w	r4, [sl]
 8006892:	f8da 3000 	ldr.w	r3, [sl]
 8006896:	4499      	add	r9, r3
 8006898:	e7d3      	b.n	8006842 <__cvt+0x6a>
 800689a:	1c59      	adds	r1, r3, #1
 800689c:	9103      	str	r1, [sp, #12]
 800689e:	701a      	strb	r2, [r3, #0]
 80068a0:	e7d9      	b.n	8006856 <__cvt+0x7e>

080068a2 <__exponent>:
 80068a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068a4:	2900      	cmp	r1, #0
 80068a6:	bfba      	itte	lt
 80068a8:	4249      	neglt	r1, r1
 80068aa:	232d      	movlt	r3, #45	@ 0x2d
 80068ac:	232b      	movge	r3, #43	@ 0x2b
 80068ae:	2909      	cmp	r1, #9
 80068b0:	7002      	strb	r2, [r0, #0]
 80068b2:	7043      	strb	r3, [r0, #1]
 80068b4:	dd29      	ble.n	800690a <__exponent+0x68>
 80068b6:	f10d 0307 	add.w	r3, sp, #7
 80068ba:	461d      	mov	r5, r3
 80068bc:	270a      	movs	r7, #10
 80068be:	461a      	mov	r2, r3
 80068c0:	fbb1 f6f7 	udiv	r6, r1, r7
 80068c4:	fb07 1416 	mls	r4, r7, r6, r1
 80068c8:	3430      	adds	r4, #48	@ 0x30
 80068ca:	f802 4c01 	strb.w	r4, [r2, #-1]
 80068ce:	460c      	mov	r4, r1
 80068d0:	2c63      	cmp	r4, #99	@ 0x63
 80068d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80068d6:	4631      	mov	r1, r6
 80068d8:	dcf1      	bgt.n	80068be <__exponent+0x1c>
 80068da:	3130      	adds	r1, #48	@ 0x30
 80068dc:	1e94      	subs	r4, r2, #2
 80068de:	f803 1c01 	strb.w	r1, [r3, #-1]
 80068e2:	1c41      	adds	r1, r0, #1
 80068e4:	4623      	mov	r3, r4
 80068e6:	42ab      	cmp	r3, r5
 80068e8:	d30a      	bcc.n	8006900 <__exponent+0x5e>
 80068ea:	f10d 0309 	add.w	r3, sp, #9
 80068ee:	1a9b      	subs	r3, r3, r2
 80068f0:	42ac      	cmp	r4, r5
 80068f2:	bf88      	it	hi
 80068f4:	2300      	movhi	r3, #0
 80068f6:	3302      	adds	r3, #2
 80068f8:	4403      	add	r3, r0
 80068fa:	1a18      	subs	r0, r3, r0
 80068fc:	b003      	add	sp, #12
 80068fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006900:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006904:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006908:	e7ed      	b.n	80068e6 <__exponent+0x44>
 800690a:	2330      	movs	r3, #48	@ 0x30
 800690c:	3130      	adds	r1, #48	@ 0x30
 800690e:	7083      	strb	r3, [r0, #2]
 8006910:	70c1      	strb	r1, [r0, #3]
 8006912:	1d03      	adds	r3, r0, #4
 8006914:	e7f1      	b.n	80068fa <__exponent+0x58>
	...

08006918 <_printf_float>:
 8006918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800691c:	b08d      	sub	sp, #52	@ 0x34
 800691e:	460c      	mov	r4, r1
 8006920:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006924:	4616      	mov	r6, r2
 8006926:	461f      	mov	r7, r3
 8006928:	4605      	mov	r5, r0
 800692a:	f000 fee9 	bl	8007700 <_localeconv_r>
 800692e:	6803      	ldr	r3, [r0, #0]
 8006930:	9304      	str	r3, [sp, #16]
 8006932:	4618      	mov	r0, r3
 8006934:	f7f9 fca4 	bl	8000280 <strlen>
 8006938:	2300      	movs	r3, #0
 800693a:	930a      	str	r3, [sp, #40]	@ 0x28
 800693c:	f8d8 3000 	ldr.w	r3, [r8]
 8006940:	9005      	str	r0, [sp, #20]
 8006942:	3307      	adds	r3, #7
 8006944:	f023 0307 	bic.w	r3, r3, #7
 8006948:	f103 0208 	add.w	r2, r3, #8
 800694c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006950:	f8d4 b000 	ldr.w	fp, [r4]
 8006954:	f8c8 2000 	str.w	r2, [r8]
 8006958:	e9d3 8900 	ldrd	r8, r9, [r3]
 800695c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006960:	9307      	str	r3, [sp, #28]
 8006962:	f8cd 8018 	str.w	r8, [sp, #24]
 8006966:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800696a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800696e:	4b9c      	ldr	r3, [pc, #624]	@ (8006be0 <_printf_float+0x2c8>)
 8006970:	f04f 32ff 	mov.w	r2, #4294967295
 8006974:	f7fa f8e2 	bl	8000b3c <__aeabi_dcmpun>
 8006978:	bb70      	cbnz	r0, 80069d8 <_printf_float+0xc0>
 800697a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800697e:	4b98      	ldr	r3, [pc, #608]	@ (8006be0 <_printf_float+0x2c8>)
 8006980:	f04f 32ff 	mov.w	r2, #4294967295
 8006984:	f7fa f8bc 	bl	8000b00 <__aeabi_dcmple>
 8006988:	bb30      	cbnz	r0, 80069d8 <_printf_float+0xc0>
 800698a:	2200      	movs	r2, #0
 800698c:	2300      	movs	r3, #0
 800698e:	4640      	mov	r0, r8
 8006990:	4649      	mov	r1, r9
 8006992:	f7fa f8ab 	bl	8000aec <__aeabi_dcmplt>
 8006996:	b110      	cbz	r0, 800699e <_printf_float+0x86>
 8006998:	232d      	movs	r3, #45	@ 0x2d
 800699a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800699e:	4a91      	ldr	r2, [pc, #580]	@ (8006be4 <_printf_float+0x2cc>)
 80069a0:	4b91      	ldr	r3, [pc, #580]	@ (8006be8 <_printf_float+0x2d0>)
 80069a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80069a6:	bf8c      	ite	hi
 80069a8:	4690      	movhi	r8, r2
 80069aa:	4698      	movls	r8, r3
 80069ac:	2303      	movs	r3, #3
 80069ae:	6123      	str	r3, [r4, #16]
 80069b0:	f02b 0304 	bic.w	r3, fp, #4
 80069b4:	6023      	str	r3, [r4, #0]
 80069b6:	f04f 0900 	mov.w	r9, #0
 80069ba:	9700      	str	r7, [sp, #0]
 80069bc:	4633      	mov	r3, r6
 80069be:	aa0b      	add	r2, sp, #44	@ 0x2c
 80069c0:	4621      	mov	r1, r4
 80069c2:	4628      	mov	r0, r5
 80069c4:	f000 f9d2 	bl	8006d6c <_printf_common>
 80069c8:	3001      	adds	r0, #1
 80069ca:	f040 808d 	bne.w	8006ae8 <_printf_float+0x1d0>
 80069ce:	f04f 30ff 	mov.w	r0, #4294967295
 80069d2:	b00d      	add	sp, #52	@ 0x34
 80069d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d8:	4642      	mov	r2, r8
 80069da:	464b      	mov	r3, r9
 80069dc:	4640      	mov	r0, r8
 80069de:	4649      	mov	r1, r9
 80069e0:	f7fa f8ac 	bl	8000b3c <__aeabi_dcmpun>
 80069e4:	b140      	cbz	r0, 80069f8 <_printf_float+0xe0>
 80069e6:	464b      	mov	r3, r9
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	bfbc      	itt	lt
 80069ec:	232d      	movlt	r3, #45	@ 0x2d
 80069ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80069f2:	4a7e      	ldr	r2, [pc, #504]	@ (8006bec <_printf_float+0x2d4>)
 80069f4:	4b7e      	ldr	r3, [pc, #504]	@ (8006bf0 <_printf_float+0x2d8>)
 80069f6:	e7d4      	b.n	80069a2 <_printf_float+0x8a>
 80069f8:	6863      	ldr	r3, [r4, #4]
 80069fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80069fe:	9206      	str	r2, [sp, #24]
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	d13b      	bne.n	8006a7c <_printf_float+0x164>
 8006a04:	2306      	movs	r3, #6
 8006a06:	6063      	str	r3, [r4, #4]
 8006a08:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	6022      	str	r2, [r4, #0]
 8006a10:	9303      	str	r3, [sp, #12]
 8006a12:	ab0a      	add	r3, sp, #40	@ 0x28
 8006a14:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006a18:	ab09      	add	r3, sp, #36	@ 0x24
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	6861      	ldr	r1, [r4, #4]
 8006a1e:	ec49 8b10 	vmov	d0, r8, r9
 8006a22:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006a26:	4628      	mov	r0, r5
 8006a28:	f7ff fed6 	bl	80067d8 <__cvt>
 8006a2c:	9b06      	ldr	r3, [sp, #24]
 8006a2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a30:	2b47      	cmp	r3, #71	@ 0x47
 8006a32:	4680      	mov	r8, r0
 8006a34:	d129      	bne.n	8006a8a <_printf_float+0x172>
 8006a36:	1cc8      	adds	r0, r1, #3
 8006a38:	db02      	blt.n	8006a40 <_printf_float+0x128>
 8006a3a:	6863      	ldr	r3, [r4, #4]
 8006a3c:	4299      	cmp	r1, r3
 8006a3e:	dd41      	ble.n	8006ac4 <_printf_float+0x1ac>
 8006a40:	f1aa 0a02 	sub.w	sl, sl, #2
 8006a44:	fa5f fa8a 	uxtb.w	sl, sl
 8006a48:	3901      	subs	r1, #1
 8006a4a:	4652      	mov	r2, sl
 8006a4c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006a50:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a52:	f7ff ff26 	bl	80068a2 <__exponent>
 8006a56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a58:	1813      	adds	r3, r2, r0
 8006a5a:	2a01      	cmp	r2, #1
 8006a5c:	4681      	mov	r9, r0
 8006a5e:	6123      	str	r3, [r4, #16]
 8006a60:	dc02      	bgt.n	8006a68 <_printf_float+0x150>
 8006a62:	6822      	ldr	r2, [r4, #0]
 8006a64:	07d2      	lsls	r2, r2, #31
 8006a66:	d501      	bpl.n	8006a6c <_printf_float+0x154>
 8006a68:	3301      	adds	r3, #1
 8006a6a:	6123      	str	r3, [r4, #16]
 8006a6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d0a2      	beq.n	80069ba <_printf_float+0xa2>
 8006a74:	232d      	movs	r3, #45	@ 0x2d
 8006a76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a7a:	e79e      	b.n	80069ba <_printf_float+0xa2>
 8006a7c:	9a06      	ldr	r2, [sp, #24]
 8006a7e:	2a47      	cmp	r2, #71	@ 0x47
 8006a80:	d1c2      	bne.n	8006a08 <_printf_float+0xf0>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1c0      	bne.n	8006a08 <_printf_float+0xf0>
 8006a86:	2301      	movs	r3, #1
 8006a88:	e7bd      	b.n	8006a06 <_printf_float+0xee>
 8006a8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a8e:	d9db      	bls.n	8006a48 <_printf_float+0x130>
 8006a90:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006a94:	d118      	bne.n	8006ac8 <_printf_float+0x1b0>
 8006a96:	2900      	cmp	r1, #0
 8006a98:	6863      	ldr	r3, [r4, #4]
 8006a9a:	dd0b      	ble.n	8006ab4 <_printf_float+0x19c>
 8006a9c:	6121      	str	r1, [r4, #16]
 8006a9e:	b913      	cbnz	r3, 8006aa6 <_printf_float+0x18e>
 8006aa0:	6822      	ldr	r2, [r4, #0]
 8006aa2:	07d0      	lsls	r0, r2, #31
 8006aa4:	d502      	bpl.n	8006aac <_printf_float+0x194>
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	440b      	add	r3, r1
 8006aaa:	6123      	str	r3, [r4, #16]
 8006aac:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006aae:	f04f 0900 	mov.w	r9, #0
 8006ab2:	e7db      	b.n	8006a6c <_printf_float+0x154>
 8006ab4:	b913      	cbnz	r3, 8006abc <_printf_float+0x1a4>
 8006ab6:	6822      	ldr	r2, [r4, #0]
 8006ab8:	07d2      	lsls	r2, r2, #31
 8006aba:	d501      	bpl.n	8006ac0 <_printf_float+0x1a8>
 8006abc:	3302      	adds	r3, #2
 8006abe:	e7f4      	b.n	8006aaa <_printf_float+0x192>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e7f2      	b.n	8006aaa <_printf_float+0x192>
 8006ac4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006ac8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006aca:	4299      	cmp	r1, r3
 8006acc:	db05      	blt.n	8006ada <_printf_float+0x1c2>
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	6121      	str	r1, [r4, #16]
 8006ad2:	07d8      	lsls	r0, r3, #31
 8006ad4:	d5ea      	bpl.n	8006aac <_printf_float+0x194>
 8006ad6:	1c4b      	adds	r3, r1, #1
 8006ad8:	e7e7      	b.n	8006aaa <_printf_float+0x192>
 8006ada:	2900      	cmp	r1, #0
 8006adc:	bfd4      	ite	le
 8006ade:	f1c1 0202 	rsble	r2, r1, #2
 8006ae2:	2201      	movgt	r2, #1
 8006ae4:	4413      	add	r3, r2
 8006ae6:	e7e0      	b.n	8006aaa <_printf_float+0x192>
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	055a      	lsls	r2, r3, #21
 8006aec:	d407      	bmi.n	8006afe <_printf_float+0x1e6>
 8006aee:	6923      	ldr	r3, [r4, #16]
 8006af0:	4642      	mov	r2, r8
 8006af2:	4631      	mov	r1, r6
 8006af4:	4628      	mov	r0, r5
 8006af6:	47b8      	blx	r7
 8006af8:	3001      	adds	r0, #1
 8006afa:	d12b      	bne.n	8006b54 <_printf_float+0x23c>
 8006afc:	e767      	b.n	80069ce <_printf_float+0xb6>
 8006afe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b02:	f240 80dd 	bls.w	8006cc0 <_printf_float+0x3a8>
 8006b06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	f7f9 ffe3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b12:	2800      	cmp	r0, #0
 8006b14:	d033      	beq.n	8006b7e <_printf_float+0x266>
 8006b16:	4a37      	ldr	r2, [pc, #220]	@ (8006bf4 <_printf_float+0x2dc>)
 8006b18:	2301      	movs	r3, #1
 8006b1a:	4631      	mov	r1, r6
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	47b8      	blx	r7
 8006b20:	3001      	adds	r0, #1
 8006b22:	f43f af54 	beq.w	80069ce <_printf_float+0xb6>
 8006b26:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006b2a:	4543      	cmp	r3, r8
 8006b2c:	db02      	blt.n	8006b34 <_printf_float+0x21c>
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	07d8      	lsls	r0, r3, #31
 8006b32:	d50f      	bpl.n	8006b54 <_printf_float+0x23c>
 8006b34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b38:	4631      	mov	r1, r6
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	47b8      	blx	r7
 8006b3e:	3001      	adds	r0, #1
 8006b40:	f43f af45 	beq.w	80069ce <_printf_float+0xb6>
 8006b44:	f04f 0900 	mov.w	r9, #0
 8006b48:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b4c:	f104 0a1a 	add.w	sl, r4, #26
 8006b50:	45c8      	cmp	r8, r9
 8006b52:	dc09      	bgt.n	8006b68 <_printf_float+0x250>
 8006b54:	6823      	ldr	r3, [r4, #0]
 8006b56:	079b      	lsls	r3, r3, #30
 8006b58:	f100 8103 	bmi.w	8006d62 <_printf_float+0x44a>
 8006b5c:	68e0      	ldr	r0, [r4, #12]
 8006b5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b60:	4298      	cmp	r0, r3
 8006b62:	bfb8      	it	lt
 8006b64:	4618      	movlt	r0, r3
 8006b66:	e734      	b.n	80069d2 <_printf_float+0xba>
 8006b68:	2301      	movs	r3, #1
 8006b6a:	4652      	mov	r2, sl
 8006b6c:	4631      	mov	r1, r6
 8006b6e:	4628      	mov	r0, r5
 8006b70:	47b8      	blx	r7
 8006b72:	3001      	adds	r0, #1
 8006b74:	f43f af2b 	beq.w	80069ce <_printf_float+0xb6>
 8006b78:	f109 0901 	add.w	r9, r9, #1
 8006b7c:	e7e8      	b.n	8006b50 <_printf_float+0x238>
 8006b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	dc39      	bgt.n	8006bf8 <_printf_float+0x2e0>
 8006b84:	4a1b      	ldr	r2, [pc, #108]	@ (8006bf4 <_printf_float+0x2dc>)
 8006b86:	2301      	movs	r3, #1
 8006b88:	4631      	mov	r1, r6
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	47b8      	blx	r7
 8006b8e:	3001      	adds	r0, #1
 8006b90:	f43f af1d 	beq.w	80069ce <_printf_float+0xb6>
 8006b94:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006b98:	ea59 0303 	orrs.w	r3, r9, r3
 8006b9c:	d102      	bne.n	8006ba4 <_printf_float+0x28c>
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	07d9      	lsls	r1, r3, #31
 8006ba2:	d5d7      	bpl.n	8006b54 <_printf_float+0x23c>
 8006ba4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ba8:	4631      	mov	r1, r6
 8006baa:	4628      	mov	r0, r5
 8006bac:	47b8      	blx	r7
 8006bae:	3001      	adds	r0, #1
 8006bb0:	f43f af0d 	beq.w	80069ce <_printf_float+0xb6>
 8006bb4:	f04f 0a00 	mov.w	sl, #0
 8006bb8:	f104 0b1a 	add.w	fp, r4, #26
 8006bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bbe:	425b      	negs	r3, r3
 8006bc0:	4553      	cmp	r3, sl
 8006bc2:	dc01      	bgt.n	8006bc8 <_printf_float+0x2b0>
 8006bc4:	464b      	mov	r3, r9
 8006bc6:	e793      	b.n	8006af0 <_printf_float+0x1d8>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	465a      	mov	r2, fp
 8006bcc:	4631      	mov	r1, r6
 8006bce:	4628      	mov	r0, r5
 8006bd0:	47b8      	blx	r7
 8006bd2:	3001      	adds	r0, #1
 8006bd4:	f43f aefb 	beq.w	80069ce <_printf_float+0xb6>
 8006bd8:	f10a 0a01 	add.w	sl, sl, #1
 8006bdc:	e7ee      	b.n	8006bbc <_printf_float+0x2a4>
 8006bde:	bf00      	nop
 8006be0:	7fefffff 	.word	0x7fefffff
 8006be4:	0800aef4 	.word	0x0800aef4
 8006be8:	0800aef0 	.word	0x0800aef0
 8006bec:	0800aefc 	.word	0x0800aefc
 8006bf0:	0800aef8 	.word	0x0800aef8
 8006bf4:	0800af00 	.word	0x0800af00
 8006bf8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006bfa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006bfe:	4553      	cmp	r3, sl
 8006c00:	bfa8      	it	ge
 8006c02:	4653      	movge	r3, sl
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	4699      	mov	r9, r3
 8006c08:	dc36      	bgt.n	8006c78 <_printf_float+0x360>
 8006c0a:	f04f 0b00 	mov.w	fp, #0
 8006c0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c12:	f104 021a 	add.w	r2, r4, #26
 8006c16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c18:	9306      	str	r3, [sp, #24]
 8006c1a:	eba3 0309 	sub.w	r3, r3, r9
 8006c1e:	455b      	cmp	r3, fp
 8006c20:	dc31      	bgt.n	8006c86 <_printf_float+0x36e>
 8006c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c24:	459a      	cmp	sl, r3
 8006c26:	dc3a      	bgt.n	8006c9e <_printf_float+0x386>
 8006c28:	6823      	ldr	r3, [r4, #0]
 8006c2a:	07da      	lsls	r2, r3, #31
 8006c2c:	d437      	bmi.n	8006c9e <_printf_float+0x386>
 8006c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c30:	ebaa 0903 	sub.w	r9, sl, r3
 8006c34:	9b06      	ldr	r3, [sp, #24]
 8006c36:	ebaa 0303 	sub.w	r3, sl, r3
 8006c3a:	4599      	cmp	r9, r3
 8006c3c:	bfa8      	it	ge
 8006c3e:	4699      	movge	r9, r3
 8006c40:	f1b9 0f00 	cmp.w	r9, #0
 8006c44:	dc33      	bgt.n	8006cae <_printf_float+0x396>
 8006c46:	f04f 0800 	mov.w	r8, #0
 8006c4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c4e:	f104 0b1a 	add.w	fp, r4, #26
 8006c52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c54:	ebaa 0303 	sub.w	r3, sl, r3
 8006c58:	eba3 0309 	sub.w	r3, r3, r9
 8006c5c:	4543      	cmp	r3, r8
 8006c5e:	f77f af79 	ble.w	8006b54 <_printf_float+0x23c>
 8006c62:	2301      	movs	r3, #1
 8006c64:	465a      	mov	r2, fp
 8006c66:	4631      	mov	r1, r6
 8006c68:	4628      	mov	r0, r5
 8006c6a:	47b8      	blx	r7
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	f43f aeae 	beq.w	80069ce <_printf_float+0xb6>
 8006c72:	f108 0801 	add.w	r8, r8, #1
 8006c76:	e7ec      	b.n	8006c52 <_printf_float+0x33a>
 8006c78:	4642      	mov	r2, r8
 8006c7a:	4631      	mov	r1, r6
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	47b8      	blx	r7
 8006c80:	3001      	adds	r0, #1
 8006c82:	d1c2      	bne.n	8006c0a <_printf_float+0x2f2>
 8006c84:	e6a3      	b.n	80069ce <_printf_float+0xb6>
 8006c86:	2301      	movs	r3, #1
 8006c88:	4631      	mov	r1, r6
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	9206      	str	r2, [sp, #24]
 8006c8e:	47b8      	blx	r7
 8006c90:	3001      	adds	r0, #1
 8006c92:	f43f ae9c 	beq.w	80069ce <_printf_float+0xb6>
 8006c96:	9a06      	ldr	r2, [sp, #24]
 8006c98:	f10b 0b01 	add.w	fp, fp, #1
 8006c9c:	e7bb      	b.n	8006c16 <_printf_float+0x2fe>
 8006c9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ca2:	4631      	mov	r1, r6
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	47b8      	blx	r7
 8006ca8:	3001      	adds	r0, #1
 8006caa:	d1c0      	bne.n	8006c2e <_printf_float+0x316>
 8006cac:	e68f      	b.n	80069ce <_printf_float+0xb6>
 8006cae:	9a06      	ldr	r2, [sp, #24]
 8006cb0:	464b      	mov	r3, r9
 8006cb2:	4442      	add	r2, r8
 8006cb4:	4631      	mov	r1, r6
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	47b8      	blx	r7
 8006cba:	3001      	adds	r0, #1
 8006cbc:	d1c3      	bne.n	8006c46 <_printf_float+0x32e>
 8006cbe:	e686      	b.n	80069ce <_printf_float+0xb6>
 8006cc0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006cc4:	f1ba 0f01 	cmp.w	sl, #1
 8006cc8:	dc01      	bgt.n	8006cce <_printf_float+0x3b6>
 8006cca:	07db      	lsls	r3, r3, #31
 8006ccc:	d536      	bpl.n	8006d3c <_printf_float+0x424>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	4642      	mov	r2, r8
 8006cd2:	4631      	mov	r1, r6
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	47b8      	blx	r7
 8006cd8:	3001      	adds	r0, #1
 8006cda:	f43f ae78 	beq.w	80069ce <_printf_float+0xb6>
 8006cde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	47b8      	blx	r7
 8006ce8:	3001      	adds	r0, #1
 8006cea:	f43f ae70 	beq.w	80069ce <_printf_float+0xb6>
 8006cee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cfa:	f7f9 feed 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cfe:	b9c0      	cbnz	r0, 8006d32 <_printf_float+0x41a>
 8006d00:	4653      	mov	r3, sl
 8006d02:	f108 0201 	add.w	r2, r8, #1
 8006d06:	4631      	mov	r1, r6
 8006d08:	4628      	mov	r0, r5
 8006d0a:	47b8      	blx	r7
 8006d0c:	3001      	adds	r0, #1
 8006d0e:	d10c      	bne.n	8006d2a <_printf_float+0x412>
 8006d10:	e65d      	b.n	80069ce <_printf_float+0xb6>
 8006d12:	2301      	movs	r3, #1
 8006d14:	465a      	mov	r2, fp
 8006d16:	4631      	mov	r1, r6
 8006d18:	4628      	mov	r0, r5
 8006d1a:	47b8      	blx	r7
 8006d1c:	3001      	adds	r0, #1
 8006d1e:	f43f ae56 	beq.w	80069ce <_printf_float+0xb6>
 8006d22:	f108 0801 	add.w	r8, r8, #1
 8006d26:	45d0      	cmp	r8, sl
 8006d28:	dbf3      	blt.n	8006d12 <_printf_float+0x3fa>
 8006d2a:	464b      	mov	r3, r9
 8006d2c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006d30:	e6df      	b.n	8006af2 <_printf_float+0x1da>
 8006d32:	f04f 0800 	mov.w	r8, #0
 8006d36:	f104 0b1a 	add.w	fp, r4, #26
 8006d3a:	e7f4      	b.n	8006d26 <_printf_float+0x40e>
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	4642      	mov	r2, r8
 8006d40:	e7e1      	b.n	8006d06 <_printf_float+0x3ee>
 8006d42:	2301      	movs	r3, #1
 8006d44:	464a      	mov	r2, r9
 8006d46:	4631      	mov	r1, r6
 8006d48:	4628      	mov	r0, r5
 8006d4a:	47b8      	blx	r7
 8006d4c:	3001      	adds	r0, #1
 8006d4e:	f43f ae3e 	beq.w	80069ce <_printf_float+0xb6>
 8006d52:	f108 0801 	add.w	r8, r8, #1
 8006d56:	68e3      	ldr	r3, [r4, #12]
 8006d58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d5a:	1a5b      	subs	r3, r3, r1
 8006d5c:	4543      	cmp	r3, r8
 8006d5e:	dcf0      	bgt.n	8006d42 <_printf_float+0x42a>
 8006d60:	e6fc      	b.n	8006b5c <_printf_float+0x244>
 8006d62:	f04f 0800 	mov.w	r8, #0
 8006d66:	f104 0919 	add.w	r9, r4, #25
 8006d6a:	e7f4      	b.n	8006d56 <_printf_float+0x43e>

08006d6c <_printf_common>:
 8006d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d70:	4616      	mov	r6, r2
 8006d72:	4698      	mov	r8, r3
 8006d74:	688a      	ldr	r2, [r1, #8]
 8006d76:	690b      	ldr	r3, [r1, #16]
 8006d78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	bfb8      	it	lt
 8006d80:	4613      	movlt	r3, r2
 8006d82:	6033      	str	r3, [r6, #0]
 8006d84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d88:	4607      	mov	r7, r0
 8006d8a:	460c      	mov	r4, r1
 8006d8c:	b10a      	cbz	r2, 8006d92 <_printf_common+0x26>
 8006d8e:	3301      	adds	r3, #1
 8006d90:	6033      	str	r3, [r6, #0]
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	0699      	lsls	r1, r3, #26
 8006d96:	bf42      	ittt	mi
 8006d98:	6833      	ldrmi	r3, [r6, #0]
 8006d9a:	3302      	addmi	r3, #2
 8006d9c:	6033      	strmi	r3, [r6, #0]
 8006d9e:	6825      	ldr	r5, [r4, #0]
 8006da0:	f015 0506 	ands.w	r5, r5, #6
 8006da4:	d106      	bne.n	8006db4 <_printf_common+0x48>
 8006da6:	f104 0a19 	add.w	sl, r4, #25
 8006daa:	68e3      	ldr	r3, [r4, #12]
 8006dac:	6832      	ldr	r2, [r6, #0]
 8006dae:	1a9b      	subs	r3, r3, r2
 8006db0:	42ab      	cmp	r3, r5
 8006db2:	dc26      	bgt.n	8006e02 <_printf_common+0x96>
 8006db4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006db8:	6822      	ldr	r2, [r4, #0]
 8006dba:	3b00      	subs	r3, #0
 8006dbc:	bf18      	it	ne
 8006dbe:	2301      	movne	r3, #1
 8006dc0:	0692      	lsls	r2, r2, #26
 8006dc2:	d42b      	bmi.n	8006e1c <_printf_common+0xb0>
 8006dc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006dc8:	4641      	mov	r1, r8
 8006dca:	4638      	mov	r0, r7
 8006dcc:	47c8      	blx	r9
 8006dce:	3001      	adds	r0, #1
 8006dd0:	d01e      	beq.n	8006e10 <_printf_common+0xa4>
 8006dd2:	6823      	ldr	r3, [r4, #0]
 8006dd4:	6922      	ldr	r2, [r4, #16]
 8006dd6:	f003 0306 	and.w	r3, r3, #6
 8006dda:	2b04      	cmp	r3, #4
 8006ddc:	bf02      	ittt	eq
 8006dde:	68e5      	ldreq	r5, [r4, #12]
 8006de0:	6833      	ldreq	r3, [r6, #0]
 8006de2:	1aed      	subeq	r5, r5, r3
 8006de4:	68a3      	ldr	r3, [r4, #8]
 8006de6:	bf0c      	ite	eq
 8006de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dec:	2500      	movne	r5, #0
 8006dee:	4293      	cmp	r3, r2
 8006df0:	bfc4      	itt	gt
 8006df2:	1a9b      	subgt	r3, r3, r2
 8006df4:	18ed      	addgt	r5, r5, r3
 8006df6:	2600      	movs	r6, #0
 8006df8:	341a      	adds	r4, #26
 8006dfa:	42b5      	cmp	r5, r6
 8006dfc:	d11a      	bne.n	8006e34 <_printf_common+0xc8>
 8006dfe:	2000      	movs	r0, #0
 8006e00:	e008      	b.n	8006e14 <_printf_common+0xa8>
 8006e02:	2301      	movs	r3, #1
 8006e04:	4652      	mov	r2, sl
 8006e06:	4641      	mov	r1, r8
 8006e08:	4638      	mov	r0, r7
 8006e0a:	47c8      	blx	r9
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	d103      	bne.n	8006e18 <_printf_common+0xac>
 8006e10:	f04f 30ff 	mov.w	r0, #4294967295
 8006e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e18:	3501      	adds	r5, #1
 8006e1a:	e7c6      	b.n	8006daa <_printf_common+0x3e>
 8006e1c:	18e1      	adds	r1, r4, r3
 8006e1e:	1c5a      	adds	r2, r3, #1
 8006e20:	2030      	movs	r0, #48	@ 0x30
 8006e22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e26:	4422      	add	r2, r4
 8006e28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e30:	3302      	adds	r3, #2
 8006e32:	e7c7      	b.n	8006dc4 <_printf_common+0x58>
 8006e34:	2301      	movs	r3, #1
 8006e36:	4622      	mov	r2, r4
 8006e38:	4641      	mov	r1, r8
 8006e3a:	4638      	mov	r0, r7
 8006e3c:	47c8      	blx	r9
 8006e3e:	3001      	adds	r0, #1
 8006e40:	d0e6      	beq.n	8006e10 <_printf_common+0xa4>
 8006e42:	3601      	adds	r6, #1
 8006e44:	e7d9      	b.n	8006dfa <_printf_common+0x8e>
	...

08006e48 <_printf_i>:
 8006e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e4c:	7e0f      	ldrb	r7, [r1, #24]
 8006e4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e50:	2f78      	cmp	r7, #120	@ 0x78
 8006e52:	4691      	mov	r9, r2
 8006e54:	4680      	mov	r8, r0
 8006e56:	460c      	mov	r4, r1
 8006e58:	469a      	mov	sl, r3
 8006e5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e5e:	d807      	bhi.n	8006e70 <_printf_i+0x28>
 8006e60:	2f62      	cmp	r7, #98	@ 0x62
 8006e62:	d80a      	bhi.n	8006e7a <_printf_i+0x32>
 8006e64:	2f00      	cmp	r7, #0
 8006e66:	f000 80d1 	beq.w	800700c <_printf_i+0x1c4>
 8006e6a:	2f58      	cmp	r7, #88	@ 0x58
 8006e6c:	f000 80b8 	beq.w	8006fe0 <_printf_i+0x198>
 8006e70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e78:	e03a      	b.n	8006ef0 <_printf_i+0xa8>
 8006e7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e7e:	2b15      	cmp	r3, #21
 8006e80:	d8f6      	bhi.n	8006e70 <_printf_i+0x28>
 8006e82:	a101      	add	r1, pc, #4	@ (adr r1, 8006e88 <_printf_i+0x40>)
 8006e84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e88:	08006ee1 	.word	0x08006ee1
 8006e8c:	08006ef5 	.word	0x08006ef5
 8006e90:	08006e71 	.word	0x08006e71
 8006e94:	08006e71 	.word	0x08006e71
 8006e98:	08006e71 	.word	0x08006e71
 8006e9c:	08006e71 	.word	0x08006e71
 8006ea0:	08006ef5 	.word	0x08006ef5
 8006ea4:	08006e71 	.word	0x08006e71
 8006ea8:	08006e71 	.word	0x08006e71
 8006eac:	08006e71 	.word	0x08006e71
 8006eb0:	08006e71 	.word	0x08006e71
 8006eb4:	08006ff3 	.word	0x08006ff3
 8006eb8:	08006f1f 	.word	0x08006f1f
 8006ebc:	08006fad 	.word	0x08006fad
 8006ec0:	08006e71 	.word	0x08006e71
 8006ec4:	08006e71 	.word	0x08006e71
 8006ec8:	08007015 	.word	0x08007015
 8006ecc:	08006e71 	.word	0x08006e71
 8006ed0:	08006f1f 	.word	0x08006f1f
 8006ed4:	08006e71 	.word	0x08006e71
 8006ed8:	08006e71 	.word	0x08006e71
 8006edc:	08006fb5 	.word	0x08006fb5
 8006ee0:	6833      	ldr	r3, [r6, #0]
 8006ee2:	1d1a      	adds	r2, r3, #4
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	6032      	str	r2, [r6, #0]
 8006ee8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006eec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e09c      	b.n	800702e <_printf_i+0x1e6>
 8006ef4:	6833      	ldr	r3, [r6, #0]
 8006ef6:	6820      	ldr	r0, [r4, #0]
 8006ef8:	1d19      	adds	r1, r3, #4
 8006efa:	6031      	str	r1, [r6, #0]
 8006efc:	0606      	lsls	r6, r0, #24
 8006efe:	d501      	bpl.n	8006f04 <_printf_i+0xbc>
 8006f00:	681d      	ldr	r5, [r3, #0]
 8006f02:	e003      	b.n	8006f0c <_printf_i+0xc4>
 8006f04:	0645      	lsls	r5, r0, #25
 8006f06:	d5fb      	bpl.n	8006f00 <_printf_i+0xb8>
 8006f08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f0c:	2d00      	cmp	r5, #0
 8006f0e:	da03      	bge.n	8006f18 <_printf_i+0xd0>
 8006f10:	232d      	movs	r3, #45	@ 0x2d
 8006f12:	426d      	negs	r5, r5
 8006f14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f18:	4858      	ldr	r0, [pc, #352]	@ (800707c <_printf_i+0x234>)
 8006f1a:	230a      	movs	r3, #10
 8006f1c:	e011      	b.n	8006f42 <_printf_i+0xfa>
 8006f1e:	6821      	ldr	r1, [r4, #0]
 8006f20:	6833      	ldr	r3, [r6, #0]
 8006f22:	0608      	lsls	r0, r1, #24
 8006f24:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f28:	d402      	bmi.n	8006f30 <_printf_i+0xe8>
 8006f2a:	0649      	lsls	r1, r1, #25
 8006f2c:	bf48      	it	mi
 8006f2e:	b2ad      	uxthmi	r5, r5
 8006f30:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f32:	4852      	ldr	r0, [pc, #328]	@ (800707c <_printf_i+0x234>)
 8006f34:	6033      	str	r3, [r6, #0]
 8006f36:	bf14      	ite	ne
 8006f38:	230a      	movne	r3, #10
 8006f3a:	2308      	moveq	r3, #8
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f42:	6866      	ldr	r6, [r4, #4]
 8006f44:	60a6      	str	r6, [r4, #8]
 8006f46:	2e00      	cmp	r6, #0
 8006f48:	db05      	blt.n	8006f56 <_printf_i+0x10e>
 8006f4a:	6821      	ldr	r1, [r4, #0]
 8006f4c:	432e      	orrs	r6, r5
 8006f4e:	f021 0104 	bic.w	r1, r1, #4
 8006f52:	6021      	str	r1, [r4, #0]
 8006f54:	d04b      	beq.n	8006fee <_printf_i+0x1a6>
 8006f56:	4616      	mov	r6, r2
 8006f58:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f5c:	fb03 5711 	mls	r7, r3, r1, r5
 8006f60:	5dc7      	ldrb	r7, [r0, r7]
 8006f62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f66:	462f      	mov	r7, r5
 8006f68:	42bb      	cmp	r3, r7
 8006f6a:	460d      	mov	r5, r1
 8006f6c:	d9f4      	bls.n	8006f58 <_printf_i+0x110>
 8006f6e:	2b08      	cmp	r3, #8
 8006f70:	d10b      	bne.n	8006f8a <_printf_i+0x142>
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	07df      	lsls	r7, r3, #31
 8006f76:	d508      	bpl.n	8006f8a <_printf_i+0x142>
 8006f78:	6923      	ldr	r3, [r4, #16]
 8006f7a:	6861      	ldr	r1, [r4, #4]
 8006f7c:	4299      	cmp	r1, r3
 8006f7e:	bfde      	ittt	le
 8006f80:	2330      	movle	r3, #48	@ 0x30
 8006f82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f86:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f8a:	1b92      	subs	r2, r2, r6
 8006f8c:	6122      	str	r2, [r4, #16]
 8006f8e:	f8cd a000 	str.w	sl, [sp]
 8006f92:	464b      	mov	r3, r9
 8006f94:	aa03      	add	r2, sp, #12
 8006f96:	4621      	mov	r1, r4
 8006f98:	4640      	mov	r0, r8
 8006f9a:	f7ff fee7 	bl	8006d6c <_printf_common>
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	d14a      	bne.n	8007038 <_printf_i+0x1f0>
 8006fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa6:	b004      	add	sp, #16
 8006fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	f043 0320 	orr.w	r3, r3, #32
 8006fb2:	6023      	str	r3, [r4, #0]
 8006fb4:	4832      	ldr	r0, [pc, #200]	@ (8007080 <_printf_i+0x238>)
 8006fb6:	2778      	movs	r7, #120	@ 0x78
 8006fb8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006fbc:	6823      	ldr	r3, [r4, #0]
 8006fbe:	6831      	ldr	r1, [r6, #0]
 8006fc0:	061f      	lsls	r7, r3, #24
 8006fc2:	f851 5b04 	ldr.w	r5, [r1], #4
 8006fc6:	d402      	bmi.n	8006fce <_printf_i+0x186>
 8006fc8:	065f      	lsls	r7, r3, #25
 8006fca:	bf48      	it	mi
 8006fcc:	b2ad      	uxthmi	r5, r5
 8006fce:	6031      	str	r1, [r6, #0]
 8006fd0:	07d9      	lsls	r1, r3, #31
 8006fd2:	bf44      	itt	mi
 8006fd4:	f043 0320 	orrmi.w	r3, r3, #32
 8006fd8:	6023      	strmi	r3, [r4, #0]
 8006fda:	b11d      	cbz	r5, 8006fe4 <_printf_i+0x19c>
 8006fdc:	2310      	movs	r3, #16
 8006fde:	e7ad      	b.n	8006f3c <_printf_i+0xf4>
 8006fe0:	4826      	ldr	r0, [pc, #152]	@ (800707c <_printf_i+0x234>)
 8006fe2:	e7e9      	b.n	8006fb8 <_printf_i+0x170>
 8006fe4:	6823      	ldr	r3, [r4, #0]
 8006fe6:	f023 0320 	bic.w	r3, r3, #32
 8006fea:	6023      	str	r3, [r4, #0]
 8006fec:	e7f6      	b.n	8006fdc <_printf_i+0x194>
 8006fee:	4616      	mov	r6, r2
 8006ff0:	e7bd      	b.n	8006f6e <_printf_i+0x126>
 8006ff2:	6833      	ldr	r3, [r6, #0]
 8006ff4:	6825      	ldr	r5, [r4, #0]
 8006ff6:	6961      	ldr	r1, [r4, #20]
 8006ff8:	1d18      	adds	r0, r3, #4
 8006ffa:	6030      	str	r0, [r6, #0]
 8006ffc:	062e      	lsls	r6, r5, #24
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	d501      	bpl.n	8007006 <_printf_i+0x1be>
 8007002:	6019      	str	r1, [r3, #0]
 8007004:	e002      	b.n	800700c <_printf_i+0x1c4>
 8007006:	0668      	lsls	r0, r5, #25
 8007008:	d5fb      	bpl.n	8007002 <_printf_i+0x1ba>
 800700a:	8019      	strh	r1, [r3, #0]
 800700c:	2300      	movs	r3, #0
 800700e:	6123      	str	r3, [r4, #16]
 8007010:	4616      	mov	r6, r2
 8007012:	e7bc      	b.n	8006f8e <_printf_i+0x146>
 8007014:	6833      	ldr	r3, [r6, #0]
 8007016:	1d1a      	adds	r2, r3, #4
 8007018:	6032      	str	r2, [r6, #0]
 800701a:	681e      	ldr	r6, [r3, #0]
 800701c:	6862      	ldr	r2, [r4, #4]
 800701e:	2100      	movs	r1, #0
 8007020:	4630      	mov	r0, r6
 8007022:	f7f9 f8dd 	bl	80001e0 <memchr>
 8007026:	b108      	cbz	r0, 800702c <_printf_i+0x1e4>
 8007028:	1b80      	subs	r0, r0, r6
 800702a:	6060      	str	r0, [r4, #4]
 800702c:	6863      	ldr	r3, [r4, #4]
 800702e:	6123      	str	r3, [r4, #16]
 8007030:	2300      	movs	r3, #0
 8007032:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007036:	e7aa      	b.n	8006f8e <_printf_i+0x146>
 8007038:	6923      	ldr	r3, [r4, #16]
 800703a:	4632      	mov	r2, r6
 800703c:	4649      	mov	r1, r9
 800703e:	4640      	mov	r0, r8
 8007040:	47d0      	blx	sl
 8007042:	3001      	adds	r0, #1
 8007044:	d0ad      	beq.n	8006fa2 <_printf_i+0x15a>
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	079b      	lsls	r3, r3, #30
 800704a:	d413      	bmi.n	8007074 <_printf_i+0x22c>
 800704c:	68e0      	ldr	r0, [r4, #12]
 800704e:	9b03      	ldr	r3, [sp, #12]
 8007050:	4298      	cmp	r0, r3
 8007052:	bfb8      	it	lt
 8007054:	4618      	movlt	r0, r3
 8007056:	e7a6      	b.n	8006fa6 <_printf_i+0x15e>
 8007058:	2301      	movs	r3, #1
 800705a:	4632      	mov	r2, r6
 800705c:	4649      	mov	r1, r9
 800705e:	4640      	mov	r0, r8
 8007060:	47d0      	blx	sl
 8007062:	3001      	adds	r0, #1
 8007064:	d09d      	beq.n	8006fa2 <_printf_i+0x15a>
 8007066:	3501      	adds	r5, #1
 8007068:	68e3      	ldr	r3, [r4, #12]
 800706a:	9903      	ldr	r1, [sp, #12]
 800706c:	1a5b      	subs	r3, r3, r1
 800706e:	42ab      	cmp	r3, r5
 8007070:	dcf2      	bgt.n	8007058 <_printf_i+0x210>
 8007072:	e7eb      	b.n	800704c <_printf_i+0x204>
 8007074:	2500      	movs	r5, #0
 8007076:	f104 0619 	add.w	r6, r4, #25
 800707a:	e7f5      	b.n	8007068 <_printf_i+0x220>
 800707c:	0800af02 	.word	0x0800af02
 8007080:	0800af13 	.word	0x0800af13

08007084 <_scanf_float>:
 8007084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007088:	b087      	sub	sp, #28
 800708a:	4691      	mov	r9, r2
 800708c:	9303      	str	r3, [sp, #12]
 800708e:	688b      	ldr	r3, [r1, #8]
 8007090:	1e5a      	subs	r2, r3, #1
 8007092:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007096:	bf81      	itttt	hi
 8007098:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800709c:	eb03 0b05 	addhi.w	fp, r3, r5
 80070a0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80070a4:	608b      	strhi	r3, [r1, #8]
 80070a6:	680b      	ldr	r3, [r1, #0]
 80070a8:	460a      	mov	r2, r1
 80070aa:	f04f 0500 	mov.w	r5, #0
 80070ae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80070b2:	f842 3b1c 	str.w	r3, [r2], #28
 80070b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80070ba:	4680      	mov	r8, r0
 80070bc:	460c      	mov	r4, r1
 80070be:	bf98      	it	ls
 80070c0:	f04f 0b00 	movls.w	fp, #0
 80070c4:	9201      	str	r2, [sp, #4]
 80070c6:	4616      	mov	r6, r2
 80070c8:	46aa      	mov	sl, r5
 80070ca:	462f      	mov	r7, r5
 80070cc:	9502      	str	r5, [sp, #8]
 80070ce:	68a2      	ldr	r2, [r4, #8]
 80070d0:	b15a      	cbz	r2, 80070ea <_scanf_float+0x66>
 80070d2:	f8d9 3000 	ldr.w	r3, [r9]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	2b4e      	cmp	r3, #78	@ 0x4e
 80070da:	d863      	bhi.n	80071a4 <_scanf_float+0x120>
 80070dc:	2b40      	cmp	r3, #64	@ 0x40
 80070de:	d83b      	bhi.n	8007158 <_scanf_float+0xd4>
 80070e0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80070e4:	b2c8      	uxtb	r0, r1
 80070e6:	280e      	cmp	r0, #14
 80070e8:	d939      	bls.n	800715e <_scanf_float+0xda>
 80070ea:	b11f      	cbz	r7, 80070f4 <_scanf_float+0x70>
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070f2:	6023      	str	r3, [r4, #0]
 80070f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070f8:	f1ba 0f01 	cmp.w	sl, #1
 80070fc:	f200 8114 	bhi.w	8007328 <_scanf_float+0x2a4>
 8007100:	9b01      	ldr	r3, [sp, #4]
 8007102:	429e      	cmp	r6, r3
 8007104:	f200 8105 	bhi.w	8007312 <_scanf_float+0x28e>
 8007108:	2001      	movs	r0, #1
 800710a:	b007      	add	sp, #28
 800710c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007110:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007114:	2a0d      	cmp	r2, #13
 8007116:	d8e8      	bhi.n	80070ea <_scanf_float+0x66>
 8007118:	a101      	add	r1, pc, #4	@ (adr r1, 8007120 <_scanf_float+0x9c>)
 800711a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800711e:	bf00      	nop
 8007120:	08007269 	.word	0x08007269
 8007124:	080070eb 	.word	0x080070eb
 8007128:	080070eb 	.word	0x080070eb
 800712c:	080070eb 	.word	0x080070eb
 8007130:	080072c5 	.word	0x080072c5
 8007134:	0800729f 	.word	0x0800729f
 8007138:	080070eb 	.word	0x080070eb
 800713c:	080070eb 	.word	0x080070eb
 8007140:	08007277 	.word	0x08007277
 8007144:	080070eb 	.word	0x080070eb
 8007148:	080070eb 	.word	0x080070eb
 800714c:	080070eb 	.word	0x080070eb
 8007150:	080070eb 	.word	0x080070eb
 8007154:	08007233 	.word	0x08007233
 8007158:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800715c:	e7da      	b.n	8007114 <_scanf_float+0x90>
 800715e:	290e      	cmp	r1, #14
 8007160:	d8c3      	bhi.n	80070ea <_scanf_float+0x66>
 8007162:	a001      	add	r0, pc, #4	@ (adr r0, 8007168 <_scanf_float+0xe4>)
 8007164:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007168:	08007223 	.word	0x08007223
 800716c:	080070eb 	.word	0x080070eb
 8007170:	08007223 	.word	0x08007223
 8007174:	080072b3 	.word	0x080072b3
 8007178:	080070eb 	.word	0x080070eb
 800717c:	080071c5 	.word	0x080071c5
 8007180:	08007209 	.word	0x08007209
 8007184:	08007209 	.word	0x08007209
 8007188:	08007209 	.word	0x08007209
 800718c:	08007209 	.word	0x08007209
 8007190:	08007209 	.word	0x08007209
 8007194:	08007209 	.word	0x08007209
 8007198:	08007209 	.word	0x08007209
 800719c:	08007209 	.word	0x08007209
 80071a0:	08007209 	.word	0x08007209
 80071a4:	2b6e      	cmp	r3, #110	@ 0x6e
 80071a6:	d809      	bhi.n	80071bc <_scanf_float+0x138>
 80071a8:	2b60      	cmp	r3, #96	@ 0x60
 80071aa:	d8b1      	bhi.n	8007110 <_scanf_float+0x8c>
 80071ac:	2b54      	cmp	r3, #84	@ 0x54
 80071ae:	d07b      	beq.n	80072a8 <_scanf_float+0x224>
 80071b0:	2b59      	cmp	r3, #89	@ 0x59
 80071b2:	d19a      	bne.n	80070ea <_scanf_float+0x66>
 80071b4:	2d07      	cmp	r5, #7
 80071b6:	d198      	bne.n	80070ea <_scanf_float+0x66>
 80071b8:	2508      	movs	r5, #8
 80071ba:	e02f      	b.n	800721c <_scanf_float+0x198>
 80071bc:	2b74      	cmp	r3, #116	@ 0x74
 80071be:	d073      	beq.n	80072a8 <_scanf_float+0x224>
 80071c0:	2b79      	cmp	r3, #121	@ 0x79
 80071c2:	e7f6      	b.n	80071b2 <_scanf_float+0x12e>
 80071c4:	6821      	ldr	r1, [r4, #0]
 80071c6:	05c8      	lsls	r0, r1, #23
 80071c8:	d51e      	bpl.n	8007208 <_scanf_float+0x184>
 80071ca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80071ce:	6021      	str	r1, [r4, #0]
 80071d0:	3701      	adds	r7, #1
 80071d2:	f1bb 0f00 	cmp.w	fp, #0
 80071d6:	d003      	beq.n	80071e0 <_scanf_float+0x15c>
 80071d8:	3201      	adds	r2, #1
 80071da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80071de:	60a2      	str	r2, [r4, #8]
 80071e0:	68a3      	ldr	r3, [r4, #8]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	60a3      	str	r3, [r4, #8]
 80071e6:	6923      	ldr	r3, [r4, #16]
 80071e8:	3301      	adds	r3, #1
 80071ea:	6123      	str	r3, [r4, #16]
 80071ec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80071f0:	3b01      	subs	r3, #1
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f8c9 3004 	str.w	r3, [r9, #4]
 80071f8:	f340 8082 	ble.w	8007300 <_scanf_float+0x27c>
 80071fc:	f8d9 3000 	ldr.w	r3, [r9]
 8007200:	3301      	adds	r3, #1
 8007202:	f8c9 3000 	str.w	r3, [r9]
 8007206:	e762      	b.n	80070ce <_scanf_float+0x4a>
 8007208:	eb1a 0105 	adds.w	r1, sl, r5
 800720c:	f47f af6d 	bne.w	80070ea <_scanf_float+0x66>
 8007210:	6822      	ldr	r2, [r4, #0]
 8007212:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007216:	6022      	str	r2, [r4, #0]
 8007218:	460d      	mov	r5, r1
 800721a:	468a      	mov	sl, r1
 800721c:	f806 3b01 	strb.w	r3, [r6], #1
 8007220:	e7de      	b.n	80071e0 <_scanf_float+0x15c>
 8007222:	6822      	ldr	r2, [r4, #0]
 8007224:	0610      	lsls	r0, r2, #24
 8007226:	f57f af60 	bpl.w	80070ea <_scanf_float+0x66>
 800722a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800722e:	6022      	str	r2, [r4, #0]
 8007230:	e7f4      	b.n	800721c <_scanf_float+0x198>
 8007232:	f1ba 0f00 	cmp.w	sl, #0
 8007236:	d10c      	bne.n	8007252 <_scanf_float+0x1ce>
 8007238:	b977      	cbnz	r7, 8007258 <_scanf_float+0x1d4>
 800723a:	6822      	ldr	r2, [r4, #0]
 800723c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007240:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007244:	d108      	bne.n	8007258 <_scanf_float+0x1d4>
 8007246:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800724a:	6022      	str	r2, [r4, #0]
 800724c:	f04f 0a01 	mov.w	sl, #1
 8007250:	e7e4      	b.n	800721c <_scanf_float+0x198>
 8007252:	f1ba 0f02 	cmp.w	sl, #2
 8007256:	d050      	beq.n	80072fa <_scanf_float+0x276>
 8007258:	2d01      	cmp	r5, #1
 800725a:	d002      	beq.n	8007262 <_scanf_float+0x1de>
 800725c:	2d04      	cmp	r5, #4
 800725e:	f47f af44 	bne.w	80070ea <_scanf_float+0x66>
 8007262:	3501      	adds	r5, #1
 8007264:	b2ed      	uxtb	r5, r5
 8007266:	e7d9      	b.n	800721c <_scanf_float+0x198>
 8007268:	f1ba 0f01 	cmp.w	sl, #1
 800726c:	f47f af3d 	bne.w	80070ea <_scanf_float+0x66>
 8007270:	f04f 0a02 	mov.w	sl, #2
 8007274:	e7d2      	b.n	800721c <_scanf_float+0x198>
 8007276:	b975      	cbnz	r5, 8007296 <_scanf_float+0x212>
 8007278:	2f00      	cmp	r7, #0
 800727a:	f47f af37 	bne.w	80070ec <_scanf_float+0x68>
 800727e:	6822      	ldr	r2, [r4, #0]
 8007280:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007284:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007288:	f040 8103 	bne.w	8007492 <_scanf_float+0x40e>
 800728c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007290:	6022      	str	r2, [r4, #0]
 8007292:	2501      	movs	r5, #1
 8007294:	e7c2      	b.n	800721c <_scanf_float+0x198>
 8007296:	2d03      	cmp	r5, #3
 8007298:	d0e3      	beq.n	8007262 <_scanf_float+0x1de>
 800729a:	2d05      	cmp	r5, #5
 800729c:	e7df      	b.n	800725e <_scanf_float+0x1da>
 800729e:	2d02      	cmp	r5, #2
 80072a0:	f47f af23 	bne.w	80070ea <_scanf_float+0x66>
 80072a4:	2503      	movs	r5, #3
 80072a6:	e7b9      	b.n	800721c <_scanf_float+0x198>
 80072a8:	2d06      	cmp	r5, #6
 80072aa:	f47f af1e 	bne.w	80070ea <_scanf_float+0x66>
 80072ae:	2507      	movs	r5, #7
 80072b0:	e7b4      	b.n	800721c <_scanf_float+0x198>
 80072b2:	6822      	ldr	r2, [r4, #0]
 80072b4:	0591      	lsls	r1, r2, #22
 80072b6:	f57f af18 	bpl.w	80070ea <_scanf_float+0x66>
 80072ba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80072be:	6022      	str	r2, [r4, #0]
 80072c0:	9702      	str	r7, [sp, #8]
 80072c2:	e7ab      	b.n	800721c <_scanf_float+0x198>
 80072c4:	6822      	ldr	r2, [r4, #0]
 80072c6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80072ca:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80072ce:	d005      	beq.n	80072dc <_scanf_float+0x258>
 80072d0:	0550      	lsls	r0, r2, #21
 80072d2:	f57f af0a 	bpl.w	80070ea <_scanf_float+0x66>
 80072d6:	2f00      	cmp	r7, #0
 80072d8:	f000 80db 	beq.w	8007492 <_scanf_float+0x40e>
 80072dc:	0591      	lsls	r1, r2, #22
 80072de:	bf58      	it	pl
 80072e0:	9902      	ldrpl	r1, [sp, #8]
 80072e2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80072e6:	bf58      	it	pl
 80072e8:	1a79      	subpl	r1, r7, r1
 80072ea:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80072ee:	bf58      	it	pl
 80072f0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80072f4:	6022      	str	r2, [r4, #0]
 80072f6:	2700      	movs	r7, #0
 80072f8:	e790      	b.n	800721c <_scanf_float+0x198>
 80072fa:	f04f 0a03 	mov.w	sl, #3
 80072fe:	e78d      	b.n	800721c <_scanf_float+0x198>
 8007300:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007304:	4649      	mov	r1, r9
 8007306:	4640      	mov	r0, r8
 8007308:	4798      	blx	r3
 800730a:	2800      	cmp	r0, #0
 800730c:	f43f aedf 	beq.w	80070ce <_scanf_float+0x4a>
 8007310:	e6eb      	b.n	80070ea <_scanf_float+0x66>
 8007312:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007316:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800731a:	464a      	mov	r2, r9
 800731c:	4640      	mov	r0, r8
 800731e:	4798      	blx	r3
 8007320:	6923      	ldr	r3, [r4, #16]
 8007322:	3b01      	subs	r3, #1
 8007324:	6123      	str	r3, [r4, #16]
 8007326:	e6eb      	b.n	8007100 <_scanf_float+0x7c>
 8007328:	1e6b      	subs	r3, r5, #1
 800732a:	2b06      	cmp	r3, #6
 800732c:	d824      	bhi.n	8007378 <_scanf_float+0x2f4>
 800732e:	2d02      	cmp	r5, #2
 8007330:	d836      	bhi.n	80073a0 <_scanf_float+0x31c>
 8007332:	9b01      	ldr	r3, [sp, #4]
 8007334:	429e      	cmp	r6, r3
 8007336:	f67f aee7 	bls.w	8007108 <_scanf_float+0x84>
 800733a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800733e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007342:	464a      	mov	r2, r9
 8007344:	4640      	mov	r0, r8
 8007346:	4798      	blx	r3
 8007348:	6923      	ldr	r3, [r4, #16]
 800734a:	3b01      	subs	r3, #1
 800734c:	6123      	str	r3, [r4, #16]
 800734e:	e7f0      	b.n	8007332 <_scanf_float+0x2ae>
 8007350:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007354:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007358:	464a      	mov	r2, r9
 800735a:	4640      	mov	r0, r8
 800735c:	4798      	blx	r3
 800735e:	6923      	ldr	r3, [r4, #16]
 8007360:	3b01      	subs	r3, #1
 8007362:	6123      	str	r3, [r4, #16]
 8007364:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007368:	fa5f fa8a 	uxtb.w	sl, sl
 800736c:	f1ba 0f02 	cmp.w	sl, #2
 8007370:	d1ee      	bne.n	8007350 <_scanf_float+0x2cc>
 8007372:	3d03      	subs	r5, #3
 8007374:	b2ed      	uxtb	r5, r5
 8007376:	1b76      	subs	r6, r6, r5
 8007378:	6823      	ldr	r3, [r4, #0]
 800737a:	05da      	lsls	r2, r3, #23
 800737c:	d530      	bpl.n	80073e0 <_scanf_float+0x35c>
 800737e:	055b      	lsls	r3, r3, #21
 8007380:	d511      	bpl.n	80073a6 <_scanf_float+0x322>
 8007382:	9b01      	ldr	r3, [sp, #4]
 8007384:	429e      	cmp	r6, r3
 8007386:	f67f aebf 	bls.w	8007108 <_scanf_float+0x84>
 800738a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800738e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007392:	464a      	mov	r2, r9
 8007394:	4640      	mov	r0, r8
 8007396:	4798      	blx	r3
 8007398:	6923      	ldr	r3, [r4, #16]
 800739a:	3b01      	subs	r3, #1
 800739c:	6123      	str	r3, [r4, #16]
 800739e:	e7f0      	b.n	8007382 <_scanf_float+0x2fe>
 80073a0:	46aa      	mov	sl, r5
 80073a2:	46b3      	mov	fp, r6
 80073a4:	e7de      	b.n	8007364 <_scanf_float+0x2e0>
 80073a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80073aa:	6923      	ldr	r3, [r4, #16]
 80073ac:	2965      	cmp	r1, #101	@ 0x65
 80073ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80073b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80073b6:	6123      	str	r3, [r4, #16]
 80073b8:	d00c      	beq.n	80073d4 <_scanf_float+0x350>
 80073ba:	2945      	cmp	r1, #69	@ 0x45
 80073bc:	d00a      	beq.n	80073d4 <_scanf_float+0x350>
 80073be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073c2:	464a      	mov	r2, r9
 80073c4:	4640      	mov	r0, r8
 80073c6:	4798      	blx	r3
 80073c8:	6923      	ldr	r3, [r4, #16]
 80073ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80073ce:	3b01      	subs	r3, #1
 80073d0:	1eb5      	subs	r5, r6, #2
 80073d2:	6123      	str	r3, [r4, #16]
 80073d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073d8:	464a      	mov	r2, r9
 80073da:	4640      	mov	r0, r8
 80073dc:	4798      	blx	r3
 80073de:	462e      	mov	r6, r5
 80073e0:	6822      	ldr	r2, [r4, #0]
 80073e2:	f012 0210 	ands.w	r2, r2, #16
 80073e6:	d001      	beq.n	80073ec <_scanf_float+0x368>
 80073e8:	2000      	movs	r0, #0
 80073ea:	e68e      	b.n	800710a <_scanf_float+0x86>
 80073ec:	7032      	strb	r2, [r6, #0]
 80073ee:	6823      	ldr	r3, [r4, #0]
 80073f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80073f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073f8:	d125      	bne.n	8007446 <_scanf_float+0x3c2>
 80073fa:	9b02      	ldr	r3, [sp, #8]
 80073fc:	429f      	cmp	r7, r3
 80073fe:	d00a      	beq.n	8007416 <_scanf_float+0x392>
 8007400:	1bda      	subs	r2, r3, r7
 8007402:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007406:	429e      	cmp	r6, r3
 8007408:	bf28      	it	cs
 800740a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800740e:	4922      	ldr	r1, [pc, #136]	@ (8007498 <_scanf_float+0x414>)
 8007410:	4630      	mov	r0, r6
 8007412:	f000 f907 	bl	8007624 <siprintf>
 8007416:	9901      	ldr	r1, [sp, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	4640      	mov	r0, r8
 800741c:	f002 fbf4 	bl	8009c08 <_strtod_r>
 8007420:	9b03      	ldr	r3, [sp, #12]
 8007422:	6821      	ldr	r1, [r4, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f011 0f02 	tst.w	r1, #2
 800742a:	ec57 6b10 	vmov	r6, r7, d0
 800742e:	f103 0204 	add.w	r2, r3, #4
 8007432:	d015      	beq.n	8007460 <_scanf_float+0x3dc>
 8007434:	9903      	ldr	r1, [sp, #12]
 8007436:	600a      	str	r2, [r1, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	e9c3 6700 	strd	r6, r7, [r3]
 800743e:	68e3      	ldr	r3, [r4, #12]
 8007440:	3301      	adds	r3, #1
 8007442:	60e3      	str	r3, [r4, #12]
 8007444:	e7d0      	b.n	80073e8 <_scanf_float+0x364>
 8007446:	9b04      	ldr	r3, [sp, #16]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d0e4      	beq.n	8007416 <_scanf_float+0x392>
 800744c:	9905      	ldr	r1, [sp, #20]
 800744e:	230a      	movs	r3, #10
 8007450:	3101      	adds	r1, #1
 8007452:	4640      	mov	r0, r8
 8007454:	f002 fc58 	bl	8009d08 <_strtol_r>
 8007458:	9b04      	ldr	r3, [sp, #16]
 800745a:	9e05      	ldr	r6, [sp, #20]
 800745c:	1ac2      	subs	r2, r0, r3
 800745e:	e7d0      	b.n	8007402 <_scanf_float+0x37e>
 8007460:	f011 0f04 	tst.w	r1, #4
 8007464:	9903      	ldr	r1, [sp, #12]
 8007466:	600a      	str	r2, [r1, #0]
 8007468:	d1e6      	bne.n	8007438 <_scanf_float+0x3b4>
 800746a:	681d      	ldr	r5, [r3, #0]
 800746c:	4632      	mov	r2, r6
 800746e:	463b      	mov	r3, r7
 8007470:	4630      	mov	r0, r6
 8007472:	4639      	mov	r1, r7
 8007474:	f7f9 fb62 	bl	8000b3c <__aeabi_dcmpun>
 8007478:	b128      	cbz	r0, 8007486 <_scanf_float+0x402>
 800747a:	4808      	ldr	r0, [pc, #32]	@ (800749c <_scanf_float+0x418>)
 800747c:	f000 f9b8 	bl	80077f0 <nanf>
 8007480:	ed85 0a00 	vstr	s0, [r5]
 8007484:	e7db      	b.n	800743e <_scanf_float+0x3ba>
 8007486:	4630      	mov	r0, r6
 8007488:	4639      	mov	r1, r7
 800748a:	f7f9 fbb5 	bl	8000bf8 <__aeabi_d2f>
 800748e:	6028      	str	r0, [r5, #0]
 8007490:	e7d5      	b.n	800743e <_scanf_float+0x3ba>
 8007492:	2700      	movs	r7, #0
 8007494:	e62e      	b.n	80070f4 <_scanf_float+0x70>
 8007496:	bf00      	nop
 8007498:	0800af24 	.word	0x0800af24
 800749c:	0800b065 	.word	0x0800b065

080074a0 <std>:
 80074a0:	2300      	movs	r3, #0
 80074a2:	b510      	push	{r4, lr}
 80074a4:	4604      	mov	r4, r0
 80074a6:	e9c0 3300 	strd	r3, r3, [r0]
 80074aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074ae:	6083      	str	r3, [r0, #8]
 80074b0:	8181      	strh	r1, [r0, #12]
 80074b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80074b4:	81c2      	strh	r2, [r0, #14]
 80074b6:	6183      	str	r3, [r0, #24]
 80074b8:	4619      	mov	r1, r3
 80074ba:	2208      	movs	r2, #8
 80074bc:	305c      	adds	r0, #92	@ 0x5c
 80074be:	f000 f916 	bl	80076ee <memset>
 80074c2:	4b0d      	ldr	r3, [pc, #52]	@ (80074f8 <std+0x58>)
 80074c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80074c6:	4b0d      	ldr	r3, [pc, #52]	@ (80074fc <std+0x5c>)
 80074c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80074ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007500 <std+0x60>)
 80074cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80074ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007504 <std+0x64>)
 80074d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80074d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007508 <std+0x68>)
 80074d4:	6224      	str	r4, [r4, #32]
 80074d6:	429c      	cmp	r4, r3
 80074d8:	d006      	beq.n	80074e8 <std+0x48>
 80074da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80074de:	4294      	cmp	r4, r2
 80074e0:	d002      	beq.n	80074e8 <std+0x48>
 80074e2:	33d0      	adds	r3, #208	@ 0xd0
 80074e4:	429c      	cmp	r4, r3
 80074e6:	d105      	bne.n	80074f4 <std+0x54>
 80074e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80074ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074f0:	f000 b97a 	b.w	80077e8 <__retarget_lock_init_recursive>
 80074f4:	bd10      	pop	{r4, pc}
 80074f6:	bf00      	nop
 80074f8:	08007669 	.word	0x08007669
 80074fc:	0800768b 	.word	0x0800768b
 8007500:	080076c3 	.word	0x080076c3
 8007504:	080076e7 	.word	0x080076e7
 8007508:	20000558 	.word	0x20000558

0800750c <stdio_exit_handler>:
 800750c:	4a02      	ldr	r2, [pc, #8]	@ (8007518 <stdio_exit_handler+0xc>)
 800750e:	4903      	ldr	r1, [pc, #12]	@ (800751c <stdio_exit_handler+0x10>)
 8007510:	4803      	ldr	r0, [pc, #12]	@ (8007520 <stdio_exit_handler+0x14>)
 8007512:	f000 b869 	b.w	80075e8 <_fwalk_sglue>
 8007516:	bf00      	nop
 8007518:	20000018 	.word	0x20000018
 800751c:	0800a0c5 	.word	0x0800a0c5
 8007520:	20000028 	.word	0x20000028

08007524 <cleanup_stdio>:
 8007524:	6841      	ldr	r1, [r0, #4]
 8007526:	4b0c      	ldr	r3, [pc, #48]	@ (8007558 <cleanup_stdio+0x34>)
 8007528:	4299      	cmp	r1, r3
 800752a:	b510      	push	{r4, lr}
 800752c:	4604      	mov	r4, r0
 800752e:	d001      	beq.n	8007534 <cleanup_stdio+0x10>
 8007530:	f002 fdc8 	bl	800a0c4 <_fflush_r>
 8007534:	68a1      	ldr	r1, [r4, #8]
 8007536:	4b09      	ldr	r3, [pc, #36]	@ (800755c <cleanup_stdio+0x38>)
 8007538:	4299      	cmp	r1, r3
 800753a:	d002      	beq.n	8007542 <cleanup_stdio+0x1e>
 800753c:	4620      	mov	r0, r4
 800753e:	f002 fdc1 	bl	800a0c4 <_fflush_r>
 8007542:	68e1      	ldr	r1, [r4, #12]
 8007544:	4b06      	ldr	r3, [pc, #24]	@ (8007560 <cleanup_stdio+0x3c>)
 8007546:	4299      	cmp	r1, r3
 8007548:	d004      	beq.n	8007554 <cleanup_stdio+0x30>
 800754a:	4620      	mov	r0, r4
 800754c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007550:	f002 bdb8 	b.w	800a0c4 <_fflush_r>
 8007554:	bd10      	pop	{r4, pc}
 8007556:	bf00      	nop
 8007558:	20000558 	.word	0x20000558
 800755c:	200005c0 	.word	0x200005c0
 8007560:	20000628 	.word	0x20000628

08007564 <global_stdio_init.part.0>:
 8007564:	b510      	push	{r4, lr}
 8007566:	4b0b      	ldr	r3, [pc, #44]	@ (8007594 <global_stdio_init.part.0+0x30>)
 8007568:	4c0b      	ldr	r4, [pc, #44]	@ (8007598 <global_stdio_init.part.0+0x34>)
 800756a:	4a0c      	ldr	r2, [pc, #48]	@ (800759c <global_stdio_init.part.0+0x38>)
 800756c:	601a      	str	r2, [r3, #0]
 800756e:	4620      	mov	r0, r4
 8007570:	2200      	movs	r2, #0
 8007572:	2104      	movs	r1, #4
 8007574:	f7ff ff94 	bl	80074a0 <std>
 8007578:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800757c:	2201      	movs	r2, #1
 800757e:	2109      	movs	r1, #9
 8007580:	f7ff ff8e 	bl	80074a0 <std>
 8007584:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007588:	2202      	movs	r2, #2
 800758a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800758e:	2112      	movs	r1, #18
 8007590:	f7ff bf86 	b.w	80074a0 <std>
 8007594:	20000690 	.word	0x20000690
 8007598:	20000558 	.word	0x20000558
 800759c:	0800750d 	.word	0x0800750d

080075a0 <__sfp_lock_acquire>:
 80075a0:	4801      	ldr	r0, [pc, #4]	@ (80075a8 <__sfp_lock_acquire+0x8>)
 80075a2:	f000 b922 	b.w	80077ea <__retarget_lock_acquire_recursive>
 80075a6:	bf00      	nop
 80075a8:	20000699 	.word	0x20000699

080075ac <__sfp_lock_release>:
 80075ac:	4801      	ldr	r0, [pc, #4]	@ (80075b4 <__sfp_lock_release+0x8>)
 80075ae:	f000 b91d 	b.w	80077ec <__retarget_lock_release_recursive>
 80075b2:	bf00      	nop
 80075b4:	20000699 	.word	0x20000699

080075b8 <__sinit>:
 80075b8:	b510      	push	{r4, lr}
 80075ba:	4604      	mov	r4, r0
 80075bc:	f7ff fff0 	bl	80075a0 <__sfp_lock_acquire>
 80075c0:	6a23      	ldr	r3, [r4, #32]
 80075c2:	b11b      	cbz	r3, 80075cc <__sinit+0x14>
 80075c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075c8:	f7ff bff0 	b.w	80075ac <__sfp_lock_release>
 80075cc:	4b04      	ldr	r3, [pc, #16]	@ (80075e0 <__sinit+0x28>)
 80075ce:	6223      	str	r3, [r4, #32]
 80075d0:	4b04      	ldr	r3, [pc, #16]	@ (80075e4 <__sinit+0x2c>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1f5      	bne.n	80075c4 <__sinit+0xc>
 80075d8:	f7ff ffc4 	bl	8007564 <global_stdio_init.part.0>
 80075dc:	e7f2      	b.n	80075c4 <__sinit+0xc>
 80075de:	bf00      	nop
 80075e0:	08007525 	.word	0x08007525
 80075e4:	20000690 	.word	0x20000690

080075e8 <_fwalk_sglue>:
 80075e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075ec:	4607      	mov	r7, r0
 80075ee:	4688      	mov	r8, r1
 80075f0:	4614      	mov	r4, r2
 80075f2:	2600      	movs	r6, #0
 80075f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075f8:	f1b9 0901 	subs.w	r9, r9, #1
 80075fc:	d505      	bpl.n	800760a <_fwalk_sglue+0x22>
 80075fe:	6824      	ldr	r4, [r4, #0]
 8007600:	2c00      	cmp	r4, #0
 8007602:	d1f7      	bne.n	80075f4 <_fwalk_sglue+0xc>
 8007604:	4630      	mov	r0, r6
 8007606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800760a:	89ab      	ldrh	r3, [r5, #12]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d907      	bls.n	8007620 <_fwalk_sglue+0x38>
 8007610:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007614:	3301      	adds	r3, #1
 8007616:	d003      	beq.n	8007620 <_fwalk_sglue+0x38>
 8007618:	4629      	mov	r1, r5
 800761a:	4638      	mov	r0, r7
 800761c:	47c0      	blx	r8
 800761e:	4306      	orrs	r6, r0
 8007620:	3568      	adds	r5, #104	@ 0x68
 8007622:	e7e9      	b.n	80075f8 <_fwalk_sglue+0x10>

08007624 <siprintf>:
 8007624:	b40e      	push	{r1, r2, r3}
 8007626:	b510      	push	{r4, lr}
 8007628:	b09d      	sub	sp, #116	@ 0x74
 800762a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800762c:	9002      	str	r0, [sp, #8]
 800762e:	9006      	str	r0, [sp, #24]
 8007630:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007634:	480a      	ldr	r0, [pc, #40]	@ (8007660 <siprintf+0x3c>)
 8007636:	9107      	str	r1, [sp, #28]
 8007638:	9104      	str	r1, [sp, #16]
 800763a:	490a      	ldr	r1, [pc, #40]	@ (8007664 <siprintf+0x40>)
 800763c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007640:	9105      	str	r1, [sp, #20]
 8007642:	2400      	movs	r4, #0
 8007644:	a902      	add	r1, sp, #8
 8007646:	6800      	ldr	r0, [r0, #0]
 8007648:	9301      	str	r3, [sp, #4]
 800764a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800764c:	f002 fbba 	bl	8009dc4 <_svfiprintf_r>
 8007650:	9b02      	ldr	r3, [sp, #8]
 8007652:	701c      	strb	r4, [r3, #0]
 8007654:	b01d      	add	sp, #116	@ 0x74
 8007656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800765a:	b003      	add	sp, #12
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	20000024 	.word	0x20000024
 8007664:	ffff0208 	.word	0xffff0208

08007668 <__sread>:
 8007668:	b510      	push	{r4, lr}
 800766a:	460c      	mov	r4, r1
 800766c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007670:	f000 f86c 	bl	800774c <_read_r>
 8007674:	2800      	cmp	r0, #0
 8007676:	bfab      	itete	ge
 8007678:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800767a:	89a3      	ldrhlt	r3, [r4, #12]
 800767c:	181b      	addge	r3, r3, r0
 800767e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007682:	bfac      	ite	ge
 8007684:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007686:	81a3      	strhlt	r3, [r4, #12]
 8007688:	bd10      	pop	{r4, pc}

0800768a <__swrite>:
 800768a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800768e:	461f      	mov	r7, r3
 8007690:	898b      	ldrh	r3, [r1, #12]
 8007692:	05db      	lsls	r3, r3, #23
 8007694:	4605      	mov	r5, r0
 8007696:	460c      	mov	r4, r1
 8007698:	4616      	mov	r6, r2
 800769a:	d505      	bpl.n	80076a8 <__swrite+0x1e>
 800769c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076a0:	2302      	movs	r3, #2
 80076a2:	2200      	movs	r2, #0
 80076a4:	f000 f840 	bl	8007728 <_lseek_r>
 80076a8:	89a3      	ldrh	r3, [r4, #12]
 80076aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076b2:	81a3      	strh	r3, [r4, #12]
 80076b4:	4632      	mov	r2, r6
 80076b6:	463b      	mov	r3, r7
 80076b8:	4628      	mov	r0, r5
 80076ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076be:	f000 b857 	b.w	8007770 <_write_r>

080076c2 <__sseek>:
 80076c2:	b510      	push	{r4, lr}
 80076c4:	460c      	mov	r4, r1
 80076c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076ca:	f000 f82d 	bl	8007728 <_lseek_r>
 80076ce:	1c43      	adds	r3, r0, #1
 80076d0:	89a3      	ldrh	r3, [r4, #12]
 80076d2:	bf15      	itete	ne
 80076d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80076d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80076da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80076de:	81a3      	strheq	r3, [r4, #12]
 80076e0:	bf18      	it	ne
 80076e2:	81a3      	strhne	r3, [r4, #12]
 80076e4:	bd10      	pop	{r4, pc}

080076e6 <__sclose>:
 80076e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076ea:	f000 b80d 	b.w	8007708 <_close_r>

080076ee <memset>:
 80076ee:	4402      	add	r2, r0
 80076f0:	4603      	mov	r3, r0
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d100      	bne.n	80076f8 <memset+0xa>
 80076f6:	4770      	bx	lr
 80076f8:	f803 1b01 	strb.w	r1, [r3], #1
 80076fc:	e7f9      	b.n	80076f2 <memset+0x4>
	...

08007700 <_localeconv_r>:
 8007700:	4800      	ldr	r0, [pc, #0]	@ (8007704 <_localeconv_r+0x4>)
 8007702:	4770      	bx	lr
 8007704:	20000164 	.word	0x20000164

08007708 <_close_r>:
 8007708:	b538      	push	{r3, r4, r5, lr}
 800770a:	4d06      	ldr	r5, [pc, #24]	@ (8007724 <_close_r+0x1c>)
 800770c:	2300      	movs	r3, #0
 800770e:	4604      	mov	r4, r0
 8007710:	4608      	mov	r0, r1
 8007712:	602b      	str	r3, [r5, #0]
 8007714:	f7fa feb4 	bl	8002480 <_close>
 8007718:	1c43      	adds	r3, r0, #1
 800771a:	d102      	bne.n	8007722 <_close_r+0x1a>
 800771c:	682b      	ldr	r3, [r5, #0]
 800771e:	b103      	cbz	r3, 8007722 <_close_r+0x1a>
 8007720:	6023      	str	r3, [r4, #0]
 8007722:	bd38      	pop	{r3, r4, r5, pc}
 8007724:	20000694 	.word	0x20000694

08007728 <_lseek_r>:
 8007728:	b538      	push	{r3, r4, r5, lr}
 800772a:	4d07      	ldr	r5, [pc, #28]	@ (8007748 <_lseek_r+0x20>)
 800772c:	4604      	mov	r4, r0
 800772e:	4608      	mov	r0, r1
 8007730:	4611      	mov	r1, r2
 8007732:	2200      	movs	r2, #0
 8007734:	602a      	str	r2, [r5, #0]
 8007736:	461a      	mov	r2, r3
 8007738:	f7fa fec9 	bl	80024ce <_lseek>
 800773c:	1c43      	adds	r3, r0, #1
 800773e:	d102      	bne.n	8007746 <_lseek_r+0x1e>
 8007740:	682b      	ldr	r3, [r5, #0]
 8007742:	b103      	cbz	r3, 8007746 <_lseek_r+0x1e>
 8007744:	6023      	str	r3, [r4, #0]
 8007746:	bd38      	pop	{r3, r4, r5, pc}
 8007748:	20000694 	.word	0x20000694

0800774c <_read_r>:
 800774c:	b538      	push	{r3, r4, r5, lr}
 800774e:	4d07      	ldr	r5, [pc, #28]	@ (800776c <_read_r+0x20>)
 8007750:	4604      	mov	r4, r0
 8007752:	4608      	mov	r0, r1
 8007754:	4611      	mov	r1, r2
 8007756:	2200      	movs	r2, #0
 8007758:	602a      	str	r2, [r5, #0]
 800775a:	461a      	mov	r2, r3
 800775c:	f7fa fe57 	bl	800240e <_read>
 8007760:	1c43      	adds	r3, r0, #1
 8007762:	d102      	bne.n	800776a <_read_r+0x1e>
 8007764:	682b      	ldr	r3, [r5, #0]
 8007766:	b103      	cbz	r3, 800776a <_read_r+0x1e>
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	bd38      	pop	{r3, r4, r5, pc}
 800776c:	20000694 	.word	0x20000694

08007770 <_write_r>:
 8007770:	b538      	push	{r3, r4, r5, lr}
 8007772:	4d07      	ldr	r5, [pc, #28]	@ (8007790 <_write_r+0x20>)
 8007774:	4604      	mov	r4, r0
 8007776:	4608      	mov	r0, r1
 8007778:	4611      	mov	r1, r2
 800777a:	2200      	movs	r2, #0
 800777c:	602a      	str	r2, [r5, #0]
 800777e:	461a      	mov	r2, r3
 8007780:	f7fa fe62 	bl	8002448 <_write>
 8007784:	1c43      	adds	r3, r0, #1
 8007786:	d102      	bne.n	800778e <_write_r+0x1e>
 8007788:	682b      	ldr	r3, [r5, #0]
 800778a:	b103      	cbz	r3, 800778e <_write_r+0x1e>
 800778c:	6023      	str	r3, [r4, #0]
 800778e:	bd38      	pop	{r3, r4, r5, pc}
 8007790:	20000694 	.word	0x20000694

08007794 <__errno>:
 8007794:	4b01      	ldr	r3, [pc, #4]	@ (800779c <__errno+0x8>)
 8007796:	6818      	ldr	r0, [r3, #0]
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	20000024 	.word	0x20000024

080077a0 <__libc_init_array>:
 80077a0:	b570      	push	{r4, r5, r6, lr}
 80077a2:	4d0d      	ldr	r5, [pc, #52]	@ (80077d8 <__libc_init_array+0x38>)
 80077a4:	4c0d      	ldr	r4, [pc, #52]	@ (80077dc <__libc_init_array+0x3c>)
 80077a6:	1b64      	subs	r4, r4, r5
 80077a8:	10a4      	asrs	r4, r4, #2
 80077aa:	2600      	movs	r6, #0
 80077ac:	42a6      	cmp	r6, r4
 80077ae:	d109      	bne.n	80077c4 <__libc_init_array+0x24>
 80077b0:	4d0b      	ldr	r5, [pc, #44]	@ (80077e0 <__libc_init_array+0x40>)
 80077b2:	4c0c      	ldr	r4, [pc, #48]	@ (80077e4 <__libc_init_array+0x44>)
 80077b4:	f003 fb76 	bl	800aea4 <_init>
 80077b8:	1b64      	subs	r4, r4, r5
 80077ba:	10a4      	asrs	r4, r4, #2
 80077bc:	2600      	movs	r6, #0
 80077be:	42a6      	cmp	r6, r4
 80077c0:	d105      	bne.n	80077ce <__libc_init_array+0x2e>
 80077c2:	bd70      	pop	{r4, r5, r6, pc}
 80077c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80077c8:	4798      	blx	r3
 80077ca:	3601      	adds	r6, #1
 80077cc:	e7ee      	b.n	80077ac <__libc_init_array+0xc>
 80077ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80077d2:	4798      	blx	r3
 80077d4:	3601      	adds	r6, #1
 80077d6:	e7f2      	b.n	80077be <__libc_init_array+0x1e>
 80077d8:	0800b324 	.word	0x0800b324
 80077dc:	0800b324 	.word	0x0800b324
 80077e0:	0800b324 	.word	0x0800b324
 80077e4:	0800b328 	.word	0x0800b328

080077e8 <__retarget_lock_init_recursive>:
 80077e8:	4770      	bx	lr

080077ea <__retarget_lock_acquire_recursive>:
 80077ea:	4770      	bx	lr

080077ec <__retarget_lock_release_recursive>:
 80077ec:	4770      	bx	lr
	...

080077f0 <nanf>:
 80077f0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80077f8 <nanf+0x8>
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	7fc00000 	.word	0x7fc00000

080077fc <quorem>:
 80077fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007800:	6903      	ldr	r3, [r0, #16]
 8007802:	690c      	ldr	r4, [r1, #16]
 8007804:	42a3      	cmp	r3, r4
 8007806:	4607      	mov	r7, r0
 8007808:	db7e      	blt.n	8007908 <quorem+0x10c>
 800780a:	3c01      	subs	r4, #1
 800780c:	f101 0814 	add.w	r8, r1, #20
 8007810:	00a3      	lsls	r3, r4, #2
 8007812:	f100 0514 	add.w	r5, r0, #20
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800781c:	9301      	str	r3, [sp, #4]
 800781e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007822:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007826:	3301      	adds	r3, #1
 8007828:	429a      	cmp	r2, r3
 800782a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800782e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007832:	d32e      	bcc.n	8007892 <quorem+0x96>
 8007834:	f04f 0a00 	mov.w	sl, #0
 8007838:	46c4      	mov	ip, r8
 800783a:	46ae      	mov	lr, r5
 800783c:	46d3      	mov	fp, sl
 800783e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007842:	b298      	uxth	r0, r3
 8007844:	fb06 a000 	mla	r0, r6, r0, sl
 8007848:	0c02      	lsrs	r2, r0, #16
 800784a:	0c1b      	lsrs	r3, r3, #16
 800784c:	fb06 2303 	mla	r3, r6, r3, r2
 8007850:	f8de 2000 	ldr.w	r2, [lr]
 8007854:	b280      	uxth	r0, r0
 8007856:	b292      	uxth	r2, r2
 8007858:	1a12      	subs	r2, r2, r0
 800785a:	445a      	add	r2, fp
 800785c:	f8de 0000 	ldr.w	r0, [lr]
 8007860:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007864:	b29b      	uxth	r3, r3
 8007866:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800786a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800786e:	b292      	uxth	r2, r2
 8007870:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007874:	45e1      	cmp	r9, ip
 8007876:	f84e 2b04 	str.w	r2, [lr], #4
 800787a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800787e:	d2de      	bcs.n	800783e <quorem+0x42>
 8007880:	9b00      	ldr	r3, [sp, #0]
 8007882:	58eb      	ldr	r3, [r5, r3]
 8007884:	b92b      	cbnz	r3, 8007892 <quorem+0x96>
 8007886:	9b01      	ldr	r3, [sp, #4]
 8007888:	3b04      	subs	r3, #4
 800788a:	429d      	cmp	r5, r3
 800788c:	461a      	mov	r2, r3
 800788e:	d32f      	bcc.n	80078f0 <quorem+0xf4>
 8007890:	613c      	str	r4, [r7, #16]
 8007892:	4638      	mov	r0, r7
 8007894:	f001 f9c8 	bl	8008c28 <__mcmp>
 8007898:	2800      	cmp	r0, #0
 800789a:	db25      	blt.n	80078e8 <quorem+0xec>
 800789c:	4629      	mov	r1, r5
 800789e:	2000      	movs	r0, #0
 80078a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80078a4:	f8d1 c000 	ldr.w	ip, [r1]
 80078a8:	fa1f fe82 	uxth.w	lr, r2
 80078ac:	fa1f f38c 	uxth.w	r3, ip
 80078b0:	eba3 030e 	sub.w	r3, r3, lr
 80078b4:	4403      	add	r3, r0
 80078b6:	0c12      	lsrs	r2, r2, #16
 80078b8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80078bc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078c6:	45c1      	cmp	r9, r8
 80078c8:	f841 3b04 	str.w	r3, [r1], #4
 80078cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80078d0:	d2e6      	bcs.n	80078a0 <quorem+0xa4>
 80078d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078da:	b922      	cbnz	r2, 80078e6 <quorem+0xea>
 80078dc:	3b04      	subs	r3, #4
 80078de:	429d      	cmp	r5, r3
 80078e0:	461a      	mov	r2, r3
 80078e2:	d30b      	bcc.n	80078fc <quorem+0x100>
 80078e4:	613c      	str	r4, [r7, #16]
 80078e6:	3601      	adds	r6, #1
 80078e8:	4630      	mov	r0, r6
 80078ea:	b003      	add	sp, #12
 80078ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f0:	6812      	ldr	r2, [r2, #0]
 80078f2:	3b04      	subs	r3, #4
 80078f4:	2a00      	cmp	r2, #0
 80078f6:	d1cb      	bne.n	8007890 <quorem+0x94>
 80078f8:	3c01      	subs	r4, #1
 80078fa:	e7c6      	b.n	800788a <quorem+0x8e>
 80078fc:	6812      	ldr	r2, [r2, #0]
 80078fe:	3b04      	subs	r3, #4
 8007900:	2a00      	cmp	r2, #0
 8007902:	d1ef      	bne.n	80078e4 <quorem+0xe8>
 8007904:	3c01      	subs	r4, #1
 8007906:	e7ea      	b.n	80078de <quorem+0xe2>
 8007908:	2000      	movs	r0, #0
 800790a:	e7ee      	b.n	80078ea <quorem+0xee>
 800790c:	0000      	movs	r0, r0
	...

08007910 <_dtoa_r>:
 8007910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007914:	69c7      	ldr	r7, [r0, #28]
 8007916:	b097      	sub	sp, #92	@ 0x5c
 8007918:	ed8d 0b04 	vstr	d0, [sp, #16]
 800791c:	ec55 4b10 	vmov	r4, r5, d0
 8007920:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007922:	9107      	str	r1, [sp, #28]
 8007924:	4681      	mov	r9, r0
 8007926:	920c      	str	r2, [sp, #48]	@ 0x30
 8007928:	9311      	str	r3, [sp, #68]	@ 0x44
 800792a:	b97f      	cbnz	r7, 800794c <_dtoa_r+0x3c>
 800792c:	2010      	movs	r0, #16
 800792e:	f000 fe09 	bl	8008544 <malloc>
 8007932:	4602      	mov	r2, r0
 8007934:	f8c9 001c 	str.w	r0, [r9, #28]
 8007938:	b920      	cbnz	r0, 8007944 <_dtoa_r+0x34>
 800793a:	4ba9      	ldr	r3, [pc, #676]	@ (8007be0 <_dtoa_r+0x2d0>)
 800793c:	21ef      	movs	r1, #239	@ 0xef
 800793e:	48a9      	ldr	r0, [pc, #676]	@ (8007be4 <_dtoa_r+0x2d4>)
 8007940:	f002 fc3a 	bl	800a1b8 <__assert_func>
 8007944:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007948:	6007      	str	r7, [r0, #0]
 800794a:	60c7      	str	r7, [r0, #12]
 800794c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007950:	6819      	ldr	r1, [r3, #0]
 8007952:	b159      	cbz	r1, 800796c <_dtoa_r+0x5c>
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	604a      	str	r2, [r1, #4]
 8007958:	2301      	movs	r3, #1
 800795a:	4093      	lsls	r3, r2
 800795c:	608b      	str	r3, [r1, #8]
 800795e:	4648      	mov	r0, r9
 8007960:	f000 fee6 	bl	8008730 <_Bfree>
 8007964:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007968:	2200      	movs	r2, #0
 800796a:	601a      	str	r2, [r3, #0]
 800796c:	1e2b      	subs	r3, r5, #0
 800796e:	bfb9      	ittee	lt
 8007970:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007974:	9305      	strlt	r3, [sp, #20]
 8007976:	2300      	movge	r3, #0
 8007978:	6033      	strge	r3, [r6, #0]
 800797a:	9f05      	ldr	r7, [sp, #20]
 800797c:	4b9a      	ldr	r3, [pc, #616]	@ (8007be8 <_dtoa_r+0x2d8>)
 800797e:	bfbc      	itt	lt
 8007980:	2201      	movlt	r2, #1
 8007982:	6032      	strlt	r2, [r6, #0]
 8007984:	43bb      	bics	r3, r7
 8007986:	d112      	bne.n	80079ae <_dtoa_r+0x9e>
 8007988:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800798a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800798e:	6013      	str	r3, [r2, #0]
 8007990:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007994:	4323      	orrs	r3, r4
 8007996:	f000 855a 	beq.w	800844e <_dtoa_r+0xb3e>
 800799a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800799c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007bfc <_dtoa_r+0x2ec>
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f000 855c 	beq.w	800845e <_dtoa_r+0xb4e>
 80079a6:	f10a 0303 	add.w	r3, sl, #3
 80079aa:	f000 bd56 	b.w	800845a <_dtoa_r+0xb4a>
 80079ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 80079b2:	2200      	movs	r2, #0
 80079b4:	ec51 0b17 	vmov	r0, r1, d7
 80079b8:	2300      	movs	r3, #0
 80079ba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80079be:	f7f9 f88b 	bl	8000ad8 <__aeabi_dcmpeq>
 80079c2:	4680      	mov	r8, r0
 80079c4:	b158      	cbz	r0, 80079de <_dtoa_r+0xce>
 80079c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80079c8:	2301      	movs	r3, #1
 80079ca:	6013      	str	r3, [r2, #0]
 80079cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80079ce:	b113      	cbz	r3, 80079d6 <_dtoa_r+0xc6>
 80079d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80079d2:	4b86      	ldr	r3, [pc, #536]	@ (8007bec <_dtoa_r+0x2dc>)
 80079d4:	6013      	str	r3, [r2, #0]
 80079d6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007c00 <_dtoa_r+0x2f0>
 80079da:	f000 bd40 	b.w	800845e <_dtoa_r+0xb4e>
 80079de:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80079e2:	aa14      	add	r2, sp, #80	@ 0x50
 80079e4:	a915      	add	r1, sp, #84	@ 0x54
 80079e6:	4648      	mov	r0, r9
 80079e8:	f001 fa3e 	bl	8008e68 <__d2b>
 80079ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80079f0:	9002      	str	r0, [sp, #8]
 80079f2:	2e00      	cmp	r6, #0
 80079f4:	d078      	beq.n	8007ae8 <_dtoa_r+0x1d8>
 80079f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079f8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80079fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007a04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007a08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007a0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007a10:	4619      	mov	r1, r3
 8007a12:	2200      	movs	r2, #0
 8007a14:	4b76      	ldr	r3, [pc, #472]	@ (8007bf0 <_dtoa_r+0x2e0>)
 8007a16:	f7f8 fc3f 	bl	8000298 <__aeabi_dsub>
 8007a1a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007bc8 <_dtoa_r+0x2b8>)
 8007a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a20:	f7f8 fdf2 	bl	8000608 <__aeabi_dmul>
 8007a24:	a36a      	add	r3, pc, #424	@ (adr r3, 8007bd0 <_dtoa_r+0x2c0>)
 8007a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2a:	f7f8 fc37 	bl	800029c <__adddf3>
 8007a2e:	4604      	mov	r4, r0
 8007a30:	4630      	mov	r0, r6
 8007a32:	460d      	mov	r5, r1
 8007a34:	f7f8 fd7e 	bl	8000534 <__aeabi_i2d>
 8007a38:	a367      	add	r3, pc, #412	@ (adr r3, 8007bd8 <_dtoa_r+0x2c8>)
 8007a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3e:	f7f8 fde3 	bl	8000608 <__aeabi_dmul>
 8007a42:	4602      	mov	r2, r0
 8007a44:	460b      	mov	r3, r1
 8007a46:	4620      	mov	r0, r4
 8007a48:	4629      	mov	r1, r5
 8007a4a:	f7f8 fc27 	bl	800029c <__adddf3>
 8007a4e:	4604      	mov	r4, r0
 8007a50:	460d      	mov	r5, r1
 8007a52:	f7f9 f889 	bl	8000b68 <__aeabi_d2iz>
 8007a56:	2200      	movs	r2, #0
 8007a58:	4607      	mov	r7, r0
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	4629      	mov	r1, r5
 8007a60:	f7f9 f844 	bl	8000aec <__aeabi_dcmplt>
 8007a64:	b140      	cbz	r0, 8007a78 <_dtoa_r+0x168>
 8007a66:	4638      	mov	r0, r7
 8007a68:	f7f8 fd64 	bl	8000534 <__aeabi_i2d>
 8007a6c:	4622      	mov	r2, r4
 8007a6e:	462b      	mov	r3, r5
 8007a70:	f7f9 f832 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a74:	b900      	cbnz	r0, 8007a78 <_dtoa_r+0x168>
 8007a76:	3f01      	subs	r7, #1
 8007a78:	2f16      	cmp	r7, #22
 8007a7a:	d852      	bhi.n	8007b22 <_dtoa_r+0x212>
 8007a7c:	4b5d      	ldr	r3, [pc, #372]	@ (8007bf4 <_dtoa_r+0x2e4>)
 8007a7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007a8a:	f7f9 f82f 	bl	8000aec <__aeabi_dcmplt>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d049      	beq.n	8007b26 <_dtoa_r+0x216>
 8007a92:	3f01      	subs	r7, #1
 8007a94:	2300      	movs	r3, #0
 8007a96:	9310      	str	r3, [sp, #64]	@ 0x40
 8007a98:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007a9a:	1b9b      	subs	r3, r3, r6
 8007a9c:	1e5a      	subs	r2, r3, #1
 8007a9e:	bf45      	ittet	mi
 8007aa0:	f1c3 0301 	rsbmi	r3, r3, #1
 8007aa4:	9300      	strmi	r3, [sp, #0]
 8007aa6:	2300      	movpl	r3, #0
 8007aa8:	2300      	movmi	r3, #0
 8007aaa:	9206      	str	r2, [sp, #24]
 8007aac:	bf54      	ite	pl
 8007aae:	9300      	strpl	r3, [sp, #0]
 8007ab0:	9306      	strmi	r3, [sp, #24]
 8007ab2:	2f00      	cmp	r7, #0
 8007ab4:	db39      	blt.n	8007b2a <_dtoa_r+0x21a>
 8007ab6:	9b06      	ldr	r3, [sp, #24]
 8007ab8:	970d      	str	r7, [sp, #52]	@ 0x34
 8007aba:	443b      	add	r3, r7
 8007abc:	9306      	str	r3, [sp, #24]
 8007abe:	2300      	movs	r3, #0
 8007ac0:	9308      	str	r3, [sp, #32]
 8007ac2:	9b07      	ldr	r3, [sp, #28]
 8007ac4:	2b09      	cmp	r3, #9
 8007ac6:	d863      	bhi.n	8007b90 <_dtoa_r+0x280>
 8007ac8:	2b05      	cmp	r3, #5
 8007aca:	bfc4      	itt	gt
 8007acc:	3b04      	subgt	r3, #4
 8007ace:	9307      	strgt	r3, [sp, #28]
 8007ad0:	9b07      	ldr	r3, [sp, #28]
 8007ad2:	f1a3 0302 	sub.w	r3, r3, #2
 8007ad6:	bfcc      	ite	gt
 8007ad8:	2400      	movgt	r4, #0
 8007ada:	2401      	movle	r4, #1
 8007adc:	2b03      	cmp	r3, #3
 8007ade:	d863      	bhi.n	8007ba8 <_dtoa_r+0x298>
 8007ae0:	e8df f003 	tbb	[pc, r3]
 8007ae4:	2b375452 	.word	0x2b375452
 8007ae8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007aec:	441e      	add	r6, r3
 8007aee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007af2:	2b20      	cmp	r3, #32
 8007af4:	bfc1      	itttt	gt
 8007af6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007afa:	409f      	lslgt	r7, r3
 8007afc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007b00:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007b04:	bfd6      	itet	le
 8007b06:	f1c3 0320 	rsble	r3, r3, #32
 8007b0a:	ea47 0003 	orrgt.w	r0, r7, r3
 8007b0e:	fa04 f003 	lslle.w	r0, r4, r3
 8007b12:	f7f8 fcff 	bl	8000514 <__aeabi_ui2d>
 8007b16:	2201      	movs	r2, #1
 8007b18:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007b1c:	3e01      	subs	r6, #1
 8007b1e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007b20:	e776      	b.n	8007a10 <_dtoa_r+0x100>
 8007b22:	2301      	movs	r3, #1
 8007b24:	e7b7      	b.n	8007a96 <_dtoa_r+0x186>
 8007b26:	9010      	str	r0, [sp, #64]	@ 0x40
 8007b28:	e7b6      	b.n	8007a98 <_dtoa_r+0x188>
 8007b2a:	9b00      	ldr	r3, [sp, #0]
 8007b2c:	1bdb      	subs	r3, r3, r7
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	427b      	negs	r3, r7
 8007b32:	9308      	str	r3, [sp, #32]
 8007b34:	2300      	movs	r3, #0
 8007b36:	930d      	str	r3, [sp, #52]	@ 0x34
 8007b38:	e7c3      	b.n	8007ac2 <_dtoa_r+0x1b2>
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b40:	eb07 0b03 	add.w	fp, r7, r3
 8007b44:	f10b 0301 	add.w	r3, fp, #1
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	9303      	str	r3, [sp, #12]
 8007b4c:	bfb8      	it	lt
 8007b4e:	2301      	movlt	r3, #1
 8007b50:	e006      	b.n	8007b60 <_dtoa_r+0x250>
 8007b52:	2301      	movs	r3, #1
 8007b54:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	dd28      	ble.n	8007bae <_dtoa_r+0x29e>
 8007b5c:	469b      	mov	fp, r3
 8007b5e:	9303      	str	r3, [sp, #12]
 8007b60:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007b64:	2100      	movs	r1, #0
 8007b66:	2204      	movs	r2, #4
 8007b68:	f102 0514 	add.w	r5, r2, #20
 8007b6c:	429d      	cmp	r5, r3
 8007b6e:	d926      	bls.n	8007bbe <_dtoa_r+0x2ae>
 8007b70:	6041      	str	r1, [r0, #4]
 8007b72:	4648      	mov	r0, r9
 8007b74:	f000 fd9c 	bl	80086b0 <_Balloc>
 8007b78:	4682      	mov	sl, r0
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	d142      	bne.n	8007c04 <_dtoa_r+0x2f4>
 8007b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8007bf8 <_dtoa_r+0x2e8>)
 8007b80:	4602      	mov	r2, r0
 8007b82:	f240 11af 	movw	r1, #431	@ 0x1af
 8007b86:	e6da      	b.n	800793e <_dtoa_r+0x2e>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	e7e3      	b.n	8007b54 <_dtoa_r+0x244>
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	e7d5      	b.n	8007b3c <_dtoa_r+0x22c>
 8007b90:	2401      	movs	r4, #1
 8007b92:	2300      	movs	r3, #0
 8007b94:	9307      	str	r3, [sp, #28]
 8007b96:	9409      	str	r4, [sp, #36]	@ 0x24
 8007b98:	f04f 3bff 	mov.w	fp, #4294967295
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007ba2:	2312      	movs	r3, #18
 8007ba4:	920c      	str	r2, [sp, #48]	@ 0x30
 8007ba6:	e7db      	b.n	8007b60 <_dtoa_r+0x250>
 8007ba8:	2301      	movs	r3, #1
 8007baa:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bac:	e7f4      	b.n	8007b98 <_dtoa_r+0x288>
 8007bae:	f04f 0b01 	mov.w	fp, #1
 8007bb2:	f8cd b00c 	str.w	fp, [sp, #12]
 8007bb6:	465b      	mov	r3, fp
 8007bb8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007bbc:	e7d0      	b.n	8007b60 <_dtoa_r+0x250>
 8007bbe:	3101      	adds	r1, #1
 8007bc0:	0052      	lsls	r2, r2, #1
 8007bc2:	e7d1      	b.n	8007b68 <_dtoa_r+0x258>
 8007bc4:	f3af 8000 	nop.w
 8007bc8:	636f4361 	.word	0x636f4361
 8007bcc:	3fd287a7 	.word	0x3fd287a7
 8007bd0:	8b60c8b3 	.word	0x8b60c8b3
 8007bd4:	3fc68a28 	.word	0x3fc68a28
 8007bd8:	509f79fb 	.word	0x509f79fb
 8007bdc:	3fd34413 	.word	0x3fd34413
 8007be0:	0800af36 	.word	0x0800af36
 8007be4:	0800af4d 	.word	0x0800af4d
 8007be8:	7ff00000 	.word	0x7ff00000
 8007bec:	0800af01 	.word	0x0800af01
 8007bf0:	3ff80000 	.word	0x3ff80000
 8007bf4:	0800b100 	.word	0x0800b100
 8007bf8:	0800afa5 	.word	0x0800afa5
 8007bfc:	0800af32 	.word	0x0800af32
 8007c00:	0800af00 	.word	0x0800af00
 8007c04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007c08:	6018      	str	r0, [r3, #0]
 8007c0a:	9b03      	ldr	r3, [sp, #12]
 8007c0c:	2b0e      	cmp	r3, #14
 8007c0e:	f200 80a1 	bhi.w	8007d54 <_dtoa_r+0x444>
 8007c12:	2c00      	cmp	r4, #0
 8007c14:	f000 809e 	beq.w	8007d54 <_dtoa_r+0x444>
 8007c18:	2f00      	cmp	r7, #0
 8007c1a:	dd33      	ble.n	8007c84 <_dtoa_r+0x374>
 8007c1c:	4b9c      	ldr	r3, [pc, #624]	@ (8007e90 <_dtoa_r+0x580>)
 8007c1e:	f007 020f 	and.w	r2, r7, #15
 8007c22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c26:	ed93 7b00 	vldr	d7, [r3]
 8007c2a:	05f8      	lsls	r0, r7, #23
 8007c2c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007c30:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007c34:	d516      	bpl.n	8007c64 <_dtoa_r+0x354>
 8007c36:	4b97      	ldr	r3, [pc, #604]	@ (8007e94 <_dtoa_r+0x584>)
 8007c38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007c3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c40:	f7f8 fe0c 	bl	800085c <__aeabi_ddiv>
 8007c44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c48:	f004 040f 	and.w	r4, r4, #15
 8007c4c:	2603      	movs	r6, #3
 8007c4e:	4d91      	ldr	r5, [pc, #580]	@ (8007e94 <_dtoa_r+0x584>)
 8007c50:	b954      	cbnz	r4, 8007c68 <_dtoa_r+0x358>
 8007c52:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007c56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c5a:	f7f8 fdff 	bl	800085c <__aeabi_ddiv>
 8007c5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c62:	e028      	b.n	8007cb6 <_dtoa_r+0x3a6>
 8007c64:	2602      	movs	r6, #2
 8007c66:	e7f2      	b.n	8007c4e <_dtoa_r+0x33e>
 8007c68:	07e1      	lsls	r1, r4, #31
 8007c6a:	d508      	bpl.n	8007c7e <_dtoa_r+0x36e>
 8007c6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007c70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c74:	f7f8 fcc8 	bl	8000608 <__aeabi_dmul>
 8007c78:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007c7c:	3601      	adds	r6, #1
 8007c7e:	1064      	asrs	r4, r4, #1
 8007c80:	3508      	adds	r5, #8
 8007c82:	e7e5      	b.n	8007c50 <_dtoa_r+0x340>
 8007c84:	f000 80af 	beq.w	8007de6 <_dtoa_r+0x4d6>
 8007c88:	427c      	negs	r4, r7
 8007c8a:	4b81      	ldr	r3, [pc, #516]	@ (8007e90 <_dtoa_r+0x580>)
 8007c8c:	4d81      	ldr	r5, [pc, #516]	@ (8007e94 <_dtoa_r+0x584>)
 8007c8e:	f004 020f 	and.w	r2, r4, #15
 8007c92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007c9e:	f7f8 fcb3 	bl	8000608 <__aeabi_dmul>
 8007ca2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ca6:	1124      	asrs	r4, r4, #4
 8007ca8:	2300      	movs	r3, #0
 8007caa:	2602      	movs	r6, #2
 8007cac:	2c00      	cmp	r4, #0
 8007cae:	f040 808f 	bne.w	8007dd0 <_dtoa_r+0x4c0>
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1d3      	bne.n	8007c5e <_dtoa_r+0x34e>
 8007cb6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007cb8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f000 8094 	beq.w	8007dea <_dtoa_r+0x4da>
 8007cc2:	4b75      	ldr	r3, [pc, #468]	@ (8007e98 <_dtoa_r+0x588>)
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	4629      	mov	r1, r5
 8007cca:	f7f8 ff0f 	bl	8000aec <__aeabi_dcmplt>
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	f000 808b 	beq.w	8007dea <_dtoa_r+0x4da>
 8007cd4:	9b03      	ldr	r3, [sp, #12]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f000 8087 	beq.w	8007dea <_dtoa_r+0x4da>
 8007cdc:	f1bb 0f00 	cmp.w	fp, #0
 8007ce0:	dd34      	ble.n	8007d4c <_dtoa_r+0x43c>
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	4b6d      	ldr	r3, [pc, #436]	@ (8007e9c <_dtoa_r+0x58c>)
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	4629      	mov	r1, r5
 8007cea:	f7f8 fc8d 	bl	8000608 <__aeabi_dmul>
 8007cee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cf2:	f107 38ff 	add.w	r8, r7, #4294967295
 8007cf6:	3601      	adds	r6, #1
 8007cf8:	465c      	mov	r4, fp
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	f7f8 fc1a 	bl	8000534 <__aeabi_i2d>
 8007d00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d04:	f7f8 fc80 	bl	8000608 <__aeabi_dmul>
 8007d08:	4b65      	ldr	r3, [pc, #404]	@ (8007ea0 <_dtoa_r+0x590>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f7f8 fac6 	bl	800029c <__adddf3>
 8007d10:	4605      	mov	r5, r0
 8007d12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007d16:	2c00      	cmp	r4, #0
 8007d18:	d16a      	bne.n	8007df0 <_dtoa_r+0x4e0>
 8007d1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d1e:	4b61      	ldr	r3, [pc, #388]	@ (8007ea4 <_dtoa_r+0x594>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	f7f8 fab9 	bl	8000298 <__aeabi_dsub>
 8007d26:	4602      	mov	r2, r0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d2e:	462a      	mov	r2, r5
 8007d30:	4633      	mov	r3, r6
 8007d32:	f7f8 fef9 	bl	8000b28 <__aeabi_dcmpgt>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	f040 8298 	bne.w	800826c <_dtoa_r+0x95c>
 8007d3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d40:	462a      	mov	r2, r5
 8007d42:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007d46:	f7f8 fed1 	bl	8000aec <__aeabi_dcmplt>
 8007d4a:	bb38      	cbnz	r0, 8007d9c <_dtoa_r+0x48c>
 8007d4c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007d50:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007d54:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f2c0 8157 	blt.w	800800a <_dtoa_r+0x6fa>
 8007d5c:	2f0e      	cmp	r7, #14
 8007d5e:	f300 8154 	bgt.w	800800a <_dtoa_r+0x6fa>
 8007d62:	4b4b      	ldr	r3, [pc, #300]	@ (8007e90 <_dtoa_r+0x580>)
 8007d64:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d68:	ed93 7b00 	vldr	d7, [r3]
 8007d6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	ed8d 7b00 	vstr	d7, [sp]
 8007d74:	f280 80e5 	bge.w	8007f42 <_dtoa_r+0x632>
 8007d78:	9b03      	ldr	r3, [sp, #12]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f300 80e1 	bgt.w	8007f42 <_dtoa_r+0x632>
 8007d80:	d10c      	bne.n	8007d9c <_dtoa_r+0x48c>
 8007d82:	4b48      	ldr	r3, [pc, #288]	@ (8007ea4 <_dtoa_r+0x594>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	ec51 0b17 	vmov	r0, r1, d7
 8007d8a:	f7f8 fc3d 	bl	8000608 <__aeabi_dmul>
 8007d8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d92:	f7f8 febf 	bl	8000b14 <__aeabi_dcmpge>
 8007d96:	2800      	cmp	r0, #0
 8007d98:	f000 8266 	beq.w	8008268 <_dtoa_r+0x958>
 8007d9c:	2400      	movs	r4, #0
 8007d9e:	4625      	mov	r5, r4
 8007da0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007da2:	4656      	mov	r6, sl
 8007da4:	ea6f 0803 	mvn.w	r8, r3
 8007da8:	2700      	movs	r7, #0
 8007daa:	4621      	mov	r1, r4
 8007dac:	4648      	mov	r0, r9
 8007dae:	f000 fcbf 	bl	8008730 <_Bfree>
 8007db2:	2d00      	cmp	r5, #0
 8007db4:	f000 80bd 	beq.w	8007f32 <_dtoa_r+0x622>
 8007db8:	b12f      	cbz	r7, 8007dc6 <_dtoa_r+0x4b6>
 8007dba:	42af      	cmp	r7, r5
 8007dbc:	d003      	beq.n	8007dc6 <_dtoa_r+0x4b6>
 8007dbe:	4639      	mov	r1, r7
 8007dc0:	4648      	mov	r0, r9
 8007dc2:	f000 fcb5 	bl	8008730 <_Bfree>
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	4648      	mov	r0, r9
 8007dca:	f000 fcb1 	bl	8008730 <_Bfree>
 8007dce:	e0b0      	b.n	8007f32 <_dtoa_r+0x622>
 8007dd0:	07e2      	lsls	r2, r4, #31
 8007dd2:	d505      	bpl.n	8007de0 <_dtoa_r+0x4d0>
 8007dd4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007dd8:	f7f8 fc16 	bl	8000608 <__aeabi_dmul>
 8007ddc:	3601      	adds	r6, #1
 8007dde:	2301      	movs	r3, #1
 8007de0:	1064      	asrs	r4, r4, #1
 8007de2:	3508      	adds	r5, #8
 8007de4:	e762      	b.n	8007cac <_dtoa_r+0x39c>
 8007de6:	2602      	movs	r6, #2
 8007de8:	e765      	b.n	8007cb6 <_dtoa_r+0x3a6>
 8007dea:	9c03      	ldr	r4, [sp, #12]
 8007dec:	46b8      	mov	r8, r7
 8007dee:	e784      	b.n	8007cfa <_dtoa_r+0x3ea>
 8007df0:	4b27      	ldr	r3, [pc, #156]	@ (8007e90 <_dtoa_r+0x580>)
 8007df2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007df4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007df8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007dfc:	4454      	add	r4, sl
 8007dfe:	2900      	cmp	r1, #0
 8007e00:	d054      	beq.n	8007eac <_dtoa_r+0x59c>
 8007e02:	4929      	ldr	r1, [pc, #164]	@ (8007ea8 <_dtoa_r+0x598>)
 8007e04:	2000      	movs	r0, #0
 8007e06:	f7f8 fd29 	bl	800085c <__aeabi_ddiv>
 8007e0a:	4633      	mov	r3, r6
 8007e0c:	462a      	mov	r2, r5
 8007e0e:	f7f8 fa43 	bl	8000298 <__aeabi_dsub>
 8007e12:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007e16:	4656      	mov	r6, sl
 8007e18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e1c:	f7f8 fea4 	bl	8000b68 <__aeabi_d2iz>
 8007e20:	4605      	mov	r5, r0
 8007e22:	f7f8 fb87 	bl	8000534 <__aeabi_i2d>
 8007e26:	4602      	mov	r2, r0
 8007e28:	460b      	mov	r3, r1
 8007e2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e2e:	f7f8 fa33 	bl	8000298 <__aeabi_dsub>
 8007e32:	3530      	adds	r5, #48	@ 0x30
 8007e34:	4602      	mov	r2, r0
 8007e36:	460b      	mov	r3, r1
 8007e38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e3c:	f806 5b01 	strb.w	r5, [r6], #1
 8007e40:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007e44:	f7f8 fe52 	bl	8000aec <__aeabi_dcmplt>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	d172      	bne.n	8007f32 <_dtoa_r+0x622>
 8007e4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e50:	4911      	ldr	r1, [pc, #68]	@ (8007e98 <_dtoa_r+0x588>)
 8007e52:	2000      	movs	r0, #0
 8007e54:	f7f8 fa20 	bl	8000298 <__aeabi_dsub>
 8007e58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007e5c:	f7f8 fe46 	bl	8000aec <__aeabi_dcmplt>
 8007e60:	2800      	cmp	r0, #0
 8007e62:	f040 80b4 	bne.w	8007fce <_dtoa_r+0x6be>
 8007e66:	42a6      	cmp	r6, r4
 8007e68:	f43f af70 	beq.w	8007d4c <_dtoa_r+0x43c>
 8007e6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007e70:	4b0a      	ldr	r3, [pc, #40]	@ (8007e9c <_dtoa_r+0x58c>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	f7f8 fbc8 	bl	8000608 <__aeabi_dmul>
 8007e78:	4b08      	ldr	r3, [pc, #32]	@ (8007e9c <_dtoa_r+0x58c>)
 8007e7a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007e7e:	2200      	movs	r2, #0
 8007e80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e84:	f7f8 fbc0 	bl	8000608 <__aeabi_dmul>
 8007e88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e8c:	e7c4      	b.n	8007e18 <_dtoa_r+0x508>
 8007e8e:	bf00      	nop
 8007e90:	0800b100 	.word	0x0800b100
 8007e94:	0800b0d8 	.word	0x0800b0d8
 8007e98:	3ff00000 	.word	0x3ff00000
 8007e9c:	40240000 	.word	0x40240000
 8007ea0:	401c0000 	.word	0x401c0000
 8007ea4:	40140000 	.word	0x40140000
 8007ea8:	3fe00000 	.word	0x3fe00000
 8007eac:	4631      	mov	r1, r6
 8007eae:	4628      	mov	r0, r5
 8007eb0:	f7f8 fbaa 	bl	8000608 <__aeabi_dmul>
 8007eb4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007eb8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007eba:	4656      	mov	r6, sl
 8007ebc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ec0:	f7f8 fe52 	bl	8000b68 <__aeabi_d2iz>
 8007ec4:	4605      	mov	r5, r0
 8007ec6:	f7f8 fb35 	bl	8000534 <__aeabi_i2d>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	460b      	mov	r3, r1
 8007ece:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ed2:	f7f8 f9e1 	bl	8000298 <__aeabi_dsub>
 8007ed6:	3530      	adds	r5, #48	@ 0x30
 8007ed8:	f806 5b01 	strb.w	r5, [r6], #1
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	42a6      	cmp	r6, r4
 8007ee2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007ee6:	f04f 0200 	mov.w	r2, #0
 8007eea:	d124      	bne.n	8007f36 <_dtoa_r+0x626>
 8007eec:	4baf      	ldr	r3, [pc, #700]	@ (80081ac <_dtoa_r+0x89c>)
 8007eee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007ef2:	f7f8 f9d3 	bl	800029c <__adddf3>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	460b      	mov	r3, r1
 8007efa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007efe:	f7f8 fe13 	bl	8000b28 <__aeabi_dcmpgt>
 8007f02:	2800      	cmp	r0, #0
 8007f04:	d163      	bne.n	8007fce <_dtoa_r+0x6be>
 8007f06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007f0a:	49a8      	ldr	r1, [pc, #672]	@ (80081ac <_dtoa_r+0x89c>)
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	f7f8 f9c3 	bl	8000298 <__aeabi_dsub>
 8007f12:	4602      	mov	r2, r0
 8007f14:	460b      	mov	r3, r1
 8007f16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f1a:	f7f8 fde7 	bl	8000aec <__aeabi_dcmplt>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	f43f af14 	beq.w	8007d4c <_dtoa_r+0x43c>
 8007f24:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007f26:	1e73      	subs	r3, r6, #1
 8007f28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007f2a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007f2e:	2b30      	cmp	r3, #48	@ 0x30
 8007f30:	d0f8      	beq.n	8007f24 <_dtoa_r+0x614>
 8007f32:	4647      	mov	r7, r8
 8007f34:	e03b      	b.n	8007fae <_dtoa_r+0x69e>
 8007f36:	4b9e      	ldr	r3, [pc, #632]	@ (80081b0 <_dtoa_r+0x8a0>)
 8007f38:	f7f8 fb66 	bl	8000608 <__aeabi_dmul>
 8007f3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f40:	e7bc      	b.n	8007ebc <_dtoa_r+0x5ac>
 8007f42:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007f46:	4656      	mov	r6, sl
 8007f48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	4629      	mov	r1, r5
 8007f50:	f7f8 fc84 	bl	800085c <__aeabi_ddiv>
 8007f54:	f7f8 fe08 	bl	8000b68 <__aeabi_d2iz>
 8007f58:	4680      	mov	r8, r0
 8007f5a:	f7f8 faeb 	bl	8000534 <__aeabi_i2d>
 8007f5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f62:	f7f8 fb51 	bl	8000608 <__aeabi_dmul>
 8007f66:	4602      	mov	r2, r0
 8007f68:	460b      	mov	r3, r1
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	4629      	mov	r1, r5
 8007f6e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007f72:	f7f8 f991 	bl	8000298 <__aeabi_dsub>
 8007f76:	f806 4b01 	strb.w	r4, [r6], #1
 8007f7a:	9d03      	ldr	r5, [sp, #12]
 8007f7c:	eba6 040a 	sub.w	r4, r6, sl
 8007f80:	42a5      	cmp	r5, r4
 8007f82:	4602      	mov	r2, r0
 8007f84:	460b      	mov	r3, r1
 8007f86:	d133      	bne.n	8007ff0 <_dtoa_r+0x6e0>
 8007f88:	f7f8 f988 	bl	800029c <__adddf3>
 8007f8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f90:	4604      	mov	r4, r0
 8007f92:	460d      	mov	r5, r1
 8007f94:	f7f8 fdc8 	bl	8000b28 <__aeabi_dcmpgt>
 8007f98:	b9c0      	cbnz	r0, 8007fcc <_dtoa_r+0x6bc>
 8007f9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	4629      	mov	r1, r5
 8007fa2:	f7f8 fd99 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fa6:	b110      	cbz	r0, 8007fae <_dtoa_r+0x69e>
 8007fa8:	f018 0f01 	tst.w	r8, #1
 8007fac:	d10e      	bne.n	8007fcc <_dtoa_r+0x6bc>
 8007fae:	9902      	ldr	r1, [sp, #8]
 8007fb0:	4648      	mov	r0, r9
 8007fb2:	f000 fbbd 	bl	8008730 <_Bfree>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	7033      	strb	r3, [r6, #0]
 8007fba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007fbc:	3701      	adds	r7, #1
 8007fbe:	601f      	str	r7, [r3, #0]
 8007fc0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f000 824b 	beq.w	800845e <_dtoa_r+0xb4e>
 8007fc8:	601e      	str	r6, [r3, #0]
 8007fca:	e248      	b.n	800845e <_dtoa_r+0xb4e>
 8007fcc:	46b8      	mov	r8, r7
 8007fce:	4633      	mov	r3, r6
 8007fd0:	461e      	mov	r6, r3
 8007fd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fd6:	2a39      	cmp	r2, #57	@ 0x39
 8007fd8:	d106      	bne.n	8007fe8 <_dtoa_r+0x6d8>
 8007fda:	459a      	cmp	sl, r3
 8007fdc:	d1f8      	bne.n	8007fd0 <_dtoa_r+0x6c0>
 8007fde:	2230      	movs	r2, #48	@ 0x30
 8007fe0:	f108 0801 	add.w	r8, r8, #1
 8007fe4:	f88a 2000 	strb.w	r2, [sl]
 8007fe8:	781a      	ldrb	r2, [r3, #0]
 8007fea:	3201      	adds	r2, #1
 8007fec:	701a      	strb	r2, [r3, #0]
 8007fee:	e7a0      	b.n	8007f32 <_dtoa_r+0x622>
 8007ff0:	4b6f      	ldr	r3, [pc, #444]	@ (80081b0 <_dtoa_r+0x8a0>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f7f8 fb08 	bl	8000608 <__aeabi_dmul>
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	4604      	mov	r4, r0
 8007ffe:	460d      	mov	r5, r1
 8008000:	f7f8 fd6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008004:	2800      	cmp	r0, #0
 8008006:	d09f      	beq.n	8007f48 <_dtoa_r+0x638>
 8008008:	e7d1      	b.n	8007fae <_dtoa_r+0x69e>
 800800a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800800c:	2a00      	cmp	r2, #0
 800800e:	f000 80ea 	beq.w	80081e6 <_dtoa_r+0x8d6>
 8008012:	9a07      	ldr	r2, [sp, #28]
 8008014:	2a01      	cmp	r2, #1
 8008016:	f300 80cd 	bgt.w	80081b4 <_dtoa_r+0x8a4>
 800801a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800801c:	2a00      	cmp	r2, #0
 800801e:	f000 80c1 	beq.w	80081a4 <_dtoa_r+0x894>
 8008022:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008026:	9c08      	ldr	r4, [sp, #32]
 8008028:	9e00      	ldr	r6, [sp, #0]
 800802a:	9a00      	ldr	r2, [sp, #0]
 800802c:	441a      	add	r2, r3
 800802e:	9200      	str	r2, [sp, #0]
 8008030:	9a06      	ldr	r2, [sp, #24]
 8008032:	2101      	movs	r1, #1
 8008034:	441a      	add	r2, r3
 8008036:	4648      	mov	r0, r9
 8008038:	9206      	str	r2, [sp, #24]
 800803a:	f000 fc77 	bl	800892c <__i2b>
 800803e:	4605      	mov	r5, r0
 8008040:	b166      	cbz	r6, 800805c <_dtoa_r+0x74c>
 8008042:	9b06      	ldr	r3, [sp, #24]
 8008044:	2b00      	cmp	r3, #0
 8008046:	dd09      	ble.n	800805c <_dtoa_r+0x74c>
 8008048:	42b3      	cmp	r3, r6
 800804a:	9a00      	ldr	r2, [sp, #0]
 800804c:	bfa8      	it	ge
 800804e:	4633      	movge	r3, r6
 8008050:	1ad2      	subs	r2, r2, r3
 8008052:	9200      	str	r2, [sp, #0]
 8008054:	9a06      	ldr	r2, [sp, #24]
 8008056:	1af6      	subs	r6, r6, r3
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	9306      	str	r3, [sp, #24]
 800805c:	9b08      	ldr	r3, [sp, #32]
 800805e:	b30b      	cbz	r3, 80080a4 <_dtoa_r+0x794>
 8008060:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 80c6 	beq.w	80081f4 <_dtoa_r+0x8e4>
 8008068:	2c00      	cmp	r4, #0
 800806a:	f000 80c0 	beq.w	80081ee <_dtoa_r+0x8de>
 800806e:	4629      	mov	r1, r5
 8008070:	4622      	mov	r2, r4
 8008072:	4648      	mov	r0, r9
 8008074:	f000 fd12 	bl	8008a9c <__pow5mult>
 8008078:	9a02      	ldr	r2, [sp, #8]
 800807a:	4601      	mov	r1, r0
 800807c:	4605      	mov	r5, r0
 800807e:	4648      	mov	r0, r9
 8008080:	f000 fc6a 	bl	8008958 <__multiply>
 8008084:	9902      	ldr	r1, [sp, #8]
 8008086:	4680      	mov	r8, r0
 8008088:	4648      	mov	r0, r9
 800808a:	f000 fb51 	bl	8008730 <_Bfree>
 800808e:	9b08      	ldr	r3, [sp, #32]
 8008090:	1b1b      	subs	r3, r3, r4
 8008092:	9308      	str	r3, [sp, #32]
 8008094:	f000 80b1 	beq.w	80081fa <_dtoa_r+0x8ea>
 8008098:	9a08      	ldr	r2, [sp, #32]
 800809a:	4641      	mov	r1, r8
 800809c:	4648      	mov	r0, r9
 800809e:	f000 fcfd 	bl	8008a9c <__pow5mult>
 80080a2:	9002      	str	r0, [sp, #8]
 80080a4:	2101      	movs	r1, #1
 80080a6:	4648      	mov	r0, r9
 80080a8:	f000 fc40 	bl	800892c <__i2b>
 80080ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80080ae:	4604      	mov	r4, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f000 81d8 	beq.w	8008466 <_dtoa_r+0xb56>
 80080b6:	461a      	mov	r2, r3
 80080b8:	4601      	mov	r1, r0
 80080ba:	4648      	mov	r0, r9
 80080bc:	f000 fcee 	bl	8008a9c <__pow5mult>
 80080c0:	9b07      	ldr	r3, [sp, #28]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	4604      	mov	r4, r0
 80080c6:	f300 809f 	bgt.w	8008208 <_dtoa_r+0x8f8>
 80080ca:	9b04      	ldr	r3, [sp, #16]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f040 8097 	bne.w	8008200 <_dtoa_r+0x8f0>
 80080d2:	9b05      	ldr	r3, [sp, #20]
 80080d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f040 8093 	bne.w	8008204 <_dtoa_r+0x8f4>
 80080de:	9b05      	ldr	r3, [sp, #20]
 80080e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80080e4:	0d1b      	lsrs	r3, r3, #20
 80080e6:	051b      	lsls	r3, r3, #20
 80080e8:	b133      	cbz	r3, 80080f8 <_dtoa_r+0x7e8>
 80080ea:	9b00      	ldr	r3, [sp, #0]
 80080ec:	3301      	adds	r3, #1
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	9b06      	ldr	r3, [sp, #24]
 80080f2:	3301      	adds	r3, #1
 80080f4:	9306      	str	r3, [sp, #24]
 80080f6:	2301      	movs	r3, #1
 80080f8:	9308      	str	r3, [sp, #32]
 80080fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f000 81b8 	beq.w	8008472 <_dtoa_r+0xb62>
 8008102:	6923      	ldr	r3, [r4, #16]
 8008104:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008108:	6918      	ldr	r0, [r3, #16]
 800810a:	f000 fbc3 	bl	8008894 <__hi0bits>
 800810e:	f1c0 0020 	rsb	r0, r0, #32
 8008112:	9b06      	ldr	r3, [sp, #24]
 8008114:	4418      	add	r0, r3
 8008116:	f010 001f 	ands.w	r0, r0, #31
 800811a:	f000 8082 	beq.w	8008222 <_dtoa_r+0x912>
 800811e:	f1c0 0320 	rsb	r3, r0, #32
 8008122:	2b04      	cmp	r3, #4
 8008124:	dd73      	ble.n	800820e <_dtoa_r+0x8fe>
 8008126:	9b00      	ldr	r3, [sp, #0]
 8008128:	f1c0 001c 	rsb	r0, r0, #28
 800812c:	4403      	add	r3, r0
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	9b06      	ldr	r3, [sp, #24]
 8008132:	4403      	add	r3, r0
 8008134:	4406      	add	r6, r0
 8008136:	9306      	str	r3, [sp, #24]
 8008138:	9b00      	ldr	r3, [sp, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	dd05      	ble.n	800814a <_dtoa_r+0x83a>
 800813e:	9902      	ldr	r1, [sp, #8]
 8008140:	461a      	mov	r2, r3
 8008142:	4648      	mov	r0, r9
 8008144:	f000 fd04 	bl	8008b50 <__lshift>
 8008148:	9002      	str	r0, [sp, #8]
 800814a:	9b06      	ldr	r3, [sp, #24]
 800814c:	2b00      	cmp	r3, #0
 800814e:	dd05      	ble.n	800815c <_dtoa_r+0x84c>
 8008150:	4621      	mov	r1, r4
 8008152:	461a      	mov	r2, r3
 8008154:	4648      	mov	r0, r9
 8008156:	f000 fcfb 	bl	8008b50 <__lshift>
 800815a:	4604      	mov	r4, r0
 800815c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800815e:	2b00      	cmp	r3, #0
 8008160:	d061      	beq.n	8008226 <_dtoa_r+0x916>
 8008162:	9802      	ldr	r0, [sp, #8]
 8008164:	4621      	mov	r1, r4
 8008166:	f000 fd5f 	bl	8008c28 <__mcmp>
 800816a:	2800      	cmp	r0, #0
 800816c:	da5b      	bge.n	8008226 <_dtoa_r+0x916>
 800816e:	2300      	movs	r3, #0
 8008170:	9902      	ldr	r1, [sp, #8]
 8008172:	220a      	movs	r2, #10
 8008174:	4648      	mov	r0, r9
 8008176:	f000 fafd 	bl	8008774 <__multadd>
 800817a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800817c:	9002      	str	r0, [sp, #8]
 800817e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008182:	2b00      	cmp	r3, #0
 8008184:	f000 8177 	beq.w	8008476 <_dtoa_r+0xb66>
 8008188:	4629      	mov	r1, r5
 800818a:	2300      	movs	r3, #0
 800818c:	220a      	movs	r2, #10
 800818e:	4648      	mov	r0, r9
 8008190:	f000 faf0 	bl	8008774 <__multadd>
 8008194:	f1bb 0f00 	cmp.w	fp, #0
 8008198:	4605      	mov	r5, r0
 800819a:	dc6f      	bgt.n	800827c <_dtoa_r+0x96c>
 800819c:	9b07      	ldr	r3, [sp, #28]
 800819e:	2b02      	cmp	r3, #2
 80081a0:	dc49      	bgt.n	8008236 <_dtoa_r+0x926>
 80081a2:	e06b      	b.n	800827c <_dtoa_r+0x96c>
 80081a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80081a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80081aa:	e73c      	b.n	8008026 <_dtoa_r+0x716>
 80081ac:	3fe00000 	.word	0x3fe00000
 80081b0:	40240000 	.word	0x40240000
 80081b4:	9b03      	ldr	r3, [sp, #12]
 80081b6:	1e5c      	subs	r4, r3, #1
 80081b8:	9b08      	ldr	r3, [sp, #32]
 80081ba:	42a3      	cmp	r3, r4
 80081bc:	db09      	blt.n	80081d2 <_dtoa_r+0x8c2>
 80081be:	1b1c      	subs	r4, r3, r4
 80081c0:	9b03      	ldr	r3, [sp, #12]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	f6bf af30 	bge.w	8008028 <_dtoa_r+0x718>
 80081c8:	9b00      	ldr	r3, [sp, #0]
 80081ca:	9a03      	ldr	r2, [sp, #12]
 80081cc:	1a9e      	subs	r6, r3, r2
 80081ce:	2300      	movs	r3, #0
 80081d0:	e72b      	b.n	800802a <_dtoa_r+0x71a>
 80081d2:	9b08      	ldr	r3, [sp, #32]
 80081d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80081d6:	9408      	str	r4, [sp, #32]
 80081d8:	1ae3      	subs	r3, r4, r3
 80081da:	441a      	add	r2, r3
 80081dc:	9e00      	ldr	r6, [sp, #0]
 80081de:	9b03      	ldr	r3, [sp, #12]
 80081e0:	920d      	str	r2, [sp, #52]	@ 0x34
 80081e2:	2400      	movs	r4, #0
 80081e4:	e721      	b.n	800802a <_dtoa_r+0x71a>
 80081e6:	9c08      	ldr	r4, [sp, #32]
 80081e8:	9e00      	ldr	r6, [sp, #0]
 80081ea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80081ec:	e728      	b.n	8008040 <_dtoa_r+0x730>
 80081ee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80081f2:	e751      	b.n	8008098 <_dtoa_r+0x788>
 80081f4:	9a08      	ldr	r2, [sp, #32]
 80081f6:	9902      	ldr	r1, [sp, #8]
 80081f8:	e750      	b.n	800809c <_dtoa_r+0x78c>
 80081fa:	f8cd 8008 	str.w	r8, [sp, #8]
 80081fe:	e751      	b.n	80080a4 <_dtoa_r+0x794>
 8008200:	2300      	movs	r3, #0
 8008202:	e779      	b.n	80080f8 <_dtoa_r+0x7e8>
 8008204:	9b04      	ldr	r3, [sp, #16]
 8008206:	e777      	b.n	80080f8 <_dtoa_r+0x7e8>
 8008208:	2300      	movs	r3, #0
 800820a:	9308      	str	r3, [sp, #32]
 800820c:	e779      	b.n	8008102 <_dtoa_r+0x7f2>
 800820e:	d093      	beq.n	8008138 <_dtoa_r+0x828>
 8008210:	9a00      	ldr	r2, [sp, #0]
 8008212:	331c      	adds	r3, #28
 8008214:	441a      	add	r2, r3
 8008216:	9200      	str	r2, [sp, #0]
 8008218:	9a06      	ldr	r2, [sp, #24]
 800821a:	441a      	add	r2, r3
 800821c:	441e      	add	r6, r3
 800821e:	9206      	str	r2, [sp, #24]
 8008220:	e78a      	b.n	8008138 <_dtoa_r+0x828>
 8008222:	4603      	mov	r3, r0
 8008224:	e7f4      	b.n	8008210 <_dtoa_r+0x900>
 8008226:	9b03      	ldr	r3, [sp, #12]
 8008228:	2b00      	cmp	r3, #0
 800822a:	46b8      	mov	r8, r7
 800822c:	dc20      	bgt.n	8008270 <_dtoa_r+0x960>
 800822e:	469b      	mov	fp, r3
 8008230:	9b07      	ldr	r3, [sp, #28]
 8008232:	2b02      	cmp	r3, #2
 8008234:	dd1e      	ble.n	8008274 <_dtoa_r+0x964>
 8008236:	f1bb 0f00 	cmp.w	fp, #0
 800823a:	f47f adb1 	bne.w	8007da0 <_dtoa_r+0x490>
 800823e:	4621      	mov	r1, r4
 8008240:	465b      	mov	r3, fp
 8008242:	2205      	movs	r2, #5
 8008244:	4648      	mov	r0, r9
 8008246:	f000 fa95 	bl	8008774 <__multadd>
 800824a:	4601      	mov	r1, r0
 800824c:	4604      	mov	r4, r0
 800824e:	9802      	ldr	r0, [sp, #8]
 8008250:	f000 fcea 	bl	8008c28 <__mcmp>
 8008254:	2800      	cmp	r0, #0
 8008256:	f77f ada3 	ble.w	8007da0 <_dtoa_r+0x490>
 800825a:	4656      	mov	r6, sl
 800825c:	2331      	movs	r3, #49	@ 0x31
 800825e:	f806 3b01 	strb.w	r3, [r6], #1
 8008262:	f108 0801 	add.w	r8, r8, #1
 8008266:	e59f      	b.n	8007da8 <_dtoa_r+0x498>
 8008268:	9c03      	ldr	r4, [sp, #12]
 800826a:	46b8      	mov	r8, r7
 800826c:	4625      	mov	r5, r4
 800826e:	e7f4      	b.n	800825a <_dtoa_r+0x94a>
 8008270:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008276:	2b00      	cmp	r3, #0
 8008278:	f000 8101 	beq.w	800847e <_dtoa_r+0xb6e>
 800827c:	2e00      	cmp	r6, #0
 800827e:	dd05      	ble.n	800828c <_dtoa_r+0x97c>
 8008280:	4629      	mov	r1, r5
 8008282:	4632      	mov	r2, r6
 8008284:	4648      	mov	r0, r9
 8008286:	f000 fc63 	bl	8008b50 <__lshift>
 800828a:	4605      	mov	r5, r0
 800828c:	9b08      	ldr	r3, [sp, #32]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d05c      	beq.n	800834c <_dtoa_r+0xa3c>
 8008292:	6869      	ldr	r1, [r5, #4]
 8008294:	4648      	mov	r0, r9
 8008296:	f000 fa0b 	bl	80086b0 <_Balloc>
 800829a:	4606      	mov	r6, r0
 800829c:	b928      	cbnz	r0, 80082aa <_dtoa_r+0x99a>
 800829e:	4b82      	ldr	r3, [pc, #520]	@ (80084a8 <_dtoa_r+0xb98>)
 80082a0:	4602      	mov	r2, r0
 80082a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80082a6:	f7ff bb4a 	b.w	800793e <_dtoa_r+0x2e>
 80082aa:	692a      	ldr	r2, [r5, #16]
 80082ac:	3202      	adds	r2, #2
 80082ae:	0092      	lsls	r2, r2, #2
 80082b0:	f105 010c 	add.w	r1, r5, #12
 80082b4:	300c      	adds	r0, #12
 80082b6:	f001 ff69 	bl	800a18c <memcpy>
 80082ba:	2201      	movs	r2, #1
 80082bc:	4631      	mov	r1, r6
 80082be:	4648      	mov	r0, r9
 80082c0:	f000 fc46 	bl	8008b50 <__lshift>
 80082c4:	f10a 0301 	add.w	r3, sl, #1
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	eb0a 030b 	add.w	r3, sl, fp
 80082ce:	9308      	str	r3, [sp, #32]
 80082d0:	9b04      	ldr	r3, [sp, #16]
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	462f      	mov	r7, r5
 80082d8:	9306      	str	r3, [sp, #24]
 80082da:	4605      	mov	r5, r0
 80082dc:	9b00      	ldr	r3, [sp, #0]
 80082de:	9802      	ldr	r0, [sp, #8]
 80082e0:	4621      	mov	r1, r4
 80082e2:	f103 3bff 	add.w	fp, r3, #4294967295
 80082e6:	f7ff fa89 	bl	80077fc <quorem>
 80082ea:	4603      	mov	r3, r0
 80082ec:	3330      	adds	r3, #48	@ 0x30
 80082ee:	9003      	str	r0, [sp, #12]
 80082f0:	4639      	mov	r1, r7
 80082f2:	9802      	ldr	r0, [sp, #8]
 80082f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80082f6:	f000 fc97 	bl	8008c28 <__mcmp>
 80082fa:	462a      	mov	r2, r5
 80082fc:	9004      	str	r0, [sp, #16]
 80082fe:	4621      	mov	r1, r4
 8008300:	4648      	mov	r0, r9
 8008302:	f000 fcad 	bl	8008c60 <__mdiff>
 8008306:	68c2      	ldr	r2, [r0, #12]
 8008308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800830a:	4606      	mov	r6, r0
 800830c:	bb02      	cbnz	r2, 8008350 <_dtoa_r+0xa40>
 800830e:	4601      	mov	r1, r0
 8008310:	9802      	ldr	r0, [sp, #8]
 8008312:	f000 fc89 	bl	8008c28 <__mcmp>
 8008316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008318:	4602      	mov	r2, r0
 800831a:	4631      	mov	r1, r6
 800831c:	4648      	mov	r0, r9
 800831e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008320:	9309      	str	r3, [sp, #36]	@ 0x24
 8008322:	f000 fa05 	bl	8008730 <_Bfree>
 8008326:	9b07      	ldr	r3, [sp, #28]
 8008328:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800832a:	9e00      	ldr	r6, [sp, #0]
 800832c:	ea42 0103 	orr.w	r1, r2, r3
 8008330:	9b06      	ldr	r3, [sp, #24]
 8008332:	4319      	orrs	r1, r3
 8008334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008336:	d10d      	bne.n	8008354 <_dtoa_r+0xa44>
 8008338:	2b39      	cmp	r3, #57	@ 0x39
 800833a:	d027      	beq.n	800838c <_dtoa_r+0xa7c>
 800833c:	9a04      	ldr	r2, [sp, #16]
 800833e:	2a00      	cmp	r2, #0
 8008340:	dd01      	ble.n	8008346 <_dtoa_r+0xa36>
 8008342:	9b03      	ldr	r3, [sp, #12]
 8008344:	3331      	adds	r3, #49	@ 0x31
 8008346:	f88b 3000 	strb.w	r3, [fp]
 800834a:	e52e      	b.n	8007daa <_dtoa_r+0x49a>
 800834c:	4628      	mov	r0, r5
 800834e:	e7b9      	b.n	80082c4 <_dtoa_r+0x9b4>
 8008350:	2201      	movs	r2, #1
 8008352:	e7e2      	b.n	800831a <_dtoa_r+0xa0a>
 8008354:	9904      	ldr	r1, [sp, #16]
 8008356:	2900      	cmp	r1, #0
 8008358:	db04      	blt.n	8008364 <_dtoa_r+0xa54>
 800835a:	9807      	ldr	r0, [sp, #28]
 800835c:	4301      	orrs	r1, r0
 800835e:	9806      	ldr	r0, [sp, #24]
 8008360:	4301      	orrs	r1, r0
 8008362:	d120      	bne.n	80083a6 <_dtoa_r+0xa96>
 8008364:	2a00      	cmp	r2, #0
 8008366:	ddee      	ble.n	8008346 <_dtoa_r+0xa36>
 8008368:	9902      	ldr	r1, [sp, #8]
 800836a:	9300      	str	r3, [sp, #0]
 800836c:	2201      	movs	r2, #1
 800836e:	4648      	mov	r0, r9
 8008370:	f000 fbee 	bl	8008b50 <__lshift>
 8008374:	4621      	mov	r1, r4
 8008376:	9002      	str	r0, [sp, #8]
 8008378:	f000 fc56 	bl	8008c28 <__mcmp>
 800837c:	2800      	cmp	r0, #0
 800837e:	9b00      	ldr	r3, [sp, #0]
 8008380:	dc02      	bgt.n	8008388 <_dtoa_r+0xa78>
 8008382:	d1e0      	bne.n	8008346 <_dtoa_r+0xa36>
 8008384:	07da      	lsls	r2, r3, #31
 8008386:	d5de      	bpl.n	8008346 <_dtoa_r+0xa36>
 8008388:	2b39      	cmp	r3, #57	@ 0x39
 800838a:	d1da      	bne.n	8008342 <_dtoa_r+0xa32>
 800838c:	2339      	movs	r3, #57	@ 0x39
 800838e:	f88b 3000 	strb.w	r3, [fp]
 8008392:	4633      	mov	r3, r6
 8008394:	461e      	mov	r6, r3
 8008396:	3b01      	subs	r3, #1
 8008398:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800839c:	2a39      	cmp	r2, #57	@ 0x39
 800839e:	d04e      	beq.n	800843e <_dtoa_r+0xb2e>
 80083a0:	3201      	adds	r2, #1
 80083a2:	701a      	strb	r2, [r3, #0]
 80083a4:	e501      	b.n	8007daa <_dtoa_r+0x49a>
 80083a6:	2a00      	cmp	r2, #0
 80083a8:	dd03      	ble.n	80083b2 <_dtoa_r+0xaa2>
 80083aa:	2b39      	cmp	r3, #57	@ 0x39
 80083ac:	d0ee      	beq.n	800838c <_dtoa_r+0xa7c>
 80083ae:	3301      	adds	r3, #1
 80083b0:	e7c9      	b.n	8008346 <_dtoa_r+0xa36>
 80083b2:	9a00      	ldr	r2, [sp, #0]
 80083b4:	9908      	ldr	r1, [sp, #32]
 80083b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80083ba:	428a      	cmp	r2, r1
 80083bc:	d028      	beq.n	8008410 <_dtoa_r+0xb00>
 80083be:	9902      	ldr	r1, [sp, #8]
 80083c0:	2300      	movs	r3, #0
 80083c2:	220a      	movs	r2, #10
 80083c4:	4648      	mov	r0, r9
 80083c6:	f000 f9d5 	bl	8008774 <__multadd>
 80083ca:	42af      	cmp	r7, r5
 80083cc:	9002      	str	r0, [sp, #8]
 80083ce:	f04f 0300 	mov.w	r3, #0
 80083d2:	f04f 020a 	mov.w	r2, #10
 80083d6:	4639      	mov	r1, r7
 80083d8:	4648      	mov	r0, r9
 80083da:	d107      	bne.n	80083ec <_dtoa_r+0xadc>
 80083dc:	f000 f9ca 	bl	8008774 <__multadd>
 80083e0:	4607      	mov	r7, r0
 80083e2:	4605      	mov	r5, r0
 80083e4:	9b00      	ldr	r3, [sp, #0]
 80083e6:	3301      	adds	r3, #1
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	e777      	b.n	80082dc <_dtoa_r+0x9cc>
 80083ec:	f000 f9c2 	bl	8008774 <__multadd>
 80083f0:	4629      	mov	r1, r5
 80083f2:	4607      	mov	r7, r0
 80083f4:	2300      	movs	r3, #0
 80083f6:	220a      	movs	r2, #10
 80083f8:	4648      	mov	r0, r9
 80083fa:	f000 f9bb 	bl	8008774 <__multadd>
 80083fe:	4605      	mov	r5, r0
 8008400:	e7f0      	b.n	80083e4 <_dtoa_r+0xad4>
 8008402:	f1bb 0f00 	cmp.w	fp, #0
 8008406:	bfcc      	ite	gt
 8008408:	465e      	movgt	r6, fp
 800840a:	2601      	movle	r6, #1
 800840c:	4456      	add	r6, sl
 800840e:	2700      	movs	r7, #0
 8008410:	9902      	ldr	r1, [sp, #8]
 8008412:	9300      	str	r3, [sp, #0]
 8008414:	2201      	movs	r2, #1
 8008416:	4648      	mov	r0, r9
 8008418:	f000 fb9a 	bl	8008b50 <__lshift>
 800841c:	4621      	mov	r1, r4
 800841e:	9002      	str	r0, [sp, #8]
 8008420:	f000 fc02 	bl	8008c28 <__mcmp>
 8008424:	2800      	cmp	r0, #0
 8008426:	dcb4      	bgt.n	8008392 <_dtoa_r+0xa82>
 8008428:	d102      	bne.n	8008430 <_dtoa_r+0xb20>
 800842a:	9b00      	ldr	r3, [sp, #0]
 800842c:	07db      	lsls	r3, r3, #31
 800842e:	d4b0      	bmi.n	8008392 <_dtoa_r+0xa82>
 8008430:	4633      	mov	r3, r6
 8008432:	461e      	mov	r6, r3
 8008434:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008438:	2a30      	cmp	r2, #48	@ 0x30
 800843a:	d0fa      	beq.n	8008432 <_dtoa_r+0xb22>
 800843c:	e4b5      	b.n	8007daa <_dtoa_r+0x49a>
 800843e:	459a      	cmp	sl, r3
 8008440:	d1a8      	bne.n	8008394 <_dtoa_r+0xa84>
 8008442:	2331      	movs	r3, #49	@ 0x31
 8008444:	f108 0801 	add.w	r8, r8, #1
 8008448:	f88a 3000 	strb.w	r3, [sl]
 800844c:	e4ad      	b.n	8007daa <_dtoa_r+0x49a>
 800844e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008450:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80084ac <_dtoa_r+0xb9c>
 8008454:	b11b      	cbz	r3, 800845e <_dtoa_r+0xb4e>
 8008456:	f10a 0308 	add.w	r3, sl, #8
 800845a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800845c:	6013      	str	r3, [r2, #0]
 800845e:	4650      	mov	r0, sl
 8008460:	b017      	add	sp, #92	@ 0x5c
 8008462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008466:	9b07      	ldr	r3, [sp, #28]
 8008468:	2b01      	cmp	r3, #1
 800846a:	f77f ae2e 	ble.w	80080ca <_dtoa_r+0x7ba>
 800846e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008470:	9308      	str	r3, [sp, #32]
 8008472:	2001      	movs	r0, #1
 8008474:	e64d      	b.n	8008112 <_dtoa_r+0x802>
 8008476:	f1bb 0f00 	cmp.w	fp, #0
 800847a:	f77f aed9 	ble.w	8008230 <_dtoa_r+0x920>
 800847e:	4656      	mov	r6, sl
 8008480:	9802      	ldr	r0, [sp, #8]
 8008482:	4621      	mov	r1, r4
 8008484:	f7ff f9ba 	bl	80077fc <quorem>
 8008488:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800848c:	f806 3b01 	strb.w	r3, [r6], #1
 8008490:	eba6 020a 	sub.w	r2, r6, sl
 8008494:	4593      	cmp	fp, r2
 8008496:	ddb4      	ble.n	8008402 <_dtoa_r+0xaf2>
 8008498:	9902      	ldr	r1, [sp, #8]
 800849a:	2300      	movs	r3, #0
 800849c:	220a      	movs	r2, #10
 800849e:	4648      	mov	r0, r9
 80084a0:	f000 f968 	bl	8008774 <__multadd>
 80084a4:	9002      	str	r0, [sp, #8]
 80084a6:	e7eb      	b.n	8008480 <_dtoa_r+0xb70>
 80084a8:	0800afa5 	.word	0x0800afa5
 80084ac:	0800af29 	.word	0x0800af29

080084b0 <_free_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4605      	mov	r5, r0
 80084b4:	2900      	cmp	r1, #0
 80084b6:	d041      	beq.n	800853c <_free_r+0x8c>
 80084b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084bc:	1f0c      	subs	r4, r1, #4
 80084be:	2b00      	cmp	r3, #0
 80084c0:	bfb8      	it	lt
 80084c2:	18e4      	addlt	r4, r4, r3
 80084c4:	f000 f8e8 	bl	8008698 <__malloc_lock>
 80084c8:	4a1d      	ldr	r2, [pc, #116]	@ (8008540 <_free_r+0x90>)
 80084ca:	6813      	ldr	r3, [r2, #0]
 80084cc:	b933      	cbnz	r3, 80084dc <_free_r+0x2c>
 80084ce:	6063      	str	r3, [r4, #4]
 80084d0:	6014      	str	r4, [r2, #0]
 80084d2:	4628      	mov	r0, r5
 80084d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084d8:	f000 b8e4 	b.w	80086a4 <__malloc_unlock>
 80084dc:	42a3      	cmp	r3, r4
 80084de:	d908      	bls.n	80084f2 <_free_r+0x42>
 80084e0:	6820      	ldr	r0, [r4, #0]
 80084e2:	1821      	adds	r1, r4, r0
 80084e4:	428b      	cmp	r3, r1
 80084e6:	bf01      	itttt	eq
 80084e8:	6819      	ldreq	r1, [r3, #0]
 80084ea:	685b      	ldreq	r3, [r3, #4]
 80084ec:	1809      	addeq	r1, r1, r0
 80084ee:	6021      	streq	r1, [r4, #0]
 80084f0:	e7ed      	b.n	80084ce <_free_r+0x1e>
 80084f2:	461a      	mov	r2, r3
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	b10b      	cbz	r3, 80084fc <_free_r+0x4c>
 80084f8:	42a3      	cmp	r3, r4
 80084fa:	d9fa      	bls.n	80084f2 <_free_r+0x42>
 80084fc:	6811      	ldr	r1, [r2, #0]
 80084fe:	1850      	adds	r0, r2, r1
 8008500:	42a0      	cmp	r0, r4
 8008502:	d10b      	bne.n	800851c <_free_r+0x6c>
 8008504:	6820      	ldr	r0, [r4, #0]
 8008506:	4401      	add	r1, r0
 8008508:	1850      	adds	r0, r2, r1
 800850a:	4283      	cmp	r3, r0
 800850c:	6011      	str	r1, [r2, #0]
 800850e:	d1e0      	bne.n	80084d2 <_free_r+0x22>
 8008510:	6818      	ldr	r0, [r3, #0]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	6053      	str	r3, [r2, #4]
 8008516:	4408      	add	r0, r1
 8008518:	6010      	str	r0, [r2, #0]
 800851a:	e7da      	b.n	80084d2 <_free_r+0x22>
 800851c:	d902      	bls.n	8008524 <_free_r+0x74>
 800851e:	230c      	movs	r3, #12
 8008520:	602b      	str	r3, [r5, #0]
 8008522:	e7d6      	b.n	80084d2 <_free_r+0x22>
 8008524:	6820      	ldr	r0, [r4, #0]
 8008526:	1821      	adds	r1, r4, r0
 8008528:	428b      	cmp	r3, r1
 800852a:	bf04      	itt	eq
 800852c:	6819      	ldreq	r1, [r3, #0]
 800852e:	685b      	ldreq	r3, [r3, #4]
 8008530:	6063      	str	r3, [r4, #4]
 8008532:	bf04      	itt	eq
 8008534:	1809      	addeq	r1, r1, r0
 8008536:	6021      	streq	r1, [r4, #0]
 8008538:	6054      	str	r4, [r2, #4]
 800853a:	e7ca      	b.n	80084d2 <_free_r+0x22>
 800853c:	bd38      	pop	{r3, r4, r5, pc}
 800853e:	bf00      	nop
 8008540:	200006a0 	.word	0x200006a0

08008544 <malloc>:
 8008544:	4b02      	ldr	r3, [pc, #8]	@ (8008550 <malloc+0xc>)
 8008546:	4601      	mov	r1, r0
 8008548:	6818      	ldr	r0, [r3, #0]
 800854a:	f000 b825 	b.w	8008598 <_malloc_r>
 800854e:	bf00      	nop
 8008550:	20000024 	.word	0x20000024

08008554 <sbrk_aligned>:
 8008554:	b570      	push	{r4, r5, r6, lr}
 8008556:	4e0f      	ldr	r6, [pc, #60]	@ (8008594 <sbrk_aligned+0x40>)
 8008558:	460c      	mov	r4, r1
 800855a:	6831      	ldr	r1, [r6, #0]
 800855c:	4605      	mov	r5, r0
 800855e:	b911      	cbnz	r1, 8008566 <sbrk_aligned+0x12>
 8008560:	f001 fe04 	bl	800a16c <_sbrk_r>
 8008564:	6030      	str	r0, [r6, #0]
 8008566:	4621      	mov	r1, r4
 8008568:	4628      	mov	r0, r5
 800856a:	f001 fdff 	bl	800a16c <_sbrk_r>
 800856e:	1c43      	adds	r3, r0, #1
 8008570:	d103      	bne.n	800857a <sbrk_aligned+0x26>
 8008572:	f04f 34ff 	mov.w	r4, #4294967295
 8008576:	4620      	mov	r0, r4
 8008578:	bd70      	pop	{r4, r5, r6, pc}
 800857a:	1cc4      	adds	r4, r0, #3
 800857c:	f024 0403 	bic.w	r4, r4, #3
 8008580:	42a0      	cmp	r0, r4
 8008582:	d0f8      	beq.n	8008576 <sbrk_aligned+0x22>
 8008584:	1a21      	subs	r1, r4, r0
 8008586:	4628      	mov	r0, r5
 8008588:	f001 fdf0 	bl	800a16c <_sbrk_r>
 800858c:	3001      	adds	r0, #1
 800858e:	d1f2      	bne.n	8008576 <sbrk_aligned+0x22>
 8008590:	e7ef      	b.n	8008572 <sbrk_aligned+0x1e>
 8008592:	bf00      	nop
 8008594:	2000069c 	.word	0x2000069c

08008598 <_malloc_r>:
 8008598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800859c:	1ccd      	adds	r5, r1, #3
 800859e:	f025 0503 	bic.w	r5, r5, #3
 80085a2:	3508      	adds	r5, #8
 80085a4:	2d0c      	cmp	r5, #12
 80085a6:	bf38      	it	cc
 80085a8:	250c      	movcc	r5, #12
 80085aa:	2d00      	cmp	r5, #0
 80085ac:	4606      	mov	r6, r0
 80085ae:	db01      	blt.n	80085b4 <_malloc_r+0x1c>
 80085b0:	42a9      	cmp	r1, r5
 80085b2:	d904      	bls.n	80085be <_malloc_r+0x26>
 80085b4:	230c      	movs	r3, #12
 80085b6:	6033      	str	r3, [r6, #0]
 80085b8:	2000      	movs	r0, #0
 80085ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008694 <_malloc_r+0xfc>
 80085c2:	f000 f869 	bl	8008698 <__malloc_lock>
 80085c6:	f8d8 3000 	ldr.w	r3, [r8]
 80085ca:	461c      	mov	r4, r3
 80085cc:	bb44      	cbnz	r4, 8008620 <_malloc_r+0x88>
 80085ce:	4629      	mov	r1, r5
 80085d0:	4630      	mov	r0, r6
 80085d2:	f7ff ffbf 	bl	8008554 <sbrk_aligned>
 80085d6:	1c43      	adds	r3, r0, #1
 80085d8:	4604      	mov	r4, r0
 80085da:	d158      	bne.n	800868e <_malloc_r+0xf6>
 80085dc:	f8d8 4000 	ldr.w	r4, [r8]
 80085e0:	4627      	mov	r7, r4
 80085e2:	2f00      	cmp	r7, #0
 80085e4:	d143      	bne.n	800866e <_malloc_r+0xd6>
 80085e6:	2c00      	cmp	r4, #0
 80085e8:	d04b      	beq.n	8008682 <_malloc_r+0xea>
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	4639      	mov	r1, r7
 80085ee:	4630      	mov	r0, r6
 80085f0:	eb04 0903 	add.w	r9, r4, r3
 80085f4:	f001 fdba 	bl	800a16c <_sbrk_r>
 80085f8:	4581      	cmp	r9, r0
 80085fa:	d142      	bne.n	8008682 <_malloc_r+0xea>
 80085fc:	6821      	ldr	r1, [r4, #0]
 80085fe:	1a6d      	subs	r5, r5, r1
 8008600:	4629      	mov	r1, r5
 8008602:	4630      	mov	r0, r6
 8008604:	f7ff ffa6 	bl	8008554 <sbrk_aligned>
 8008608:	3001      	adds	r0, #1
 800860a:	d03a      	beq.n	8008682 <_malloc_r+0xea>
 800860c:	6823      	ldr	r3, [r4, #0]
 800860e:	442b      	add	r3, r5
 8008610:	6023      	str	r3, [r4, #0]
 8008612:	f8d8 3000 	ldr.w	r3, [r8]
 8008616:	685a      	ldr	r2, [r3, #4]
 8008618:	bb62      	cbnz	r2, 8008674 <_malloc_r+0xdc>
 800861a:	f8c8 7000 	str.w	r7, [r8]
 800861e:	e00f      	b.n	8008640 <_malloc_r+0xa8>
 8008620:	6822      	ldr	r2, [r4, #0]
 8008622:	1b52      	subs	r2, r2, r5
 8008624:	d420      	bmi.n	8008668 <_malloc_r+0xd0>
 8008626:	2a0b      	cmp	r2, #11
 8008628:	d917      	bls.n	800865a <_malloc_r+0xc2>
 800862a:	1961      	adds	r1, r4, r5
 800862c:	42a3      	cmp	r3, r4
 800862e:	6025      	str	r5, [r4, #0]
 8008630:	bf18      	it	ne
 8008632:	6059      	strne	r1, [r3, #4]
 8008634:	6863      	ldr	r3, [r4, #4]
 8008636:	bf08      	it	eq
 8008638:	f8c8 1000 	streq.w	r1, [r8]
 800863c:	5162      	str	r2, [r4, r5]
 800863e:	604b      	str	r3, [r1, #4]
 8008640:	4630      	mov	r0, r6
 8008642:	f000 f82f 	bl	80086a4 <__malloc_unlock>
 8008646:	f104 000b 	add.w	r0, r4, #11
 800864a:	1d23      	adds	r3, r4, #4
 800864c:	f020 0007 	bic.w	r0, r0, #7
 8008650:	1ac2      	subs	r2, r0, r3
 8008652:	bf1c      	itt	ne
 8008654:	1a1b      	subne	r3, r3, r0
 8008656:	50a3      	strne	r3, [r4, r2]
 8008658:	e7af      	b.n	80085ba <_malloc_r+0x22>
 800865a:	6862      	ldr	r2, [r4, #4]
 800865c:	42a3      	cmp	r3, r4
 800865e:	bf0c      	ite	eq
 8008660:	f8c8 2000 	streq.w	r2, [r8]
 8008664:	605a      	strne	r2, [r3, #4]
 8008666:	e7eb      	b.n	8008640 <_malloc_r+0xa8>
 8008668:	4623      	mov	r3, r4
 800866a:	6864      	ldr	r4, [r4, #4]
 800866c:	e7ae      	b.n	80085cc <_malloc_r+0x34>
 800866e:	463c      	mov	r4, r7
 8008670:	687f      	ldr	r7, [r7, #4]
 8008672:	e7b6      	b.n	80085e2 <_malloc_r+0x4a>
 8008674:	461a      	mov	r2, r3
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	42a3      	cmp	r3, r4
 800867a:	d1fb      	bne.n	8008674 <_malloc_r+0xdc>
 800867c:	2300      	movs	r3, #0
 800867e:	6053      	str	r3, [r2, #4]
 8008680:	e7de      	b.n	8008640 <_malloc_r+0xa8>
 8008682:	230c      	movs	r3, #12
 8008684:	6033      	str	r3, [r6, #0]
 8008686:	4630      	mov	r0, r6
 8008688:	f000 f80c 	bl	80086a4 <__malloc_unlock>
 800868c:	e794      	b.n	80085b8 <_malloc_r+0x20>
 800868e:	6005      	str	r5, [r0, #0]
 8008690:	e7d6      	b.n	8008640 <_malloc_r+0xa8>
 8008692:	bf00      	nop
 8008694:	200006a0 	.word	0x200006a0

08008698 <__malloc_lock>:
 8008698:	4801      	ldr	r0, [pc, #4]	@ (80086a0 <__malloc_lock+0x8>)
 800869a:	f7ff b8a6 	b.w	80077ea <__retarget_lock_acquire_recursive>
 800869e:	bf00      	nop
 80086a0:	20000698 	.word	0x20000698

080086a4 <__malloc_unlock>:
 80086a4:	4801      	ldr	r0, [pc, #4]	@ (80086ac <__malloc_unlock+0x8>)
 80086a6:	f7ff b8a1 	b.w	80077ec <__retarget_lock_release_recursive>
 80086aa:	bf00      	nop
 80086ac:	20000698 	.word	0x20000698

080086b0 <_Balloc>:
 80086b0:	b570      	push	{r4, r5, r6, lr}
 80086b2:	69c6      	ldr	r6, [r0, #28]
 80086b4:	4604      	mov	r4, r0
 80086b6:	460d      	mov	r5, r1
 80086b8:	b976      	cbnz	r6, 80086d8 <_Balloc+0x28>
 80086ba:	2010      	movs	r0, #16
 80086bc:	f7ff ff42 	bl	8008544 <malloc>
 80086c0:	4602      	mov	r2, r0
 80086c2:	61e0      	str	r0, [r4, #28]
 80086c4:	b920      	cbnz	r0, 80086d0 <_Balloc+0x20>
 80086c6:	4b18      	ldr	r3, [pc, #96]	@ (8008728 <_Balloc+0x78>)
 80086c8:	4818      	ldr	r0, [pc, #96]	@ (800872c <_Balloc+0x7c>)
 80086ca:	216b      	movs	r1, #107	@ 0x6b
 80086cc:	f001 fd74 	bl	800a1b8 <__assert_func>
 80086d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086d4:	6006      	str	r6, [r0, #0]
 80086d6:	60c6      	str	r6, [r0, #12]
 80086d8:	69e6      	ldr	r6, [r4, #28]
 80086da:	68f3      	ldr	r3, [r6, #12]
 80086dc:	b183      	cbz	r3, 8008700 <_Balloc+0x50>
 80086de:	69e3      	ldr	r3, [r4, #28]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086e6:	b9b8      	cbnz	r0, 8008718 <_Balloc+0x68>
 80086e8:	2101      	movs	r1, #1
 80086ea:	fa01 f605 	lsl.w	r6, r1, r5
 80086ee:	1d72      	adds	r2, r6, #5
 80086f0:	0092      	lsls	r2, r2, #2
 80086f2:	4620      	mov	r0, r4
 80086f4:	f001 fd7e 	bl	800a1f4 <_calloc_r>
 80086f8:	b160      	cbz	r0, 8008714 <_Balloc+0x64>
 80086fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80086fe:	e00e      	b.n	800871e <_Balloc+0x6e>
 8008700:	2221      	movs	r2, #33	@ 0x21
 8008702:	2104      	movs	r1, #4
 8008704:	4620      	mov	r0, r4
 8008706:	f001 fd75 	bl	800a1f4 <_calloc_r>
 800870a:	69e3      	ldr	r3, [r4, #28]
 800870c:	60f0      	str	r0, [r6, #12]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1e4      	bne.n	80086de <_Balloc+0x2e>
 8008714:	2000      	movs	r0, #0
 8008716:	bd70      	pop	{r4, r5, r6, pc}
 8008718:	6802      	ldr	r2, [r0, #0]
 800871a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800871e:	2300      	movs	r3, #0
 8008720:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008724:	e7f7      	b.n	8008716 <_Balloc+0x66>
 8008726:	bf00      	nop
 8008728:	0800af36 	.word	0x0800af36
 800872c:	0800afb6 	.word	0x0800afb6

08008730 <_Bfree>:
 8008730:	b570      	push	{r4, r5, r6, lr}
 8008732:	69c6      	ldr	r6, [r0, #28]
 8008734:	4605      	mov	r5, r0
 8008736:	460c      	mov	r4, r1
 8008738:	b976      	cbnz	r6, 8008758 <_Bfree+0x28>
 800873a:	2010      	movs	r0, #16
 800873c:	f7ff ff02 	bl	8008544 <malloc>
 8008740:	4602      	mov	r2, r0
 8008742:	61e8      	str	r0, [r5, #28]
 8008744:	b920      	cbnz	r0, 8008750 <_Bfree+0x20>
 8008746:	4b09      	ldr	r3, [pc, #36]	@ (800876c <_Bfree+0x3c>)
 8008748:	4809      	ldr	r0, [pc, #36]	@ (8008770 <_Bfree+0x40>)
 800874a:	218f      	movs	r1, #143	@ 0x8f
 800874c:	f001 fd34 	bl	800a1b8 <__assert_func>
 8008750:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008754:	6006      	str	r6, [r0, #0]
 8008756:	60c6      	str	r6, [r0, #12]
 8008758:	b13c      	cbz	r4, 800876a <_Bfree+0x3a>
 800875a:	69eb      	ldr	r3, [r5, #28]
 800875c:	6862      	ldr	r2, [r4, #4]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008764:	6021      	str	r1, [r4, #0]
 8008766:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800876a:	bd70      	pop	{r4, r5, r6, pc}
 800876c:	0800af36 	.word	0x0800af36
 8008770:	0800afb6 	.word	0x0800afb6

08008774 <__multadd>:
 8008774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008778:	690d      	ldr	r5, [r1, #16]
 800877a:	4607      	mov	r7, r0
 800877c:	460c      	mov	r4, r1
 800877e:	461e      	mov	r6, r3
 8008780:	f101 0c14 	add.w	ip, r1, #20
 8008784:	2000      	movs	r0, #0
 8008786:	f8dc 3000 	ldr.w	r3, [ip]
 800878a:	b299      	uxth	r1, r3
 800878c:	fb02 6101 	mla	r1, r2, r1, r6
 8008790:	0c1e      	lsrs	r6, r3, #16
 8008792:	0c0b      	lsrs	r3, r1, #16
 8008794:	fb02 3306 	mla	r3, r2, r6, r3
 8008798:	b289      	uxth	r1, r1
 800879a:	3001      	adds	r0, #1
 800879c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80087a0:	4285      	cmp	r5, r0
 80087a2:	f84c 1b04 	str.w	r1, [ip], #4
 80087a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80087aa:	dcec      	bgt.n	8008786 <__multadd+0x12>
 80087ac:	b30e      	cbz	r6, 80087f2 <__multadd+0x7e>
 80087ae:	68a3      	ldr	r3, [r4, #8]
 80087b0:	42ab      	cmp	r3, r5
 80087b2:	dc19      	bgt.n	80087e8 <__multadd+0x74>
 80087b4:	6861      	ldr	r1, [r4, #4]
 80087b6:	4638      	mov	r0, r7
 80087b8:	3101      	adds	r1, #1
 80087ba:	f7ff ff79 	bl	80086b0 <_Balloc>
 80087be:	4680      	mov	r8, r0
 80087c0:	b928      	cbnz	r0, 80087ce <__multadd+0x5a>
 80087c2:	4602      	mov	r2, r0
 80087c4:	4b0c      	ldr	r3, [pc, #48]	@ (80087f8 <__multadd+0x84>)
 80087c6:	480d      	ldr	r0, [pc, #52]	@ (80087fc <__multadd+0x88>)
 80087c8:	21ba      	movs	r1, #186	@ 0xba
 80087ca:	f001 fcf5 	bl	800a1b8 <__assert_func>
 80087ce:	6922      	ldr	r2, [r4, #16]
 80087d0:	3202      	adds	r2, #2
 80087d2:	f104 010c 	add.w	r1, r4, #12
 80087d6:	0092      	lsls	r2, r2, #2
 80087d8:	300c      	adds	r0, #12
 80087da:	f001 fcd7 	bl	800a18c <memcpy>
 80087de:	4621      	mov	r1, r4
 80087e0:	4638      	mov	r0, r7
 80087e2:	f7ff ffa5 	bl	8008730 <_Bfree>
 80087e6:	4644      	mov	r4, r8
 80087e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80087ec:	3501      	adds	r5, #1
 80087ee:	615e      	str	r6, [r3, #20]
 80087f0:	6125      	str	r5, [r4, #16]
 80087f2:	4620      	mov	r0, r4
 80087f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087f8:	0800afa5 	.word	0x0800afa5
 80087fc:	0800afb6 	.word	0x0800afb6

08008800 <__s2b>:
 8008800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008804:	460c      	mov	r4, r1
 8008806:	4615      	mov	r5, r2
 8008808:	461f      	mov	r7, r3
 800880a:	2209      	movs	r2, #9
 800880c:	3308      	adds	r3, #8
 800880e:	4606      	mov	r6, r0
 8008810:	fb93 f3f2 	sdiv	r3, r3, r2
 8008814:	2100      	movs	r1, #0
 8008816:	2201      	movs	r2, #1
 8008818:	429a      	cmp	r2, r3
 800881a:	db09      	blt.n	8008830 <__s2b+0x30>
 800881c:	4630      	mov	r0, r6
 800881e:	f7ff ff47 	bl	80086b0 <_Balloc>
 8008822:	b940      	cbnz	r0, 8008836 <__s2b+0x36>
 8008824:	4602      	mov	r2, r0
 8008826:	4b19      	ldr	r3, [pc, #100]	@ (800888c <__s2b+0x8c>)
 8008828:	4819      	ldr	r0, [pc, #100]	@ (8008890 <__s2b+0x90>)
 800882a:	21d3      	movs	r1, #211	@ 0xd3
 800882c:	f001 fcc4 	bl	800a1b8 <__assert_func>
 8008830:	0052      	lsls	r2, r2, #1
 8008832:	3101      	adds	r1, #1
 8008834:	e7f0      	b.n	8008818 <__s2b+0x18>
 8008836:	9b08      	ldr	r3, [sp, #32]
 8008838:	6143      	str	r3, [r0, #20]
 800883a:	2d09      	cmp	r5, #9
 800883c:	f04f 0301 	mov.w	r3, #1
 8008840:	6103      	str	r3, [r0, #16]
 8008842:	dd16      	ble.n	8008872 <__s2b+0x72>
 8008844:	f104 0909 	add.w	r9, r4, #9
 8008848:	46c8      	mov	r8, r9
 800884a:	442c      	add	r4, r5
 800884c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008850:	4601      	mov	r1, r0
 8008852:	3b30      	subs	r3, #48	@ 0x30
 8008854:	220a      	movs	r2, #10
 8008856:	4630      	mov	r0, r6
 8008858:	f7ff ff8c 	bl	8008774 <__multadd>
 800885c:	45a0      	cmp	r8, r4
 800885e:	d1f5      	bne.n	800884c <__s2b+0x4c>
 8008860:	f1a5 0408 	sub.w	r4, r5, #8
 8008864:	444c      	add	r4, r9
 8008866:	1b2d      	subs	r5, r5, r4
 8008868:	1963      	adds	r3, r4, r5
 800886a:	42bb      	cmp	r3, r7
 800886c:	db04      	blt.n	8008878 <__s2b+0x78>
 800886e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008872:	340a      	adds	r4, #10
 8008874:	2509      	movs	r5, #9
 8008876:	e7f6      	b.n	8008866 <__s2b+0x66>
 8008878:	f814 3b01 	ldrb.w	r3, [r4], #1
 800887c:	4601      	mov	r1, r0
 800887e:	3b30      	subs	r3, #48	@ 0x30
 8008880:	220a      	movs	r2, #10
 8008882:	4630      	mov	r0, r6
 8008884:	f7ff ff76 	bl	8008774 <__multadd>
 8008888:	e7ee      	b.n	8008868 <__s2b+0x68>
 800888a:	bf00      	nop
 800888c:	0800afa5 	.word	0x0800afa5
 8008890:	0800afb6 	.word	0x0800afb6

08008894 <__hi0bits>:
 8008894:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008898:	4603      	mov	r3, r0
 800889a:	bf36      	itet	cc
 800889c:	0403      	lslcc	r3, r0, #16
 800889e:	2000      	movcs	r0, #0
 80088a0:	2010      	movcc	r0, #16
 80088a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088a6:	bf3c      	itt	cc
 80088a8:	021b      	lslcc	r3, r3, #8
 80088aa:	3008      	addcc	r0, #8
 80088ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088b0:	bf3c      	itt	cc
 80088b2:	011b      	lslcc	r3, r3, #4
 80088b4:	3004      	addcc	r0, #4
 80088b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088ba:	bf3c      	itt	cc
 80088bc:	009b      	lslcc	r3, r3, #2
 80088be:	3002      	addcc	r0, #2
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	db05      	blt.n	80088d0 <__hi0bits+0x3c>
 80088c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80088c8:	f100 0001 	add.w	r0, r0, #1
 80088cc:	bf08      	it	eq
 80088ce:	2020      	moveq	r0, #32
 80088d0:	4770      	bx	lr

080088d2 <__lo0bits>:
 80088d2:	6803      	ldr	r3, [r0, #0]
 80088d4:	4602      	mov	r2, r0
 80088d6:	f013 0007 	ands.w	r0, r3, #7
 80088da:	d00b      	beq.n	80088f4 <__lo0bits+0x22>
 80088dc:	07d9      	lsls	r1, r3, #31
 80088de:	d421      	bmi.n	8008924 <__lo0bits+0x52>
 80088e0:	0798      	lsls	r0, r3, #30
 80088e2:	bf49      	itett	mi
 80088e4:	085b      	lsrmi	r3, r3, #1
 80088e6:	089b      	lsrpl	r3, r3, #2
 80088e8:	2001      	movmi	r0, #1
 80088ea:	6013      	strmi	r3, [r2, #0]
 80088ec:	bf5c      	itt	pl
 80088ee:	6013      	strpl	r3, [r2, #0]
 80088f0:	2002      	movpl	r0, #2
 80088f2:	4770      	bx	lr
 80088f4:	b299      	uxth	r1, r3
 80088f6:	b909      	cbnz	r1, 80088fc <__lo0bits+0x2a>
 80088f8:	0c1b      	lsrs	r3, r3, #16
 80088fa:	2010      	movs	r0, #16
 80088fc:	b2d9      	uxtb	r1, r3
 80088fe:	b909      	cbnz	r1, 8008904 <__lo0bits+0x32>
 8008900:	3008      	adds	r0, #8
 8008902:	0a1b      	lsrs	r3, r3, #8
 8008904:	0719      	lsls	r1, r3, #28
 8008906:	bf04      	itt	eq
 8008908:	091b      	lsreq	r3, r3, #4
 800890a:	3004      	addeq	r0, #4
 800890c:	0799      	lsls	r1, r3, #30
 800890e:	bf04      	itt	eq
 8008910:	089b      	lsreq	r3, r3, #2
 8008912:	3002      	addeq	r0, #2
 8008914:	07d9      	lsls	r1, r3, #31
 8008916:	d403      	bmi.n	8008920 <__lo0bits+0x4e>
 8008918:	085b      	lsrs	r3, r3, #1
 800891a:	f100 0001 	add.w	r0, r0, #1
 800891e:	d003      	beq.n	8008928 <__lo0bits+0x56>
 8008920:	6013      	str	r3, [r2, #0]
 8008922:	4770      	bx	lr
 8008924:	2000      	movs	r0, #0
 8008926:	4770      	bx	lr
 8008928:	2020      	movs	r0, #32
 800892a:	4770      	bx	lr

0800892c <__i2b>:
 800892c:	b510      	push	{r4, lr}
 800892e:	460c      	mov	r4, r1
 8008930:	2101      	movs	r1, #1
 8008932:	f7ff febd 	bl	80086b0 <_Balloc>
 8008936:	4602      	mov	r2, r0
 8008938:	b928      	cbnz	r0, 8008946 <__i2b+0x1a>
 800893a:	4b05      	ldr	r3, [pc, #20]	@ (8008950 <__i2b+0x24>)
 800893c:	4805      	ldr	r0, [pc, #20]	@ (8008954 <__i2b+0x28>)
 800893e:	f240 1145 	movw	r1, #325	@ 0x145
 8008942:	f001 fc39 	bl	800a1b8 <__assert_func>
 8008946:	2301      	movs	r3, #1
 8008948:	6144      	str	r4, [r0, #20]
 800894a:	6103      	str	r3, [r0, #16]
 800894c:	bd10      	pop	{r4, pc}
 800894e:	bf00      	nop
 8008950:	0800afa5 	.word	0x0800afa5
 8008954:	0800afb6 	.word	0x0800afb6

08008958 <__multiply>:
 8008958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800895c:	4617      	mov	r7, r2
 800895e:	690a      	ldr	r2, [r1, #16]
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	429a      	cmp	r2, r3
 8008964:	bfa8      	it	ge
 8008966:	463b      	movge	r3, r7
 8008968:	4689      	mov	r9, r1
 800896a:	bfa4      	itt	ge
 800896c:	460f      	movge	r7, r1
 800896e:	4699      	movge	r9, r3
 8008970:	693d      	ldr	r5, [r7, #16]
 8008972:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	6879      	ldr	r1, [r7, #4]
 800897a:	eb05 060a 	add.w	r6, r5, sl
 800897e:	42b3      	cmp	r3, r6
 8008980:	b085      	sub	sp, #20
 8008982:	bfb8      	it	lt
 8008984:	3101      	addlt	r1, #1
 8008986:	f7ff fe93 	bl	80086b0 <_Balloc>
 800898a:	b930      	cbnz	r0, 800899a <__multiply+0x42>
 800898c:	4602      	mov	r2, r0
 800898e:	4b41      	ldr	r3, [pc, #260]	@ (8008a94 <__multiply+0x13c>)
 8008990:	4841      	ldr	r0, [pc, #260]	@ (8008a98 <__multiply+0x140>)
 8008992:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008996:	f001 fc0f 	bl	800a1b8 <__assert_func>
 800899a:	f100 0414 	add.w	r4, r0, #20
 800899e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80089a2:	4623      	mov	r3, r4
 80089a4:	2200      	movs	r2, #0
 80089a6:	4573      	cmp	r3, lr
 80089a8:	d320      	bcc.n	80089ec <__multiply+0x94>
 80089aa:	f107 0814 	add.w	r8, r7, #20
 80089ae:	f109 0114 	add.w	r1, r9, #20
 80089b2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80089b6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80089ba:	9302      	str	r3, [sp, #8]
 80089bc:	1beb      	subs	r3, r5, r7
 80089be:	3b15      	subs	r3, #21
 80089c0:	f023 0303 	bic.w	r3, r3, #3
 80089c4:	3304      	adds	r3, #4
 80089c6:	3715      	adds	r7, #21
 80089c8:	42bd      	cmp	r5, r7
 80089ca:	bf38      	it	cc
 80089cc:	2304      	movcc	r3, #4
 80089ce:	9301      	str	r3, [sp, #4]
 80089d0:	9b02      	ldr	r3, [sp, #8]
 80089d2:	9103      	str	r1, [sp, #12]
 80089d4:	428b      	cmp	r3, r1
 80089d6:	d80c      	bhi.n	80089f2 <__multiply+0x9a>
 80089d8:	2e00      	cmp	r6, #0
 80089da:	dd03      	ble.n	80089e4 <__multiply+0x8c>
 80089dc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d055      	beq.n	8008a90 <__multiply+0x138>
 80089e4:	6106      	str	r6, [r0, #16]
 80089e6:	b005      	add	sp, #20
 80089e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ec:	f843 2b04 	str.w	r2, [r3], #4
 80089f0:	e7d9      	b.n	80089a6 <__multiply+0x4e>
 80089f2:	f8b1 a000 	ldrh.w	sl, [r1]
 80089f6:	f1ba 0f00 	cmp.w	sl, #0
 80089fa:	d01f      	beq.n	8008a3c <__multiply+0xe4>
 80089fc:	46c4      	mov	ip, r8
 80089fe:	46a1      	mov	r9, r4
 8008a00:	2700      	movs	r7, #0
 8008a02:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008a06:	f8d9 3000 	ldr.w	r3, [r9]
 8008a0a:	fa1f fb82 	uxth.w	fp, r2
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	fb0a 330b 	mla	r3, sl, fp, r3
 8008a14:	443b      	add	r3, r7
 8008a16:	f8d9 7000 	ldr.w	r7, [r9]
 8008a1a:	0c12      	lsrs	r2, r2, #16
 8008a1c:	0c3f      	lsrs	r7, r7, #16
 8008a1e:	fb0a 7202 	mla	r2, sl, r2, r7
 8008a22:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a2c:	4565      	cmp	r5, ip
 8008a2e:	f849 3b04 	str.w	r3, [r9], #4
 8008a32:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008a36:	d8e4      	bhi.n	8008a02 <__multiply+0xaa>
 8008a38:	9b01      	ldr	r3, [sp, #4]
 8008a3a:	50e7      	str	r7, [r4, r3]
 8008a3c:	9b03      	ldr	r3, [sp, #12]
 8008a3e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008a42:	3104      	adds	r1, #4
 8008a44:	f1b9 0f00 	cmp.w	r9, #0
 8008a48:	d020      	beq.n	8008a8c <__multiply+0x134>
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	4647      	mov	r7, r8
 8008a4e:	46a4      	mov	ip, r4
 8008a50:	f04f 0a00 	mov.w	sl, #0
 8008a54:	f8b7 b000 	ldrh.w	fp, [r7]
 8008a58:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008a5c:	fb09 220b 	mla	r2, r9, fp, r2
 8008a60:	4452      	add	r2, sl
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a68:	f84c 3b04 	str.w	r3, [ip], #4
 8008a6c:	f857 3b04 	ldr.w	r3, [r7], #4
 8008a70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a74:	f8bc 3000 	ldrh.w	r3, [ip]
 8008a78:	fb09 330a 	mla	r3, r9, sl, r3
 8008a7c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008a80:	42bd      	cmp	r5, r7
 8008a82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a86:	d8e5      	bhi.n	8008a54 <__multiply+0xfc>
 8008a88:	9a01      	ldr	r2, [sp, #4]
 8008a8a:	50a3      	str	r3, [r4, r2]
 8008a8c:	3404      	adds	r4, #4
 8008a8e:	e79f      	b.n	80089d0 <__multiply+0x78>
 8008a90:	3e01      	subs	r6, #1
 8008a92:	e7a1      	b.n	80089d8 <__multiply+0x80>
 8008a94:	0800afa5 	.word	0x0800afa5
 8008a98:	0800afb6 	.word	0x0800afb6

08008a9c <__pow5mult>:
 8008a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008aa0:	4615      	mov	r5, r2
 8008aa2:	f012 0203 	ands.w	r2, r2, #3
 8008aa6:	4607      	mov	r7, r0
 8008aa8:	460e      	mov	r6, r1
 8008aaa:	d007      	beq.n	8008abc <__pow5mult+0x20>
 8008aac:	4c25      	ldr	r4, [pc, #148]	@ (8008b44 <__pow5mult+0xa8>)
 8008aae:	3a01      	subs	r2, #1
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ab6:	f7ff fe5d 	bl	8008774 <__multadd>
 8008aba:	4606      	mov	r6, r0
 8008abc:	10ad      	asrs	r5, r5, #2
 8008abe:	d03d      	beq.n	8008b3c <__pow5mult+0xa0>
 8008ac0:	69fc      	ldr	r4, [r7, #28]
 8008ac2:	b97c      	cbnz	r4, 8008ae4 <__pow5mult+0x48>
 8008ac4:	2010      	movs	r0, #16
 8008ac6:	f7ff fd3d 	bl	8008544 <malloc>
 8008aca:	4602      	mov	r2, r0
 8008acc:	61f8      	str	r0, [r7, #28]
 8008ace:	b928      	cbnz	r0, 8008adc <__pow5mult+0x40>
 8008ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8008b48 <__pow5mult+0xac>)
 8008ad2:	481e      	ldr	r0, [pc, #120]	@ (8008b4c <__pow5mult+0xb0>)
 8008ad4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008ad8:	f001 fb6e 	bl	800a1b8 <__assert_func>
 8008adc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ae0:	6004      	str	r4, [r0, #0]
 8008ae2:	60c4      	str	r4, [r0, #12]
 8008ae4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008ae8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008aec:	b94c      	cbnz	r4, 8008b02 <__pow5mult+0x66>
 8008aee:	f240 2171 	movw	r1, #625	@ 0x271
 8008af2:	4638      	mov	r0, r7
 8008af4:	f7ff ff1a 	bl	800892c <__i2b>
 8008af8:	2300      	movs	r3, #0
 8008afa:	f8c8 0008 	str.w	r0, [r8, #8]
 8008afe:	4604      	mov	r4, r0
 8008b00:	6003      	str	r3, [r0, #0]
 8008b02:	f04f 0900 	mov.w	r9, #0
 8008b06:	07eb      	lsls	r3, r5, #31
 8008b08:	d50a      	bpl.n	8008b20 <__pow5mult+0x84>
 8008b0a:	4631      	mov	r1, r6
 8008b0c:	4622      	mov	r2, r4
 8008b0e:	4638      	mov	r0, r7
 8008b10:	f7ff ff22 	bl	8008958 <__multiply>
 8008b14:	4631      	mov	r1, r6
 8008b16:	4680      	mov	r8, r0
 8008b18:	4638      	mov	r0, r7
 8008b1a:	f7ff fe09 	bl	8008730 <_Bfree>
 8008b1e:	4646      	mov	r6, r8
 8008b20:	106d      	asrs	r5, r5, #1
 8008b22:	d00b      	beq.n	8008b3c <__pow5mult+0xa0>
 8008b24:	6820      	ldr	r0, [r4, #0]
 8008b26:	b938      	cbnz	r0, 8008b38 <__pow5mult+0x9c>
 8008b28:	4622      	mov	r2, r4
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	4638      	mov	r0, r7
 8008b2e:	f7ff ff13 	bl	8008958 <__multiply>
 8008b32:	6020      	str	r0, [r4, #0]
 8008b34:	f8c0 9000 	str.w	r9, [r0]
 8008b38:	4604      	mov	r4, r0
 8008b3a:	e7e4      	b.n	8008b06 <__pow5mult+0x6a>
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b42:	bf00      	nop
 8008b44:	0800b0c8 	.word	0x0800b0c8
 8008b48:	0800af36 	.word	0x0800af36
 8008b4c:	0800afb6 	.word	0x0800afb6

08008b50 <__lshift>:
 8008b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b54:	460c      	mov	r4, r1
 8008b56:	6849      	ldr	r1, [r1, #4]
 8008b58:	6923      	ldr	r3, [r4, #16]
 8008b5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b5e:	68a3      	ldr	r3, [r4, #8]
 8008b60:	4607      	mov	r7, r0
 8008b62:	4691      	mov	r9, r2
 8008b64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b68:	f108 0601 	add.w	r6, r8, #1
 8008b6c:	42b3      	cmp	r3, r6
 8008b6e:	db0b      	blt.n	8008b88 <__lshift+0x38>
 8008b70:	4638      	mov	r0, r7
 8008b72:	f7ff fd9d 	bl	80086b0 <_Balloc>
 8008b76:	4605      	mov	r5, r0
 8008b78:	b948      	cbnz	r0, 8008b8e <__lshift+0x3e>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	4b28      	ldr	r3, [pc, #160]	@ (8008c20 <__lshift+0xd0>)
 8008b7e:	4829      	ldr	r0, [pc, #164]	@ (8008c24 <__lshift+0xd4>)
 8008b80:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008b84:	f001 fb18 	bl	800a1b8 <__assert_func>
 8008b88:	3101      	adds	r1, #1
 8008b8a:	005b      	lsls	r3, r3, #1
 8008b8c:	e7ee      	b.n	8008b6c <__lshift+0x1c>
 8008b8e:	2300      	movs	r3, #0
 8008b90:	f100 0114 	add.w	r1, r0, #20
 8008b94:	f100 0210 	add.w	r2, r0, #16
 8008b98:	4618      	mov	r0, r3
 8008b9a:	4553      	cmp	r3, sl
 8008b9c:	db33      	blt.n	8008c06 <__lshift+0xb6>
 8008b9e:	6920      	ldr	r0, [r4, #16]
 8008ba0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ba4:	f104 0314 	add.w	r3, r4, #20
 8008ba8:	f019 091f 	ands.w	r9, r9, #31
 8008bac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008bb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008bb4:	d02b      	beq.n	8008c0e <__lshift+0xbe>
 8008bb6:	f1c9 0e20 	rsb	lr, r9, #32
 8008bba:	468a      	mov	sl, r1
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	6818      	ldr	r0, [r3, #0]
 8008bc0:	fa00 f009 	lsl.w	r0, r0, r9
 8008bc4:	4310      	orrs	r0, r2
 8008bc6:	f84a 0b04 	str.w	r0, [sl], #4
 8008bca:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bce:	459c      	cmp	ip, r3
 8008bd0:	fa22 f20e 	lsr.w	r2, r2, lr
 8008bd4:	d8f3      	bhi.n	8008bbe <__lshift+0x6e>
 8008bd6:	ebac 0304 	sub.w	r3, ip, r4
 8008bda:	3b15      	subs	r3, #21
 8008bdc:	f023 0303 	bic.w	r3, r3, #3
 8008be0:	3304      	adds	r3, #4
 8008be2:	f104 0015 	add.w	r0, r4, #21
 8008be6:	4560      	cmp	r0, ip
 8008be8:	bf88      	it	hi
 8008bea:	2304      	movhi	r3, #4
 8008bec:	50ca      	str	r2, [r1, r3]
 8008bee:	b10a      	cbz	r2, 8008bf4 <__lshift+0xa4>
 8008bf0:	f108 0602 	add.w	r6, r8, #2
 8008bf4:	3e01      	subs	r6, #1
 8008bf6:	4638      	mov	r0, r7
 8008bf8:	612e      	str	r6, [r5, #16]
 8008bfa:	4621      	mov	r1, r4
 8008bfc:	f7ff fd98 	bl	8008730 <_Bfree>
 8008c00:	4628      	mov	r0, r5
 8008c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c06:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	e7c5      	b.n	8008b9a <__lshift+0x4a>
 8008c0e:	3904      	subs	r1, #4
 8008c10:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c14:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c18:	459c      	cmp	ip, r3
 8008c1a:	d8f9      	bhi.n	8008c10 <__lshift+0xc0>
 8008c1c:	e7ea      	b.n	8008bf4 <__lshift+0xa4>
 8008c1e:	bf00      	nop
 8008c20:	0800afa5 	.word	0x0800afa5
 8008c24:	0800afb6 	.word	0x0800afb6

08008c28 <__mcmp>:
 8008c28:	690a      	ldr	r2, [r1, #16]
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	6900      	ldr	r0, [r0, #16]
 8008c2e:	1a80      	subs	r0, r0, r2
 8008c30:	b530      	push	{r4, r5, lr}
 8008c32:	d10e      	bne.n	8008c52 <__mcmp+0x2a>
 8008c34:	3314      	adds	r3, #20
 8008c36:	3114      	adds	r1, #20
 8008c38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008c3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008c40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008c44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008c48:	4295      	cmp	r5, r2
 8008c4a:	d003      	beq.n	8008c54 <__mcmp+0x2c>
 8008c4c:	d205      	bcs.n	8008c5a <__mcmp+0x32>
 8008c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c52:	bd30      	pop	{r4, r5, pc}
 8008c54:	42a3      	cmp	r3, r4
 8008c56:	d3f3      	bcc.n	8008c40 <__mcmp+0x18>
 8008c58:	e7fb      	b.n	8008c52 <__mcmp+0x2a>
 8008c5a:	2001      	movs	r0, #1
 8008c5c:	e7f9      	b.n	8008c52 <__mcmp+0x2a>
	...

08008c60 <__mdiff>:
 8008c60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c64:	4689      	mov	r9, r1
 8008c66:	4606      	mov	r6, r0
 8008c68:	4611      	mov	r1, r2
 8008c6a:	4648      	mov	r0, r9
 8008c6c:	4614      	mov	r4, r2
 8008c6e:	f7ff ffdb 	bl	8008c28 <__mcmp>
 8008c72:	1e05      	subs	r5, r0, #0
 8008c74:	d112      	bne.n	8008c9c <__mdiff+0x3c>
 8008c76:	4629      	mov	r1, r5
 8008c78:	4630      	mov	r0, r6
 8008c7a:	f7ff fd19 	bl	80086b0 <_Balloc>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	b928      	cbnz	r0, 8008c8e <__mdiff+0x2e>
 8008c82:	4b3f      	ldr	r3, [pc, #252]	@ (8008d80 <__mdiff+0x120>)
 8008c84:	f240 2137 	movw	r1, #567	@ 0x237
 8008c88:	483e      	ldr	r0, [pc, #248]	@ (8008d84 <__mdiff+0x124>)
 8008c8a:	f001 fa95 	bl	800a1b8 <__assert_func>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c94:	4610      	mov	r0, r2
 8008c96:	b003      	add	sp, #12
 8008c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c9c:	bfbc      	itt	lt
 8008c9e:	464b      	movlt	r3, r9
 8008ca0:	46a1      	movlt	r9, r4
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008ca8:	bfba      	itte	lt
 8008caa:	461c      	movlt	r4, r3
 8008cac:	2501      	movlt	r5, #1
 8008cae:	2500      	movge	r5, #0
 8008cb0:	f7ff fcfe 	bl	80086b0 <_Balloc>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	b918      	cbnz	r0, 8008cc0 <__mdiff+0x60>
 8008cb8:	4b31      	ldr	r3, [pc, #196]	@ (8008d80 <__mdiff+0x120>)
 8008cba:	f240 2145 	movw	r1, #581	@ 0x245
 8008cbe:	e7e3      	b.n	8008c88 <__mdiff+0x28>
 8008cc0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008cc4:	6926      	ldr	r6, [r4, #16]
 8008cc6:	60c5      	str	r5, [r0, #12]
 8008cc8:	f109 0310 	add.w	r3, r9, #16
 8008ccc:	f109 0514 	add.w	r5, r9, #20
 8008cd0:	f104 0e14 	add.w	lr, r4, #20
 8008cd4:	f100 0b14 	add.w	fp, r0, #20
 8008cd8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008cdc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008ce0:	9301      	str	r3, [sp, #4]
 8008ce2:	46d9      	mov	r9, fp
 8008ce4:	f04f 0c00 	mov.w	ip, #0
 8008ce8:	9b01      	ldr	r3, [sp, #4]
 8008cea:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008cee:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008cf2:	9301      	str	r3, [sp, #4]
 8008cf4:	fa1f f38a 	uxth.w	r3, sl
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	b283      	uxth	r3, r0
 8008cfc:	1acb      	subs	r3, r1, r3
 8008cfe:	0c00      	lsrs	r0, r0, #16
 8008d00:	4463      	add	r3, ip
 8008d02:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008d06:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008d10:	4576      	cmp	r6, lr
 8008d12:	f849 3b04 	str.w	r3, [r9], #4
 8008d16:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d1a:	d8e5      	bhi.n	8008ce8 <__mdiff+0x88>
 8008d1c:	1b33      	subs	r3, r6, r4
 8008d1e:	3b15      	subs	r3, #21
 8008d20:	f023 0303 	bic.w	r3, r3, #3
 8008d24:	3415      	adds	r4, #21
 8008d26:	3304      	adds	r3, #4
 8008d28:	42a6      	cmp	r6, r4
 8008d2a:	bf38      	it	cc
 8008d2c:	2304      	movcc	r3, #4
 8008d2e:	441d      	add	r5, r3
 8008d30:	445b      	add	r3, fp
 8008d32:	461e      	mov	r6, r3
 8008d34:	462c      	mov	r4, r5
 8008d36:	4544      	cmp	r4, r8
 8008d38:	d30e      	bcc.n	8008d58 <__mdiff+0xf8>
 8008d3a:	f108 0103 	add.w	r1, r8, #3
 8008d3e:	1b49      	subs	r1, r1, r5
 8008d40:	f021 0103 	bic.w	r1, r1, #3
 8008d44:	3d03      	subs	r5, #3
 8008d46:	45a8      	cmp	r8, r5
 8008d48:	bf38      	it	cc
 8008d4a:	2100      	movcc	r1, #0
 8008d4c:	440b      	add	r3, r1
 8008d4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d52:	b191      	cbz	r1, 8008d7a <__mdiff+0x11a>
 8008d54:	6117      	str	r7, [r2, #16]
 8008d56:	e79d      	b.n	8008c94 <__mdiff+0x34>
 8008d58:	f854 1b04 	ldr.w	r1, [r4], #4
 8008d5c:	46e6      	mov	lr, ip
 8008d5e:	0c08      	lsrs	r0, r1, #16
 8008d60:	fa1c fc81 	uxtah	ip, ip, r1
 8008d64:	4471      	add	r1, lr
 8008d66:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008d6a:	b289      	uxth	r1, r1
 8008d6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008d70:	f846 1b04 	str.w	r1, [r6], #4
 8008d74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d78:	e7dd      	b.n	8008d36 <__mdiff+0xd6>
 8008d7a:	3f01      	subs	r7, #1
 8008d7c:	e7e7      	b.n	8008d4e <__mdiff+0xee>
 8008d7e:	bf00      	nop
 8008d80:	0800afa5 	.word	0x0800afa5
 8008d84:	0800afb6 	.word	0x0800afb6

08008d88 <__ulp>:
 8008d88:	b082      	sub	sp, #8
 8008d8a:	ed8d 0b00 	vstr	d0, [sp]
 8008d8e:	9a01      	ldr	r2, [sp, #4]
 8008d90:	4b0f      	ldr	r3, [pc, #60]	@ (8008dd0 <__ulp+0x48>)
 8008d92:	4013      	ands	r3, r2
 8008d94:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	dc08      	bgt.n	8008dae <__ulp+0x26>
 8008d9c:	425b      	negs	r3, r3
 8008d9e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008da2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008da6:	da04      	bge.n	8008db2 <__ulp+0x2a>
 8008da8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008dac:	4113      	asrs	r3, r2
 8008dae:	2200      	movs	r2, #0
 8008db0:	e008      	b.n	8008dc4 <__ulp+0x3c>
 8008db2:	f1a2 0314 	sub.w	r3, r2, #20
 8008db6:	2b1e      	cmp	r3, #30
 8008db8:	bfda      	itte	le
 8008dba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008dbe:	40da      	lsrle	r2, r3
 8008dc0:	2201      	movgt	r2, #1
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	ec41 0b10 	vmov	d0, r0, r1
 8008dcc:	b002      	add	sp, #8
 8008dce:	4770      	bx	lr
 8008dd0:	7ff00000 	.word	0x7ff00000

08008dd4 <__b2d>:
 8008dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd8:	6906      	ldr	r6, [r0, #16]
 8008dda:	f100 0814 	add.w	r8, r0, #20
 8008dde:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008de2:	1f37      	subs	r7, r6, #4
 8008de4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008de8:	4610      	mov	r0, r2
 8008dea:	f7ff fd53 	bl	8008894 <__hi0bits>
 8008dee:	f1c0 0320 	rsb	r3, r0, #32
 8008df2:	280a      	cmp	r0, #10
 8008df4:	600b      	str	r3, [r1, #0]
 8008df6:	491b      	ldr	r1, [pc, #108]	@ (8008e64 <__b2d+0x90>)
 8008df8:	dc15      	bgt.n	8008e26 <__b2d+0x52>
 8008dfa:	f1c0 0c0b 	rsb	ip, r0, #11
 8008dfe:	fa22 f30c 	lsr.w	r3, r2, ip
 8008e02:	45b8      	cmp	r8, r7
 8008e04:	ea43 0501 	orr.w	r5, r3, r1
 8008e08:	bf34      	ite	cc
 8008e0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008e0e:	2300      	movcs	r3, #0
 8008e10:	3015      	adds	r0, #21
 8008e12:	fa02 f000 	lsl.w	r0, r2, r0
 8008e16:	fa23 f30c 	lsr.w	r3, r3, ip
 8008e1a:	4303      	orrs	r3, r0
 8008e1c:	461c      	mov	r4, r3
 8008e1e:	ec45 4b10 	vmov	d0, r4, r5
 8008e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e26:	45b8      	cmp	r8, r7
 8008e28:	bf3a      	itte	cc
 8008e2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008e2e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008e32:	2300      	movcs	r3, #0
 8008e34:	380b      	subs	r0, #11
 8008e36:	d012      	beq.n	8008e5e <__b2d+0x8a>
 8008e38:	f1c0 0120 	rsb	r1, r0, #32
 8008e3c:	fa23 f401 	lsr.w	r4, r3, r1
 8008e40:	4082      	lsls	r2, r0
 8008e42:	4322      	orrs	r2, r4
 8008e44:	4547      	cmp	r7, r8
 8008e46:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008e4a:	bf8c      	ite	hi
 8008e4c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008e50:	2200      	movls	r2, #0
 8008e52:	4083      	lsls	r3, r0
 8008e54:	40ca      	lsrs	r2, r1
 8008e56:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	e7de      	b.n	8008e1c <__b2d+0x48>
 8008e5e:	ea42 0501 	orr.w	r5, r2, r1
 8008e62:	e7db      	b.n	8008e1c <__b2d+0x48>
 8008e64:	3ff00000 	.word	0x3ff00000

08008e68 <__d2b>:
 8008e68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e6c:	460f      	mov	r7, r1
 8008e6e:	2101      	movs	r1, #1
 8008e70:	ec59 8b10 	vmov	r8, r9, d0
 8008e74:	4616      	mov	r6, r2
 8008e76:	f7ff fc1b 	bl	80086b0 <_Balloc>
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	b930      	cbnz	r0, 8008e8c <__d2b+0x24>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	4b23      	ldr	r3, [pc, #140]	@ (8008f10 <__d2b+0xa8>)
 8008e82:	4824      	ldr	r0, [pc, #144]	@ (8008f14 <__d2b+0xac>)
 8008e84:	f240 310f 	movw	r1, #783	@ 0x30f
 8008e88:	f001 f996 	bl	800a1b8 <__assert_func>
 8008e8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008e90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e94:	b10d      	cbz	r5, 8008e9a <__d2b+0x32>
 8008e96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e9a:	9301      	str	r3, [sp, #4]
 8008e9c:	f1b8 0300 	subs.w	r3, r8, #0
 8008ea0:	d023      	beq.n	8008eea <__d2b+0x82>
 8008ea2:	4668      	mov	r0, sp
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	f7ff fd14 	bl	80088d2 <__lo0bits>
 8008eaa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008eae:	b1d0      	cbz	r0, 8008ee6 <__d2b+0x7e>
 8008eb0:	f1c0 0320 	rsb	r3, r0, #32
 8008eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb8:	430b      	orrs	r3, r1
 8008eba:	40c2      	lsrs	r2, r0
 8008ebc:	6163      	str	r3, [r4, #20]
 8008ebe:	9201      	str	r2, [sp, #4]
 8008ec0:	9b01      	ldr	r3, [sp, #4]
 8008ec2:	61a3      	str	r3, [r4, #24]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	bf0c      	ite	eq
 8008ec8:	2201      	moveq	r2, #1
 8008eca:	2202      	movne	r2, #2
 8008ecc:	6122      	str	r2, [r4, #16]
 8008ece:	b1a5      	cbz	r5, 8008efa <__d2b+0x92>
 8008ed0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008ed4:	4405      	add	r5, r0
 8008ed6:	603d      	str	r5, [r7, #0]
 8008ed8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008edc:	6030      	str	r0, [r6, #0]
 8008ede:	4620      	mov	r0, r4
 8008ee0:	b003      	add	sp, #12
 8008ee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ee6:	6161      	str	r1, [r4, #20]
 8008ee8:	e7ea      	b.n	8008ec0 <__d2b+0x58>
 8008eea:	a801      	add	r0, sp, #4
 8008eec:	f7ff fcf1 	bl	80088d2 <__lo0bits>
 8008ef0:	9b01      	ldr	r3, [sp, #4]
 8008ef2:	6163      	str	r3, [r4, #20]
 8008ef4:	3020      	adds	r0, #32
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	e7e8      	b.n	8008ecc <__d2b+0x64>
 8008efa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008efe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008f02:	6038      	str	r0, [r7, #0]
 8008f04:	6918      	ldr	r0, [r3, #16]
 8008f06:	f7ff fcc5 	bl	8008894 <__hi0bits>
 8008f0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f0e:	e7e5      	b.n	8008edc <__d2b+0x74>
 8008f10:	0800afa5 	.word	0x0800afa5
 8008f14:	0800afb6 	.word	0x0800afb6

08008f18 <__ratio>:
 8008f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1c:	b085      	sub	sp, #20
 8008f1e:	e9cd 1000 	strd	r1, r0, [sp]
 8008f22:	a902      	add	r1, sp, #8
 8008f24:	f7ff ff56 	bl	8008dd4 <__b2d>
 8008f28:	9800      	ldr	r0, [sp, #0]
 8008f2a:	a903      	add	r1, sp, #12
 8008f2c:	ec55 4b10 	vmov	r4, r5, d0
 8008f30:	f7ff ff50 	bl	8008dd4 <__b2d>
 8008f34:	9b01      	ldr	r3, [sp, #4]
 8008f36:	6919      	ldr	r1, [r3, #16]
 8008f38:	9b00      	ldr	r3, [sp, #0]
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	1ac9      	subs	r1, r1, r3
 8008f3e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008f42:	1a9b      	subs	r3, r3, r2
 8008f44:	ec5b ab10 	vmov	sl, fp, d0
 8008f48:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	bfce      	itee	gt
 8008f50:	462a      	movgt	r2, r5
 8008f52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008f56:	465a      	movle	r2, fp
 8008f58:	462f      	mov	r7, r5
 8008f5a:	46d9      	mov	r9, fp
 8008f5c:	bfcc      	ite	gt
 8008f5e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008f62:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008f66:	464b      	mov	r3, r9
 8008f68:	4652      	mov	r2, sl
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	4639      	mov	r1, r7
 8008f6e:	f7f7 fc75 	bl	800085c <__aeabi_ddiv>
 8008f72:	ec41 0b10 	vmov	d0, r0, r1
 8008f76:	b005      	add	sp, #20
 8008f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f7c <__copybits>:
 8008f7c:	3901      	subs	r1, #1
 8008f7e:	b570      	push	{r4, r5, r6, lr}
 8008f80:	1149      	asrs	r1, r1, #5
 8008f82:	6914      	ldr	r4, [r2, #16]
 8008f84:	3101      	adds	r1, #1
 8008f86:	f102 0314 	add.w	r3, r2, #20
 8008f8a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008f8e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008f92:	1f05      	subs	r5, r0, #4
 8008f94:	42a3      	cmp	r3, r4
 8008f96:	d30c      	bcc.n	8008fb2 <__copybits+0x36>
 8008f98:	1aa3      	subs	r3, r4, r2
 8008f9a:	3b11      	subs	r3, #17
 8008f9c:	f023 0303 	bic.w	r3, r3, #3
 8008fa0:	3211      	adds	r2, #17
 8008fa2:	42a2      	cmp	r2, r4
 8008fa4:	bf88      	it	hi
 8008fa6:	2300      	movhi	r3, #0
 8008fa8:	4418      	add	r0, r3
 8008faa:	2300      	movs	r3, #0
 8008fac:	4288      	cmp	r0, r1
 8008fae:	d305      	bcc.n	8008fbc <__copybits+0x40>
 8008fb0:	bd70      	pop	{r4, r5, r6, pc}
 8008fb2:	f853 6b04 	ldr.w	r6, [r3], #4
 8008fb6:	f845 6f04 	str.w	r6, [r5, #4]!
 8008fba:	e7eb      	b.n	8008f94 <__copybits+0x18>
 8008fbc:	f840 3b04 	str.w	r3, [r0], #4
 8008fc0:	e7f4      	b.n	8008fac <__copybits+0x30>

08008fc2 <__any_on>:
 8008fc2:	f100 0214 	add.w	r2, r0, #20
 8008fc6:	6900      	ldr	r0, [r0, #16]
 8008fc8:	114b      	asrs	r3, r1, #5
 8008fca:	4298      	cmp	r0, r3
 8008fcc:	b510      	push	{r4, lr}
 8008fce:	db11      	blt.n	8008ff4 <__any_on+0x32>
 8008fd0:	dd0a      	ble.n	8008fe8 <__any_on+0x26>
 8008fd2:	f011 011f 	ands.w	r1, r1, #31
 8008fd6:	d007      	beq.n	8008fe8 <__any_on+0x26>
 8008fd8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008fdc:	fa24 f001 	lsr.w	r0, r4, r1
 8008fe0:	fa00 f101 	lsl.w	r1, r0, r1
 8008fe4:	428c      	cmp	r4, r1
 8008fe6:	d10b      	bne.n	8009000 <__any_on+0x3e>
 8008fe8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d803      	bhi.n	8008ff8 <__any_on+0x36>
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	bd10      	pop	{r4, pc}
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	e7f7      	b.n	8008fe8 <__any_on+0x26>
 8008ff8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ffc:	2900      	cmp	r1, #0
 8008ffe:	d0f5      	beq.n	8008fec <__any_on+0x2a>
 8009000:	2001      	movs	r0, #1
 8009002:	e7f6      	b.n	8008ff2 <__any_on+0x30>

08009004 <sulp>:
 8009004:	b570      	push	{r4, r5, r6, lr}
 8009006:	4604      	mov	r4, r0
 8009008:	460d      	mov	r5, r1
 800900a:	ec45 4b10 	vmov	d0, r4, r5
 800900e:	4616      	mov	r6, r2
 8009010:	f7ff feba 	bl	8008d88 <__ulp>
 8009014:	ec51 0b10 	vmov	r0, r1, d0
 8009018:	b17e      	cbz	r6, 800903a <sulp+0x36>
 800901a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800901e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009022:	2b00      	cmp	r3, #0
 8009024:	dd09      	ble.n	800903a <sulp+0x36>
 8009026:	051b      	lsls	r3, r3, #20
 8009028:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800902c:	2400      	movs	r4, #0
 800902e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009032:	4622      	mov	r2, r4
 8009034:	462b      	mov	r3, r5
 8009036:	f7f7 fae7 	bl	8000608 <__aeabi_dmul>
 800903a:	ec41 0b10 	vmov	d0, r0, r1
 800903e:	bd70      	pop	{r4, r5, r6, pc}

08009040 <_strtod_l>:
 8009040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009044:	b09f      	sub	sp, #124	@ 0x7c
 8009046:	460c      	mov	r4, r1
 8009048:	9217      	str	r2, [sp, #92]	@ 0x5c
 800904a:	2200      	movs	r2, #0
 800904c:	921a      	str	r2, [sp, #104]	@ 0x68
 800904e:	9005      	str	r0, [sp, #20]
 8009050:	f04f 0a00 	mov.w	sl, #0
 8009054:	f04f 0b00 	mov.w	fp, #0
 8009058:	460a      	mov	r2, r1
 800905a:	9219      	str	r2, [sp, #100]	@ 0x64
 800905c:	7811      	ldrb	r1, [r2, #0]
 800905e:	292b      	cmp	r1, #43	@ 0x2b
 8009060:	d04a      	beq.n	80090f8 <_strtod_l+0xb8>
 8009062:	d838      	bhi.n	80090d6 <_strtod_l+0x96>
 8009064:	290d      	cmp	r1, #13
 8009066:	d832      	bhi.n	80090ce <_strtod_l+0x8e>
 8009068:	2908      	cmp	r1, #8
 800906a:	d832      	bhi.n	80090d2 <_strtod_l+0x92>
 800906c:	2900      	cmp	r1, #0
 800906e:	d03b      	beq.n	80090e8 <_strtod_l+0xa8>
 8009070:	2200      	movs	r2, #0
 8009072:	920e      	str	r2, [sp, #56]	@ 0x38
 8009074:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009076:	782a      	ldrb	r2, [r5, #0]
 8009078:	2a30      	cmp	r2, #48	@ 0x30
 800907a:	f040 80b2 	bne.w	80091e2 <_strtod_l+0x1a2>
 800907e:	786a      	ldrb	r2, [r5, #1]
 8009080:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009084:	2a58      	cmp	r2, #88	@ 0x58
 8009086:	d16e      	bne.n	8009166 <_strtod_l+0x126>
 8009088:	9302      	str	r3, [sp, #8]
 800908a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800908c:	9301      	str	r3, [sp, #4]
 800908e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009090:	9300      	str	r3, [sp, #0]
 8009092:	4a8f      	ldr	r2, [pc, #572]	@ (80092d0 <_strtod_l+0x290>)
 8009094:	9805      	ldr	r0, [sp, #20]
 8009096:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009098:	a919      	add	r1, sp, #100	@ 0x64
 800909a:	f001 f927 	bl	800a2ec <__gethex>
 800909e:	f010 060f 	ands.w	r6, r0, #15
 80090a2:	4604      	mov	r4, r0
 80090a4:	d005      	beq.n	80090b2 <_strtod_l+0x72>
 80090a6:	2e06      	cmp	r6, #6
 80090a8:	d128      	bne.n	80090fc <_strtod_l+0xbc>
 80090aa:	3501      	adds	r5, #1
 80090ac:	2300      	movs	r3, #0
 80090ae:	9519      	str	r5, [sp, #100]	@ 0x64
 80090b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80090b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f040 858e 	bne.w	8009bd6 <_strtod_l+0xb96>
 80090ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090bc:	b1cb      	cbz	r3, 80090f2 <_strtod_l+0xb2>
 80090be:	4652      	mov	r2, sl
 80090c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80090c4:	ec43 2b10 	vmov	d0, r2, r3
 80090c8:	b01f      	add	sp, #124	@ 0x7c
 80090ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ce:	2920      	cmp	r1, #32
 80090d0:	d1ce      	bne.n	8009070 <_strtod_l+0x30>
 80090d2:	3201      	adds	r2, #1
 80090d4:	e7c1      	b.n	800905a <_strtod_l+0x1a>
 80090d6:	292d      	cmp	r1, #45	@ 0x2d
 80090d8:	d1ca      	bne.n	8009070 <_strtod_l+0x30>
 80090da:	2101      	movs	r1, #1
 80090dc:	910e      	str	r1, [sp, #56]	@ 0x38
 80090de:	1c51      	adds	r1, r2, #1
 80090e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80090e2:	7852      	ldrb	r2, [r2, #1]
 80090e4:	2a00      	cmp	r2, #0
 80090e6:	d1c5      	bne.n	8009074 <_strtod_l+0x34>
 80090e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80090ea:	9419      	str	r4, [sp, #100]	@ 0x64
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f040 8570 	bne.w	8009bd2 <_strtod_l+0xb92>
 80090f2:	4652      	mov	r2, sl
 80090f4:	465b      	mov	r3, fp
 80090f6:	e7e5      	b.n	80090c4 <_strtod_l+0x84>
 80090f8:	2100      	movs	r1, #0
 80090fa:	e7ef      	b.n	80090dc <_strtod_l+0x9c>
 80090fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80090fe:	b13a      	cbz	r2, 8009110 <_strtod_l+0xd0>
 8009100:	2135      	movs	r1, #53	@ 0x35
 8009102:	a81c      	add	r0, sp, #112	@ 0x70
 8009104:	f7ff ff3a 	bl	8008f7c <__copybits>
 8009108:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800910a:	9805      	ldr	r0, [sp, #20]
 800910c:	f7ff fb10 	bl	8008730 <_Bfree>
 8009110:	3e01      	subs	r6, #1
 8009112:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009114:	2e04      	cmp	r6, #4
 8009116:	d806      	bhi.n	8009126 <_strtod_l+0xe6>
 8009118:	e8df f006 	tbb	[pc, r6]
 800911c:	201d0314 	.word	0x201d0314
 8009120:	14          	.byte	0x14
 8009121:	00          	.byte	0x00
 8009122:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009126:	05e1      	lsls	r1, r4, #23
 8009128:	bf48      	it	mi
 800912a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800912e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009132:	0d1b      	lsrs	r3, r3, #20
 8009134:	051b      	lsls	r3, r3, #20
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1bb      	bne.n	80090b2 <_strtod_l+0x72>
 800913a:	f7fe fb2b 	bl	8007794 <__errno>
 800913e:	2322      	movs	r3, #34	@ 0x22
 8009140:	6003      	str	r3, [r0, #0]
 8009142:	e7b6      	b.n	80090b2 <_strtod_l+0x72>
 8009144:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009148:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800914c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009150:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009154:	e7e7      	b.n	8009126 <_strtod_l+0xe6>
 8009156:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80092d8 <_strtod_l+0x298>
 800915a:	e7e4      	b.n	8009126 <_strtod_l+0xe6>
 800915c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009160:	f04f 3aff 	mov.w	sl, #4294967295
 8009164:	e7df      	b.n	8009126 <_strtod_l+0xe6>
 8009166:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009168:	1c5a      	adds	r2, r3, #1
 800916a:	9219      	str	r2, [sp, #100]	@ 0x64
 800916c:	785b      	ldrb	r3, [r3, #1]
 800916e:	2b30      	cmp	r3, #48	@ 0x30
 8009170:	d0f9      	beq.n	8009166 <_strtod_l+0x126>
 8009172:	2b00      	cmp	r3, #0
 8009174:	d09d      	beq.n	80090b2 <_strtod_l+0x72>
 8009176:	2301      	movs	r3, #1
 8009178:	2700      	movs	r7, #0
 800917a:	9308      	str	r3, [sp, #32]
 800917c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800917e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009180:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009182:	46b9      	mov	r9, r7
 8009184:	220a      	movs	r2, #10
 8009186:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009188:	7805      	ldrb	r5, [r0, #0]
 800918a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800918e:	b2d9      	uxtb	r1, r3
 8009190:	2909      	cmp	r1, #9
 8009192:	d928      	bls.n	80091e6 <_strtod_l+0x1a6>
 8009194:	494f      	ldr	r1, [pc, #316]	@ (80092d4 <_strtod_l+0x294>)
 8009196:	2201      	movs	r2, #1
 8009198:	f000 ffd6 	bl	800a148 <strncmp>
 800919c:	2800      	cmp	r0, #0
 800919e:	d032      	beq.n	8009206 <_strtod_l+0x1c6>
 80091a0:	2000      	movs	r0, #0
 80091a2:	462a      	mov	r2, r5
 80091a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80091a6:	464d      	mov	r5, r9
 80091a8:	4603      	mov	r3, r0
 80091aa:	2a65      	cmp	r2, #101	@ 0x65
 80091ac:	d001      	beq.n	80091b2 <_strtod_l+0x172>
 80091ae:	2a45      	cmp	r2, #69	@ 0x45
 80091b0:	d114      	bne.n	80091dc <_strtod_l+0x19c>
 80091b2:	b91d      	cbnz	r5, 80091bc <_strtod_l+0x17c>
 80091b4:	9a08      	ldr	r2, [sp, #32]
 80091b6:	4302      	orrs	r2, r0
 80091b8:	d096      	beq.n	80090e8 <_strtod_l+0xa8>
 80091ba:	2500      	movs	r5, #0
 80091bc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80091be:	1c62      	adds	r2, r4, #1
 80091c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80091c2:	7862      	ldrb	r2, [r4, #1]
 80091c4:	2a2b      	cmp	r2, #43	@ 0x2b
 80091c6:	d07a      	beq.n	80092be <_strtod_l+0x27e>
 80091c8:	2a2d      	cmp	r2, #45	@ 0x2d
 80091ca:	d07e      	beq.n	80092ca <_strtod_l+0x28a>
 80091cc:	f04f 0c00 	mov.w	ip, #0
 80091d0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80091d4:	2909      	cmp	r1, #9
 80091d6:	f240 8085 	bls.w	80092e4 <_strtod_l+0x2a4>
 80091da:	9419      	str	r4, [sp, #100]	@ 0x64
 80091dc:	f04f 0800 	mov.w	r8, #0
 80091e0:	e0a5      	b.n	800932e <_strtod_l+0x2ee>
 80091e2:	2300      	movs	r3, #0
 80091e4:	e7c8      	b.n	8009178 <_strtod_l+0x138>
 80091e6:	f1b9 0f08 	cmp.w	r9, #8
 80091ea:	bfd8      	it	le
 80091ec:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80091ee:	f100 0001 	add.w	r0, r0, #1
 80091f2:	bfda      	itte	le
 80091f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80091f8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80091fa:	fb02 3707 	mlagt	r7, r2, r7, r3
 80091fe:	f109 0901 	add.w	r9, r9, #1
 8009202:	9019      	str	r0, [sp, #100]	@ 0x64
 8009204:	e7bf      	b.n	8009186 <_strtod_l+0x146>
 8009206:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009208:	1c5a      	adds	r2, r3, #1
 800920a:	9219      	str	r2, [sp, #100]	@ 0x64
 800920c:	785a      	ldrb	r2, [r3, #1]
 800920e:	f1b9 0f00 	cmp.w	r9, #0
 8009212:	d03b      	beq.n	800928c <_strtod_l+0x24c>
 8009214:	900a      	str	r0, [sp, #40]	@ 0x28
 8009216:	464d      	mov	r5, r9
 8009218:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800921c:	2b09      	cmp	r3, #9
 800921e:	d912      	bls.n	8009246 <_strtod_l+0x206>
 8009220:	2301      	movs	r3, #1
 8009222:	e7c2      	b.n	80091aa <_strtod_l+0x16a>
 8009224:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009226:	1c5a      	adds	r2, r3, #1
 8009228:	9219      	str	r2, [sp, #100]	@ 0x64
 800922a:	785a      	ldrb	r2, [r3, #1]
 800922c:	3001      	adds	r0, #1
 800922e:	2a30      	cmp	r2, #48	@ 0x30
 8009230:	d0f8      	beq.n	8009224 <_strtod_l+0x1e4>
 8009232:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009236:	2b08      	cmp	r3, #8
 8009238:	f200 84d2 	bhi.w	8009be0 <_strtod_l+0xba0>
 800923c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800923e:	900a      	str	r0, [sp, #40]	@ 0x28
 8009240:	2000      	movs	r0, #0
 8009242:	930c      	str	r3, [sp, #48]	@ 0x30
 8009244:	4605      	mov	r5, r0
 8009246:	3a30      	subs	r2, #48	@ 0x30
 8009248:	f100 0301 	add.w	r3, r0, #1
 800924c:	d018      	beq.n	8009280 <_strtod_l+0x240>
 800924e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009250:	4419      	add	r1, r3
 8009252:	910a      	str	r1, [sp, #40]	@ 0x28
 8009254:	462e      	mov	r6, r5
 8009256:	f04f 0e0a 	mov.w	lr, #10
 800925a:	1c71      	adds	r1, r6, #1
 800925c:	eba1 0c05 	sub.w	ip, r1, r5
 8009260:	4563      	cmp	r3, ip
 8009262:	dc15      	bgt.n	8009290 <_strtod_l+0x250>
 8009264:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009268:	182b      	adds	r3, r5, r0
 800926a:	2b08      	cmp	r3, #8
 800926c:	f105 0501 	add.w	r5, r5, #1
 8009270:	4405      	add	r5, r0
 8009272:	dc1a      	bgt.n	80092aa <_strtod_l+0x26a>
 8009274:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009276:	230a      	movs	r3, #10
 8009278:	fb03 2301 	mla	r3, r3, r1, r2
 800927c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800927e:	2300      	movs	r3, #0
 8009280:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009282:	1c51      	adds	r1, r2, #1
 8009284:	9119      	str	r1, [sp, #100]	@ 0x64
 8009286:	7852      	ldrb	r2, [r2, #1]
 8009288:	4618      	mov	r0, r3
 800928a:	e7c5      	b.n	8009218 <_strtod_l+0x1d8>
 800928c:	4648      	mov	r0, r9
 800928e:	e7ce      	b.n	800922e <_strtod_l+0x1ee>
 8009290:	2e08      	cmp	r6, #8
 8009292:	dc05      	bgt.n	80092a0 <_strtod_l+0x260>
 8009294:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009296:	fb0e f606 	mul.w	r6, lr, r6
 800929a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800929c:	460e      	mov	r6, r1
 800929e:	e7dc      	b.n	800925a <_strtod_l+0x21a>
 80092a0:	2910      	cmp	r1, #16
 80092a2:	bfd8      	it	le
 80092a4:	fb0e f707 	mulle.w	r7, lr, r7
 80092a8:	e7f8      	b.n	800929c <_strtod_l+0x25c>
 80092aa:	2b0f      	cmp	r3, #15
 80092ac:	bfdc      	itt	le
 80092ae:	230a      	movle	r3, #10
 80092b0:	fb03 2707 	mlale	r7, r3, r7, r2
 80092b4:	e7e3      	b.n	800927e <_strtod_l+0x23e>
 80092b6:	2300      	movs	r3, #0
 80092b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80092ba:	2301      	movs	r3, #1
 80092bc:	e77a      	b.n	80091b4 <_strtod_l+0x174>
 80092be:	f04f 0c00 	mov.w	ip, #0
 80092c2:	1ca2      	adds	r2, r4, #2
 80092c4:	9219      	str	r2, [sp, #100]	@ 0x64
 80092c6:	78a2      	ldrb	r2, [r4, #2]
 80092c8:	e782      	b.n	80091d0 <_strtod_l+0x190>
 80092ca:	f04f 0c01 	mov.w	ip, #1
 80092ce:	e7f8      	b.n	80092c2 <_strtod_l+0x282>
 80092d0:	0800b1dc 	.word	0x0800b1dc
 80092d4:	0800b00f 	.word	0x0800b00f
 80092d8:	7ff00000 	.word	0x7ff00000
 80092dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80092de:	1c51      	adds	r1, r2, #1
 80092e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80092e2:	7852      	ldrb	r2, [r2, #1]
 80092e4:	2a30      	cmp	r2, #48	@ 0x30
 80092e6:	d0f9      	beq.n	80092dc <_strtod_l+0x29c>
 80092e8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80092ec:	2908      	cmp	r1, #8
 80092ee:	f63f af75 	bhi.w	80091dc <_strtod_l+0x19c>
 80092f2:	3a30      	subs	r2, #48	@ 0x30
 80092f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80092f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80092f8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80092fa:	f04f 080a 	mov.w	r8, #10
 80092fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009300:	1c56      	adds	r6, r2, #1
 8009302:	9619      	str	r6, [sp, #100]	@ 0x64
 8009304:	7852      	ldrb	r2, [r2, #1]
 8009306:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800930a:	f1be 0f09 	cmp.w	lr, #9
 800930e:	d939      	bls.n	8009384 <_strtod_l+0x344>
 8009310:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009312:	1a76      	subs	r6, r6, r1
 8009314:	2e08      	cmp	r6, #8
 8009316:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800931a:	dc03      	bgt.n	8009324 <_strtod_l+0x2e4>
 800931c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800931e:	4588      	cmp	r8, r1
 8009320:	bfa8      	it	ge
 8009322:	4688      	movge	r8, r1
 8009324:	f1bc 0f00 	cmp.w	ip, #0
 8009328:	d001      	beq.n	800932e <_strtod_l+0x2ee>
 800932a:	f1c8 0800 	rsb	r8, r8, #0
 800932e:	2d00      	cmp	r5, #0
 8009330:	d14e      	bne.n	80093d0 <_strtod_l+0x390>
 8009332:	9908      	ldr	r1, [sp, #32]
 8009334:	4308      	orrs	r0, r1
 8009336:	f47f aebc 	bne.w	80090b2 <_strtod_l+0x72>
 800933a:	2b00      	cmp	r3, #0
 800933c:	f47f aed4 	bne.w	80090e8 <_strtod_l+0xa8>
 8009340:	2a69      	cmp	r2, #105	@ 0x69
 8009342:	d028      	beq.n	8009396 <_strtod_l+0x356>
 8009344:	dc25      	bgt.n	8009392 <_strtod_l+0x352>
 8009346:	2a49      	cmp	r2, #73	@ 0x49
 8009348:	d025      	beq.n	8009396 <_strtod_l+0x356>
 800934a:	2a4e      	cmp	r2, #78	@ 0x4e
 800934c:	f47f aecc 	bne.w	80090e8 <_strtod_l+0xa8>
 8009350:	499a      	ldr	r1, [pc, #616]	@ (80095bc <_strtod_l+0x57c>)
 8009352:	a819      	add	r0, sp, #100	@ 0x64
 8009354:	f001 f9ec 	bl	800a730 <__match>
 8009358:	2800      	cmp	r0, #0
 800935a:	f43f aec5 	beq.w	80090e8 <_strtod_l+0xa8>
 800935e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	2b28      	cmp	r3, #40	@ 0x28
 8009364:	d12e      	bne.n	80093c4 <_strtod_l+0x384>
 8009366:	4996      	ldr	r1, [pc, #600]	@ (80095c0 <_strtod_l+0x580>)
 8009368:	aa1c      	add	r2, sp, #112	@ 0x70
 800936a:	a819      	add	r0, sp, #100	@ 0x64
 800936c:	f001 f9f4 	bl	800a758 <__hexnan>
 8009370:	2805      	cmp	r0, #5
 8009372:	d127      	bne.n	80093c4 <_strtod_l+0x384>
 8009374:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009376:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800937a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800937e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009382:	e696      	b.n	80090b2 <_strtod_l+0x72>
 8009384:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009386:	fb08 2101 	mla	r1, r8, r1, r2
 800938a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800938e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009390:	e7b5      	b.n	80092fe <_strtod_l+0x2be>
 8009392:	2a6e      	cmp	r2, #110	@ 0x6e
 8009394:	e7da      	b.n	800934c <_strtod_l+0x30c>
 8009396:	498b      	ldr	r1, [pc, #556]	@ (80095c4 <_strtod_l+0x584>)
 8009398:	a819      	add	r0, sp, #100	@ 0x64
 800939a:	f001 f9c9 	bl	800a730 <__match>
 800939e:	2800      	cmp	r0, #0
 80093a0:	f43f aea2 	beq.w	80090e8 <_strtod_l+0xa8>
 80093a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093a6:	4988      	ldr	r1, [pc, #544]	@ (80095c8 <_strtod_l+0x588>)
 80093a8:	3b01      	subs	r3, #1
 80093aa:	a819      	add	r0, sp, #100	@ 0x64
 80093ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80093ae:	f001 f9bf 	bl	800a730 <__match>
 80093b2:	b910      	cbnz	r0, 80093ba <_strtod_l+0x37a>
 80093b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093b6:	3301      	adds	r3, #1
 80093b8:	9319      	str	r3, [sp, #100]	@ 0x64
 80093ba:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80095d8 <_strtod_l+0x598>
 80093be:	f04f 0a00 	mov.w	sl, #0
 80093c2:	e676      	b.n	80090b2 <_strtod_l+0x72>
 80093c4:	4881      	ldr	r0, [pc, #516]	@ (80095cc <_strtod_l+0x58c>)
 80093c6:	f000 feef 	bl	800a1a8 <nan>
 80093ca:	ec5b ab10 	vmov	sl, fp, d0
 80093ce:	e670      	b.n	80090b2 <_strtod_l+0x72>
 80093d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093d2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80093d4:	eba8 0303 	sub.w	r3, r8, r3
 80093d8:	f1b9 0f00 	cmp.w	r9, #0
 80093dc:	bf08      	it	eq
 80093de:	46a9      	moveq	r9, r5
 80093e0:	2d10      	cmp	r5, #16
 80093e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80093e4:	462c      	mov	r4, r5
 80093e6:	bfa8      	it	ge
 80093e8:	2410      	movge	r4, #16
 80093ea:	f7f7 f893 	bl	8000514 <__aeabi_ui2d>
 80093ee:	2d09      	cmp	r5, #9
 80093f0:	4682      	mov	sl, r0
 80093f2:	468b      	mov	fp, r1
 80093f4:	dc13      	bgt.n	800941e <_strtod_l+0x3de>
 80093f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f43f ae5a 	beq.w	80090b2 <_strtod_l+0x72>
 80093fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009400:	dd78      	ble.n	80094f4 <_strtod_l+0x4b4>
 8009402:	2b16      	cmp	r3, #22
 8009404:	dc5f      	bgt.n	80094c6 <_strtod_l+0x486>
 8009406:	4972      	ldr	r1, [pc, #456]	@ (80095d0 <_strtod_l+0x590>)
 8009408:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800940c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009410:	4652      	mov	r2, sl
 8009412:	465b      	mov	r3, fp
 8009414:	f7f7 f8f8 	bl	8000608 <__aeabi_dmul>
 8009418:	4682      	mov	sl, r0
 800941a:	468b      	mov	fp, r1
 800941c:	e649      	b.n	80090b2 <_strtod_l+0x72>
 800941e:	4b6c      	ldr	r3, [pc, #432]	@ (80095d0 <_strtod_l+0x590>)
 8009420:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009424:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009428:	f7f7 f8ee 	bl	8000608 <__aeabi_dmul>
 800942c:	4682      	mov	sl, r0
 800942e:	4638      	mov	r0, r7
 8009430:	468b      	mov	fp, r1
 8009432:	f7f7 f86f 	bl	8000514 <__aeabi_ui2d>
 8009436:	4602      	mov	r2, r0
 8009438:	460b      	mov	r3, r1
 800943a:	4650      	mov	r0, sl
 800943c:	4659      	mov	r1, fp
 800943e:	f7f6 ff2d 	bl	800029c <__adddf3>
 8009442:	2d0f      	cmp	r5, #15
 8009444:	4682      	mov	sl, r0
 8009446:	468b      	mov	fp, r1
 8009448:	ddd5      	ble.n	80093f6 <_strtod_l+0x3b6>
 800944a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800944c:	1b2c      	subs	r4, r5, r4
 800944e:	441c      	add	r4, r3
 8009450:	2c00      	cmp	r4, #0
 8009452:	f340 8093 	ble.w	800957c <_strtod_l+0x53c>
 8009456:	f014 030f 	ands.w	r3, r4, #15
 800945a:	d00a      	beq.n	8009472 <_strtod_l+0x432>
 800945c:	495c      	ldr	r1, [pc, #368]	@ (80095d0 <_strtod_l+0x590>)
 800945e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009462:	4652      	mov	r2, sl
 8009464:	465b      	mov	r3, fp
 8009466:	e9d1 0100 	ldrd	r0, r1, [r1]
 800946a:	f7f7 f8cd 	bl	8000608 <__aeabi_dmul>
 800946e:	4682      	mov	sl, r0
 8009470:	468b      	mov	fp, r1
 8009472:	f034 040f 	bics.w	r4, r4, #15
 8009476:	d073      	beq.n	8009560 <_strtod_l+0x520>
 8009478:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800947c:	dd49      	ble.n	8009512 <_strtod_l+0x4d2>
 800947e:	2400      	movs	r4, #0
 8009480:	46a0      	mov	r8, r4
 8009482:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009484:	46a1      	mov	r9, r4
 8009486:	9a05      	ldr	r2, [sp, #20]
 8009488:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80095d8 <_strtod_l+0x598>
 800948c:	2322      	movs	r3, #34	@ 0x22
 800948e:	6013      	str	r3, [r2, #0]
 8009490:	f04f 0a00 	mov.w	sl, #0
 8009494:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009496:	2b00      	cmp	r3, #0
 8009498:	f43f ae0b 	beq.w	80090b2 <_strtod_l+0x72>
 800949c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800949e:	9805      	ldr	r0, [sp, #20]
 80094a0:	f7ff f946 	bl	8008730 <_Bfree>
 80094a4:	9805      	ldr	r0, [sp, #20]
 80094a6:	4649      	mov	r1, r9
 80094a8:	f7ff f942 	bl	8008730 <_Bfree>
 80094ac:	9805      	ldr	r0, [sp, #20]
 80094ae:	4641      	mov	r1, r8
 80094b0:	f7ff f93e 	bl	8008730 <_Bfree>
 80094b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094b6:	9805      	ldr	r0, [sp, #20]
 80094b8:	f7ff f93a 	bl	8008730 <_Bfree>
 80094bc:	9805      	ldr	r0, [sp, #20]
 80094be:	4621      	mov	r1, r4
 80094c0:	f7ff f936 	bl	8008730 <_Bfree>
 80094c4:	e5f5      	b.n	80090b2 <_strtod_l+0x72>
 80094c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80094cc:	4293      	cmp	r3, r2
 80094ce:	dbbc      	blt.n	800944a <_strtod_l+0x40a>
 80094d0:	4c3f      	ldr	r4, [pc, #252]	@ (80095d0 <_strtod_l+0x590>)
 80094d2:	f1c5 050f 	rsb	r5, r5, #15
 80094d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80094da:	4652      	mov	r2, sl
 80094dc:	465b      	mov	r3, fp
 80094de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094e2:	f7f7 f891 	bl	8000608 <__aeabi_dmul>
 80094e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094e8:	1b5d      	subs	r5, r3, r5
 80094ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80094ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80094f2:	e78f      	b.n	8009414 <_strtod_l+0x3d4>
 80094f4:	3316      	adds	r3, #22
 80094f6:	dba8      	blt.n	800944a <_strtod_l+0x40a>
 80094f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094fa:	eba3 0808 	sub.w	r8, r3, r8
 80094fe:	4b34      	ldr	r3, [pc, #208]	@ (80095d0 <_strtod_l+0x590>)
 8009500:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009504:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009508:	4650      	mov	r0, sl
 800950a:	4659      	mov	r1, fp
 800950c:	f7f7 f9a6 	bl	800085c <__aeabi_ddiv>
 8009510:	e782      	b.n	8009418 <_strtod_l+0x3d8>
 8009512:	2300      	movs	r3, #0
 8009514:	4f2f      	ldr	r7, [pc, #188]	@ (80095d4 <_strtod_l+0x594>)
 8009516:	1124      	asrs	r4, r4, #4
 8009518:	4650      	mov	r0, sl
 800951a:	4659      	mov	r1, fp
 800951c:	461e      	mov	r6, r3
 800951e:	2c01      	cmp	r4, #1
 8009520:	dc21      	bgt.n	8009566 <_strtod_l+0x526>
 8009522:	b10b      	cbz	r3, 8009528 <_strtod_l+0x4e8>
 8009524:	4682      	mov	sl, r0
 8009526:	468b      	mov	fp, r1
 8009528:	492a      	ldr	r1, [pc, #168]	@ (80095d4 <_strtod_l+0x594>)
 800952a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800952e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009532:	4652      	mov	r2, sl
 8009534:	465b      	mov	r3, fp
 8009536:	e9d1 0100 	ldrd	r0, r1, [r1]
 800953a:	f7f7 f865 	bl	8000608 <__aeabi_dmul>
 800953e:	4b26      	ldr	r3, [pc, #152]	@ (80095d8 <_strtod_l+0x598>)
 8009540:	460a      	mov	r2, r1
 8009542:	400b      	ands	r3, r1
 8009544:	4925      	ldr	r1, [pc, #148]	@ (80095dc <_strtod_l+0x59c>)
 8009546:	428b      	cmp	r3, r1
 8009548:	4682      	mov	sl, r0
 800954a:	d898      	bhi.n	800947e <_strtod_l+0x43e>
 800954c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009550:	428b      	cmp	r3, r1
 8009552:	bf86      	itte	hi
 8009554:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80095e0 <_strtod_l+0x5a0>
 8009558:	f04f 3aff 	movhi.w	sl, #4294967295
 800955c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009560:	2300      	movs	r3, #0
 8009562:	9308      	str	r3, [sp, #32]
 8009564:	e076      	b.n	8009654 <_strtod_l+0x614>
 8009566:	07e2      	lsls	r2, r4, #31
 8009568:	d504      	bpl.n	8009574 <_strtod_l+0x534>
 800956a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800956e:	f7f7 f84b 	bl	8000608 <__aeabi_dmul>
 8009572:	2301      	movs	r3, #1
 8009574:	3601      	adds	r6, #1
 8009576:	1064      	asrs	r4, r4, #1
 8009578:	3708      	adds	r7, #8
 800957a:	e7d0      	b.n	800951e <_strtod_l+0x4de>
 800957c:	d0f0      	beq.n	8009560 <_strtod_l+0x520>
 800957e:	4264      	negs	r4, r4
 8009580:	f014 020f 	ands.w	r2, r4, #15
 8009584:	d00a      	beq.n	800959c <_strtod_l+0x55c>
 8009586:	4b12      	ldr	r3, [pc, #72]	@ (80095d0 <_strtod_l+0x590>)
 8009588:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800958c:	4650      	mov	r0, sl
 800958e:	4659      	mov	r1, fp
 8009590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009594:	f7f7 f962 	bl	800085c <__aeabi_ddiv>
 8009598:	4682      	mov	sl, r0
 800959a:	468b      	mov	fp, r1
 800959c:	1124      	asrs	r4, r4, #4
 800959e:	d0df      	beq.n	8009560 <_strtod_l+0x520>
 80095a0:	2c1f      	cmp	r4, #31
 80095a2:	dd1f      	ble.n	80095e4 <_strtod_l+0x5a4>
 80095a4:	2400      	movs	r4, #0
 80095a6:	46a0      	mov	r8, r4
 80095a8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80095aa:	46a1      	mov	r9, r4
 80095ac:	9a05      	ldr	r2, [sp, #20]
 80095ae:	2322      	movs	r3, #34	@ 0x22
 80095b0:	f04f 0a00 	mov.w	sl, #0
 80095b4:	f04f 0b00 	mov.w	fp, #0
 80095b8:	6013      	str	r3, [r2, #0]
 80095ba:	e76b      	b.n	8009494 <_strtod_l+0x454>
 80095bc:	0800aefd 	.word	0x0800aefd
 80095c0:	0800b1c8 	.word	0x0800b1c8
 80095c4:	0800aef5 	.word	0x0800aef5
 80095c8:	0800af2c 	.word	0x0800af2c
 80095cc:	0800b065 	.word	0x0800b065
 80095d0:	0800b100 	.word	0x0800b100
 80095d4:	0800b0d8 	.word	0x0800b0d8
 80095d8:	7ff00000 	.word	0x7ff00000
 80095dc:	7ca00000 	.word	0x7ca00000
 80095e0:	7fefffff 	.word	0x7fefffff
 80095e4:	f014 0310 	ands.w	r3, r4, #16
 80095e8:	bf18      	it	ne
 80095ea:	236a      	movne	r3, #106	@ 0x6a
 80095ec:	4ea9      	ldr	r6, [pc, #676]	@ (8009894 <_strtod_l+0x854>)
 80095ee:	9308      	str	r3, [sp, #32]
 80095f0:	4650      	mov	r0, sl
 80095f2:	4659      	mov	r1, fp
 80095f4:	2300      	movs	r3, #0
 80095f6:	07e7      	lsls	r7, r4, #31
 80095f8:	d504      	bpl.n	8009604 <_strtod_l+0x5c4>
 80095fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80095fe:	f7f7 f803 	bl	8000608 <__aeabi_dmul>
 8009602:	2301      	movs	r3, #1
 8009604:	1064      	asrs	r4, r4, #1
 8009606:	f106 0608 	add.w	r6, r6, #8
 800960a:	d1f4      	bne.n	80095f6 <_strtod_l+0x5b6>
 800960c:	b10b      	cbz	r3, 8009612 <_strtod_l+0x5d2>
 800960e:	4682      	mov	sl, r0
 8009610:	468b      	mov	fp, r1
 8009612:	9b08      	ldr	r3, [sp, #32]
 8009614:	b1b3      	cbz	r3, 8009644 <_strtod_l+0x604>
 8009616:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800961a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800961e:	2b00      	cmp	r3, #0
 8009620:	4659      	mov	r1, fp
 8009622:	dd0f      	ble.n	8009644 <_strtod_l+0x604>
 8009624:	2b1f      	cmp	r3, #31
 8009626:	dd56      	ble.n	80096d6 <_strtod_l+0x696>
 8009628:	2b34      	cmp	r3, #52	@ 0x34
 800962a:	bfde      	ittt	le
 800962c:	f04f 33ff 	movle.w	r3, #4294967295
 8009630:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009634:	4093      	lslle	r3, r2
 8009636:	f04f 0a00 	mov.w	sl, #0
 800963a:	bfcc      	ite	gt
 800963c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009640:	ea03 0b01 	andle.w	fp, r3, r1
 8009644:	2200      	movs	r2, #0
 8009646:	2300      	movs	r3, #0
 8009648:	4650      	mov	r0, sl
 800964a:	4659      	mov	r1, fp
 800964c:	f7f7 fa44 	bl	8000ad8 <__aeabi_dcmpeq>
 8009650:	2800      	cmp	r0, #0
 8009652:	d1a7      	bne.n	80095a4 <_strtod_l+0x564>
 8009654:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800965a:	9805      	ldr	r0, [sp, #20]
 800965c:	462b      	mov	r3, r5
 800965e:	464a      	mov	r2, r9
 8009660:	f7ff f8ce 	bl	8008800 <__s2b>
 8009664:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009666:	2800      	cmp	r0, #0
 8009668:	f43f af09 	beq.w	800947e <_strtod_l+0x43e>
 800966c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800966e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009670:	2a00      	cmp	r2, #0
 8009672:	eba3 0308 	sub.w	r3, r3, r8
 8009676:	bfa8      	it	ge
 8009678:	2300      	movge	r3, #0
 800967a:	9312      	str	r3, [sp, #72]	@ 0x48
 800967c:	2400      	movs	r4, #0
 800967e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009682:	9316      	str	r3, [sp, #88]	@ 0x58
 8009684:	46a0      	mov	r8, r4
 8009686:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009688:	9805      	ldr	r0, [sp, #20]
 800968a:	6859      	ldr	r1, [r3, #4]
 800968c:	f7ff f810 	bl	80086b0 <_Balloc>
 8009690:	4681      	mov	r9, r0
 8009692:	2800      	cmp	r0, #0
 8009694:	f43f aef7 	beq.w	8009486 <_strtod_l+0x446>
 8009698:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800969a:	691a      	ldr	r2, [r3, #16]
 800969c:	3202      	adds	r2, #2
 800969e:	f103 010c 	add.w	r1, r3, #12
 80096a2:	0092      	lsls	r2, r2, #2
 80096a4:	300c      	adds	r0, #12
 80096a6:	f000 fd71 	bl	800a18c <memcpy>
 80096aa:	ec4b ab10 	vmov	d0, sl, fp
 80096ae:	9805      	ldr	r0, [sp, #20]
 80096b0:	aa1c      	add	r2, sp, #112	@ 0x70
 80096b2:	a91b      	add	r1, sp, #108	@ 0x6c
 80096b4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80096b8:	f7ff fbd6 	bl	8008e68 <__d2b>
 80096bc:	901a      	str	r0, [sp, #104]	@ 0x68
 80096be:	2800      	cmp	r0, #0
 80096c0:	f43f aee1 	beq.w	8009486 <_strtod_l+0x446>
 80096c4:	9805      	ldr	r0, [sp, #20]
 80096c6:	2101      	movs	r1, #1
 80096c8:	f7ff f930 	bl	800892c <__i2b>
 80096cc:	4680      	mov	r8, r0
 80096ce:	b948      	cbnz	r0, 80096e4 <_strtod_l+0x6a4>
 80096d0:	f04f 0800 	mov.w	r8, #0
 80096d4:	e6d7      	b.n	8009486 <_strtod_l+0x446>
 80096d6:	f04f 32ff 	mov.w	r2, #4294967295
 80096da:	fa02 f303 	lsl.w	r3, r2, r3
 80096de:	ea03 0a0a 	and.w	sl, r3, sl
 80096e2:	e7af      	b.n	8009644 <_strtod_l+0x604>
 80096e4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80096e6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80096e8:	2d00      	cmp	r5, #0
 80096ea:	bfab      	itete	ge
 80096ec:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80096ee:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80096f0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80096f2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80096f4:	bfac      	ite	ge
 80096f6:	18ef      	addge	r7, r5, r3
 80096f8:	1b5e      	sublt	r6, r3, r5
 80096fa:	9b08      	ldr	r3, [sp, #32]
 80096fc:	1aed      	subs	r5, r5, r3
 80096fe:	4415      	add	r5, r2
 8009700:	4b65      	ldr	r3, [pc, #404]	@ (8009898 <_strtod_l+0x858>)
 8009702:	3d01      	subs	r5, #1
 8009704:	429d      	cmp	r5, r3
 8009706:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800970a:	da50      	bge.n	80097ae <_strtod_l+0x76e>
 800970c:	1b5b      	subs	r3, r3, r5
 800970e:	2b1f      	cmp	r3, #31
 8009710:	eba2 0203 	sub.w	r2, r2, r3
 8009714:	f04f 0101 	mov.w	r1, #1
 8009718:	dc3d      	bgt.n	8009796 <_strtod_l+0x756>
 800971a:	fa01 f303 	lsl.w	r3, r1, r3
 800971e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009720:	2300      	movs	r3, #0
 8009722:	9310      	str	r3, [sp, #64]	@ 0x40
 8009724:	18bd      	adds	r5, r7, r2
 8009726:	9b08      	ldr	r3, [sp, #32]
 8009728:	42af      	cmp	r7, r5
 800972a:	4416      	add	r6, r2
 800972c:	441e      	add	r6, r3
 800972e:	463b      	mov	r3, r7
 8009730:	bfa8      	it	ge
 8009732:	462b      	movge	r3, r5
 8009734:	42b3      	cmp	r3, r6
 8009736:	bfa8      	it	ge
 8009738:	4633      	movge	r3, r6
 800973a:	2b00      	cmp	r3, #0
 800973c:	bfc2      	ittt	gt
 800973e:	1aed      	subgt	r5, r5, r3
 8009740:	1af6      	subgt	r6, r6, r3
 8009742:	1aff      	subgt	r7, r7, r3
 8009744:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009746:	2b00      	cmp	r3, #0
 8009748:	dd16      	ble.n	8009778 <_strtod_l+0x738>
 800974a:	4641      	mov	r1, r8
 800974c:	9805      	ldr	r0, [sp, #20]
 800974e:	461a      	mov	r2, r3
 8009750:	f7ff f9a4 	bl	8008a9c <__pow5mult>
 8009754:	4680      	mov	r8, r0
 8009756:	2800      	cmp	r0, #0
 8009758:	d0ba      	beq.n	80096d0 <_strtod_l+0x690>
 800975a:	4601      	mov	r1, r0
 800975c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800975e:	9805      	ldr	r0, [sp, #20]
 8009760:	f7ff f8fa 	bl	8008958 <__multiply>
 8009764:	900a      	str	r0, [sp, #40]	@ 0x28
 8009766:	2800      	cmp	r0, #0
 8009768:	f43f ae8d 	beq.w	8009486 <_strtod_l+0x446>
 800976c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800976e:	9805      	ldr	r0, [sp, #20]
 8009770:	f7fe ffde 	bl	8008730 <_Bfree>
 8009774:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009776:	931a      	str	r3, [sp, #104]	@ 0x68
 8009778:	2d00      	cmp	r5, #0
 800977a:	dc1d      	bgt.n	80097b8 <_strtod_l+0x778>
 800977c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800977e:	2b00      	cmp	r3, #0
 8009780:	dd23      	ble.n	80097ca <_strtod_l+0x78a>
 8009782:	4649      	mov	r1, r9
 8009784:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009786:	9805      	ldr	r0, [sp, #20]
 8009788:	f7ff f988 	bl	8008a9c <__pow5mult>
 800978c:	4681      	mov	r9, r0
 800978e:	b9e0      	cbnz	r0, 80097ca <_strtod_l+0x78a>
 8009790:	f04f 0900 	mov.w	r9, #0
 8009794:	e677      	b.n	8009486 <_strtod_l+0x446>
 8009796:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800979a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800979e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80097a2:	35e2      	adds	r5, #226	@ 0xe2
 80097a4:	fa01 f305 	lsl.w	r3, r1, r5
 80097a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80097aa:	9113      	str	r1, [sp, #76]	@ 0x4c
 80097ac:	e7ba      	b.n	8009724 <_strtod_l+0x6e4>
 80097ae:	2300      	movs	r3, #0
 80097b0:	9310      	str	r3, [sp, #64]	@ 0x40
 80097b2:	2301      	movs	r3, #1
 80097b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80097b6:	e7b5      	b.n	8009724 <_strtod_l+0x6e4>
 80097b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80097ba:	9805      	ldr	r0, [sp, #20]
 80097bc:	462a      	mov	r2, r5
 80097be:	f7ff f9c7 	bl	8008b50 <__lshift>
 80097c2:	901a      	str	r0, [sp, #104]	@ 0x68
 80097c4:	2800      	cmp	r0, #0
 80097c6:	d1d9      	bne.n	800977c <_strtod_l+0x73c>
 80097c8:	e65d      	b.n	8009486 <_strtod_l+0x446>
 80097ca:	2e00      	cmp	r6, #0
 80097cc:	dd07      	ble.n	80097de <_strtod_l+0x79e>
 80097ce:	4649      	mov	r1, r9
 80097d0:	9805      	ldr	r0, [sp, #20]
 80097d2:	4632      	mov	r2, r6
 80097d4:	f7ff f9bc 	bl	8008b50 <__lshift>
 80097d8:	4681      	mov	r9, r0
 80097da:	2800      	cmp	r0, #0
 80097dc:	d0d8      	beq.n	8009790 <_strtod_l+0x750>
 80097de:	2f00      	cmp	r7, #0
 80097e0:	dd08      	ble.n	80097f4 <_strtod_l+0x7b4>
 80097e2:	4641      	mov	r1, r8
 80097e4:	9805      	ldr	r0, [sp, #20]
 80097e6:	463a      	mov	r2, r7
 80097e8:	f7ff f9b2 	bl	8008b50 <__lshift>
 80097ec:	4680      	mov	r8, r0
 80097ee:	2800      	cmp	r0, #0
 80097f0:	f43f ae49 	beq.w	8009486 <_strtod_l+0x446>
 80097f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80097f6:	9805      	ldr	r0, [sp, #20]
 80097f8:	464a      	mov	r2, r9
 80097fa:	f7ff fa31 	bl	8008c60 <__mdiff>
 80097fe:	4604      	mov	r4, r0
 8009800:	2800      	cmp	r0, #0
 8009802:	f43f ae40 	beq.w	8009486 <_strtod_l+0x446>
 8009806:	68c3      	ldr	r3, [r0, #12]
 8009808:	930f      	str	r3, [sp, #60]	@ 0x3c
 800980a:	2300      	movs	r3, #0
 800980c:	60c3      	str	r3, [r0, #12]
 800980e:	4641      	mov	r1, r8
 8009810:	f7ff fa0a 	bl	8008c28 <__mcmp>
 8009814:	2800      	cmp	r0, #0
 8009816:	da45      	bge.n	80098a4 <_strtod_l+0x864>
 8009818:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800981a:	ea53 030a 	orrs.w	r3, r3, sl
 800981e:	d16b      	bne.n	80098f8 <_strtod_l+0x8b8>
 8009820:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009824:	2b00      	cmp	r3, #0
 8009826:	d167      	bne.n	80098f8 <_strtod_l+0x8b8>
 8009828:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800982c:	0d1b      	lsrs	r3, r3, #20
 800982e:	051b      	lsls	r3, r3, #20
 8009830:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009834:	d960      	bls.n	80098f8 <_strtod_l+0x8b8>
 8009836:	6963      	ldr	r3, [r4, #20]
 8009838:	b913      	cbnz	r3, 8009840 <_strtod_l+0x800>
 800983a:	6923      	ldr	r3, [r4, #16]
 800983c:	2b01      	cmp	r3, #1
 800983e:	dd5b      	ble.n	80098f8 <_strtod_l+0x8b8>
 8009840:	4621      	mov	r1, r4
 8009842:	2201      	movs	r2, #1
 8009844:	9805      	ldr	r0, [sp, #20]
 8009846:	f7ff f983 	bl	8008b50 <__lshift>
 800984a:	4641      	mov	r1, r8
 800984c:	4604      	mov	r4, r0
 800984e:	f7ff f9eb 	bl	8008c28 <__mcmp>
 8009852:	2800      	cmp	r0, #0
 8009854:	dd50      	ble.n	80098f8 <_strtod_l+0x8b8>
 8009856:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800985a:	9a08      	ldr	r2, [sp, #32]
 800985c:	0d1b      	lsrs	r3, r3, #20
 800985e:	051b      	lsls	r3, r3, #20
 8009860:	2a00      	cmp	r2, #0
 8009862:	d06a      	beq.n	800993a <_strtod_l+0x8fa>
 8009864:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009868:	d867      	bhi.n	800993a <_strtod_l+0x8fa>
 800986a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800986e:	f67f ae9d 	bls.w	80095ac <_strtod_l+0x56c>
 8009872:	4b0a      	ldr	r3, [pc, #40]	@ (800989c <_strtod_l+0x85c>)
 8009874:	4650      	mov	r0, sl
 8009876:	4659      	mov	r1, fp
 8009878:	2200      	movs	r2, #0
 800987a:	f7f6 fec5 	bl	8000608 <__aeabi_dmul>
 800987e:	4b08      	ldr	r3, [pc, #32]	@ (80098a0 <_strtod_l+0x860>)
 8009880:	400b      	ands	r3, r1
 8009882:	4682      	mov	sl, r0
 8009884:	468b      	mov	fp, r1
 8009886:	2b00      	cmp	r3, #0
 8009888:	f47f ae08 	bne.w	800949c <_strtod_l+0x45c>
 800988c:	9a05      	ldr	r2, [sp, #20]
 800988e:	2322      	movs	r3, #34	@ 0x22
 8009890:	6013      	str	r3, [r2, #0]
 8009892:	e603      	b.n	800949c <_strtod_l+0x45c>
 8009894:	0800b1f0 	.word	0x0800b1f0
 8009898:	fffffc02 	.word	0xfffffc02
 800989c:	39500000 	.word	0x39500000
 80098a0:	7ff00000 	.word	0x7ff00000
 80098a4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80098a8:	d165      	bne.n	8009976 <_strtod_l+0x936>
 80098aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80098ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098b0:	b35a      	cbz	r2, 800990a <_strtod_l+0x8ca>
 80098b2:	4a9f      	ldr	r2, [pc, #636]	@ (8009b30 <_strtod_l+0xaf0>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d12b      	bne.n	8009910 <_strtod_l+0x8d0>
 80098b8:	9b08      	ldr	r3, [sp, #32]
 80098ba:	4651      	mov	r1, sl
 80098bc:	b303      	cbz	r3, 8009900 <_strtod_l+0x8c0>
 80098be:	4b9d      	ldr	r3, [pc, #628]	@ (8009b34 <_strtod_l+0xaf4>)
 80098c0:	465a      	mov	r2, fp
 80098c2:	4013      	ands	r3, r2
 80098c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80098c8:	f04f 32ff 	mov.w	r2, #4294967295
 80098cc:	d81b      	bhi.n	8009906 <_strtod_l+0x8c6>
 80098ce:	0d1b      	lsrs	r3, r3, #20
 80098d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80098d4:	fa02 f303 	lsl.w	r3, r2, r3
 80098d8:	4299      	cmp	r1, r3
 80098da:	d119      	bne.n	8009910 <_strtod_l+0x8d0>
 80098dc:	4b96      	ldr	r3, [pc, #600]	@ (8009b38 <_strtod_l+0xaf8>)
 80098de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d102      	bne.n	80098ea <_strtod_l+0x8aa>
 80098e4:	3101      	adds	r1, #1
 80098e6:	f43f adce 	beq.w	8009486 <_strtod_l+0x446>
 80098ea:	4b92      	ldr	r3, [pc, #584]	@ (8009b34 <_strtod_l+0xaf4>)
 80098ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80098ee:	401a      	ands	r2, r3
 80098f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80098f4:	f04f 0a00 	mov.w	sl, #0
 80098f8:	9b08      	ldr	r3, [sp, #32]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1b9      	bne.n	8009872 <_strtod_l+0x832>
 80098fe:	e5cd      	b.n	800949c <_strtod_l+0x45c>
 8009900:	f04f 33ff 	mov.w	r3, #4294967295
 8009904:	e7e8      	b.n	80098d8 <_strtod_l+0x898>
 8009906:	4613      	mov	r3, r2
 8009908:	e7e6      	b.n	80098d8 <_strtod_l+0x898>
 800990a:	ea53 030a 	orrs.w	r3, r3, sl
 800990e:	d0a2      	beq.n	8009856 <_strtod_l+0x816>
 8009910:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009912:	b1db      	cbz	r3, 800994c <_strtod_l+0x90c>
 8009914:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009916:	4213      	tst	r3, r2
 8009918:	d0ee      	beq.n	80098f8 <_strtod_l+0x8b8>
 800991a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800991c:	9a08      	ldr	r2, [sp, #32]
 800991e:	4650      	mov	r0, sl
 8009920:	4659      	mov	r1, fp
 8009922:	b1bb      	cbz	r3, 8009954 <_strtod_l+0x914>
 8009924:	f7ff fb6e 	bl	8009004 <sulp>
 8009928:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800992c:	ec53 2b10 	vmov	r2, r3, d0
 8009930:	f7f6 fcb4 	bl	800029c <__adddf3>
 8009934:	4682      	mov	sl, r0
 8009936:	468b      	mov	fp, r1
 8009938:	e7de      	b.n	80098f8 <_strtod_l+0x8b8>
 800993a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800993e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009942:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009946:	f04f 3aff 	mov.w	sl, #4294967295
 800994a:	e7d5      	b.n	80098f8 <_strtod_l+0x8b8>
 800994c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800994e:	ea13 0f0a 	tst.w	r3, sl
 8009952:	e7e1      	b.n	8009918 <_strtod_l+0x8d8>
 8009954:	f7ff fb56 	bl	8009004 <sulp>
 8009958:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800995c:	ec53 2b10 	vmov	r2, r3, d0
 8009960:	f7f6 fc9a 	bl	8000298 <__aeabi_dsub>
 8009964:	2200      	movs	r2, #0
 8009966:	2300      	movs	r3, #0
 8009968:	4682      	mov	sl, r0
 800996a:	468b      	mov	fp, r1
 800996c:	f7f7 f8b4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009970:	2800      	cmp	r0, #0
 8009972:	d0c1      	beq.n	80098f8 <_strtod_l+0x8b8>
 8009974:	e61a      	b.n	80095ac <_strtod_l+0x56c>
 8009976:	4641      	mov	r1, r8
 8009978:	4620      	mov	r0, r4
 800997a:	f7ff facd 	bl	8008f18 <__ratio>
 800997e:	ec57 6b10 	vmov	r6, r7, d0
 8009982:	2200      	movs	r2, #0
 8009984:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009988:	4630      	mov	r0, r6
 800998a:	4639      	mov	r1, r7
 800998c:	f7f7 f8b8 	bl	8000b00 <__aeabi_dcmple>
 8009990:	2800      	cmp	r0, #0
 8009992:	d06f      	beq.n	8009a74 <_strtod_l+0xa34>
 8009994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009996:	2b00      	cmp	r3, #0
 8009998:	d17a      	bne.n	8009a90 <_strtod_l+0xa50>
 800999a:	f1ba 0f00 	cmp.w	sl, #0
 800999e:	d158      	bne.n	8009a52 <_strtod_l+0xa12>
 80099a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d15a      	bne.n	8009a60 <_strtod_l+0xa20>
 80099aa:	4b64      	ldr	r3, [pc, #400]	@ (8009b3c <_strtod_l+0xafc>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	4630      	mov	r0, r6
 80099b0:	4639      	mov	r1, r7
 80099b2:	f7f7 f89b 	bl	8000aec <__aeabi_dcmplt>
 80099b6:	2800      	cmp	r0, #0
 80099b8:	d159      	bne.n	8009a6e <_strtod_l+0xa2e>
 80099ba:	4630      	mov	r0, r6
 80099bc:	4639      	mov	r1, r7
 80099be:	4b60      	ldr	r3, [pc, #384]	@ (8009b40 <_strtod_l+0xb00>)
 80099c0:	2200      	movs	r2, #0
 80099c2:	f7f6 fe21 	bl	8000608 <__aeabi_dmul>
 80099c6:	4606      	mov	r6, r0
 80099c8:	460f      	mov	r7, r1
 80099ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80099ce:	9606      	str	r6, [sp, #24]
 80099d0:	9307      	str	r3, [sp, #28]
 80099d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099d6:	4d57      	ldr	r5, [pc, #348]	@ (8009b34 <_strtod_l+0xaf4>)
 80099d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80099dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099de:	401d      	ands	r5, r3
 80099e0:	4b58      	ldr	r3, [pc, #352]	@ (8009b44 <_strtod_l+0xb04>)
 80099e2:	429d      	cmp	r5, r3
 80099e4:	f040 80b2 	bne.w	8009b4c <_strtod_l+0xb0c>
 80099e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80099ee:	ec4b ab10 	vmov	d0, sl, fp
 80099f2:	f7ff f9c9 	bl	8008d88 <__ulp>
 80099f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099fa:	ec51 0b10 	vmov	r0, r1, d0
 80099fe:	f7f6 fe03 	bl	8000608 <__aeabi_dmul>
 8009a02:	4652      	mov	r2, sl
 8009a04:	465b      	mov	r3, fp
 8009a06:	f7f6 fc49 	bl	800029c <__adddf3>
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	4949      	ldr	r1, [pc, #292]	@ (8009b34 <_strtod_l+0xaf4>)
 8009a0e:	4a4e      	ldr	r2, [pc, #312]	@ (8009b48 <_strtod_l+0xb08>)
 8009a10:	4019      	ands	r1, r3
 8009a12:	4291      	cmp	r1, r2
 8009a14:	4682      	mov	sl, r0
 8009a16:	d942      	bls.n	8009a9e <_strtod_l+0xa5e>
 8009a18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009a1a:	4b47      	ldr	r3, [pc, #284]	@ (8009b38 <_strtod_l+0xaf8>)
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d103      	bne.n	8009a28 <_strtod_l+0x9e8>
 8009a20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a22:	3301      	adds	r3, #1
 8009a24:	f43f ad2f 	beq.w	8009486 <_strtod_l+0x446>
 8009a28:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009b38 <_strtod_l+0xaf8>
 8009a2c:	f04f 3aff 	mov.w	sl, #4294967295
 8009a30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a32:	9805      	ldr	r0, [sp, #20]
 8009a34:	f7fe fe7c 	bl	8008730 <_Bfree>
 8009a38:	9805      	ldr	r0, [sp, #20]
 8009a3a:	4649      	mov	r1, r9
 8009a3c:	f7fe fe78 	bl	8008730 <_Bfree>
 8009a40:	9805      	ldr	r0, [sp, #20]
 8009a42:	4641      	mov	r1, r8
 8009a44:	f7fe fe74 	bl	8008730 <_Bfree>
 8009a48:	9805      	ldr	r0, [sp, #20]
 8009a4a:	4621      	mov	r1, r4
 8009a4c:	f7fe fe70 	bl	8008730 <_Bfree>
 8009a50:	e619      	b.n	8009686 <_strtod_l+0x646>
 8009a52:	f1ba 0f01 	cmp.w	sl, #1
 8009a56:	d103      	bne.n	8009a60 <_strtod_l+0xa20>
 8009a58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f43f ada6 	beq.w	80095ac <_strtod_l+0x56c>
 8009a60:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009b10 <_strtod_l+0xad0>
 8009a64:	4f35      	ldr	r7, [pc, #212]	@ (8009b3c <_strtod_l+0xafc>)
 8009a66:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009a6a:	2600      	movs	r6, #0
 8009a6c:	e7b1      	b.n	80099d2 <_strtod_l+0x992>
 8009a6e:	4f34      	ldr	r7, [pc, #208]	@ (8009b40 <_strtod_l+0xb00>)
 8009a70:	2600      	movs	r6, #0
 8009a72:	e7aa      	b.n	80099ca <_strtod_l+0x98a>
 8009a74:	4b32      	ldr	r3, [pc, #200]	@ (8009b40 <_strtod_l+0xb00>)
 8009a76:	4630      	mov	r0, r6
 8009a78:	4639      	mov	r1, r7
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f7f6 fdc4 	bl	8000608 <__aeabi_dmul>
 8009a80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a82:	4606      	mov	r6, r0
 8009a84:	460f      	mov	r7, r1
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d09f      	beq.n	80099ca <_strtod_l+0x98a>
 8009a8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009a8e:	e7a0      	b.n	80099d2 <_strtod_l+0x992>
 8009a90:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009b18 <_strtod_l+0xad8>
 8009a94:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009a98:	ec57 6b17 	vmov	r6, r7, d7
 8009a9c:	e799      	b.n	80099d2 <_strtod_l+0x992>
 8009a9e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009aa2:	9b08      	ldr	r3, [sp, #32]
 8009aa4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1c1      	bne.n	8009a30 <_strtod_l+0x9f0>
 8009aac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ab0:	0d1b      	lsrs	r3, r3, #20
 8009ab2:	051b      	lsls	r3, r3, #20
 8009ab4:	429d      	cmp	r5, r3
 8009ab6:	d1bb      	bne.n	8009a30 <_strtod_l+0x9f0>
 8009ab8:	4630      	mov	r0, r6
 8009aba:	4639      	mov	r1, r7
 8009abc:	f7f7 f904 	bl	8000cc8 <__aeabi_d2lz>
 8009ac0:	f7f6 fd74 	bl	80005ac <__aeabi_l2d>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	4630      	mov	r0, r6
 8009aca:	4639      	mov	r1, r7
 8009acc:	f7f6 fbe4 	bl	8000298 <__aeabi_dsub>
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009ad8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009adc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ade:	ea46 060a 	orr.w	r6, r6, sl
 8009ae2:	431e      	orrs	r6, r3
 8009ae4:	d06f      	beq.n	8009bc6 <_strtod_l+0xb86>
 8009ae6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009b20 <_strtod_l+0xae0>)
 8009ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aec:	f7f6 fffe 	bl	8000aec <__aeabi_dcmplt>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	f47f acd3 	bne.w	800949c <_strtod_l+0x45c>
 8009af6:	a30c      	add	r3, pc, #48	@ (adr r3, 8009b28 <_strtod_l+0xae8>)
 8009af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b00:	f7f7 f812 	bl	8000b28 <__aeabi_dcmpgt>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d093      	beq.n	8009a30 <_strtod_l+0x9f0>
 8009b08:	e4c8      	b.n	800949c <_strtod_l+0x45c>
 8009b0a:	bf00      	nop
 8009b0c:	f3af 8000 	nop.w
 8009b10:	00000000 	.word	0x00000000
 8009b14:	bff00000 	.word	0xbff00000
 8009b18:	00000000 	.word	0x00000000
 8009b1c:	3ff00000 	.word	0x3ff00000
 8009b20:	94a03595 	.word	0x94a03595
 8009b24:	3fdfffff 	.word	0x3fdfffff
 8009b28:	35afe535 	.word	0x35afe535
 8009b2c:	3fe00000 	.word	0x3fe00000
 8009b30:	000fffff 	.word	0x000fffff
 8009b34:	7ff00000 	.word	0x7ff00000
 8009b38:	7fefffff 	.word	0x7fefffff
 8009b3c:	3ff00000 	.word	0x3ff00000
 8009b40:	3fe00000 	.word	0x3fe00000
 8009b44:	7fe00000 	.word	0x7fe00000
 8009b48:	7c9fffff 	.word	0x7c9fffff
 8009b4c:	9b08      	ldr	r3, [sp, #32]
 8009b4e:	b323      	cbz	r3, 8009b9a <_strtod_l+0xb5a>
 8009b50:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009b54:	d821      	bhi.n	8009b9a <_strtod_l+0xb5a>
 8009b56:	a328      	add	r3, pc, #160	@ (adr r3, 8009bf8 <_strtod_l+0xbb8>)
 8009b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	4639      	mov	r1, r7
 8009b60:	f7f6 ffce 	bl	8000b00 <__aeabi_dcmple>
 8009b64:	b1a0      	cbz	r0, 8009b90 <_strtod_l+0xb50>
 8009b66:	4639      	mov	r1, r7
 8009b68:	4630      	mov	r0, r6
 8009b6a:	f7f7 f825 	bl	8000bb8 <__aeabi_d2uiz>
 8009b6e:	2801      	cmp	r0, #1
 8009b70:	bf38      	it	cc
 8009b72:	2001      	movcc	r0, #1
 8009b74:	f7f6 fcce 	bl	8000514 <__aeabi_ui2d>
 8009b78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b7a:	4606      	mov	r6, r0
 8009b7c:	460f      	mov	r7, r1
 8009b7e:	b9fb      	cbnz	r3, 8009bc0 <_strtod_l+0xb80>
 8009b80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b84:	9014      	str	r0, [sp, #80]	@ 0x50
 8009b86:	9315      	str	r3, [sp, #84]	@ 0x54
 8009b88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009b8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009b90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009b92:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009b96:	1b5b      	subs	r3, r3, r5
 8009b98:	9311      	str	r3, [sp, #68]	@ 0x44
 8009b9a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009b9e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009ba2:	f7ff f8f1 	bl	8008d88 <__ulp>
 8009ba6:	4650      	mov	r0, sl
 8009ba8:	ec53 2b10 	vmov	r2, r3, d0
 8009bac:	4659      	mov	r1, fp
 8009bae:	f7f6 fd2b 	bl	8000608 <__aeabi_dmul>
 8009bb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009bb6:	f7f6 fb71 	bl	800029c <__adddf3>
 8009bba:	4682      	mov	sl, r0
 8009bbc:	468b      	mov	fp, r1
 8009bbe:	e770      	b.n	8009aa2 <_strtod_l+0xa62>
 8009bc0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009bc4:	e7e0      	b.n	8009b88 <_strtod_l+0xb48>
 8009bc6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009c00 <_strtod_l+0xbc0>)
 8009bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bcc:	f7f6 ff8e 	bl	8000aec <__aeabi_dcmplt>
 8009bd0:	e798      	b.n	8009b04 <_strtod_l+0xac4>
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	930e      	str	r3, [sp, #56]	@ 0x38
 8009bd6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009bd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bda:	6013      	str	r3, [r2, #0]
 8009bdc:	f7ff ba6d 	b.w	80090ba <_strtod_l+0x7a>
 8009be0:	2a65      	cmp	r2, #101	@ 0x65
 8009be2:	f43f ab68 	beq.w	80092b6 <_strtod_l+0x276>
 8009be6:	2a45      	cmp	r2, #69	@ 0x45
 8009be8:	f43f ab65 	beq.w	80092b6 <_strtod_l+0x276>
 8009bec:	2301      	movs	r3, #1
 8009bee:	f7ff bba0 	b.w	8009332 <_strtod_l+0x2f2>
 8009bf2:	bf00      	nop
 8009bf4:	f3af 8000 	nop.w
 8009bf8:	ffc00000 	.word	0xffc00000
 8009bfc:	41dfffff 	.word	0x41dfffff
 8009c00:	94a03595 	.word	0x94a03595
 8009c04:	3fcfffff 	.word	0x3fcfffff

08009c08 <_strtod_r>:
 8009c08:	4b01      	ldr	r3, [pc, #4]	@ (8009c10 <_strtod_r+0x8>)
 8009c0a:	f7ff ba19 	b.w	8009040 <_strtod_l>
 8009c0e:	bf00      	nop
 8009c10:	20000074 	.word	0x20000074

08009c14 <_strtol_l.isra.0>:
 8009c14:	2b24      	cmp	r3, #36	@ 0x24
 8009c16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c1a:	4686      	mov	lr, r0
 8009c1c:	4690      	mov	r8, r2
 8009c1e:	d801      	bhi.n	8009c24 <_strtol_l.isra.0+0x10>
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d106      	bne.n	8009c32 <_strtol_l.isra.0+0x1e>
 8009c24:	f7fd fdb6 	bl	8007794 <__errno>
 8009c28:	2316      	movs	r3, #22
 8009c2a:	6003      	str	r3, [r0, #0]
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c32:	4834      	ldr	r0, [pc, #208]	@ (8009d04 <_strtol_l.isra.0+0xf0>)
 8009c34:	460d      	mov	r5, r1
 8009c36:	462a      	mov	r2, r5
 8009c38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c3c:	5d06      	ldrb	r6, [r0, r4]
 8009c3e:	f016 0608 	ands.w	r6, r6, #8
 8009c42:	d1f8      	bne.n	8009c36 <_strtol_l.isra.0+0x22>
 8009c44:	2c2d      	cmp	r4, #45	@ 0x2d
 8009c46:	d110      	bne.n	8009c6a <_strtol_l.isra.0+0x56>
 8009c48:	782c      	ldrb	r4, [r5, #0]
 8009c4a:	2601      	movs	r6, #1
 8009c4c:	1c95      	adds	r5, r2, #2
 8009c4e:	f033 0210 	bics.w	r2, r3, #16
 8009c52:	d115      	bne.n	8009c80 <_strtol_l.isra.0+0x6c>
 8009c54:	2c30      	cmp	r4, #48	@ 0x30
 8009c56:	d10d      	bne.n	8009c74 <_strtol_l.isra.0+0x60>
 8009c58:	782a      	ldrb	r2, [r5, #0]
 8009c5a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009c5e:	2a58      	cmp	r2, #88	@ 0x58
 8009c60:	d108      	bne.n	8009c74 <_strtol_l.isra.0+0x60>
 8009c62:	786c      	ldrb	r4, [r5, #1]
 8009c64:	3502      	adds	r5, #2
 8009c66:	2310      	movs	r3, #16
 8009c68:	e00a      	b.n	8009c80 <_strtol_l.isra.0+0x6c>
 8009c6a:	2c2b      	cmp	r4, #43	@ 0x2b
 8009c6c:	bf04      	itt	eq
 8009c6e:	782c      	ldrbeq	r4, [r5, #0]
 8009c70:	1c95      	addeq	r5, r2, #2
 8009c72:	e7ec      	b.n	8009c4e <_strtol_l.isra.0+0x3a>
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1f6      	bne.n	8009c66 <_strtol_l.isra.0+0x52>
 8009c78:	2c30      	cmp	r4, #48	@ 0x30
 8009c7a:	bf14      	ite	ne
 8009c7c:	230a      	movne	r3, #10
 8009c7e:	2308      	moveq	r3, #8
 8009c80:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009c84:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009c88:	2200      	movs	r2, #0
 8009c8a:	fbbc f9f3 	udiv	r9, ip, r3
 8009c8e:	4610      	mov	r0, r2
 8009c90:	fb03 ca19 	mls	sl, r3, r9, ip
 8009c94:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009c98:	2f09      	cmp	r7, #9
 8009c9a:	d80f      	bhi.n	8009cbc <_strtol_l.isra.0+0xa8>
 8009c9c:	463c      	mov	r4, r7
 8009c9e:	42a3      	cmp	r3, r4
 8009ca0:	dd1b      	ble.n	8009cda <_strtol_l.isra.0+0xc6>
 8009ca2:	1c57      	adds	r7, r2, #1
 8009ca4:	d007      	beq.n	8009cb6 <_strtol_l.isra.0+0xa2>
 8009ca6:	4581      	cmp	r9, r0
 8009ca8:	d314      	bcc.n	8009cd4 <_strtol_l.isra.0+0xc0>
 8009caa:	d101      	bne.n	8009cb0 <_strtol_l.isra.0+0x9c>
 8009cac:	45a2      	cmp	sl, r4
 8009cae:	db11      	blt.n	8009cd4 <_strtol_l.isra.0+0xc0>
 8009cb0:	fb00 4003 	mla	r0, r0, r3, r4
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cba:	e7eb      	b.n	8009c94 <_strtol_l.isra.0+0x80>
 8009cbc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009cc0:	2f19      	cmp	r7, #25
 8009cc2:	d801      	bhi.n	8009cc8 <_strtol_l.isra.0+0xb4>
 8009cc4:	3c37      	subs	r4, #55	@ 0x37
 8009cc6:	e7ea      	b.n	8009c9e <_strtol_l.isra.0+0x8a>
 8009cc8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009ccc:	2f19      	cmp	r7, #25
 8009cce:	d804      	bhi.n	8009cda <_strtol_l.isra.0+0xc6>
 8009cd0:	3c57      	subs	r4, #87	@ 0x57
 8009cd2:	e7e4      	b.n	8009c9e <_strtol_l.isra.0+0x8a>
 8009cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8009cd8:	e7ed      	b.n	8009cb6 <_strtol_l.isra.0+0xa2>
 8009cda:	1c53      	adds	r3, r2, #1
 8009cdc:	d108      	bne.n	8009cf0 <_strtol_l.isra.0+0xdc>
 8009cde:	2322      	movs	r3, #34	@ 0x22
 8009ce0:	f8ce 3000 	str.w	r3, [lr]
 8009ce4:	4660      	mov	r0, ip
 8009ce6:	f1b8 0f00 	cmp.w	r8, #0
 8009cea:	d0a0      	beq.n	8009c2e <_strtol_l.isra.0+0x1a>
 8009cec:	1e69      	subs	r1, r5, #1
 8009cee:	e006      	b.n	8009cfe <_strtol_l.isra.0+0xea>
 8009cf0:	b106      	cbz	r6, 8009cf4 <_strtol_l.isra.0+0xe0>
 8009cf2:	4240      	negs	r0, r0
 8009cf4:	f1b8 0f00 	cmp.w	r8, #0
 8009cf8:	d099      	beq.n	8009c2e <_strtol_l.isra.0+0x1a>
 8009cfa:	2a00      	cmp	r2, #0
 8009cfc:	d1f6      	bne.n	8009cec <_strtol_l.isra.0+0xd8>
 8009cfe:	f8c8 1000 	str.w	r1, [r8]
 8009d02:	e794      	b.n	8009c2e <_strtol_l.isra.0+0x1a>
 8009d04:	0800b219 	.word	0x0800b219

08009d08 <_strtol_r>:
 8009d08:	f7ff bf84 	b.w	8009c14 <_strtol_l.isra.0>

08009d0c <__ssputs_r>:
 8009d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d10:	688e      	ldr	r6, [r1, #8]
 8009d12:	461f      	mov	r7, r3
 8009d14:	42be      	cmp	r6, r7
 8009d16:	680b      	ldr	r3, [r1, #0]
 8009d18:	4682      	mov	sl, r0
 8009d1a:	460c      	mov	r4, r1
 8009d1c:	4690      	mov	r8, r2
 8009d1e:	d82d      	bhi.n	8009d7c <__ssputs_r+0x70>
 8009d20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009d28:	d026      	beq.n	8009d78 <__ssputs_r+0x6c>
 8009d2a:	6965      	ldr	r5, [r4, #20]
 8009d2c:	6909      	ldr	r1, [r1, #16]
 8009d2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d32:	eba3 0901 	sub.w	r9, r3, r1
 8009d36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d3a:	1c7b      	adds	r3, r7, #1
 8009d3c:	444b      	add	r3, r9
 8009d3e:	106d      	asrs	r5, r5, #1
 8009d40:	429d      	cmp	r5, r3
 8009d42:	bf38      	it	cc
 8009d44:	461d      	movcc	r5, r3
 8009d46:	0553      	lsls	r3, r2, #21
 8009d48:	d527      	bpl.n	8009d9a <__ssputs_r+0x8e>
 8009d4a:	4629      	mov	r1, r5
 8009d4c:	f7fe fc24 	bl	8008598 <_malloc_r>
 8009d50:	4606      	mov	r6, r0
 8009d52:	b360      	cbz	r0, 8009dae <__ssputs_r+0xa2>
 8009d54:	6921      	ldr	r1, [r4, #16]
 8009d56:	464a      	mov	r2, r9
 8009d58:	f000 fa18 	bl	800a18c <memcpy>
 8009d5c:	89a3      	ldrh	r3, [r4, #12]
 8009d5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d66:	81a3      	strh	r3, [r4, #12]
 8009d68:	6126      	str	r6, [r4, #16]
 8009d6a:	6165      	str	r5, [r4, #20]
 8009d6c:	444e      	add	r6, r9
 8009d6e:	eba5 0509 	sub.w	r5, r5, r9
 8009d72:	6026      	str	r6, [r4, #0]
 8009d74:	60a5      	str	r5, [r4, #8]
 8009d76:	463e      	mov	r6, r7
 8009d78:	42be      	cmp	r6, r7
 8009d7a:	d900      	bls.n	8009d7e <__ssputs_r+0x72>
 8009d7c:	463e      	mov	r6, r7
 8009d7e:	6820      	ldr	r0, [r4, #0]
 8009d80:	4632      	mov	r2, r6
 8009d82:	4641      	mov	r1, r8
 8009d84:	f000 f9c6 	bl	800a114 <memmove>
 8009d88:	68a3      	ldr	r3, [r4, #8]
 8009d8a:	1b9b      	subs	r3, r3, r6
 8009d8c:	60a3      	str	r3, [r4, #8]
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	4433      	add	r3, r6
 8009d92:	6023      	str	r3, [r4, #0]
 8009d94:	2000      	movs	r0, #0
 8009d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d9a:	462a      	mov	r2, r5
 8009d9c:	f000 fd89 	bl	800a8b2 <_realloc_r>
 8009da0:	4606      	mov	r6, r0
 8009da2:	2800      	cmp	r0, #0
 8009da4:	d1e0      	bne.n	8009d68 <__ssputs_r+0x5c>
 8009da6:	6921      	ldr	r1, [r4, #16]
 8009da8:	4650      	mov	r0, sl
 8009daa:	f7fe fb81 	bl	80084b0 <_free_r>
 8009dae:	230c      	movs	r3, #12
 8009db0:	f8ca 3000 	str.w	r3, [sl]
 8009db4:	89a3      	ldrh	r3, [r4, #12]
 8009db6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dba:	81a3      	strh	r3, [r4, #12]
 8009dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc0:	e7e9      	b.n	8009d96 <__ssputs_r+0x8a>
	...

08009dc4 <_svfiprintf_r>:
 8009dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc8:	4698      	mov	r8, r3
 8009dca:	898b      	ldrh	r3, [r1, #12]
 8009dcc:	061b      	lsls	r3, r3, #24
 8009dce:	b09d      	sub	sp, #116	@ 0x74
 8009dd0:	4607      	mov	r7, r0
 8009dd2:	460d      	mov	r5, r1
 8009dd4:	4614      	mov	r4, r2
 8009dd6:	d510      	bpl.n	8009dfa <_svfiprintf_r+0x36>
 8009dd8:	690b      	ldr	r3, [r1, #16]
 8009dda:	b973      	cbnz	r3, 8009dfa <_svfiprintf_r+0x36>
 8009ddc:	2140      	movs	r1, #64	@ 0x40
 8009dde:	f7fe fbdb 	bl	8008598 <_malloc_r>
 8009de2:	6028      	str	r0, [r5, #0]
 8009de4:	6128      	str	r0, [r5, #16]
 8009de6:	b930      	cbnz	r0, 8009df6 <_svfiprintf_r+0x32>
 8009de8:	230c      	movs	r3, #12
 8009dea:	603b      	str	r3, [r7, #0]
 8009dec:	f04f 30ff 	mov.w	r0, #4294967295
 8009df0:	b01d      	add	sp, #116	@ 0x74
 8009df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df6:	2340      	movs	r3, #64	@ 0x40
 8009df8:	616b      	str	r3, [r5, #20]
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dfe:	2320      	movs	r3, #32
 8009e00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e04:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e08:	2330      	movs	r3, #48	@ 0x30
 8009e0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009fa8 <_svfiprintf_r+0x1e4>
 8009e0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e12:	f04f 0901 	mov.w	r9, #1
 8009e16:	4623      	mov	r3, r4
 8009e18:	469a      	mov	sl, r3
 8009e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e1e:	b10a      	cbz	r2, 8009e24 <_svfiprintf_r+0x60>
 8009e20:	2a25      	cmp	r2, #37	@ 0x25
 8009e22:	d1f9      	bne.n	8009e18 <_svfiprintf_r+0x54>
 8009e24:	ebba 0b04 	subs.w	fp, sl, r4
 8009e28:	d00b      	beq.n	8009e42 <_svfiprintf_r+0x7e>
 8009e2a:	465b      	mov	r3, fp
 8009e2c:	4622      	mov	r2, r4
 8009e2e:	4629      	mov	r1, r5
 8009e30:	4638      	mov	r0, r7
 8009e32:	f7ff ff6b 	bl	8009d0c <__ssputs_r>
 8009e36:	3001      	adds	r0, #1
 8009e38:	f000 80a7 	beq.w	8009f8a <_svfiprintf_r+0x1c6>
 8009e3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e3e:	445a      	add	r2, fp
 8009e40:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e42:	f89a 3000 	ldrb.w	r3, [sl]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	f000 809f 	beq.w	8009f8a <_svfiprintf_r+0x1c6>
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e56:	f10a 0a01 	add.w	sl, sl, #1
 8009e5a:	9304      	str	r3, [sp, #16]
 8009e5c:	9307      	str	r3, [sp, #28]
 8009e5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e62:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e64:	4654      	mov	r4, sl
 8009e66:	2205      	movs	r2, #5
 8009e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e6c:	484e      	ldr	r0, [pc, #312]	@ (8009fa8 <_svfiprintf_r+0x1e4>)
 8009e6e:	f7f6 f9b7 	bl	80001e0 <memchr>
 8009e72:	9a04      	ldr	r2, [sp, #16]
 8009e74:	b9d8      	cbnz	r0, 8009eae <_svfiprintf_r+0xea>
 8009e76:	06d0      	lsls	r0, r2, #27
 8009e78:	bf44      	itt	mi
 8009e7a:	2320      	movmi	r3, #32
 8009e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e80:	0711      	lsls	r1, r2, #28
 8009e82:	bf44      	itt	mi
 8009e84:	232b      	movmi	r3, #43	@ 0x2b
 8009e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e8a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e90:	d015      	beq.n	8009ebe <_svfiprintf_r+0xfa>
 8009e92:	9a07      	ldr	r2, [sp, #28]
 8009e94:	4654      	mov	r4, sl
 8009e96:	2000      	movs	r0, #0
 8009e98:	f04f 0c0a 	mov.w	ip, #10
 8009e9c:	4621      	mov	r1, r4
 8009e9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ea2:	3b30      	subs	r3, #48	@ 0x30
 8009ea4:	2b09      	cmp	r3, #9
 8009ea6:	d94b      	bls.n	8009f40 <_svfiprintf_r+0x17c>
 8009ea8:	b1b0      	cbz	r0, 8009ed8 <_svfiprintf_r+0x114>
 8009eaa:	9207      	str	r2, [sp, #28]
 8009eac:	e014      	b.n	8009ed8 <_svfiprintf_r+0x114>
 8009eae:	eba0 0308 	sub.w	r3, r0, r8
 8009eb2:	fa09 f303 	lsl.w	r3, r9, r3
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	9304      	str	r3, [sp, #16]
 8009eba:	46a2      	mov	sl, r4
 8009ebc:	e7d2      	b.n	8009e64 <_svfiprintf_r+0xa0>
 8009ebe:	9b03      	ldr	r3, [sp, #12]
 8009ec0:	1d19      	adds	r1, r3, #4
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	9103      	str	r1, [sp, #12]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	bfbb      	ittet	lt
 8009eca:	425b      	neglt	r3, r3
 8009ecc:	f042 0202 	orrlt.w	r2, r2, #2
 8009ed0:	9307      	strge	r3, [sp, #28]
 8009ed2:	9307      	strlt	r3, [sp, #28]
 8009ed4:	bfb8      	it	lt
 8009ed6:	9204      	strlt	r2, [sp, #16]
 8009ed8:	7823      	ldrb	r3, [r4, #0]
 8009eda:	2b2e      	cmp	r3, #46	@ 0x2e
 8009edc:	d10a      	bne.n	8009ef4 <_svfiprintf_r+0x130>
 8009ede:	7863      	ldrb	r3, [r4, #1]
 8009ee0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ee2:	d132      	bne.n	8009f4a <_svfiprintf_r+0x186>
 8009ee4:	9b03      	ldr	r3, [sp, #12]
 8009ee6:	1d1a      	adds	r2, r3, #4
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	9203      	str	r2, [sp, #12]
 8009eec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ef0:	3402      	adds	r4, #2
 8009ef2:	9305      	str	r3, [sp, #20]
 8009ef4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009fb8 <_svfiprintf_r+0x1f4>
 8009ef8:	7821      	ldrb	r1, [r4, #0]
 8009efa:	2203      	movs	r2, #3
 8009efc:	4650      	mov	r0, sl
 8009efe:	f7f6 f96f 	bl	80001e0 <memchr>
 8009f02:	b138      	cbz	r0, 8009f14 <_svfiprintf_r+0x150>
 8009f04:	9b04      	ldr	r3, [sp, #16]
 8009f06:	eba0 000a 	sub.w	r0, r0, sl
 8009f0a:	2240      	movs	r2, #64	@ 0x40
 8009f0c:	4082      	lsls	r2, r0
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	3401      	adds	r4, #1
 8009f12:	9304      	str	r3, [sp, #16]
 8009f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f18:	4824      	ldr	r0, [pc, #144]	@ (8009fac <_svfiprintf_r+0x1e8>)
 8009f1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f1e:	2206      	movs	r2, #6
 8009f20:	f7f6 f95e 	bl	80001e0 <memchr>
 8009f24:	2800      	cmp	r0, #0
 8009f26:	d036      	beq.n	8009f96 <_svfiprintf_r+0x1d2>
 8009f28:	4b21      	ldr	r3, [pc, #132]	@ (8009fb0 <_svfiprintf_r+0x1ec>)
 8009f2a:	bb1b      	cbnz	r3, 8009f74 <_svfiprintf_r+0x1b0>
 8009f2c:	9b03      	ldr	r3, [sp, #12]
 8009f2e:	3307      	adds	r3, #7
 8009f30:	f023 0307 	bic.w	r3, r3, #7
 8009f34:	3308      	adds	r3, #8
 8009f36:	9303      	str	r3, [sp, #12]
 8009f38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f3a:	4433      	add	r3, r6
 8009f3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f3e:	e76a      	b.n	8009e16 <_svfiprintf_r+0x52>
 8009f40:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f44:	460c      	mov	r4, r1
 8009f46:	2001      	movs	r0, #1
 8009f48:	e7a8      	b.n	8009e9c <_svfiprintf_r+0xd8>
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	3401      	adds	r4, #1
 8009f4e:	9305      	str	r3, [sp, #20]
 8009f50:	4619      	mov	r1, r3
 8009f52:	f04f 0c0a 	mov.w	ip, #10
 8009f56:	4620      	mov	r0, r4
 8009f58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f5c:	3a30      	subs	r2, #48	@ 0x30
 8009f5e:	2a09      	cmp	r2, #9
 8009f60:	d903      	bls.n	8009f6a <_svfiprintf_r+0x1a6>
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d0c6      	beq.n	8009ef4 <_svfiprintf_r+0x130>
 8009f66:	9105      	str	r1, [sp, #20]
 8009f68:	e7c4      	b.n	8009ef4 <_svfiprintf_r+0x130>
 8009f6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f6e:	4604      	mov	r4, r0
 8009f70:	2301      	movs	r3, #1
 8009f72:	e7f0      	b.n	8009f56 <_svfiprintf_r+0x192>
 8009f74:	ab03      	add	r3, sp, #12
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	462a      	mov	r2, r5
 8009f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8009fb4 <_svfiprintf_r+0x1f0>)
 8009f7c:	a904      	add	r1, sp, #16
 8009f7e:	4638      	mov	r0, r7
 8009f80:	f7fc fcca 	bl	8006918 <_printf_float>
 8009f84:	1c42      	adds	r2, r0, #1
 8009f86:	4606      	mov	r6, r0
 8009f88:	d1d6      	bne.n	8009f38 <_svfiprintf_r+0x174>
 8009f8a:	89ab      	ldrh	r3, [r5, #12]
 8009f8c:	065b      	lsls	r3, r3, #25
 8009f8e:	f53f af2d 	bmi.w	8009dec <_svfiprintf_r+0x28>
 8009f92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f94:	e72c      	b.n	8009df0 <_svfiprintf_r+0x2c>
 8009f96:	ab03      	add	r3, sp, #12
 8009f98:	9300      	str	r3, [sp, #0]
 8009f9a:	462a      	mov	r2, r5
 8009f9c:	4b05      	ldr	r3, [pc, #20]	@ (8009fb4 <_svfiprintf_r+0x1f0>)
 8009f9e:	a904      	add	r1, sp, #16
 8009fa0:	4638      	mov	r0, r7
 8009fa2:	f7fc ff51 	bl	8006e48 <_printf_i>
 8009fa6:	e7ed      	b.n	8009f84 <_svfiprintf_r+0x1c0>
 8009fa8:	0800b011 	.word	0x0800b011
 8009fac:	0800b01b 	.word	0x0800b01b
 8009fb0:	08006919 	.word	0x08006919
 8009fb4:	08009d0d 	.word	0x08009d0d
 8009fb8:	0800b017 	.word	0x0800b017

08009fbc <__sflush_r>:
 8009fbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc4:	0716      	lsls	r6, r2, #28
 8009fc6:	4605      	mov	r5, r0
 8009fc8:	460c      	mov	r4, r1
 8009fca:	d454      	bmi.n	800a076 <__sflush_r+0xba>
 8009fcc:	684b      	ldr	r3, [r1, #4]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	dc02      	bgt.n	8009fd8 <__sflush_r+0x1c>
 8009fd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	dd48      	ble.n	800a06a <__sflush_r+0xae>
 8009fd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009fda:	2e00      	cmp	r6, #0
 8009fdc:	d045      	beq.n	800a06a <__sflush_r+0xae>
 8009fde:	2300      	movs	r3, #0
 8009fe0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009fe4:	682f      	ldr	r7, [r5, #0]
 8009fe6:	6a21      	ldr	r1, [r4, #32]
 8009fe8:	602b      	str	r3, [r5, #0]
 8009fea:	d030      	beq.n	800a04e <__sflush_r+0x92>
 8009fec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009fee:	89a3      	ldrh	r3, [r4, #12]
 8009ff0:	0759      	lsls	r1, r3, #29
 8009ff2:	d505      	bpl.n	800a000 <__sflush_r+0x44>
 8009ff4:	6863      	ldr	r3, [r4, #4]
 8009ff6:	1ad2      	subs	r2, r2, r3
 8009ff8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009ffa:	b10b      	cbz	r3, 800a000 <__sflush_r+0x44>
 8009ffc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009ffe:	1ad2      	subs	r2, r2, r3
 800a000:	2300      	movs	r3, #0
 800a002:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a004:	6a21      	ldr	r1, [r4, #32]
 800a006:	4628      	mov	r0, r5
 800a008:	47b0      	blx	r6
 800a00a:	1c43      	adds	r3, r0, #1
 800a00c:	89a3      	ldrh	r3, [r4, #12]
 800a00e:	d106      	bne.n	800a01e <__sflush_r+0x62>
 800a010:	6829      	ldr	r1, [r5, #0]
 800a012:	291d      	cmp	r1, #29
 800a014:	d82b      	bhi.n	800a06e <__sflush_r+0xb2>
 800a016:	4a2a      	ldr	r2, [pc, #168]	@ (800a0c0 <__sflush_r+0x104>)
 800a018:	40ca      	lsrs	r2, r1
 800a01a:	07d6      	lsls	r6, r2, #31
 800a01c:	d527      	bpl.n	800a06e <__sflush_r+0xb2>
 800a01e:	2200      	movs	r2, #0
 800a020:	6062      	str	r2, [r4, #4]
 800a022:	04d9      	lsls	r1, r3, #19
 800a024:	6922      	ldr	r2, [r4, #16]
 800a026:	6022      	str	r2, [r4, #0]
 800a028:	d504      	bpl.n	800a034 <__sflush_r+0x78>
 800a02a:	1c42      	adds	r2, r0, #1
 800a02c:	d101      	bne.n	800a032 <__sflush_r+0x76>
 800a02e:	682b      	ldr	r3, [r5, #0]
 800a030:	b903      	cbnz	r3, 800a034 <__sflush_r+0x78>
 800a032:	6560      	str	r0, [r4, #84]	@ 0x54
 800a034:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a036:	602f      	str	r7, [r5, #0]
 800a038:	b1b9      	cbz	r1, 800a06a <__sflush_r+0xae>
 800a03a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a03e:	4299      	cmp	r1, r3
 800a040:	d002      	beq.n	800a048 <__sflush_r+0x8c>
 800a042:	4628      	mov	r0, r5
 800a044:	f7fe fa34 	bl	80084b0 <_free_r>
 800a048:	2300      	movs	r3, #0
 800a04a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a04c:	e00d      	b.n	800a06a <__sflush_r+0xae>
 800a04e:	2301      	movs	r3, #1
 800a050:	4628      	mov	r0, r5
 800a052:	47b0      	blx	r6
 800a054:	4602      	mov	r2, r0
 800a056:	1c50      	adds	r0, r2, #1
 800a058:	d1c9      	bne.n	8009fee <__sflush_r+0x32>
 800a05a:	682b      	ldr	r3, [r5, #0]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d0c6      	beq.n	8009fee <__sflush_r+0x32>
 800a060:	2b1d      	cmp	r3, #29
 800a062:	d001      	beq.n	800a068 <__sflush_r+0xac>
 800a064:	2b16      	cmp	r3, #22
 800a066:	d11e      	bne.n	800a0a6 <__sflush_r+0xea>
 800a068:	602f      	str	r7, [r5, #0]
 800a06a:	2000      	movs	r0, #0
 800a06c:	e022      	b.n	800a0b4 <__sflush_r+0xf8>
 800a06e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a072:	b21b      	sxth	r3, r3
 800a074:	e01b      	b.n	800a0ae <__sflush_r+0xf2>
 800a076:	690f      	ldr	r7, [r1, #16]
 800a078:	2f00      	cmp	r7, #0
 800a07a:	d0f6      	beq.n	800a06a <__sflush_r+0xae>
 800a07c:	0793      	lsls	r3, r2, #30
 800a07e:	680e      	ldr	r6, [r1, #0]
 800a080:	bf08      	it	eq
 800a082:	694b      	ldreq	r3, [r1, #20]
 800a084:	600f      	str	r7, [r1, #0]
 800a086:	bf18      	it	ne
 800a088:	2300      	movne	r3, #0
 800a08a:	eba6 0807 	sub.w	r8, r6, r7
 800a08e:	608b      	str	r3, [r1, #8]
 800a090:	f1b8 0f00 	cmp.w	r8, #0
 800a094:	dde9      	ble.n	800a06a <__sflush_r+0xae>
 800a096:	6a21      	ldr	r1, [r4, #32]
 800a098:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a09a:	4643      	mov	r3, r8
 800a09c:	463a      	mov	r2, r7
 800a09e:	4628      	mov	r0, r5
 800a0a0:	47b0      	blx	r6
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	dc08      	bgt.n	800a0b8 <__sflush_r+0xfc>
 800a0a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0ae:	81a3      	strh	r3, [r4, #12]
 800a0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0b8:	4407      	add	r7, r0
 800a0ba:	eba8 0800 	sub.w	r8, r8, r0
 800a0be:	e7e7      	b.n	800a090 <__sflush_r+0xd4>
 800a0c0:	20400001 	.word	0x20400001

0800a0c4 <_fflush_r>:
 800a0c4:	b538      	push	{r3, r4, r5, lr}
 800a0c6:	690b      	ldr	r3, [r1, #16]
 800a0c8:	4605      	mov	r5, r0
 800a0ca:	460c      	mov	r4, r1
 800a0cc:	b913      	cbnz	r3, 800a0d4 <_fflush_r+0x10>
 800a0ce:	2500      	movs	r5, #0
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	bd38      	pop	{r3, r4, r5, pc}
 800a0d4:	b118      	cbz	r0, 800a0de <_fflush_r+0x1a>
 800a0d6:	6a03      	ldr	r3, [r0, #32]
 800a0d8:	b90b      	cbnz	r3, 800a0de <_fflush_r+0x1a>
 800a0da:	f7fd fa6d 	bl	80075b8 <__sinit>
 800a0de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d0f3      	beq.n	800a0ce <_fflush_r+0xa>
 800a0e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a0e8:	07d0      	lsls	r0, r2, #31
 800a0ea:	d404      	bmi.n	800a0f6 <_fflush_r+0x32>
 800a0ec:	0599      	lsls	r1, r3, #22
 800a0ee:	d402      	bmi.n	800a0f6 <_fflush_r+0x32>
 800a0f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0f2:	f7fd fb7a 	bl	80077ea <__retarget_lock_acquire_recursive>
 800a0f6:	4628      	mov	r0, r5
 800a0f8:	4621      	mov	r1, r4
 800a0fa:	f7ff ff5f 	bl	8009fbc <__sflush_r>
 800a0fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a100:	07da      	lsls	r2, r3, #31
 800a102:	4605      	mov	r5, r0
 800a104:	d4e4      	bmi.n	800a0d0 <_fflush_r+0xc>
 800a106:	89a3      	ldrh	r3, [r4, #12]
 800a108:	059b      	lsls	r3, r3, #22
 800a10a:	d4e1      	bmi.n	800a0d0 <_fflush_r+0xc>
 800a10c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a10e:	f7fd fb6d 	bl	80077ec <__retarget_lock_release_recursive>
 800a112:	e7dd      	b.n	800a0d0 <_fflush_r+0xc>

0800a114 <memmove>:
 800a114:	4288      	cmp	r0, r1
 800a116:	b510      	push	{r4, lr}
 800a118:	eb01 0402 	add.w	r4, r1, r2
 800a11c:	d902      	bls.n	800a124 <memmove+0x10>
 800a11e:	4284      	cmp	r4, r0
 800a120:	4623      	mov	r3, r4
 800a122:	d807      	bhi.n	800a134 <memmove+0x20>
 800a124:	1e43      	subs	r3, r0, #1
 800a126:	42a1      	cmp	r1, r4
 800a128:	d008      	beq.n	800a13c <memmove+0x28>
 800a12a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a12e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a132:	e7f8      	b.n	800a126 <memmove+0x12>
 800a134:	4402      	add	r2, r0
 800a136:	4601      	mov	r1, r0
 800a138:	428a      	cmp	r2, r1
 800a13a:	d100      	bne.n	800a13e <memmove+0x2a>
 800a13c:	bd10      	pop	{r4, pc}
 800a13e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a142:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a146:	e7f7      	b.n	800a138 <memmove+0x24>

0800a148 <strncmp>:
 800a148:	b510      	push	{r4, lr}
 800a14a:	b16a      	cbz	r2, 800a168 <strncmp+0x20>
 800a14c:	3901      	subs	r1, #1
 800a14e:	1884      	adds	r4, r0, r2
 800a150:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a154:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a158:	429a      	cmp	r2, r3
 800a15a:	d103      	bne.n	800a164 <strncmp+0x1c>
 800a15c:	42a0      	cmp	r0, r4
 800a15e:	d001      	beq.n	800a164 <strncmp+0x1c>
 800a160:	2a00      	cmp	r2, #0
 800a162:	d1f5      	bne.n	800a150 <strncmp+0x8>
 800a164:	1ad0      	subs	r0, r2, r3
 800a166:	bd10      	pop	{r4, pc}
 800a168:	4610      	mov	r0, r2
 800a16a:	e7fc      	b.n	800a166 <strncmp+0x1e>

0800a16c <_sbrk_r>:
 800a16c:	b538      	push	{r3, r4, r5, lr}
 800a16e:	4d06      	ldr	r5, [pc, #24]	@ (800a188 <_sbrk_r+0x1c>)
 800a170:	2300      	movs	r3, #0
 800a172:	4604      	mov	r4, r0
 800a174:	4608      	mov	r0, r1
 800a176:	602b      	str	r3, [r5, #0]
 800a178:	f7f8 f9b6 	bl	80024e8 <_sbrk>
 800a17c:	1c43      	adds	r3, r0, #1
 800a17e:	d102      	bne.n	800a186 <_sbrk_r+0x1a>
 800a180:	682b      	ldr	r3, [r5, #0]
 800a182:	b103      	cbz	r3, 800a186 <_sbrk_r+0x1a>
 800a184:	6023      	str	r3, [r4, #0]
 800a186:	bd38      	pop	{r3, r4, r5, pc}
 800a188:	20000694 	.word	0x20000694

0800a18c <memcpy>:
 800a18c:	440a      	add	r2, r1
 800a18e:	4291      	cmp	r1, r2
 800a190:	f100 33ff 	add.w	r3, r0, #4294967295
 800a194:	d100      	bne.n	800a198 <memcpy+0xc>
 800a196:	4770      	bx	lr
 800a198:	b510      	push	{r4, lr}
 800a19a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a19e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1a2:	4291      	cmp	r1, r2
 800a1a4:	d1f9      	bne.n	800a19a <memcpy+0xe>
 800a1a6:	bd10      	pop	{r4, pc}

0800a1a8 <nan>:
 800a1a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a1b0 <nan+0x8>
 800a1ac:	4770      	bx	lr
 800a1ae:	bf00      	nop
 800a1b0:	00000000 	.word	0x00000000
 800a1b4:	7ff80000 	.word	0x7ff80000

0800a1b8 <__assert_func>:
 800a1b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1ba:	4614      	mov	r4, r2
 800a1bc:	461a      	mov	r2, r3
 800a1be:	4b09      	ldr	r3, [pc, #36]	@ (800a1e4 <__assert_func+0x2c>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4605      	mov	r5, r0
 800a1c4:	68d8      	ldr	r0, [r3, #12]
 800a1c6:	b14c      	cbz	r4, 800a1dc <__assert_func+0x24>
 800a1c8:	4b07      	ldr	r3, [pc, #28]	@ (800a1e8 <__assert_func+0x30>)
 800a1ca:	9100      	str	r1, [sp, #0]
 800a1cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1d0:	4906      	ldr	r1, [pc, #24]	@ (800a1ec <__assert_func+0x34>)
 800a1d2:	462b      	mov	r3, r5
 800a1d4:	f000 fba8 	bl	800a928 <fiprintf>
 800a1d8:	f000 fbb8 	bl	800a94c <abort>
 800a1dc:	4b04      	ldr	r3, [pc, #16]	@ (800a1f0 <__assert_func+0x38>)
 800a1de:	461c      	mov	r4, r3
 800a1e0:	e7f3      	b.n	800a1ca <__assert_func+0x12>
 800a1e2:	bf00      	nop
 800a1e4:	20000024 	.word	0x20000024
 800a1e8:	0800b02a 	.word	0x0800b02a
 800a1ec:	0800b037 	.word	0x0800b037
 800a1f0:	0800b065 	.word	0x0800b065

0800a1f4 <_calloc_r>:
 800a1f4:	b570      	push	{r4, r5, r6, lr}
 800a1f6:	fba1 5402 	umull	r5, r4, r1, r2
 800a1fa:	b934      	cbnz	r4, 800a20a <_calloc_r+0x16>
 800a1fc:	4629      	mov	r1, r5
 800a1fe:	f7fe f9cb 	bl	8008598 <_malloc_r>
 800a202:	4606      	mov	r6, r0
 800a204:	b928      	cbnz	r0, 800a212 <_calloc_r+0x1e>
 800a206:	4630      	mov	r0, r6
 800a208:	bd70      	pop	{r4, r5, r6, pc}
 800a20a:	220c      	movs	r2, #12
 800a20c:	6002      	str	r2, [r0, #0]
 800a20e:	2600      	movs	r6, #0
 800a210:	e7f9      	b.n	800a206 <_calloc_r+0x12>
 800a212:	462a      	mov	r2, r5
 800a214:	4621      	mov	r1, r4
 800a216:	f7fd fa6a 	bl	80076ee <memset>
 800a21a:	e7f4      	b.n	800a206 <_calloc_r+0x12>

0800a21c <rshift>:
 800a21c:	6903      	ldr	r3, [r0, #16]
 800a21e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a222:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a226:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a22a:	f100 0414 	add.w	r4, r0, #20
 800a22e:	dd45      	ble.n	800a2bc <rshift+0xa0>
 800a230:	f011 011f 	ands.w	r1, r1, #31
 800a234:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a238:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a23c:	d10c      	bne.n	800a258 <rshift+0x3c>
 800a23e:	f100 0710 	add.w	r7, r0, #16
 800a242:	4629      	mov	r1, r5
 800a244:	42b1      	cmp	r1, r6
 800a246:	d334      	bcc.n	800a2b2 <rshift+0x96>
 800a248:	1a9b      	subs	r3, r3, r2
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	1eea      	subs	r2, r5, #3
 800a24e:	4296      	cmp	r6, r2
 800a250:	bf38      	it	cc
 800a252:	2300      	movcc	r3, #0
 800a254:	4423      	add	r3, r4
 800a256:	e015      	b.n	800a284 <rshift+0x68>
 800a258:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a25c:	f1c1 0820 	rsb	r8, r1, #32
 800a260:	40cf      	lsrs	r7, r1
 800a262:	f105 0e04 	add.w	lr, r5, #4
 800a266:	46a1      	mov	r9, r4
 800a268:	4576      	cmp	r6, lr
 800a26a:	46f4      	mov	ip, lr
 800a26c:	d815      	bhi.n	800a29a <rshift+0x7e>
 800a26e:	1a9a      	subs	r2, r3, r2
 800a270:	0092      	lsls	r2, r2, #2
 800a272:	3a04      	subs	r2, #4
 800a274:	3501      	adds	r5, #1
 800a276:	42ae      	cmp	r6, r5
 800a278:	bf38      	it	cc
 800a27a:	2200      	movcc	r2, #0
 800a27c:	18a3      	adds	r3, r4, r2
 800a27e:	50a7      	str	r7, [r4, r2]
 800a280:	b107      	cbz	r7, 800a284 <rshift+0x68>
 800a282:	3304      	adds	r3, #4
 800a284:	1b1a      	subs	r2, r3, r4
 800a286:	42a3      	cmp	r3, r4
 800a288:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a28c:	bf08      	it	eq
 800a28e:	2300      	moveq	r3, #0
 800a290:	6102      	str	r2, [r0, #16]
 800a292:	bf08      	it	eq
 800a294:	6143      	streq	r3, [r0, #20]
 800a296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a29a:	f8dc c000 	ldr.w	ip, [ip]
 800a29e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a2a2:	ea4c 0707 	orr.w	r7, ip, r7
 800a2a6:	f849 7b04 	str.w	r7, [r9], #4
 800a2aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a2ae:	40cf      	lsrs	r7, r1
 800a2b0:	e7da      	b.n	800a268 <rshift+0x4c>
 800a2b2:	f851 cb04 	ldr.w	ip, [r1], #4
 800a2b6:	f847 cf04 	str.w	ip, [r7, #4]!
 800a2ba:	e7c3      	b.n	800a244 <rshift+0x28>
 800a2bc:	4623      	mov	r3, r4
 800a2be:	e7e1      	b.n	800a284 <rshift+0x68>

0800a2c0 <__hexdig_fun>:
 800a2c0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a2c4:	2b09      	cmp	r3, #9
 800a2c6:	d802      	bhi.n	800a2ce <__hexdig_fun+0xe>
 800a2c8:	3820      	subs	r0, #32
 800a2ca:	b2c0      	uxtb	r0, r0
 800a2cc:	4770      	bx	lr
 800a2ce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a2d2:	2b05      	cmp	r3, #5
 800a2d4:	d801      	bhi.n	800a2da <__hexdig_fun+0x1a>
 800a2d6:	3847      	subs	r0, #71	@ 0x47
 800a2d8:	e7f7      	b.n	800a2ca <__hexdig_fun+0xa>
 800a2da:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a2de:	2b05      	cmp	r3, #5
 800a2e0:	d801      	bhi.n	800a2e6 <__hexdig_fun+0x26>
 800a2e2:	3827      	subs	r0, #39	@ 0x27
 800a2e4:	e7f1      	b.n	800a2ca <__hexdig_fun+0xa>
 800a2e6:	2000      	movs	r0, #0
 800a2e8:	4770      	bx	lr
	...

0800a2ec <__gethex>:
 800a2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f0:	b085      	sub	sp, #20
 800a2f2:	468a      	mov	sl, r1
 800a2f4:	9302      	str	r3, [sp, #8]
 800a2f6:	680b      	ldr	r3, [r1, #0]
 800a2f8:	9001      	str	r0, [sp, #4]
 800a2fa:	4690      	mov	r8, r2
 800a2fc:	1c9c      	adds	r4, r3, #2
 800a2fe:	46a1      	mov	r9, r4
 800a300:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a304:	2830      	cmp	r0, #48	@ 0x30
 800a306:	d0fa      	beq.n	800a2fe <__gethex+0x12>
 800a308:	eba9 0303 	sub.w	r3, r9, r3
 800a30c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a310:	f7ff ffd6 	bl	800a2c0 <__hexdig_fun>
 800a314:	4605      	mov	r5, r0
 800a316:	2800      	cmp	r0, #0
 800a318:	d168      	bne.n	800a3ec <__gethex+0x100>
 800a31a:	49a0      	ldr	r1, [pc, #640]	@ (800a59c <__gethex+0x2b0>)
 800a31c:	2201      	movs	r2, #1
 800a31e:	4648      	mov	r0, r9
 800a320:	f7ff ff12 	bl	800a148 <strncmp>
 800a324:	4607      	mov	r7, r0
 800a326:	2800      	cmp	r0, #0
 800a328:	d167      	bne.n	800a3fa <__gethex+0x10e>
 800a32a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a32e:	4626      	mov	r6, r4
 800a330:	f7ff ffc6 	bl	800a2c0 <__hexdig_fun>
 800a334:	2800      	cmp	r0, #0
 800a336:	d062      	beq.n	800a3fe <__gethex+0x112>
 800a338:	4623      	mov	r3, r4
 800a33a:	7818      	ldrb	r0, [r3, #0]
 800a33c:	2830      	cmp	r0, #48	@ 0x30
 800a33e:	4699      	mov	r9, r3
 800a340:	f103 0301 	add.w	r3, r3, #1
 800a344:	d0f9      	beq.n	800a33a <__gethex+0x4e>
 800a346:	f7ff ffbb 	bl	800a2c0 <__hexdig_fun>
 800a34a:	fab0 f580 	clz	r5, r0
 800a34e:	096d      	lsrs	r5, r5, #5
 800a350:	f04f 0b01 	mov.w	fp, #1
 800a354:	464a      	mov	r2, r9
 800a356:	4616      	mov	r6, r2
 800a358:	3201      	adds	r2, #1
 800a35a:	7830      	ldrb	r0, [r6, #0]
 800a35c:	f7ff ffb0 	bl	800a2c0 <__hexdig_fun>
 800a360:	2800      	cmp	r0, #0
 800a362:	d1f8      	bne.n	800a356 <__gethex+0x6a>
 800a364:	498d      	ldr	r1, [pc, #564]	@ (800a59c <__gethex+0x2b0>)
 800a366:	2201      	movs	r2, #1
 800a368:	4630      	mov	r0, r6
 800a36a:	f7ff feed 	bl	800a148 <strncmp>
 800a36e:	2800      	cmp	r0, #0
 800a370:	d13f      	bne.n	800a3f2 <__gethex+0x106>
 800a372:	b944      	cbnz	r4, 800a386 <__gethex+0x9a>
 800a374:	1c74      	adds	r4, r6, #1
 800a376:	4622      	mov	r2, r4
 800a378:	4616      	mov	r6, r2
 800a37a:	3201      	adds	r2, #1
 800a37c:	7830      	ldrb	r0, [r6, #0]
 800a37e:	f7ff ff9f 	bl	800a2c0 <__hexdig_fun>
 800a382:	2800      	cmp	r0, #0
 800a384:	d1f8      	bne.n	800a378 <__gethex+0x8c>
 800a386:	1ba4      	subs	r4, r4, r6
 800a388:	00a7      	lsls	r7, r4, #2
 800a38a:	7833      	ldrb	r3, [r6, #0]
 800a38c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a390:	2b50      	cmp	r3, #80	@ 0x50
 800a392:	d13e      	bne.n	800a412 <__gethex+0x126>
 800a394:	7873      	ldrb	r3, [r6, #1]
 800a396:	2b2b      	cmp	r3, #43	@ 0x2b
 800a398:	d033      	beq.n	800a402 <__gethex+0x116>
 800a39a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a39c:	d034      	beq.n	800a408 <__gethex+0x11c>
 800a39e:	1c71      	adds	r1, r6, #1
 800a3a0:	2400      	movs	r4, #0
 800a3a2:	7808      	ldrb	r0, [r1, #0]
 800a3a4:	f7ff ff8c 	bl	800a2c0 <__hexdig_fun>
 800a3a8:	1e43      	subs	r3, r0, #1
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	2b18      	cmp	r3, #24
 800a3ae:	d830      	bhi.n	800a412 <__gethex+0x126>
 800a3b0:	f1a0 0210 	sub.w	r2, r0, #16
 800a3b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a3b8:	f7ff ff82 	bl	800a2c0 <__hexdig_fun>
 800a3bc:	f100 3cff 	add.w	ip, r0, #4294967295
 800a3c0:	fa5f fc8c 	uxtb.w	ip, ip
 800a3c4:	f1bc 0f18 	cmp.w	ip, #24
 800a3c8:	f04f 030a 	mov.w	r3, #10
 800a3cc:	d91e      	bls.n	800a40c <__gethex+0x120>
 800a3ce:	b104      	cbz	r4, 800a3d2 <__gethex+0xe6>
 800a3d0:	4252      	negs	r2, r2
 800a3d2:	4417      	add	r7, r2
 800a3d4:	f8ca 1000 	str.w	r1, [sl]
 800a3d8:	b1ed      	cbz	r5, 800a416 <__gethex+0x12a>
 800a3da:	f1bb 0f00 	cmp.w	fp, #0
 800a3de:	bf0c      	ite	eq
 800a3e0:	2506      	moveq	r5, #6
 800a3e2:	2500      	movne	r5, #0
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	b005      	add	sp, #20
 800a3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ec:	2500      	movs	r5, #0
 800a3ee:	462c      	mov	r4, r5
 800a3f0:	e7b0      	b.n	800a354 <__gethex+0x68>
 800a3f2:	2c00      	cmp	r4, #0
 800a3f4:	d1c7      	bne.n	800a386 <__gethex+0x9a>
 800a3f6:	4627      	mov	r7, r4
 800a3f8:	e7c7      	b.n	800a38a <__gethex+0x9e>
 800a3fa:	464e      	mov	r6, r9
 800a3fc:	462f      	mov	r7, r5
 800a3fe:	2501      	movs	r5, #1
 800a400:	e7c3      	b.n	800a38a <__gethex+0x9e>
 800a402:	2400      	movs	r4, #0
 800a404:	1cb1      	adds	r1, r6, #2
 800a406:	e7cc      	b.n	800a3a2 <__gethex+0xb6>
 800a408:	2401      	movs	r4, #1
 800a40a:	e7fb      	b.n	800a404 <__gethex+0x118>
 800a40c:	fb03 0002 	mla	r0, r3, r2, r0
 800a410:	e7ce      	b.n	800a3b0 <__gethex+0xc4>
 800a412:	4631      	mov	r1, r6
 800a414:	e7de      	b.n	800a3d4 <__gethex+0xe8>
 800a416:	eba6 0309 	sub.w	r3, r6, r9
 800a41a:	3b01      	subs	r3, #1
 800a41c:	4629      	mov	r1, r5
 800a41e:	2b07      	cmp	r3, #7
 800a420:	dc0a      	bgt.n	800a438 <__gethex+0x14c>
 800a422:	9801      	ldr	r0, [sp, #4]
 800a424:	f7fe f944 	bl	80086b0 <_Balloc>
 800a428:	4604      	mov	r4, r0
 800a42a:	b940      	cbnz	r0, 800a43e <__gethex+0x152>
 800a42c:	4b5c      	ldr	r3, [pc, #368]	@ (800a5a0 <__gethex+0x2b4>)
 800a42e:	4602      	mov	r2, r0
 800a430:	21e4      	movs	r1, #228	@ 0xe4
 800a432:	485c      	ldr	r0, [pc, #368]	@ (800a5a4 <__gethex+0x2b8>)
 800a434:	f7ff fec0 	bl	800a1b8 <__assert_func>
 800a438:	3101      	adds	r1, #1
 800a43a:	105b      	asrs	r3, r3, #1
 800a43c:	e7ef      	b.n	800a41e <__gethex+0x132>
 800a43e:	f100 0a14 	add.w	sl, r0, #20
 800a442:	2300      	movs	r3, #0
 800a444:	4655      	mov	r5, sl
 800a446:	469b      	mov	fp, r3
 800a448:	45b1      	cmp	r9, r6
 800a44a:	d337      	bcc.n	800a4bc <__gethex+0x1d0>
 800a44c:	f845 bb04 	str.w	fp, [r5], #4
 800a450:	eba5 050a 	sub.w	r5, r5, sl
 800a454:	10ad      	asrs	r5, r5, #2
 800a456:	6125      	str	r5, [r4, #16]
 800a458:	4658      	mov	r0, fp
 800a45a:	f7fe fa1b 	bl	8008894 <__hi0bits>
 800a45e:	016d      	lsls	r5, r5, #5
 800a460:	f8d8 6000 	ldr.w	r6, [r8]
 800a464:	1a2d      	subs	r5, r5, r0
 800a466:	42b5      	cmp	r5, r6
 800a468:	dd54      	ble.n	800a514 <__gethex+0x228>
 800a46a:	1bad      	subs	r5, r5, r6
 800a46c:	4629      	mov	r1, r5
 800a46e:	4620      	mov	r0, r4
 800a470:	f7fe fda7 	bl	8008fc2 <__any_on>
 800a474:	4681      	mov	r9, r0
 800a476:	b178      	cbz	r0, 800a498 <__gethex+0x1ac>
 800a478:	1e6b      	subs	r3, r5, #1
 800a47a:	1159      	asrs	r1, r3, #5
 800a47c:	f003 021f 	and.w	r2, r3, #31
 800a480:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a484:	f04f 0901 	mov.w	r9, #1
 800a488:	fa09 f202 	lsl.w	r2, r9, r2
 800a48c:	420a      	tst	r2, r1
 800a48e:	d003      	beq.n	800a498 <__gethex+0x1ac>
 800a490:	454b      	cmp	r3, r9
 800a492:	dc36      	bgt.n	800a502 <__gethex+0x216>
 800a494:	f04f 0902 	mov.w	r9, #2
 800a498:	4629      	mov	r1, r5
 800a49a:	4620      	mov	r0, r4
 800a49c:	f7ff febe 	bl	800a21c <rshift>
 800a4a0:	442f      	add	r7, r5
 800a4a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a4a6:	42bb      	cmp	r3, r7
 800a4a8:	da42      	bge.n	800a530 <__gethex+0x244>
 800a4aa:	9801      	ldr	r0, [sp, #4]
 800a4ac:	4621      	mov	r1, r4
 800a4ae:	f7fe f93f 	bl	8008730 <_Bfree>
 800a4b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	6013      	str	r3, [r2, #0]
 800a4b8:	25a3      	movs	r5, #163	@ 0xa3
 800a4ba:	e793      	b.n	800a3e4 <__gethex+0xf8>
 800a4bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a4c0:	2a2e      	cmp	r2, #46	@ 0x2e
 800a4c2:	d012      	beq.n	800a4ea <__gethex+0x1fe>
 800a4c4:	2b20      	cmp	r3, #32
 800a4c6:	d104      	bne.n	800a4d2 <__gethex+0x1e6>
 800a4c8:	f845 bb04 	str.w	fp, [r5], #4
 800a4cc:	f04f 0b00 	mov.w	fp, #0
 800a4d0:	465b      	mov	r3, fp
 800a4d2:	7830      	ldrb	r0, [r6, #0]
 800a4d4:	9303      	str	r3, [sp, #12]
 800a4d6:	f7ff fef3 	bl	800a2c0 <__hexdig_fun>
 800a4da:	9b03      	ldr	r3, [sp, #12]
 800a4dc:	f000 000f 	and.w	r0, r0, #15
 800a4e0:	4098      	lsls	r0, r3
 800a4e2:	ea4b 0b00 	orr.w	fp, fp, r0
 800a4e6:	3304      	adds	r3, #4
 800a4e8:	e7ae      	b.n	800a448 <__gethex+0x15c>
 800a4ea:	45b1      	cmp	r9, r6
 800a4ec:	d8ea      	bhi.n	800a4c4 <__gethex+0x1d8>
 800a4ee:	492b      	ldr	r1, [pc, #172]	@ (800a59c <__gethex+0x2b0>)
 800a4f0:	9303      	str	r3, [sp, #12]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	4630      	mov	r0, r6
 800a4f6:	f7ff fe27 	bl	800a148 <strncmp>
 800a4fa:	9b03      	ldr	r3, [sp, #12]
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	d1e1      	bne.n	800a4c4 <__gethex+0x1d8>
 800a500:	e7a2      	b.n	800a448 <__gethex+0x15c>
 800a502:	1ea9      	subs	r1, r5, #2
 800a504:	4620      	mov	r0, r4
 800a506:	f7fe fd5c 	bl	8008fc2 <__any_on>
 800a50a:	2800      	cmp	r0, #0
 800a50c:	d0c2      	beq.n	800a494 <__gethex+0x1a8>
 800a50e:	f04f 0903 	mov.w	r9, #3
 800a512:	e7c1      	b.n	800a498 <__gethex+0x1ac>
 800a514:	da09      	bge.n	800a52a <__gethex+0x23e>
 800a516:	1b75      	subs	r5, r6, r5
 800a518:	4621      	mov	r1, r4
 800a51a:	9801      	ldr	r0, [sp, #4]
 800a51c:	462a      	mov	r2, r5
 800a51e:	f7fe fb17 	bl	8008b50 <__lshift>
 800a522:	1b7f      	subs	r7, r7, r5
 800a524:	4604      	mov	r4, r0
 800a526:	f100 0a14 	add.w	sl, r0, #20
 800a52a:	f04f 0900 	mov.w	r9, #0
 800a52e:	e7b8      	b.n	800a4a2 <__gethex+0x1b6>
 800a530:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a534:	42bd      	cmp	r5, r7
 800a536:	dd6f      	ble.n	800a618 <__gethex+0x32c>
 800a538:	1bed      	subs	r5, r5, r7
 800a53a:	42ae      	cmp	r6, r5
 800a53c:	dc34      	bgt.n	800a5a8 <__gethex+0x2bc>
 800a53e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a542:	2b02      	cmp	r3, #2
 800a544:	d022      	beq.n	800a58c <__gethex+0x2a0>
 800a546:	2b03      	cmp	r3, #3
 800a548:	d024      	beq.n	800a594 <__gethex+0x2a8>
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d115      	bne.n	800a57a <__gethex+0x28e>
 800a54e:	42ae      	cmp	r6, r5
 800a550:	d113      	bne.n	800a57a <__gethex+0x28e>
 800a552:	2e01      	cmp	r6, #1
 800a554:	d10b      	bne.n	800a56e <__gethex+0x282>
 800a556:	9a02      	ldr	r2, [sp, #8]
 800a558:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a55c:	6013      	str	r3, [r2, #0]
 800a55e:	2301      	movs	r3, #1
 800a560:	6123      	str	r3, [r4, #16]
 800a562:	f8ca 3000 	str.w	r3, [sl]
 800a566:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a568:	2562      	movs	r5, #98	@ 0x62
 800a56a:	601c      	str	r4, [r3, #0]
 800a56c:	e73a      	b.n	800a3e4 <__gethex+0xf8>
 800a56e:	1e71      	subs	r1, r6, #1
 800a570:	4620      	mov	r0, r4
 800a572:	f7fe fd26 	bl	8008fc2 <__any_on>
 800a576:	2800      	cmp	r0, #0
 800a578:	d1ed      	bne.n	800a556 <__gethex+0x26a>
 800a57a:	9801      	ldr	r0, [sp, #4]
 800a57c:	4621      	mov	r1, r4
 800a57e:	f7fe f8d7 	bl	8008730 <_Bfree>
 800a582:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a584:	2300      	movs	r3, #0
 800a586:	6013      	str	r3, [r2, #0]
 800a588:	2550      	movs	r5, #80	@ 0x50
 800a58a:	e72b      	b.n	800a3e4 <__gethex+0xf8>
 800a58c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d1f3      	bne.n	800a57a <__gethex+0x28e>
 800a592:	e7e0      	b.n	800a556 <__gethex+0x26a>
 800a594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a596:	2b00      	cmp	r3, #0
 800a598:	d1dd      	bne.n	800a556 <__gethex+0x26a>
 800a59a:	e7ee      	b.n	800a57a <__gethex+0x28e>
 800a59c:	0800b00f 	.word	0x0800b00f
 800a5a0:	0800afa5 	.word	0x0800afa5
 800a5a4:	0800b066 	.word	0x0800b066
 800a5a8:	1e6f      	subs	r7, r5, #1
 800a5aa:	f1b9 0f00 	cmp.w	r9, #0
 800a5ae:	d130      	bne.n	800a612 <__gethex+0x326>
 800a5b0:	b127      	cbz	r7, 800a5bc <__gethex+0x2d0>
 800a5b2:	4639      	mov	r1, r7
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	f7fe fd04 	bl	8008fc2 <__any_on>
 800a5ba:	4681      	mov	r9, r0
 800a5bc:	117a      	asrs	r2, r7, #5
 800a5be:	2301      	movs	r3, #1
 800a5c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a5c4:	f007 071f 	and.w	r7, r7, #31
 800a5c8:	40bb      	lsls	r3, r7
 800a5ca:	4213      	tst	r3, r2
 800a5cc:	4629      	mov	r1, r5
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	bf18      	it	ne
 800a5d2:	f049 0902 	orrne.w	r9, r9, #2
 800a5d6:	f7ff fe21 	bl	800a21c <rshift>
 800a5da:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a5de:	1b76      	subs	r6, r6, r5
 800a5e0:	2502      	movs	r5, #2
 800a5e2:	f1b9 0f00 	cmp.w	r9, #0
 800a5e6:	d047      	beq.n	800a678 <__gethex+0x38c>
 800a5e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a5ec:	2b02      	cmp	r3, #2
 800a5ee:	d015      	beq.n	800a61c <__gethex+0x330>
 800a5f0:	2b03      	cmp	r3, #3
 800a5f2:	d017      	beq.n	800a624 <__gethex+0x338>
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d109      	bne.n	800a60c <__gethex+0x320>
 800a5f8:	f019 0f02 	tst.w	r9, #2
 800a5fc:	d006      	beq.n	800a60c <__gethex+0x320>
 800a5fe:	f8da 3000 	ldr.w	r3, [sl]
 800a602:	ea49 0903 	orr.w	r9, r9, r3
 800a606:	f019 0f01 	tst.w	r9, #1
 800a60a:	d10e      	bne.n	800a62a <__gethex+0x33e>
 800a60c:	f045 0510 	orr.w	r5, r5, #16
 800a610:	e032      	b.n	800a678 <__gethex+0x38c>
 800a612:	f04f 0901 	mov.w	r9, #1
 800a616:	e7d1      	b.n	800a5bc <__gethex+0x2d0>
 800a618:	2501      	movs	r5, #1
 800a61a:	e7e2      	b.n	800a5e2 <__gethex+0x2f6>
 800a61c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a61e:	f1c3 0301 	rsb	r3, r3, #1
 800a622:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a624:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a626:	2b00      	cmp	r3, #0
 800a628:	d0f0      	beq.n	800a60c <__gethex+0x320>
 800a62a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a62e:	f104 0314 	add.w	r3, r4, #20
 800a632:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a636:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a63a:	f04f 0c00 	mov.w	ip, #0
 800a63e:	4618      	mov	r0, r3
 800a640:	f853 2b04 	ldr.w	r2, [r3], #4
 800a644:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a648:	d01b      	beq.n	800a682 <__gethex+0x396>
 800a64a:	3201      	adds	r2, #1
 800a64c:	6002      	str	r2, [r0, #0]
 800a64e:	2d02      	cmp	r5, #2
 800a650:	f104 0314 	add.w	r3, r4, #20
 800a654:	d13c      	bne.n	800a6d0 <__gethex+0x3e4>
 800a656:	f8d8 2000 	ldr.w	r2, [r8]
 800a65a:	3a01      	subs	r2, #1
 800a65c:	42b2      	cmp	r2, r6
 800a65e:	d109      	bne.n	800a674 <__gethex+0x388>
 800a660:	1171      	asrs	r1, r6, #5
 800a662:	2201      	movs	r2, #1
 800a664:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a668:	f006 061f 	and.w	r6, r6, #31
 800a66c:	fa02 f606 	lsl.w	r6, r2, r6
 800a670:	421e      	tst	r6, r3
 800a672:	d13a      	bne.n	800a6ea <__gethex+0x3fe>
 800a674:	f045 0520 	orr.w	r5, r5, #32
 800a678:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a67a:	601c      	str	r4, [r3, #0]
 800a67c:	9b02      	ldr	r3, [sp, #8]
 800a67e:	601f      	str	r7, [r3, #0]
 800a680:	e6b0      	b.n	800a3e4 <__gethex+0xf8>
 800a682:	4299      	cmp	r1, r3
 800a684:	f843 cc04 	str.w	ip, [r3, #-4]
 800a688:	d8d9      	bhi.n	800a63e <__gethex+0x352>
 800a68a:	68a3      	ldr	r3, [r4, #8]
 800a68c:	459b      	cmp	fp, r3
 800a68e:	db17      	blt.n	800a6c0 <__gethex+0x3d4>
 800a690:	6861      	ldr	r1, [r4, #4]
 800a692:	9801      	ldr	r0, [sp, #4]
 800a694:	3101      	adds	r1, #1
 800a696:	f7fe f80b 	bl	80086b0 <_Balloc>
 800a69a:	4681      	mov	r9, r0
 800a69c:	b918      	cbnz	r0, 800a6a6 <__gethex+0x3ba>
 800a69e:	4b1a      	ldr	r3, [pc, #104]	@ (800a708 <__gethex+0x41c>)
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	2184      	movs	r1, #132	@ 0x84
 800a6a4:	e6c5      	b.n	800a432 <__gethex+0x146>
 800a6a6:	6922      	ldr	r2, [r4, #16]
 800a6a8:	3202      	adds	r2, #2
 800a6aa:	f104 010c 	add.w	r1, r4, #12
 800a6ae:	0092      	lsls	r2, r2, #2
 800a6b0:	300c      	adds	r0, #12
 800a6b2:	f7ff fd6b 	bl	800a18c <memcpy>
 800a6b6:	4621      	mov	r1, r4
 800a6b8:	9801      	ldr	r0, [sp, #4]
 800a6ba:	f7fe f839 	bl	8008730 <_Bfree>
 800a6be:	464c      	mov	r4, r9
 800a6c0:	6923      	ldr	r3, [r4, #16]
 800a6c2:	1c5a      	adds	r2, r3, #1
 800a6c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a6c8:	6122      	str	r2, [r4, #16]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	615a      	str	r2, [r3, #20]
 800a6ce:	e7be      	b.n	800a64e <__gethex+0x362>
 800a6d0:	6922      	ldr	r2, [r4, #16]
 800a6d2:	455a      	cmp	r2, fp
 800a6d4:	dd0b      	ble.n	800a6ee <__gethex+0x402>
 800a6d6:	2101      	movs	r1, #1
 800a6d8:	4620      	mov	r0, r4
 800a6da:	f7ff fd9f 	bl	800a21c <rshift>
 800a6de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6e2:	3701      	adds	r7, #1
 800a6e4:	42bb      	cmp	r3, r7
 800a6e6:	f6ff aee0 	blt.w	800a4aa <__gethex+0x1be>
 800a6ea:	2501      	movs	r5, #1
 800a6ec:	e7c2      	b.n	800a674 <__gethex+0x388>
 800a6ee:	f016 061f 	ands.w	r6, r6, #31
 800a6f2:	d0fa      	beq.n	800a6ea <__gethex+0x3fe>
 800a6f4:	4453      	add	r3, sl
 800a6f6:	f1c6 0620 	rsb	r6, r6, #32
 800a6fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a6fe:	f7fe f8c9 	bl	8008894 <__hi0bits>
 800a702:	42b0      	cmp	r0, r6
 800a704:	dbe7      	blt.n	800a6d6 <__gethex+0x3ea>
 800a706:	e7f0      	b.n	800a6ea <__gethex+0x3fe>
 800a708:	0800afa5 	.word	0x0800afa5

0800a70c <L_shift>:
 800a70c:	f1c2 0208 	rsb	r2, r2, #8
 800a710:	0092      	lsls	r2, r2, #2
 800a712:	b570      	push	{r4, r5, r6, lr}
 800a714:	f1c2 0620 	rsb	r6, r2, #32
 800a718:	6843      	ldr	r3, [r0, #4]
 800a71a:	6804      	ldr	r4, [r0, #0]
 800a71c:	fa03 f506 	lsl.w	r5, r3, r6
 800a720:	432c      	orrs	r4, r5
 800a722:	40d3      	lsrs	r3, r2
 800a724:	6004      	str	r4, [r0, #0]
 800a726:	f840 3f04 	str.w	r3, [r0, #4]!
 800a72a:	4288      	cmp	r0, r1
 800a72c:	d3f4      	bcc.n	800a718 <L_shift+0xc>
 800a72e:	bd70      	pop	{r4, r5, r6, pc}

0800a730 <__match>:
 800a730:	b530      	push	{r4, r5, lr}
 800a732:	6803      	ldr	r3, [r0, #0]
 800a734:	3301      	adds	r3, #1
 800a736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a73a:	b914      	cbnz	r4, 800a742 <__match+0x12>
 800a73c:	6003      	str	r3, [r0, #0]
 800a73e:	2001      	movs	r0, #1
 800a740:	bd30      	pop	{r4, r5, pc}
 800a742:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a746:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a74a:	2d19      	cmp	r5, #25
 800a74c:	bf98      	it	ls
 800a74e:	3220      	addls	r2, #32
 800a750:	42a2      	cmp	r2, r4
 800a752:	d0f0      	beq.n	800a736 <__match+0x6>
 800a754:	2000      	movs	r0, #0
 800a756:	e7f3      	b.n	800a740 <__match+0x10>

0800a758 <__hexnan>:
 800a758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a75c:	680b      	ldr	r3, [r1, #0]
 800a75e:	6801      	ldr	r1, [r0, #0]
 800a760:	115e      	asrs	r6, r3, #5
 800a762:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a766:	f013 031f 	ands.w	r3, r3, #31
 800a76a:	b087      	sub	sp, #28
 800a76c:	bf18      	it	ne
 800a76e:	3604      	addne	r6, #4
 800a770:	2500      	movs	r5, #0
 800a772:	1f37      	subs	r7, r6, #4
 800a774:	4682      	mov	sl, r0
 800a776:	4690      	mov	r8, r2
 800a778:	9301      	str	r3, [sp, #4]
 800a77a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a77e:	46b9      	mov	r9, r7
 800a780:	463c      	mov	r4, r7
 800a782:	9502      	str	r5, [sp, #8]
 800a784:	46ab      	mov	fp, r5
 800a786:	784a      	ldrb	r2, [r1, #1]
 800a788:	1c4b      	adds	r3, r1, #1
 800a78a:	9303      	str	r3, [sp, #12]
 800a78c:	b342      	cbz	r2, 800a7e0 <__hexnan+0x88>
 800a78e:	4610      	mov	r0, r2
 800a790:	9105      	str	r1, [sp, #20]
 800a792:	9204      	str	r2, [sp, #16]
 800a794:	f7ff fd94 	bl	800a2c0 <__hexdig_fun>
 800a798:	2800      	cmp	r0, #0
 800a79a:	d151      	bne.n	800a840 <__hexnan+0xe8>
 800a79c:	9a04      	ldr	r2, [sp, #16]
 800a79e:	9905      	ldr	r1, [sp, #20]
 800a7a0:	2a20      	cmp	r2, #32
 800a7a2:	d818      	bhi.n	800a7d6 <__hexnan+0x7e>
 800a7a4:	9b02      	ldr	r3, [sp, #8]
 800a7a6:	459b      	cmp	fp, r3
 800a7a8:	dd13      	ble.n	800a7d2 <__hexnan+0x7a>
 800a7aa:	454c      	cmp	r4, r9
 800a7ac:	d206      	bcs.n	800a7bc <__hexnan+0x64>
 800a7ae:	2d07      	cmp	r5, #7
 800a7b0:	dc04      	bgt.n	800a7bc <__hexnan+0x64>
 800a7b2:	462a      	mov	r2, r5
 800a7b4:	4649      	mov	r1, r9
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	f7ff ffa8 	bl	800a70c <L_shift>
 800a7bc:	4544      	cmp	r4, r8
 800a7be:	d952      	bls.n	800a866 <__hexnan+0x10e>
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	f1a4 0904 	sub.w	r9, r4, #4
 800a7c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a7ca:	f8cd b008 	str.w	fp, [sp, #8]
 800a7ce:	464c      	mov	r4, r9
 800a7d0:	461d      	mov	r5, r3
 800a7d2:	9903      	ldr	r1, [sp, #12]
 800a7d4:	e7d7      	b.n	800a786 <__hexnan+0x2e>
 800a7d6:	2a29      	cmp	r2, #41	@ 0x29
 800a7d8:	d157      	bne.n	800a88a <__hexnan+0x132>
 800a7da:	3102      	adds	r1, #2
 800a7dc:	f8ca 1000 	str.w	r1, [sl]
 800a7e0:	f1bb 0f00 	cmp.w	fp, #0
 800a7e4:	d051      	beq.n	800a88a <__hexnan+0x132>
 800a7e6:	454c      	cmp	r4, r9
 800a7e8:	d206      	bcs.n	800a7f8 <__hexnan+0xa0>
 800a7ea:	2d07      	cmp	r5, #7
 800a7ec:	dc04      	bgt.n	800a7f8 <__hexnan+0xa0>
 800a7ee:	462a      	mov	r2, r5
 800a7f0:	4649      	mov	r1, r9
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	f7ff ff8a 	bl	800a70c <L_shift>
 800a7f8:	4544      	cmp	r4, r8
 800a7fa:	d936      	bls.n	800a86a <__hexnan+0x112>
 800a7fc:	f1a8 0204 	sub.w	r2, r8, #4
 800a800:	4623      	mov	r3, r4
 800a802:	f853 1b04 	ldr.w	r1, [r3], #4
 800a806:	f842 1f04 	str.w	r1, [r2, #4]!
 800a80a:	429f      	cmp	r7, r3
 800a80c:	d2f9      	bcs.n	800a802 <__hexnan+0xaa>
 800a80e:	1b3b      	subs	r3, r7, r4
 800a810:	f023 0303 	bic.w	r3, r3, #3
 800a814:	3304      	adds	r3, #4
 800a816:	3401      	adds	r4, #1
 800a818:	3e03      	subs	r6, #3
 800a81a:	42b4      	cmp	r4, r6
 800a81c:	bf88      	it	hi
 800a81e:	2304      	movhi	r3, #4
 800a820:	4443      	add	r3, r8
 800a822:	2200      	movs	r2, #0
 800a824:	f843 2b04 	str.w	r2, [r3], #4
 800a828:	429f      	cmp	r7, r3
 800a82a:	d2fb      	bcs.n	800a824 <__hexnan+0xcc>
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	b91b      	cbnz	r3, 800a838 <__hexnan+0xe0>
 800a830:	4547      	cmp	r7, r8
 800a832:	d128      	bne.n	800a886 <__hexnan+0x12e>
 800a834:	2301      	movs	r3, #1
 800a836:	603b      	str	r3, [r7, #0]
 800a838:	2005      	movs	r0, #5
 800a83a:	b007      	add	sp, #28
 800a83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a840:	3501      	adds	r5, #1
 800a842:	2d08      	cmp	r5, #8
 800a844:	f10b 0b01 	add.w	fp, fp, #1
 800a848:	dd06      	ble.n	800a858 <__hexnan+0x100>
 800a84a:	4544      	cmp	r4, r8
 800a84c:	d9c1      	bls.n	800a7d2 <__hexnan+0x7a>
 800a84e:	2300      	movs	r3, #0
 800a850:	f844 3c04 	str.w	r3, [r4, #-4]
 800a854:	2501      	movs	r5, #1
 800a856:	3c04      	subs	r4, #4
 800a858:	6822      	ldr	r2, [r4, #0]
 800a85a:	f000 000f 	and.w	r0, r0, #15
 800a85e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a862:	6020      	str	r0, [r4, #0]
 800a864:	e7b5      	b.n	800a7d2 <__hexnan+0x7a>
 800a866:	2508      	movs	r5, #8
 800a868:	e7b3      	b.n	800a7d2 <__hexnan+0x7a>
 800a86a:	9b01      	ldr	r3, [sp, #4]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d0dd      	beq.n	800a82c <__hexnan+0xd4>
 800a870:	f1c3 0320 	rsb	r3, r3, #32
 800a874:	f04f 32ff 	mov.w	r2, #4294967295
 800a878:	40da      	lsrs	r2, r3
 800a87a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a87e:	4013      	ands	r3, r2
 800a880:	f846 3c04 	str.w	r3, [r6, #-4]
 800a884:	e7d2      	b.n	800a82c <__hexnan+0xd4>
 800a886:	3f04      	subs	r7, #4
 800a888:	e7d0      	b.n	800a82c <__hexnan+0xd4>
 800a88a:	2004      	movs	r0, #4
 800a88c:	e7d5      	b.n	800a83a <__hexnan+0xe2>

0800a88e <__ascii_mbtowc>:
 800a88e:	b082      	sub	sp, #8
 800a890:	b901      	cbnz	r1, 800a894 <__ascii_mbtowc+0x6>
 800a892:	a901      	add	r1, sp, #4
 800a894:	b142      	cbz	r2, 800a8a8 <__ascii_mbtowc+0x1a>
 800a896:	b14b      	cbz	r3, 800a8ac <__ascii_mbtowc+0x1e>
 800a898:	7813      	ldrb	r3, [r2, #0]
 800a89a:	600b      	str	r3, [r1, #0]
 800a89c:	7812      	ldrb	r2, [r2, #0]
 800a89e:	1e10      	subs	r0, r2, #0
 800a8a0:	bf18      	it	ne
 800a8a2:	2001      	movne	r0, #1
 800a8a4:	b002      	add	sp, #8
 800a8a6:	4770      	bx	lr
 800a8a8:	4610      	mov	r0, r2
 800a8aa:	e7fb      	b.n	800a8a4 <__ascii_mbtowc+0x16>
 800a8ac:	f06f 0001 	mvn.w	r0, #1
 800a8b0:	e7f8      	b.n	800a8a4 <__ascii_mbtowc+0x16>

0800a8b2 <_realloc_r>:
 800a8b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b6:	4607      	mov	r7, r0
 800a8b8:	4614      	mov	r4, r2
 800a8ba:	460d      	mov	r5, r1
 800a8bc:	b921      	cbnz	r1, 800a8c8 <_realloc_r+0x16>
 800a8be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c2:	4611      	mov	r1, r2
 800a8c4:	f7fd be68 	b.w	8008598 <_malloc_r>
 800a8c8:	b92a      	cbnz	r2, 800a8d6 <_realloc_r+0x24>
 800a8ca:	f7fd fdf1 	bl	80084b0 <_free_r>
 800a8ce:	4625      	mov	r5, r4
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8d6:	f000 f840 	bl	800a95a <_malloc_usable_size_r>
 800a8da:	4284      	cmp	r4, r0
 800a8dc:	4606      	mov	r6, r0
 800a8de:	d802      	bhi.n	800a8e6 <_realloc_r+0x34>
 800a8e0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a8e4:	d8f4      	bhi.n	800a8d0 <_realloc_r+0x1e>
 800a8e6:	4621      	mov	r1, r4
 800a8e8:	4638      	mov	r0, r7
 800a8ea:	f7fd fe55 	bl	8008598 <_malloc_r>
 800a8ee:	4680      	mov	r8, r0
 800a8f0:	b908      	cbnz	r0, 800a8f6 <_realloc_r+0x44>
 800a8f2:	4645      	mov	r5, r8
 800a8f4:	e7ec      	b.n	800a8d0 <_realloc_r+0x1e>
 800a8f6:	42b4      	cmp	r4, r6
 800a8f8:	4622      	mov	r2, r4
 800a8fa:	4629      	mov	r1, r5
 800a8fc:	bf28      	it	cs
 800a8fe:	4632      	movcs	r2, r6
 800a900:	f7ff fc44 	bl	800a18c <memcpy>
 800a904:	4629      	mov	r1, r5
 800a906:	4638      	mov	r0, r7
 800a908:	f7fd fdd2 	bl	80084b0 <_free_r>
 800a90c:	e7f1      	b.n	800a8f2 <_realloc_r+0x40>

0800a90e <__ascii_wctomb>:
 800a90e:	4603      	mov	r3, r0
 800a910:	4608      	mov	r0, r1
 800a912:	b141      	cbz	r1, 800a926 <__ascii_wctomb+0x18>
 800a914:	2aff      	cmp	r2, #255	@ 0xff
 800a916:	d904      	bls.n	800a922 <__ascii_wctomb+0x14>
 800a918:	228a      	movs	r2, #138	@ 0x8a
 800a91a:	601a      	str	r2, [r3, #0]
 800a91c:	f04f 30ff 	mov.w	r0, #4294967295
 800a920:	4770      	bx	lr
 800a922:	700a      	strb	r2, [r1, #0]
 800a924:	2001      	movs	r0, #1
 800a926:	4770      	bx	lr

0800a928 <fiprintf>:
 800a928:	b40e      	push	{r1, r2, r3}
 800a92a:	b503      	push	{r0, r1, lr}
 800a92c:	4601      	mov	r1, r0
 800a92e:	ab03      	add	r3, sp, #12
 800a930:	4805      	ldr	r0, [pc, #20]	@ (800a948 <fiprintf+0x20>)
 800a932:	f853 2b04 	ldr.w	r2, [r3], #4
 800a936:	6800      	ldr	r0, [r0, #0]
 800a938:	9301      	str	r3, [sp, #4]
 800a93a:	f000 f83f 	bl	800a9bc <_vfiprintf_r>
 800a93e:	b002      	add	sp, #8
 800a940:	f85d eb04 	ldr.w	lr, [sp], #4
 800a944:	b003      	add	sp, #12
 800a946:	4770      	bx	lr
 800a948:	20000024 	.word	0x20000024

0800a94c <abort>:
 800a94c:	b508      	push	{r3, lr}
 800a94e:	2006      	movs	r0, #6
 800a950:	f000 fa08 	bl	800ad64 <raise>
 800a954:	2001      	movs	r0, #1
 800a956:	f7f7 fd4f 	bl	80023f8 <_exit>

0800a95a <_malloc_usable_size_r>:
 800a95a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a95e:	1f18      	subs	r0, r3, #4
 800a960:	2b00      	cmp	r3, #0
 800a962:	bfbc      	itt	lt
 800a964:	580b      	ldrlt	r3, [r1, r0]
 800a966:	18c0      	addlt	r0, r0, r3
 800a968:	4770      	bx	lr

0800a96a <__sfputc_r>:
 800a96a:	6893      	ldr	r3, [r2, #8]
 800a96c:	3b01      	subs	r3, #1
 800a96e:	2b00      	cmp	r3, #0
 800a970:	b410      	push	{r4}
 800a972:	6093      	str	r3, [r2, #8]
 800a974:	da08      	bge.n	800a988 <__sfputc_r+0x1e>
 800a976:	6994      	ldr	r4, [r2, #24]
 800a978:	42a3      	cmp	r3, r4
 800a97a:	db01      	blt.n	800a980 <__sfputc_r+0x16>
 800a97c:	290a      	cmp	r1, #10
 800a97e:	d103      	bne.n	800a988 <__sfputc_r+0x1e>
 800a980:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a984:	f000 b932 	b.w	800abec <__swbuf_r>
 800a988:	6813      	ldr	r3, [r2, #0]
 800a98a:	1c58      	adds	r0, r3, #1
 800a98c:	6010      	str	r0, [r2, #0]
 800a98e:	7019      	strb	r1, [r3, #0]
 800a990:	4608      	mov	r0, r1
 800a992:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <__sfputs_r>:
 800a998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a99a:	4606      	mov	r6, r0
 800a99c:	460f      	mov	r7, r1
 800a99e:	4614      	mov	r4, r2
 800a9a0:	18d5      	adds	r5, r2, r3
 800a9a2:	42ac      	cmp	r4, r5
 800a9a4:	d101      	bne.n	800a9aa <__sfputs_r+0x12>
 800a9a6:	2000      	movs	r0, #0
 800a9a8:	e007      	b.n	800a9ba <__sfputs_r+0x22>
 800a9aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9ae:	463a      	mov	r2, r7
 800a9b0:	4630      	mov	r0, r6
 800a9b2:	f7ff ffda 	bl	800a96a <__sfputc_r>
 800a9b6:	1c43      	adds	r3, r0, #1
 800a9b8:	d1f3      	bne.n	800a9a2 <__sfputs_r+0xa>
 800a9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a9bc <_vfiprintf_r>:
 800a9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c0:	460d      	mov	r5, r1
 800a9c2:	b09d      	sub	sp, #116	@ 0x74
 800a9c4:	4614      	mov	r4, r2
 800a9c6:	4698      	mov	r8, r3
 800a9c8:	4606      	mov	r6, r0
 800a9ca:	b118      	cbz	r0, 800a9d4 <_vfiprintf_r+0x18>
 800a9cc:	6a03      	ldr	r3, [r0, #32]
 800a9ce:	b90b      	cbnz	r3, 800a9d4 <_vfiprintf_r+0x18>
 800a9d0:	f7fc fdf2 	bl	80075b8 <__sinit>
 800a9d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9d6:	07d9      	lsls	r1, r3, #31
 800a9d8:	d405      	bmi.n	800a9e6 <_vfiprintf_r+0x2a>
 800a9da:	89ab      	ldrh	r3, [r5, #12]
 800a9dc:	059a      	lsls	r2, r3, #22
 800a9de:	d402      	bmi.n	800a9e6 <_vfiprintf_r+0x2a>
 800a9e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9e2:	f7fc ff02 	bl	80077ea <__retarget_lock_acquire_recursive>
 800a9e6:	89ab      	ldrh	r3, [r5, #12]
 800a9e8:	071b      	lsls	r3, r3, #28
 800a9ea:	d501      	bpl.n	800a9f0 <_vfiprintf_r+0x34>
 800a9ec:	692b      	ldr	r3, [r5, #16]
 800a9ee:	b99b      	cbnz	r3, 800aa18 <_vfiprintf_r+0x5c>
 800a9f0:	4629      	mov	r1, r5
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	f000 f938 	bl	800ac68 <__swsetup_r>
 800a9f8:	b170      	cbz	r0, 800aa18 <_vfiprintf_r+0x5c>
 800a9fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9fc:	07dc      	lsls	r4, r3, #31
 800a9fe:	d504      	bpl.n	800aa0a <_vfiprintf_r+0x4e>
 800aa00:	f04f 30ff 	mov.w	r0, #4294967295
 800aa04:	b01d      	add	sp, #116	@ 0x74
 800aa06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa0a:	89ab      	ldrh	r3, [r5, #12]
 800aa0c:	0598      	lsls	r0, r3, #22
 800aa0e:	d4f7      	bmi.n	800aa00 <_vfiprintf_r+0x44>
 800aa10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa12:	f7fc feeb 	bl	80077ec <__retarget_lock_release_recursive>
 800aa16:	e7f3      	b.n	800aa00 <_vfiprintf_r+0x44>
 800aa18:	2300      	movs	r3, #0
 800aa1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa1c:	2320      	movs	r3, #32
 800aa1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa22:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa26:	2330      	movs	r3, #48	@ 0x30
 800aa28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800abd8 <_vfiprintf_r+0x21c>
 800aa2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa30:	f04f 0901 	mov.w	r9, #1
 800aa34:	4623      	mov	r3, r4
 800aa36:	469a      	mov	sl, r3
 800aa38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa3c:	b10a      	cbz	r2, 800aa42 <_vfiprintf_r+0x86>
 800aa3e:	2a25      	cmp	r2, #37	@ 0x25
 800aa40:	d1f9      	bne.n	800aa36 <_vfiprintf_r+0x7a>
 800aa42:	ebba 0b04 	subs.w	fp, sl, r4
 800aa46:	d00b      	beq.n	800aa60 <_vfiprintf_r+0xa4>
 800aa48:	465b      	mov	r3, fp
 800aa4a:	4622      	mov	r2, r4
 800aa4c:	4629      	mov	r1, r5
 800aa4e:	4630      	mov	r0, r6
 800aa50:	f7ff ffa2 	bl	800a998 <__sfputs_r>
 800aa54:	3001      	adds	r0, #1
 800aa56:	f000 80a7 	beq.w	800aba8 <_vfiprintf_r+0x1ec>
 800aa5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa5c:	445a      	add	r2, fp
 800aa5e:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa60:	f89a 3000 	ldrb.w	r3, [sl]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f000 809f 	beq.w	800aba8 <_vfiprintf_r+0x1ec>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa74:	f10a 0a01 	add.w	sl, sl, #1
 800aa78:	9304      	str	r3, [sp, #16]
 800aa7a:	9307      	str	r3, [sp, #28]
 800aa7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa80:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa82:	4654      	mov	r4, sl
 800aa84:	2205      	movs	r2, #5
 800aa86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa8a:	4853      	ldr	r0, [pc, #332]	@ (800abd8 <_vfiprintf_r+0x21c>)
 800aa8c:	f7f5 fba8 	bl	80001e0 <memchr>
 800aa90:	9a04      	ldr	r2, [sp, #16]
 800aa92:	b9d8      	cbnz	r0, 800aacc <_vfiprintf_r+0x110>
 800aa94:	06d1      	lsls	r1, r2, #27
 800aa96:	bf44      	itt	mi
 800aa98:	2320      	movmi	r3, #32
 800aa9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa9e:	0713      	lsls	r3, r2, #28
 800aaa0:	bf44      	itt	mi
 800aaa2:	232b      	movmi	r3, #43	@ 0x2b
 800aaa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aaa8:	f89a 3000 	ldrb.w	r3, [sl]
 800aaac:	2b2a      	cmp	r3, #42	@ 0x2a
 800aaae:	d015      	beq.n	800aadc <_vfiprintf_r+0x120>
 800aab0:	9a07      	ldr	r2, [sp, #28]
 800aab2:	4654      	mov	r4, sl
 800aab4:	2000      	movs	r0, #0
 800aab6:	f04f 0c0a 	mov.w	ip, #10
 800aaba:	4621      	mov	r1, r4
 800aabc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aac0:	3b30      	subs	r3, #48	@ 0x30
 800aac2:	2b09      	cmp	r3, #9
 800aac4:	d94b      	bls.n	800ab5e <_vfiprintf_r+0x1a2>
 800aac6:	b1b0      	cbz	r0, 800aaf6 <_vfiprintf_r+0x13a>
 800aac8:	9207      	str	r2, [sp, #28]
 800aaca:	e014      	b.n	800aaf6 <_vfiprintf_r+0x13a>
 800aacc:	eba0 0308 	sub.w	r3, r0, r8
 800aad0:	fa09 f303 	lsl.w	r3, r9, r3
 800aad4:	4313      	orrs	r3, r2
 800aad6:	9304      	str	r3, [sp, #16]
 800aad8:	46a2      	mov	sl, r4
 800aada:	e7d2      	b.n	800aa82 <_vfiprintf_r+0xc6>
 800aadc:	9b03      	ldr	r3, [sp, #12]
 800aade:	1d19      	adds	r1, r3, #4
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	9103      	str	r1, [sp, #12]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	bfbb      	ittet	lt
 800aae8:	425b      	neglt	r3, r3
 800aaea:	f042 0202 	orrlt.w	r2, r2, #2
 800aaee:	9307      	strge	r3, [sp, #28]
 800aaf0:	9307      	strlt	r3, [sp, #28]
 800aaf2:	bfb8      	it	lt
 800aaf4:	9204      	strlt	r2, [sp, #16]
 800aaf6:	7823      	ldrb	r3, [r4, #0]
 800aaf8:	2b2e      	cmp	r3, #46	@ 0x2e
 800aafa:	d10a      	bne.n	800ab12 <_vfiprintf_r+0x156>
 800aafc:	7863      	ldrb	r3, [r4, #1]
 800aafe:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab00:	d132      	bne.n	800ab68 <_vfiprintf_r+0x1ac>
 800ab02:	9b03      	ldr	r3, [sp, #12]
 800ab04:	1d1a      	adds	r2, r3, #4
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	9203      	str	r2, [sp, #12]
 800ab0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab0e:	3402      	adds	r4, #2
 800ab10:	9305      	str	r3, [sp, #20]
 800ab12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800abe8 <_vfiprintf_r+0x22c>
 800ab16:	7821      	ldrb	r1, [r4, #0]
 800ab18:	2203      	movs	r2, #3
 800ab1a:	4650      	mov	r0, sl
 800ab1c:	f7f5 fb60 	bl	80001e0 <memchr>
 800ab20:	b138      	cbz	r0, 800ab32 <_vfiprintf_r+0x176>
 800ab22:	9b04      	ldr	r3, [sp, #16]
 800ab24:	eba0 000a 	sub.w	r0, r0, sl
 800ab28:	2240      	movs	r2, #64	@ 0x40
 800ab2a:	4082      	lsls	r2, r0
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	3401      	adds	r4, #1
 800ab30:	9304      	str	r3, [sp, #16]
 800ab32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab36:	4829      	ldr	r0, [pc, #164]	@ (800abdc <_vfiprintf_r+0x220>)
 800ab38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab3c:	2206      	movs	r2, #6
 800ab3e:	f7f5 fb4f 	bl	80001e0 <memchr>
 800ab42:	2800      	cmp	r0, #0
 800ab44:	d03f      	beq.n	800abc6 <_vfiprintf_r+0x20a>
 800ab46:	4b26      	ldr	r3, [pc, #152]	@ (800abe0 <_vfiprintf_r+0x224>)
 800ab48:	bb1b      	cbnz	r3, 800ab92 <_vfiprintf_r+0x1d6>
 800ab4a:	9b03      	ldr	r3, [sp, #12]
 800ab4c:	3307      	adds	r3, #7
 800ab4e:	f023 0307 	bic.w	r3, r3, #7
 800ab52:	3308      	adds	r3, #8
 800ab54:	9303      	str	r3, [sp, #12]
 800ab56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab58:	443b      	add	r3, r7
 800ab5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab5c:	e76a      	b.n	800aa34 <_vfiprintf_r+0x78>
 800ab5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab62:	460c      	mov	r4, r1
 800ab64:	2001      	movs	r0, #1
 800ab66:	e7a8      	b.n	800aaba <_vfiprintf_r+0xfe>
 800ab68:	2300      	movs	r3, #0
 800ab6a:	3401      	adds	r4, #1
 800ab6c:	9305      	str	r3, [sp, #20]
 800ab6e:	4619      	mov	r1, r3
 800ab70:	f04f 0c0a 	mov.w	ip, #10
 800ab74:	4620      	mov	r0, r4
 800ab76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab7a:	3a30      	subs	r2, #48	@ 0x30
 800ab7c:	2a09      	cmp	r2, #9
 800ab7e:	d903      	bls.n	800ab88 <_vfiprintf_r+0x1cc>
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d0c6      	beq.n	800ab12 <_vfiprintf_r+0x156>
 800ab84:	9105      	str	r1, [sp, #20]
 800ab86:	e7c4      	b.n	800ab12 <_vfiprintf_r+0x156>
 800ab88:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab8c:	4604      	mov	r4, r0
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e7f0      	b.n	800ab74 <_vfiprintf_r+0x1b8>
 800ab92:	ab03      	add	r3, sp, #12
 800ab94:	9300      	str	r3, [sp, #0]
 800ab96:	462a      	mov	r2, r5
 800ab98:	4b12      	ldr	r3, [pc, #72]	@ (800abe4 <_vfiprintf_r+0x228>)
 800ab9a:	a904      	add	r1, sp, #16
 800ab9c:	4630      	mov	r0, r6
 800ab9e:	f7fb febb 	bl	8006918 <_printf_float>
 800aba2:	4607      	mov	r7, r0
 800aba4:	1c78      	adds	r0, r7, #1
 800aba6:	d1d6      	bne.n	800ab56 <_vfiprintf_r+0x19a>
 800aba8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abaa:	07d9      	lsls	r1, r3, #31
 800abac:	d405      	bmi.n	800abba <_vfiprintf_r+0x1fe>
 800abae:	89ab      	ldrh	r3, [r5, #12]
 800abb0:	059a      	lsls	r2, r3, #22
 800abb2:	d402      	bmi.n	800abba <_vfiprintf_r+0x1fe>
 800abb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abb6:	f7fc fe19 	bl	80077ec <__retarget_lock_release_recursive>
 800abba:	89ab      	ldrh	r3, [r5, #12]
 800abbc:	065b      	lsls	r3, r3, #25
 800abbe:	f53f af1f 	bmi.w	800aa00 <_vfiprintf_r+0x44>
 800abc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abc4:	e71e      	b.n	800aa04 <_vfiprintf_r+0x48>
 800abc6:	ab03      	add	r3, sp, #12
 800abc8:	9300      	str	r3, [sp, #0]
 800abca:	462a      	mov	r2, r5
 800abcc:	4b05      	ldr	r3, [pc, #20]	@ (800abe4 <_vfiprintf_r+0x228>)
 800abce:	a904      	add	r1, sp, #16
 800abd0:	4630      	mov	r0, r6
 800abd2:	f7fc f939 	bl	8006e48 <_printf_i>
 800abd6:	e7e4      	b.n	800aba2 <_vfiprintf_r+0x1e6>
 800abd8:	0800b011 	.word	0x0800b011
 800abdc:	0800b01b 	.word	0x0800b01b
 800abe0:	08006919 	.word	0x08006919
 800abe4:	0800a999 	.word	0x0800a999
 800abe8:	0800b017 	.word	0x0800b017

0800abec <__swbuf_r>:
 800abec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abee:	460e      	mov	r6, r1
 800abf0:	4614      	mov	r4, r2
 800abf2:	4605      	mov	r5, r0
 800abf4:	b118      	cbz	r0, 800abfe <__swbuf_r+0x12>
 800abf6:	6a03      	ldr	r3, [r0, #32]
 800abf8:	b90b      	cbnz	r3, 800abfe <__swbuf_r+0x12>
 800abfa:	f7fc fcdd 	bl	80075b8 <__sinit>
 800abfe:	69a3      	ldr	r3, [r4, #24]
 800ac00:	60a3      	str	r3, [r4, #8]
 800ac02:	89a3      	ldrh	r3, [r4, #12]
 800ac04:	071a      	lsls	r2, r3, #28
 800ac06:	d501      	bpl.n	800ac0c <__swbuf_r+0x20>
 800ac08:	6923      	ldr	r3, [r4, #16]
 800ac0a:	b943      	cbnz	r3, 800ac1e <__swbuf_r+0x32>
 800ac0c:	4621      	mov	r1, r4
 800ac0e:	4628      	mov	r0, r5
 800ac10:	f000 f82a 	bl	800ac68 <__swsetup_r>
 800ac14:	b118      	cbz	r0, 800ac1e <__swbuf_r+0x32>
 800ac16:	f04f 37ff 	mov.w	r7, #4294967295
 800ac1a:	4638      	mov	r0, r7
 800ac1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac1e:	6823      	ldr	r3, [r4, #0]
 800ac20:	6922      	ldr	r2, [r4, #16]
 800ac22:	1a98      	subs	r0, r3, r2
 800ac24:	6963      	ldr	r3, [r4, #20]
 800ac26:	b2f6      	uxtb	r6, r6
 800ac28:	4283      	cmp	r3, r0
 800ac2a:	4637      	mov	r7, r6
 800ac2c:	dc05      	bgt.n	800ac3a <__swbuf_r+0x4e>
 800ac2e:	4621      	mov	r1, r4
 800ac30:	4628      	mov	r0, r5
 800ac32:	f7ff fa47 	bl	800a0c4 <_fflush_r>
 800ac36:	2800      	cmp	r0, #0
 800ac38:	d1ed      	bne.n	800ac16 <__swbuf_r+0x2a>
 800ac3a:	68a3      	ldr	r3, [r4, #8]
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	60a3      	str	r3, [r4, #8]
 800ac40:	6823      	ldr	r3, [r4, #0]
 800ac42:	1c5a      	adds	r2, r3, #1
 800ac44:	6022      	str	r2, [r4, #0]
 800ac46:	701e      	strb	r6, [r3, #0]
 800ac48:	6962      	ldr	r2, [r4, #20]
 800ac4a:	1c43      	adds	r3, r0, #1
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d004      	beq.n	800ac5a <__swbuf_r+0x6e>
 800ac50:	89a3      	ldrh	r3, [r4, #12]
 800ac52:	07db      	lsls	r3, r3, #31
 800ac54:	d5e1      	bpl.n	800ac1a <__swbuf_r+0x2e>
 800ac56:	2e0a      	cmp	r6, #10
 800ac58:	d1df      	bne.n	800ac1a <__swbuf_r+0x2e>
 800ac5a:	4621      	mov	r1, r4
 800ac5c:	4628      	mov	r0, r5
 800ac5e:	f7ff fa31 	bl	800a0c4 <_fflush_r>
 800ac62:	2800      	cmp	r0, #0
 800ac64:	d0d9      	beq.n	800ac1a <__swbuf_r+0x2e>
 800ac66:	e7d6      	b.n	800ac16 <__swbuf_r+0x2a>

0800ac68 <__swsetup_r>:
 800ac68:	b538      	push	{r3, r4, r5, lr}
 800ac6a:	4b29      	ldr	r3, [pc, #164]	@ (800ad10 <__swsetup_r+0xa8>)
 800ac6c:	4605      	mov	r5, r0
 800ac6e:	6818      	ldr	r0, [r3, #0]
 800ac70:	460c      	mov	r4, r1
 800ac72:	b118      	cbz	r0, 800ac7c <__swsetup_r+0x14>
 800ac74:	6a03      	ldr	r3, [r0, #32]
 800ac76:	b90b      	cbnz	r3, 800ac7c <__swsetup_r+0x14>
 800ac78:	f7fc fc9e 	bl	80075b8 <__sinit>
 800ac7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac80:	0719      	lsls	r1, r3, #28
 800ac82:	d422      	bmi.n	800acca <__swsetup_r+0x62>
 800ac84:	06da      	lsls	r2, r3, #27
 800ac86:	d407      	bmi.n	800ac98 <__swsetup_r+0x30>
 800ac88:	2209      	movs	r2, #9
 800ac8a:	602a      	str	r2, [r5, #0]
 800ac8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac90:	81a3      	strh	r3, [r4, #12]
 800ac92:	f04f 30ff 	mov.w	r0, #4294967295
 800ac96:	e033      	b.n	800ad00 <__swsetup_r+0x98>
 800ac98:	0758      	lsls	r0, r3, #29
 800ac9a:	d512      	bpl.n	800acc2 <__swsetup_r+0x5a>
 800ac9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac9e:	b141      	cbz	r1, 800acb2 <__swsetup_r+0x4a>
 800aca0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aca4:	4299      	cmp	r1, r3
 800aca6:	d002      	beq.n	800acae <__swsetup_r+0x46>
 800aca8:	4628      	mov	r0, r5
 800acaa:	f7fd fc01 	bl	80084b0 <_free_r>
 800acae:	2300      	movs	r3, #0
 800acb0:	6363      	str	r3, [r4, #52]	@ 0x34
 800acb2:	89a3      	ldrh	r3, [r4, #12]
 800acb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800acb8:	81a3      	strh	r3, [r4, #12]
 800acba:	2300      	movs	r3, #0
 800acbc:	6063      	str	r3, [r4, #4]
 800acbe:	6923      	ldr	r3, [r4, #16]
 800acc0:	6023      	str	r3, [r4, #0]
 800acc2:	89a3      	ldrh	r3, [r4, #12]
 800acc4:	f043 0308 	orr.w	r3, r3, #8
 800acc8:	81a3      	strh	r3, [r4, #12]
 800acca:	6923      	ldr	r3, [r4, #16]
 800accc:	b94b      	cbnz	r3, 800ace2 <__swsetup_r+0x7a>
 800acce:	89a3      	ldrh	r3, [r4, #12]
 800acd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800acd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acd8:	d003      	beq.n	800ace2 <__swsetup_r+0x7a>
 800acda:	4621      	mov	r1, r4
 800acdc:	4628      	mov	r0, r5
 800acde:	f000 f883 	bl	800ade8 <__smakebuf_r>
 800ace2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ace6:	f013 0201 	ands.w	r2, r3, #1
 800acea:	d00a      	beq.n	800ad02 <__swsetup_r+0x9a>
 800acec:	2200      	movs	r2, #0
 800acee:	60a2      	str	r2, [r4, #8]
 800acf0:	6962      	ldr	r2, [r4, #20]
 800acf2:	4252      	negs	r2, r2
 800acf4:	61a2      	str	r2, [r4, #24]
 800acf6:	6922      	ldr	r2, [r4, #16]
 800acf8:	b942      	cbnz	r2, 800ad0c <__swsetup_r+0xa4>
 800acfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800acfe:	d1c5      	bne.n	800ac8c <__swsetup_r+0x24>
 800ad00:	bd38      	pop	{r3, r4, r5, pc}
 800ad02:	0799      	lsls	r1, r3, #30
 800ad04:	bf58      	it	pl
 800ad06:	6962      	ldrpl	r2, [r4, #20]
 800ad08:	60a2      	str	r2, [r4, #8]
 800ad0a:	e7f4      	b.n	800acf6 <__swsetup_r+0x8e>
 800ad0c:	2000      	movs	r0, #0
 800ad0e:	e7f7      	b.n	800ad00 <__swsetup_r+0x98>
 800ad10:	20000024 	.word	0x20000024

0800ad14 <_raise_r>:
 800ad14:	291f      	cmp	r1, #31
 800ad16:	b538      	push	{r3, r4, r5, lr}
 800ad18:	4605      	mov	r5, r0
 800ad1a:	460c      	mov	r4, r1
 800ad1c:	d904      	bls.n	800ad28 <_raise_r+0x14>
 800ad1e:	2316      	movs	r3, #22
 800ad20:	6003      	str	r3, [r0, #0]
 800ad22:	f04f 30ff 	mov.w	r0, #4294967295
 800ad26:	bd38      	pop	{r3, r4, r5, pc}
 800ad28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ad2a:	b112      	cbz	r2, 800ad32 <_raise_r+0x1e>
 800ad2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad30:	b94b      	cbnz	r3, 800ad46 <_raise_r+0x32>
 800ad32:	4628      	mov	r0, r5
 800ad34:	f000 f830 	bl	800ad98 <_getpid_r>
 800ad38:	4622      	mov	r2, r4
 800ad3a:	4601      	mov	r1, r0
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad42:	f000 b817 	b.w	800ad74 <_kill_r>
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d00a      	beq.n	800ad60 <_raise_r+0x4c>
 800ad4a:	1c59      	adds	r1, r3, #1
 800ad4c:	d103      	bne.n	800ad56 <_raise_r+0x42>
 800ad4e:	2316      	movs	r3, #22
 800ad50:	6003      	str	r3, [r0, #0]
 800ad52:	2001      	movs	r0, #1
 800ad54:	e7e7      	b.n	800ad26 <_raise_r+0x12>
 800ad56:	2100      	movs	r1, #0
 800ad58:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	4798      	blx	r3
 800ad60:	2000      	movs	r0, #0
 800ad62:	e7e0      	b.n	800ad26 <_raise_r+0x12>

0800ad64 <raise>:
 800ad64:	4b02      	ldr	r3, [pc, #8]	@ (800ad70 <raise+0xc>)
 800ad66:	4601      	mov	r1, r0
 800ad68:	6818      	ldr	r0, [r3, #0]
 800ad6a:	f7ff bfd3 	b.w	800ad14 <_raise_r>
 800ad6e:	bf00      	nop
 800ad70:	20000024 	.word	0x20000024

0800ad74 <_kill_r>:
 800ad74:	b538      	push	{r3, r4, r5, lr}
 800ad76:	4d07      	ldr	r5, [pc, #28]	@ (800ad94 <_kill_r+0x20>)
 800ad78:	2300      	movs	r3, #0
 800ad7a:	4604      	mov	r4, r0
 800ad7c:	4608      	mov	r0, r1
 800ad7e:	4611      	mov	r1, r2
 800ad80:	602b      	str	r3, [r5, #0]
 800ad82:	f7f7 fb29 	bl	80023d8 <_kill>
 800ad86:	1c43      	adds	r3, r0, #1
 800ad88:	d102      	bne.n	800ad90 <_kill_r+0x1c>
 800ad8a:	682b      	ldr	r3, [r5, #0]
 800ad8c:	b103      	cbz	r3, 800ad90 <_kill_r+0x1c>
 800ad8e:	6023      	str	r3, [r4, #0]
 800ad90:	bd38      	pop	{r3, r4, r5, pc}
 800ad92:	bf00      	nop
 800ad94:	20000694 	.word	0x20000694

0800ad98 <_getpid_r>:
 800ad98:	f7f7 bb16 	b.w	80023c8 <_getpid>

0800ad9c <__swhatbuf_r>:
 800ad9c:	b570      	push	{r4, r5, r6, lr}
 800ad9e:	460c      	mov	r4, r1
 800ada0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ada4:	2900      	cmp	r1, #0
 800ada6:	b096      	sub	sp, #88	@ 0x58
 800ada8:	4615      	mov	r5, r2
 800adaa:	461e      	mov	r6, r3
 800adac:	da0d      	bge.n	800adca <__swhatbuf_r+0x2e>
 800adae:	89a3      	ldrh	r3, [r4, #12]
 800adb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800adb4:	f04f 0100 	mov.w	r1, #0
 800adb8:	bf14      	ite	ne
 800adba:	2340      	movne	r3, #64	@ 0x40
 800adbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800adc0:	2000      	movs	r0, #0
 800adc2:	6031      	str	r1, [r6, #0]
 800adc4:	602b      	str	r3, [r5, #0]
 800adc6:	b016      	add	sp, #88	@ 0x58
 800adc8:	bd70      	pop	{r4, r5, r6, pc}
 800adca:	466a      	mov	r2, sp
 800adcc:	f000 f848 	bl	800ae60 <_fstat_r>
 800add0:	2800      	cmp	r0, #0
 800add2:	dbec      	blt.n	800adae <__swhatbuf_r+0x12>
 800add4:	9901      	ldr	r1, [sp, #4]
 800add6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800adda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800adde:	4259      	negs	r1, r3
 800ade0:	4159      	adcs	r1, r3
 800ade2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ade6:	e7eb      	b.n	800adc0 <__swhatbuf_r+0x24>

0800ade8 <__smakebuf_r>:
 800ade8:	898b      	ldrh	r3, [r1, #12]
 800adea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adec:	079d      	lsls	r5, r3, #30
 800adee:	4606      	mov	r6, r0
 800adf0:	460c      	mov	r4, r1
 800adf2:	d507      	bpl.n	800ae04 <__smakebuf_r+0x1c>
 800adf4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800adf8:	6023      	str	r3, [r4, #0]
 800adfa:	6123      	str	r3, [r4, #16]
 800adfc:	2301      	movs	r3, #1
 800adfe:	6163      	str	r3, [r4, #20]
 800ae00:	b003      	add	sp, #12
 800ae02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae04:	ab01      	add	r3, sp, #4
 800ae06:	466a      	mov	r2, sp
 800ae08:	f7ff ffc8 	bl	800ad9c <__swhatbuf_r>
 800ae0c:	9f00      	ldr	r7, [sp, #0]
 800ae0e:	4605      	mov	r5, r0
 800ae10:	4639      	mov	r1, r7
 800ae12:	4630      	mov	r0, r6
 800ae14:	f7fd fbc0 	bl	8008598 <_malloc_r>
 800ae18:	b948      	cbnz	r0, 800ae2e <__smakebuf_r+0x46>
 800ae1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae1e:	059a      	lsls	r2, r3, #22
 800ae20:	d4ee      	bmi.n	800ae00 <__smakebuf_r+0x18>
 800ae22:	f023 0303 	bic.w	r3, r3, #3
 800ae26:	f043 0302 	orr.w	r3, r3, #2
 800ae2a:	81a3      	strh	r3, [r4, #12]
 800ae2c:	e7e2      	b.n	800adf4 <__smakebuf_r+0xc>
 800ae2e:	89a3      	ldrh	r3, [r4, #12]
 800ae30:	6020      	str	r0, [r4, #0]
 800ae32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae36:	81a3      	strh	r3, [r4, #12]
 800ae38:	9b01      	ldr	r3, [sp, #4]
 800ae3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ae3e:	b15b      	cbz	r3, 800ae58 <__smakebuf_r+0x70>
 800ae40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae44:	4630      	mov	r0, r6
 800ae46:	f000 f81d 	bl	800ae84 <_isatty_r>
 800ae4a:	b128      	cbz	r0, 800ae58 <__smakebuf_r+0x70>
 800ae4c:	89a3      	ldrh	r3, [r4, #12]
 800ae4e:	f023 0303 	bic.w	r3, r3, #3
 800ae52:	f043 0301 	orr.w	r3, r3, #1
 800ae56:	81a3      	strh	r3, [r4, #12]
 800ae58:	89a3      	ldrh	r3, [r4, #12]
 800ae5a:	431d      	orrs	r5, r3
 800ae5c:	81a5      	strh	r5, [r4, #12]
 800ae5e:	e7cf      	b.n	800ae00 <__smakebuf_r+0x18>

0800ae60 <_fstat_r>:
 800ae60:	b538      	push	{r3, r4, r5, lr}
 800ae62:	4d07      	ldr	r5, [pc, #28]	@ (800ae80 <_fstat_r+0x20>)
 800ae64:	2300      	movs	r3, #0
 800ae66:	4604      	mov	r4, r0
 800ae68:	4608      	mov	r0, r1
 800ae6a:	4611      	mov	r1, r2
 800ae6c:	602b      	str	r3, [r5, #0]
 800ae6e:	f7f7 fb13 	bl	8002498 <_fstat>
 800ae72:	1c43      	adds	r3, r0, #1
 800ae74:	d102      	bne.n	800ae7c <_fstat_r+0x1c>
 800ae76:	682b      	ldr	r3, [r5, #0]
 800ae78:	b103      	cbz	r3, 800ae7c <_fstat_r+0x1c>
 800ae7a:	6023      	str	r3, [r4, #0]
 800ae7c:	bd38      	pop	{r3, r4, r5, pc}
 800ae7e:	bf00      	nop
 800ae80:	20000694 	.word	0x20000694

0800ae84 <_isatty_r>:
 800ae84:	b538      	push	{r3, r4, r5, lr}
 800ae86:	4d06      	ldr	r5, [pc, #24]	@ (800aea0 <_isatty_r+0x1c>)
 800ae88:	2300      	movs	r3, #0
 800ae8a:	4604      	mov	r4, r0
 800ae8c:	4608      	mov	r0, r1
 800ae8e:	602b      	str	r3, [r5, #0]
 800ae90:	f7f7 fb12 	bl	80024b8 <_isatty>
 800ae94:	1c43      	adds	r3, r0, #1
 800ae96:	d102      	bne.n	800ae9e <_isatty_r+0x1a>
 800ae98:	682b      	ldr	r3, [r5, #0]
 800ae9a:	b103      	cbz	r3, 800ae9e <_isatty_r+0x1a>
 800ae9c:	6023      	str	r3, [r4, #0]
 800ae9e:	bd38      	pop	{r3, r4, r5, pc}
 800aea0:	20000694 	.word	0x20000694

0800aea4 <_init>:
 800aea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aea6:	bf00      	nop
 800aea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeaa:	bc08      	pop	{r3}
 800aeac:	469e      	mov	lr, r3
 800aeae:	4770      	bx	lr

0800aeb0 <_fini>:
 800aeb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb2:	bf00      	nop
 800aeb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeb6:	bc08      	pop	{r3}
 800aeb8:	469e      	mov	lr, r3
 800aeba:	4770      	bx	lr
